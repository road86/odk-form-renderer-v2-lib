{"version":3,"file":"odkformrenderer.cjs.production.min.js","sources":["../src/constants.tsx","../src/utils/compiler.ts","../src/utils/helpers.ts","../src/store/ducks/formState.ts","../src/containers/fields/group/Group/index.tsx","../src/containers/fields/group/Repeat/Single Repeat/index.tsx","../src/containers/fields/group/Repeat/index.tsx","../src/containers/fields/base/Date/index.tsx","../src/containers/fields/base/Date Time/index.tsx","../src/containers/fields/base/Decimal/index.tsx","../src/containers/fields/base/Integer/index.tsx","../src/containers/fields/base/Note/index.tsx","../src/containers/fields/base/Photo/index.tsx","../src/containers/fields/base/Select All/Dropdown/index.tsx","../src/containers/fields/base/Select All/Radio/index.tsx","../src/containers/fields/base/Select All/index.tsx","../src/containers/fields/base/Select One/Dropdown/index.tsx","../src/containers/fields/base/Select One/Radio/index.tsx","../src/containers/fields/base/Select One/index.tsx","../src/containers/fields/base/Text/index.tsx","../src/components/typeEvalutors/Base/index.tsx","../src/components/typeEvalutors/Group/index.tsx","../src/App/index.tsx","../src/store/index.tsx","../src/index.tsx"],"sourcesContent":["// Field Types\nexport const GROUP_FIELD_TYPE = 'group';\nexport type GROUP_FIELD_TYPE = typeof GROUP_FIELD_TYPE;\nexport const REPEAT_FIELD_TYPE = 'repeat';\nexport type REPEAT_FIELD_TYPE = typeof REPEAT_FIELD_TYPE;\nexport const TEXT_FIELD_TYPE = 'text';\nexport type TEXT_FIELD_TYPE = typeof TEXT_FIELD_TYPE;\nexport const DATE_FIELD_TYPE = 'date';\nexport type DATE_FIELD_TYPE = typeof DATE_FIELD_TYPE;\nexport const DATE_TIME_FIELD_TYPE = 'dateTime';\nexport type DATE_TIME_FIELD_TYPE = typeof DATE_TIME_FIELD_TYPE;\nexport const INTEGER_FIELD_TYPE = 'integer';\nexport type INTEGER_FIELD_TYPE = typeof INTEGER_FIELD_TYPE;\nexport const DECIMAL_FIELD_TYPE = 'decimal';\nexport type DECIMAL_FIELD_TYPE = typeof DECIMAL_FIELD_TYPE;\nexport const PHOTO_FIELD_TYPE = 'photo';\nexport type PHOTO_FIELD_TYPE = typeof PHOTO_FIELD_TYPE;\nexport const NOTE_FIELD_TYPE = 'note';\nexport type NOTE_FIELD_TYPE = typeof NOTE_FIELD_TYPE;\nexport const SELECT_ONE_FIELD_TYPE = 'select one';\nexport type SELECT_ONE_FIELD_TYPE = typeof SELECT_ONE_FIELD_TYPE;\nexport const SELECT_ALL_FIELD_TYPE = 'select all that apply';\nexport type SELECT_ALL_FIELD_TYPE = typeof SELECT_ALL_FIELD_TYPE;\n\n// Required Properties\nexport const REQUIRED_FIELD_MSG = 'This field is required';\nexport type REQUIRED_FIELD_MSG = typeof REQUIRED_FIELD_MSG;\nexport const REQUIRED_SYMBOL = '*';\nexport type REQUIRED_SYMBOL = typeof REQUIRED_SYMBOL;\n\n// tslint:disable\nexport const geo = [\n  {\n    district_code: '1004',\n    district_name: 'BargunaH',\n    division_code: '10',\n    division_name: 'Barisal',\n    union_code: '10040913',\n    union_name: 'Amtali',\n    upazila_code: '100409',\n    upazila_name: 'Amtali',\n  },\n  {\n    district_code: '1005',\n    district_name: 'BargunaL',\n    division_code: '10',\n    division_name: 'Barisal',\n    union_code: '10040915',\n    union_name: 'Arpangashia',\n    upazila_code: '100409',\n    upazila_name: 'Amtali',\n  },\n  {\n    district_code: '2003',\n    district_name: 'Bandarban',\n    division_code: '20',\n    division_name: 'Chittagong',\n    union_code: '20030431',\n    union_name: 'Alikadam',\n    upazila_code: '200304',\n    upazila_name: 'Alikadam',\n  },\n  {\n    district_code: '2003',\n    district_name: 'Bandarban',\n    division_code: '20',\n    division_name: 'Chittagong',\n    union_code: '20030480',\n    union_name: 'Nayapara',\n    upazila_code: '200304',\n    upazila_name: 'Alikadam',\n  },\n];\n\n/* tslint:enable */\n","let actualExpression: string;\nlet currentHierarchicalName: string = '';\nlet formItemProperty: any = {};\nlet userInput: any = {};\n\nfunction tokenizeCharacter(type: any, value: any, input: any, current: any) {\n  return value === input[current] ? [1, { type, value }] : [0, null];\n}\n\nfunction tokenizeParenOpen(input: any, current: any) {\n  return tokenizeCharacter('paren', '(', input, current);\n}\n\nfunction tokenizeBrakeOpen(input: any, current: any) {\n  return tokenizeCharacter('brac', '[', input, current);\n}\n\nfunction tokenizeBrakeClose(input: any, current: any) {\n  return tokenizeCharacter('brac', ']', input, current);\n}\n\nfunction tokenizeParenClose(input: any, current: any) {\n  return tokenizeCharacter('paren', ')', input, current);\n}\n\nfunction tokenizeEqual(input: any, current: any) {\n  return tokenizeCharacter('equal', '=', input, current);\n}\n\nfunction tokenizePlus(input: any, current: any) {\n  return tokenizeCharacter('plus', '+', input, current);\n}\n\nfunction tokenizeMinus(input: any, current: any) {\n  return tokenizeCharacter('minus', '-', input, current);\n}\n\nfunction tokenizeMultiply(input: any, current: any) {\n  return tokenizeCharacter('multiply', '*', input, current);\n}\n\nfunction tokenizeDivide(input: any, current: any) {\n  return tokenizeCharacter('divide', '/', input, current);\n}\n\nfunction tokenizeLessThan(input: any, current: any) {\n  return tokenizeCharacter('lessThan', '<', input, current);\n}\n\nfunction tokenizeGreaterThan(input: any, current: any) {\n  return tokenizeCharacter('greaterThan', '>', input, current);\n}\n\nfunction tokenizeNot(input: any, current: any) {\n  return tokenizeCharacter('not', '!', input, current);\n}\n\nfunction tokenizeComma(input: any, current: any) {\n  return tokenizeCharacter('comma', ',', input, current);\n}\n\nfunction tokenizeDot(input: any, current: any) {\n  return tokenizeCharacter('dot', '.', input, current);\n}\n\nfunction tokenizePattern(type: any, pattern: any, input: any, current: any) {\n  let char = input[current];\n  let consumedChars = 0;\n  if (pattern.test(char)) {\n    let value = '';\n    while (char && pattern.test(char)) {\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    return [consumedChars, { type, value }];\n  }\n  return [0, null];\n}\n\nfunction tokenizeString(input: any, current: any) {\n  if (input[current] === '\"' || input[current] === \"'\") {\n    const matchQuote = input[current];\n    let value = '';\n    let consumedChars = 0;\n    consumedChars += 1;\n    let char = input[current + consumedChars];\n    while (char !== matchQuote) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    return [consumedChars + 1, { type: 'string', value }];\n  }\n  return [0, null];\n}\n\nfunction tokenizeFunction(input: any, current: any) {\n  if (/[a-z_]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (char && /[:a-z0-9_-]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    while (char && /\\s/.test(char)) {\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char && char === '(') {\n      return [consumedChars, { type: 'function', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeNumber(input: any, current: any) {\n  if (/[0-9]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (/[0-9]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char !== '.') {\n      return [consumedChars, { type: 'number', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeDecimal(input: any, current: any) {\n  if (/[0-9.]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (/[0-9]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char === '.') {\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n      if (/[0-9]/i.test(char)) {\n        while (/[0-9]/i.test(char)) {\n          if (char === undefined) {\n            throw new TypeError('unterminated string ');\n          }\n          value += char;\n          consumedChars += 1;\n          char = input[current + consumedChars];\n        }\n        return [consumedChars, { type: 'decimal', value }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeVariable(input: any, current: any) {\n  if (input[current] === '#' || input[current] === '$') {\n    if (input[current + 1] && input[current + 1] === '{') {\n      let value = '';\n      let consumedChars = 1;\n      consumedChars += 1;\n      let char = input[current + consumedChars];\n      while (char !== '}') {\n        if (char === undefined) {\n          throw new TypeError('unterminated string ');\n        }\n        value += char;\n        consumedChars += 1;\n        char = input[current + consumedChars];\n      }\n      return [consumedChars + 1, { type: 'variable', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeOr(input: any, current: any) {\n  if (input[current] === 'o') {\n    if (input[current + 1] && input[current + 1] === 'r') {\n      if (\n        input[current + 2] === undefined ||\n        /[0-9\\s]/.test(input[current + 2])\n      ) {\n        return [2, { type: 'or', value: 'or' }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeIf(input: any, current: any) {\n  if (input[current] === 'i') {\n    if (input[current + 1] && input[current + 1] === 'f') {\n      if (\n        input[current + 2] === undefined ||\n        !/[a-z]i/.test(input[current + 2])\n      ) {\n        return [2, { type: 'if', value: 'if' }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeAnd(input: any, current: any) {\n  if (input[current] === 'a') {\n    if (input[current + 1] && input[current + 1] === 'n') {\n      if (input[current + 2] && input[current + 2] === 'd') {\n        if (\n          input[current + 3] === undefined ||\n          /[0-9\\s]/.test(input[current + 3])\n        ) {\n          return [3, { type: 'and', value: 'and' }];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeDiv(input: any, current: any) {\n  if (input[current] === 'd') {\n    if (input[current + 1] && input[current + 1] === 'i') {\n      if (input[current + 2] && input[current + 2] === 'v') {\n        if (\n          input[current + 3] === undefined ||\n          /[0-9\\s]/.test(input[current + 3])\n        ) {\n          return [3, { type: 'divide', value: '/' }];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeName(input: any, current: any) {\n  return tokenizePattern('name', /[a-z]/i, input, current);\n}\n\nfunction skipWhiteSpace(input: any, current: any) {\n  return /\\s/.test(input[current]) ? [1, null] : [0, null];\n}\n\nconst tokenizers = [\n  skipWhiteSpace,\n  tokenizeParenOpen,\n  tokenizeParenClose,\n  tokenizeIf,\n  tokenizeOr,\n  tokenizeAnd,\n  tokenizeVariable,\n  tokenizeString,\n  tokenizeFunction,\n  tokenizeEqual,\n  tokenizePlus,\n  tokenizeMinus,\n  tokenizeMultiply,\n  tokenizeDivide,\n  tokenizeDiv,\n  tokenizeLessThan,\n  tokenizeGreaterThan,\n  tokenizeNot,\n  tokenizeBrakeOpen,\n  tokenizeBrakeClose,\n  tokenizeDot,\n  tokenizeComma,\n  tokenizeNumber,\n  tokenizeDecimal,\n  tokenizeName,\n];\n\nfunction tokenizer(input: any) {\n  let current: number = 0;\n  const tokens: any = [];\n  while (current < input.length) {\n    let tokenized = false;\n    tokenizers.forEach(tokenizerFn => {\n      if (tokenized) {\n        return;\n      }\n      const [consumedChars, token]: any = tokenizerFn(input, current);\n      if (consumedChars !== 0) {\n        tokenized = true;\n        current += consumedChars;\n      }\n      if (token) {\n        tokens.push(token);\n      }\n    });\n    if (!tokenized) {\n      throw new TypeError(\n        `I dont know what this character is: ${input[current]}`\n      );\n    }\n  }\n  return tokens;\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSelected(funcName: any, params: any, _paramsTokens: any) {\n  if (funcName === 'selected') {\n    let tmp = false;\n    if (Array.isArray(params[0])) {\n      params[0].forEach((element: any) => {\n        // tslint:disable-next-line: triple-equals\n        tmp = tmp || element == params[1];\n      });\n      return [true, tmp];\n    }\n    // tslint:disable-next-line: triple-equals\n    return [true, params[0] == params[1]];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbToday(funcName: any, _params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'today') {\n    const d = new Date();\n    d.setHours(0, 0, 0, 0);\n    return [true, d];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbRound(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'round') {\n    if (params[0] && params[1]) {\n      if (typeof params[0] === 'number' && typeof params[1] === 'number') {\n        return [true, params[0].toFixed(params[1])];\n      }\n      if (typeof params[0] === 'string' && typeof params[1] === 'number') {\n        return [true, parseFloat(params[0]).toFixed(params[1])];\n      }\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbRegex(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'regex') {\n    const regex = RegExp(params[1]);\n    return [true, regex.test(params[0])];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbCountSelected(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'count-selected') {\n    if (params[0] && Array.isArray(params[0])) {\n      return [true, params[0].length];\n    }\n    if (params[0] && typeof params[0] !== 'object') {\n      return [true, 1];\n    }\n    return [true, 0];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbInt(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'int') {\n    if (typeof params[0] === 'string') {\n      return [true, parseInt(params[0], 10)];\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbCoalesce(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'coalesce') {\n    if (!params[0] && params[0] !== 0) {\n      return [true, params[1]];\n    }\n    return [true, params[0]];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbPosition(funcName: any, _params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'position') {\n    if (currentHierarchicalName) {\n      const tmpName = currentHierarchicalName.split('/');\n      if (tmpName.length > 2) {\n        return [true, parseInt(tmpName[tmpName.length - 2], 10) + 1];\n      }\n    }\n  }\n  return [false, null];\n}\n\nfunction sumValuesOverJsn(sum: any, jsnObj: any, variableName: any) {\n  if (Array.isArray(jsnObj)) {\n    let i;\n    for (i = 0; i < jsnObj.length; i += 1) {\n      sum = sumValuesOverJsn(sum, jsnObj[i], variableName);\n    }\n  } else if (typeof jsnObj === 'object') {\n    for (const key in jsnObj) {\n      if (typeof jsnObj[key] === 'object') {\n        sum = sumValuesOverJsn(sum, jsnObj[key], variableName);\n      } else if (key === variableName) {\n        if (typeof jsnObj[key] === 'string') {\n          sum += parseFloat(jsnObj[key]);\n        }\n        if (typeof jsnObj[key] === 'number') {\n          sum += jsnObj[key];\n        }\n      }\n    }\n  }\n  return sum;\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSum(funcName: any, _params: any, paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'sum') {\n    let sumValue = null;\n    if (\n      paramsTokens &&\n      paramsTokens.length > 0 &&\n      paramsTokens[0] &&\n      paramsTokens[0].length > 0 &&\n      paramsTokens[0][0].type === 'variable'\n    ) {\n      sumValue = sumValuesOverJsn(0, userInput, paramsTokens[0][0].value);\n    }\n    return [true, sumValue];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbConcat(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'concat') {\n    if (params && params.length > 0) {\n      let concatStr = '';\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < params.length; i += 1) {\n        if (params[i] == null) {\n          return [false, null];\n        }\n        concatStr += params[i];\n      }\n      return [true, concatStr];\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSubstr(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'substr') {\n    if (params && params.length > 0) {\n      if (params[0] && params[1] !== null) {\n        if (params[2] !== null && params[2] < params[0].length) {\n          const subStr = params[0].substring(params[1], params[2]);\n          return [true, subStr];\n        }\n        return [true, params[0].substring(params[1])];\n      }\n    }\n  }\n  return [false, null];\n}\n\nfunction outerScopedVariables(\n  variableName: any,\n  variableValue: any,\n  tmpUserInput: any\n): any {\n  // tslint:disable-next-line: forin\n  for (const key in tmpUserInput) {\n    const nodeNames = key.split('/');\n    const variableNameFromKey = nodeNames[nodeNames.length - 1];\n    if (variableNameFromKey === variableName) {\n      return tmpUserInput[key];\n    }\n    if (typeof tmpUserInput[key] === 'object') {\n      if (variableValue == null) {\n        variableValue = outerScopedVariables(\n          variableName,\n          variableValue,\n          tmpUserInput[key]\n        );\n      }\n    }\n  }\n  return variableValue;\n}\n\nfunction parseMostClosestScopedVariable(variableName: any) {\n  const tmpHierchicalName = currentHierarchicalName.split('/');\n  let i;\n  const tmpUserInput = userInput;\n  let variableValue = null;\n  variableValue = outerScopedVariables(\n    variableName,\n    variableValue,\n    tmpUserInput\n  );\n  let parent = '';\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\n    // tslint:disable-next-line: triple-equals\n    if (tmpHierchicalName[i] == 'repeat') {\n      i += 1;\n      const index = parseInt(tmpHierchicalName[i + 1], 10);\n      variableValue = outerScopedVariables(\n        variableName,\n        variableValue,\n        tmpUserInput[parent + tmpHierchicalName[i]][index]\n      );\n      i += 2;\n    } else {\n      // path.push(parent + tmpHierchicalName[i + 1]);\n      parent = parent + tmpHierchicalName[i + 1] + '/';\n      i += 2;\n    }\n  }\n  return variableValue;\n}\n\nfunction parseDot() {\n  const tmpHierchicalName = currentHierarchicalName.split('/');\n  let i;\n  let tmpUserInput = userInput;\n  let parent = '';\n  const path = [];\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\n    // tslint:disable-next-line: triple-equals\n    if (tmpHierchicalName[i] == 'repeat') {\n      i += 1;\n      path.push(parent + tmpHierchicalName[i]);\n      path.push(parseInt(tmpHierchicalName[i + 1], 10));\n      parent = parent + tmpHierchicalName[i] + '/';\n      i += 2;\n    } else {\n      // path.push(parent + tmpHierchicalName[i + 1]);\n      parent = parent + tmpHierchicalName[i + 1] + '/';\n      i += 2;\n    }\n  }\n  path.push(parent + tmpHierchicalName[tmpHierchicalName.length - 1]);\n  tmpUserInput = userInput.getIn(path);\n  return tmpUserInput;\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseLiterals(_tmpOutput: any, tokens: any, current: any) {\n  if (tokens[current].type === 'number') {\n    return [1, parseInt(tokens[current].value, 10)];\n  }\n  if (tokens[current].type === 'string') {\n    return [1, tokens[current].value];\n  }\n  if (tokens[current].type === 'decimal') {\n    return [1, parseFloat(tokens[current].value)];\n  }\n  if (tokens[current].type === 'variable') {\n    return [1, parseMostClosestScopedVariable(tokens[current].value)];\n  }\n  if (tokens[current].type === 'name') {\n    if (tokens[current].value.toLowerCase() === 'true') {\n      return [1, true];\n    }\n    if (tokens[current].value.toLowerCase() === 'false') {\n      return [1, false];\n    }\n    if (tokens[current].value in formItemProperty) {\n      return [1, formItemProperty[tokens[current].value]];\n    }\n    return [1, null];\n  }\n  if (tokens[current].type === 'dot') {\n    return [1, parseDot()];\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseFunction(_output: any, tokens: any, current: any) {\n  const possibleFunctions = [\n    kbSelected,\n    kbCountSelected,\n    kbToday,\n    kbRegex,\n    kbInt,\n    kbCoalesce,\n    kbPosition,\n    kbSum,\n    kbConcat,\n    kbSubstr,\n    kbRound,\n  ];\n  if (tokens[current].type === 'function') {\n    const funcName = tokens[current].value;\n    const arrayOfParams: any = [];\n    const arrayOfOriginalTokens: any = [];\n    let i = 1;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      const tmpQueue = [];\n      tmpQueue.push(1);\n      i += 1;\n      let tmpTokens = [];\n      while (tokens[current + i] && tmpQueue.length) {\n        tmpTokens.push(tokens[current + i]);\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === ')'\n        ) {\n          tmpQueue.pop();\n        }\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === '('\n        ) {\n          tmpQueue.push(1);\n        }\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\n          tmpTokens.pop();\n          const tmpVal = parser(null, tmpTokens, 0);\n          arrayOfParams.push(tmpVal);\n          arrayOfOriginalTokens.push(tmpTokens);\n          tmpTokens = [];\n        }\n        i += 1;\n      }\n      i -= 1;\n\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpTokens.pop();\n        const tmpVal = parser(null, tmpTokens, 0);\n        arrayOfParams.push(tmpVal);\n        arrayOfOriginalTokens.push(tmpTokens);\n        let parsedFn = false;\n        let parsedVal = null;\n        possibleFunctions.forEach(functionFn => {\n          if (parsedFn) {\n            return;\n          }\n          [parsedFn, parsedVal] = functionFn(\n            funcName,\n            arrayOfParams,\n            arrayOfOriginalTokens\n          );\n        });\n        if (parsedFn) {\n          return [i + 1, parsedVal];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseIf(_output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'if') {\n    const arrayOfParams = [];\n    let i = 1;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      const tmpQueue = [];\n      tmpQueue.push(1);\n      i += 1;\n      let tmpTokens = [];\n      while (tokens[current + i] && tmpQueue.length) {\n        tmpTokens.push(tokens[current + i]);\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === ')'\n        ) {\n          tmpQueue.pop();\n        }\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === '('\n        ) {\n          tmpQueue.push(1);\n        }\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\n          tmpTokens.pop();\n          const tmpVal = parser(null, tmpTokens, 0);\n          arrayOfParams.push(tmpVal);\n          tmpTokens = [];\n        }\n        i += 1;\n      }\n      i -= 1;\n\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpTokens.pop();\n        const tmpVal = parser(null, tmpTokens, 0);\n        arrayOfParams.push(tmpVal);\n        if (arrayOfParams.length % 2 === 0) {\n          let j;\n          for (j = 0; j < arrayOfParams.length; j += 2) {\n            if (arrayOfParams[j]) {\n              return [i + 1, arrayOfParams[j + 1]];\n            }\n          }\n        } else {\n          let j;\n          for (j = 0; j < arrayOfParams.length - 1; j += 2) {\n            if (arrayOfParams[j]) {\n              return [i + 1, arrayOfParams[j + 1]];\n            }\n          }\n          return [i + 1, arrayOfParams[arrayOfParams.length - 1]];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseNot(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'not') {\n    let tmpTokens;\n    let i = 1;\n    if (tokens[current + i].type === 'equal' && output != null) {\n      tmpTokens = [];\n      i += 1;\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      let newOutput;\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n        // tslint:disable-next-line: triple-equals\n        return [i, output != newOutput];\n      }\n    } else {\n      let parsed = false;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      let consumedTokens;\n      let newOutput;\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          i += consumedTokens;\n        }\n      });\n      if (parsed) {\n        return [i, !newOutput];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseAnd(output: any, tokens: any, current: any): any {\n  if (tokens[current].type === 'and' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    let newOutput = null;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      let consumedChars;\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\n      i += consumedChars;\n    } else {\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n      }\n    }\n    if (newOutput != null) {\n      newOutput = output && newOutput;\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\n        let consumedChars = 0;\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\n        i += consumedChars;\n      }\n      return [i, newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseOr(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'or' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    let newOutput = null;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      let consumedChars;\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\n      i += consumedChars;\n    } else {\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n      }\n    }\n    if (newOutput != null) {\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\n        let consumedChars = 0;\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\n        i += consumedChars;\n      }\n      return [i, output || newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseEqual(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'equal' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n      // tslint:disable-next-line: triple-equals\n      return [i, output == newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseLessThan(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'lessThan' && output != null) {\n    let flagLessThanOrEqual = false;\n    const tmpTokens = [];\n    let i = 1;\n    if (tokens[current + i].type === 'equal') {\n      i += 1;\n      flagLessThanOrEqual = true;\n    }\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n      if (flagLessThanOrEqual) {\n        return [i, output <= newOutput];\n      }\n      return [i, output < newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseGreaterThan(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'greaterThan' && output != null) {\n    let flagGreaterThanOrEqual = false;\n    const tmpTokens = [];\n    let i = 1;\n    if (tokens[current + i].type === 'equal') {\n      i += 1;\n      flagGreaterThanOrEqual = true;\n    }\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n\n      if (flagGreaterThanOrEqual) {\n        return [i, output >= newOutput];\n      }\n      return [i, output > newOutput];\n    }\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseParen(_output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'paren' && tokens[current].value === '(') {\n    const tmpQueue = [];\n    tmpQueue.push(1);\n    let i = 1;\n    const tmpTokens = [];\n    while (tokens[current + i] && tmpQueue.length) {\n      tmpTokens.push(tokens[current + i]);\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpQueue.pop();\n      }\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === '('\n      ) {\n        tmpQueue.push(1);\n      }\n      i += 1;\n    }\n    i -= 1;\n\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === ')'\n    ) {\n      tmpTokens.pop();\n      const tmpVal = parser(null, tmpTokens, 0);\n      return [i + 1, tmpVal];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseDivide(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'divide') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n        }\n        const precedentParsers = [parseDivide, parseMultiply];\n        let preParsed = false;\n        let preOutput;\n        precedentParsers.forEach(preParseFn => {\n          if (preParsed) {\n            return;\n          }\n          if (tokens[current]) {\n            [consumedTokens, preOutput] = preParseFn(\n              newOutput,\n              tokens,\n              current\n            );\n            ct += consumedTokens;\n            if (consumedTokens !== 0) {\n              preParsed = true;\n              newOutput = preOutput;\n            }\n          }\n        });\n\n        if (newOutput != null) {\n          output /= newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseMultiply(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'multiply') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n        }\n        const precedentParsers = [parseDivide, parseMultiply];\n        let preParsed = false;\n        let preOutput;\n        precedentParsers.forEach(preParseFn => {\n          if (preParsed) {\n            return;\n          }\n          if (tokens[current]) {\n            [consumedTokens, preOutput] = preParseFn(\n              newOutput,\n              tokens,\n              current\n            );\n            ct += consumedTokens;\n            if (consumedTokens !== 0) {\n              preParsed = true;\n              newOutput = preOutput;\n            }\n          }\n        });\n\n        if (newOutput != null) {\n          output *= newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parsePlus(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'plus') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'string',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n          const precedentParsers = [parseDivide, parseMultiply];\n          let preParsed = false;\n          let preOutput;\n          precedentParsers.forEach(preParseFn => {\n            if (preParsed) {\n              return;\n            }\n            if (tokens[current]) {\n              [consumedTokens, preOutput] = preParseFn(\n                newOutput,\n                tokens,\n                current\n              );\n              ct += consumedTokens;\n              if (consumedTokens !== 0) {\n                preParsed = true;\n                newOutput = preOutput;\n              }\n            }\n          });\n        }\n        if (newOutput != null) {\n          output += newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseMinus(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'minus') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [parseLiterals, parseParen, parseFunction];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n          const precedentParsers = [parseDivide, parseMultiply];\n          let preParsed = false;\n          let preOutput;\n          precedentParsers.forEach(preParseFn => {\n            if (preParsed) {\n              return;\n            }\n            if (tokens[current]) {\n              [consumedTokens, preOutput] = preParseFn(\n                newOutput,\n                tokens,\n                current\n              );\n              ct += consumedTokens;\n              if (consumedTokens !== 0) {\n                preParsed = true;\n                newOutput = preOutput;\n              }\n            }\n          });\n        }\n        if (newOutput) {\n          if (output) {\n            if (\n              Object.prototype.toString.call(newOutput) === '[object Date]' &&\n              Object.prototype.toString.call(output) === '[object Date]'\n            ) {\n              if (!isNaN(output.getTime()) && !isNaN(newOutput.getTime())) {\n                output -= newOutput;\n                output = Math.ceil(output / (1000 * 60 * 60 * 24));\n              } else {\n                output = NaN;\n              }\n            } else if (\n              Object.prototype.toString.call(newOutput) === '[object Date]' ||\n              Object.prototype.toString.call(output) === '[object Date]'\n            ) {\n              output = NaN;\n            } else if (newOutput === '' || output === '') {\n              output = NaN;\n            } else {\n              output -= newOutput;\n            }\n          } else {\n            if (Object.prototype.toString.call(newOutput) === '[object Date]') {\n              output = NaN;\n            } else {\n              output = -newOutput;\n            }\n          }\n        } else {\n          output = NaN;\n        }\n      });\n      if (parsed) {\n        if (output === '') {\n          output = NaN;\n        }\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nconst parsers = [\n  parseIf,\n  parseParen,\n  parseLiterals,\n  parseDivide,\n  parseMultiply,\n  parsePlus,\n  parseMinus,\n  parseLessThan,\n  parseGreaterThan,\n  parseEqual,\n  parseAnd,\n  parseOr,\n  parseNot,\n  parseFunction,\n];\n\nfunction parser(leftOutput: any, tokens: any, pos: any) {\n  let current = pos;\n  let output = leftOutput;\n  while (current < tokens.length) {\n    let parsed = false;\n    parsers.forEach(parserFn => {\n      if (parsed) {\n        return;\n      }\n      const [consumedTokens, newOutput] = parserFn(output, tokens, current);\n      if (consumedTokens !== 0) {\n        parsed = true;\n        current += consumedTokens;\n      }\n      if (newOutput != null) {\n        output = newOutput;\n      }\n    });\n    if (!parsed) {\n      // throw new TypeError('syntax error');\n      // tslint:disable-next-line: no-console\n      console.log('syntax error');\n      // tslint:disable-next-line: no-console\n      console.log(actualExpression);\n      return null;\n    }\n  }\n  return output;\n}\n\nexport default function evaluater(\n  expression: string,\n  tmpUserInput: any,\n  tmpFormItemProperty: any,\n  tmpCurrentHierarchicalName: string\n) {\n  if (!tmpUserInput) {\n    tmpUserInput = {};\n  }\n  currentHierarchicalName = tmpCurrentHierarchicalName;\n  actualExpression = expression;\n  userInput = tmpUserInput;\n  formItemProperty = tmpFormItemProperty;\n  return parser(null, tokenizer(expression), 0);\n}\n","import { FieldElement } from '../components/typeEvalutors/Base';\n\n/**\n * get the text from multilang obj based on language identifier,\n * @param {FieldElement} property - field multilang property or string\n * @return {string} - text value of the property based on language identifier, empty if not present\n */\nexport default function getTextFromProperty(\n  property: string | { [key: string]: string },\n  languageIdentifier: string\n): string {\n  if (typeof property === 'string') {\n    return property || '';\n  }\n  return property[languageIdentifier] || '';\n}\n\n/**\n * get the label text of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field label text\n */\nexport function getFieldLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.label) {\n    return getTextFromProperty(fieldElement.label, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the hint text of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field hint text\n */\nexport function getFieldHintText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.hint) {\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the label text of the fieldElement constraint msg\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - constraint label text\n */\nexport function getConstraintLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.bind && fieldElement.bind['jr:constraintMsg']) {\n    return getTextFromProperty(\n      fieldElement.bind['jr:constraintMsg'],\n      languageIdentifier\n    );\n  }\n  return '';\n}\n\n/**\n * get the boolean result depending on the expression\n * @param {string} - required string\n * @returns {boolean} - true if required, otherwise false\n */\nfunction requiredEvaluator(expression: string): boolean {\n  if (\n    expression.toLowerCase() === 'yes' ||\n    expression === '1' ||\n    expression.toLowerCase() === 'true'\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * get the boolean result of fieldElement string\n * @param fieldElement\n * @return {boolean} - boolean value by calculating fieldElement required properties\n */\nexport function isInputRequired(fieldElement: FieldElement): boolean {\n  let isRequired = false;\n  if (fieldElement.bind) {\n    if (fieldElement.bind.required) {\n      if (\n        typeof fieldElement.bind.required === 'string' &&\n        requiredEvaluator(fieldElement.bind.required)\n      ) {\n        isRequired = true;\n      }\n    }\n  }\n  return isRequired;\n}\n\n/** interface for EvaluateExpression\n * @param {string} expression - the expression that needs to be evaluated\n * @param {fieldTreeName} - the field Tree name\n * @returns {any} - evaluated value\n */\nexport type EvaluateExpression = (\n  expression: string,\n  fieldTreeName: string\n) => any;\n\n/** evaluates whether a component be relevant or not\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the relevant expression\n * @returns {boolean} - true if relevant; otherwise, false;\n */\nexport function shouldComponentBeRelevant(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.relevant) {\n    const isRelevant = evaluateExpression(\n      fieldElement.bind.relevant,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isRelevant) {\n      return true;\n    }\n    return false;\n  }\n  return true;\n}\n\n/** evaluates whether a component be readonly or not\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the readonly expression\n * @returns {boolean} - true if readonly; otherwise, false;\n */\nexport function shouldComponentBeReadOnly(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.readonly) {\n    const isReadOnly = evaluateExpression(\n      fieldElement.bind.readonly,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isReadOnly) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/** evaluates whether the input violates constraint or not\n * @param {FieldElement} fieldElement - the constraint expression\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the expression\n * @returns {boolean} - true if violates; otherwise, false;\n */\nexport function shouldInputViolatesConstraint(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.constraint) {\n    const isConstraintViolated = !evaluateExpression(\n      fieldElement.bind.constraint,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isConstraintViolated) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/** returns the new user input object after assigning value of passed fieldTreeName\n * @param {any} userInputObj - the current user input object\n * @param {string} fieldTreeName - the field Tree name\n * @param {any} fieldValue - the value that needs to be assigned\n * @returns {any} - the new user input object after assignment\n */\nexport function getModifiedUserInputObject(\n  userInputObj: any,\n  fieldTreeName: string,\n  fieldValue: any\n): any {\n  const treeNodes = fieldTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  modifiedObj[parent + treeNodes[treeNodes.length - 1]] = fieldValue;\n  return userInputObj;\n}\n\n/** returns the value from the user input object\n * @param {any} userInputObj - the user input object\n * @param {string} fieldTreeName - the field Tree name\n * @returns {any} - the value, present in user input object, of the fieldTreeName\n */\nexport function getValueFromUserInputObj(\n  userInputObj: any,\n  fieldTreeName: string\n): any {\n  const treeNodes = fieldTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  return modifiedObj[parent + treeNodes[treeNodes.length - 1]];\n}\n\n/** evaluates whether the component is minimal or not\n * @param {FieldElement} fieldElement - the constraint expression\n * @returns {boolean} - true if minimal; otherwise, false;\n */\nexport function shouldComponentBeMinimal(fieldElement: FieldElement): boolean {\n  let isMinimal = false;\n  if (fieldElement.control && fieldElement.control.appearance) {\n    fieldElement.control.appearance.toString().includes('minimal')\n      ? (isMinimal = true)\n      : (isMinimal = false);\n  }\n  return isMinimal;\n}\n\n/** returns the new user input object after emptying the desired grouped values\n * @param {any} userInputObj - the current user input object\n * @param {string} groupTreeName - the group Tree name\n * @returns {any} - the new user input object after emptying the grouped values\n */\nexport function emptyGroupedValues(\n  userInputObj: any,\n  groupTreeName: string\n): any {\n  const treeNodes = groupTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  Object.keys(modifiedObj).forEach(objKey => {\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\n      modifiedObj[objKey] = null;\n    }\n  });\n  return userInputObj;\n}\n\n/** returns whether the grouped values are empty or not\n * @param {any} userInputObj - the current user input object\n * @param {string} groupTreeName - the group Tree name\n * @returns {any} - true if empty; otherwise, false\n */\nexport function checkGroupedValuesForEmpty(\n  userInputObj: any,\n  groupTreeName: string\n): any {\n  const treeNodes = groupTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  let isEmpty: boolean = true;\n  Object.keys(modifiedObj).forEach(objKey => {\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\n      if (\n        modifiedObj[objKey] !== null &&\n        modifiedObj[objKey] !== undefined &&\n        isEmpty\n      ) {\n        isEmpty = false;\n      }\n    }\n  });\n  return isEmpty;\n}\n","import { AnyAction, Store } from 'redux';\nimport SeamlessImmutable from 'seamless-immutable';\nimport evaluater from '../../utils/compiler';\nimport {\n  checkGroupedValuesForEmpty,\n  emptyGroupedValues,\n  getModifiedUserInputObject,\n  getValueFromUserInputObj,\n} from '../../utils/helpers';\n\n/** interface for the store state */\nexport interface FormState {\n  userInput: object;\n  errors: string[];\n}\n\n// actions\n\n/** FIELD_VALUE_ASSIGNED action type */\nexport const FIELD_VALUE_ASSIGNED = 'odk/reducer/form/FIELD_VALUE_ASSIGNED';\n/** RESET_STORE action type */\nexport const RESET_STORE = 'odk/reducer/form/RESET_STORE';\n/** ADD_ERROR_INPUT_ID action type */\nexport const ADD_ERROR_INPUT_ID = 'odk/reducer/form/ADD_ERROR_INPUT_ID';\n/** REMOVE_ERROR_INPUT_ID action type */\nexport const REMOVE_ERROR_INPUT_ID = 'odk/reducer/form/REMOVE_ERROR_INPUT_ID';\n/** EMPTY_GROUP_FIELDS */\nexport const EMPTY_GROUP_FIELDS = 'odk/reducer/form/EMPTY_GROUP_FIELDS';\n/** REMOVE_GROUP_FIELDS_FROM_ERRORS */\nexport const REMOVE_GROUP_FIELDS_FROM_ERRORS =\n  'odk/reducer/form/REMOVE_GROUP_FIELDS_FROM_ERRORS';\nexport const SET_USER_INPUT_OBJ = 'odk/reducer/form/SET_USER_INPUT_OBJ';\n\n/** interface for ASSIGN_FIELD_VALUE action */\nexport interface AssignFieldValueAction extends AnyAction {\n  fieldTreeName: string;\n  fieldValue: any;\n  type: typeof FIELD_VALUE_ASSIGNED;\n}\n\n/** interface for RESET_STORE action */\nexport interface ResetStoreAction extends AnyAction {\n  type: typeof RESET_STORE;\n}\n\n/** interface for ADD_ERROR_INPUT_ID action */\nexport interface AddErrorInputId extends AnyAction {\n  fieldTreeName: string;\n  type: typeof ADD_ERROR_INPUT_ID;\n}\n\n/** interface for REMOVE_ERROR_INPUT_ID action */\nexport interface RemoveErrorInputId extends AnyAction {\n  fieldTreeName: string;\n  type: typeof REMOVE_ERROR_INPUT_ID;\n}\n\n/** interface for EMPTY_GROUP_FIELDS action */\nexport interface EmptyGroupFields extends AnyAction {\n  fieldTreeName: string;\n  type: typeof EMPTY_GROUP_FIELDS;\n}\n\n/** interface for REMOVE_GROUP_FIELDS_FROM_ERRORS action */\nexport interface RemoveGroupFieldsFromErrors extends AnyAction {\n  fieldTreeName: string;\n  type: typeof REMOVE_GROUP_FIELDS_FROM_ERRORS;\n}\n\n/** interface for SET_USER_INPUT_OBJ action */\nexport interface SetUserInputObj extends AnyAction {\n  userInputObj: any;\n  type: typeof SET_USER_INPUT_OBJ;\n}\n\n/** Assigns the value to the proper field name\n * @param {string} fieldTreeName - the extended field name\n * @param {any} fieldValue - the value that will be assigned\n * @return {AssignFieldValueAction} - an action to assign value to a field in the redux store\n */\nexport const assignFieldValueAction = (\n  fieldTreeName: string,\n  fieldValue: any\n): AssignFieldValueAction => ({\n  fieldTreeName,\n  fieldValue,\n  type: FIELD_VALUE_ASSIGNED,\n});\n\n/** Resets the redux store state to initial state\n * @return {ResetStoreAction} - an action to reset the redux store state\n */\nexport const resetStoreAction = (): ResetStoreAction => ({\n  type: RESET_STORE,\n});\n\n/** add the field tree name as error id to store in redux store that violates constraints\n * @param fieldTreeName - the field tree name\n * @returns {AddErrorInputId} - an action to add input id for errors\n */\nexport const addErrorInputId = (fieldTreeName: string): AddErrorInputId => ({\n  fieldTreeName,\n  type: ADD_ERROR_INPUT_ID,\n});\n\n/** remove the field tree name as error id to store in redux store that violates constraints\n * @param fieldTreeName - the field tree name\n * @returns {RemoveErrorInputId} - an action to remove input id for errors\n */\nexport const removeErrorInputId = (\n  fieldTreeName: string\n): RemoveErrorInputId => ({\n  fieldTreeName,\n  type: REMOVE_ERROR_INPUT_ID,\n});\n\n/** empties the values of the fields of the group\n * @param fieldTreeName - the group field tree name\n * @returns {RemoveErrorInputId} - an action to empty the group field values\n */\nexport const emptyGroupFields = (fieldTreeName: string): EmptyGroupFields => ({\n  fieldTreeName,\n  type: EMPTY_GROUP_FIELDS,\n});\n\n/** removes the group field names from store errors obj\n * @param {string} fieldTreeName - the group field tree name\n * @returns {RemoveGroupFieldsFromErrors} - an action to remove group field names from errors\n */\nexport const removeGroupFieldsFromErrors = (\n  fieldTreeName: string\n): RemoveGroupFieldsFromErrors => ({\n  fieldTreeName,\n  type: REMOVE_GROUP_FIELDS_FROM_ERRORS,\n});\n\n/** sets the user input object to redux store\n * @param {any} userInputObj - the user input obj\n * @returns {SetUserInputObj} - an action to set user input to redux store\n */\nexport const setUserInputObj = (userInputObj: any): SetUserInputObj => ({\n  type: SET_USER_INPUT_OBJ,\n  userInputObj,\n});\n\n/** Create type for forms reducer actions */\nexport type FormActionTypes =\n  | AssignFieldValueAction\n  | ResetStoreAction\n  | AddErrorInputId\n  | RemoveErrorInputId\n  | EmptyGroupFields\n  | RemoveGroupFieldsFromErrors\n  | SetUserInputObj\n  | AnyAction;\n\n/** Create an immutable form state */\nexport type ImmutableFormState = SeamlessImmutable.ImmutableObject<FormState>;\n\n/** initial form state */\nexport const initialState: ImmutableFormState = SeamlessImmutable({\n  errors: [],\n  userInput: {},\n});\n\n/** the form reducer function */\nexport default function reducer(\n  state: ImmutableFormState = initialState,\n  action: FormActionTypes\n): ImmutableFormState {\n  switch (action.type) {\n    case FIELD_VALUE_ASSIGNED:\n      const modifiedUserInputObj = getModifiedUserInputObject(\n        state.getIn(['userInput']).asMutable({ deep: true }),\n        action.fieldTreeName,\n        action.fieldValue\n      );\n      const stateM = state.asMutable({ deep: true });\n      return SeamlessImmutable({ ...stateM, userInput: modifiedUserInputObj });\n    case RESET_STORE:\n      return initialState;\n    case ADD_ERROR_INPUT_ID:\n      if (!state.errors.includes(action.fieldTreeName)) {\n        return state.updateIn(['errors'], arr =>\n          arr.concat([action.fieldTreeName])\n        );\n      }\n      return state;\n    case REMOVE_ERROR_INPUT_ID:\n      if (state.errors.includes(action.fieldTreeName)) {\n        return state.updateIn(['errors'], arr =>\n          arr.filter(elm => elm !== action.fieldTreeName)\n        );\n      }\n      return state;\n    case EMPTY_GROUP_FIELDS:\n      const mUserInputObj = emptyGroupedValues(\n        state.getIn(['userInput']).asMutable({ deep: true }),\n        action.fieldTreeName\n      );\n      const mState = state.asMutable({ deep: true });\n      return SeamlessImmutable({ ...mState, userInput: mUserInputObj });\n    case REMOVE_GROUP_FIELDS_FROM_ERRORS:\n      return state.updateIn(['errors'], arr =>\n        arr.filter(elm => !elm.startsWith(action.fieldTreeName))\n      );\n    case SET_USER_INPUT_OBJ:\n      return SeamlessImmutable({\n        ...state,\n        userInput: (action as any).userInputObj,\n      });\n    default:\n      return state;\n  }\n}\n\n// selectors\n\n/** get the value by their respective element tree name\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} value if the element name is found else null\n */\nexport function getFieldValue(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return getValueFromUserInputObj((state as any).userInput, fieldTreeName);\n}\n\n/** get the value of the evaluated expression\n * @param {Partial<Store>} state - the redux store\n * @param {string} expression - the expression that needs to be evaluated\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} - the evaluated value or null if syntax error\n */\nexport function getEvaluatedExpression(\n  state: Partial<Store>,\n  expression: string,\n  fieldTreeName: string\n): any {\n  return evaluater(expression, (state as any).userInput, null, fieldTreeName);\n}\n\n/** get the value of the evaluated expression for Select One and Select All\n * @param {Partial<Store>} state - the redux store\n * @param {string} expression - the expression that needs to be evaluated\n * @param {any} options - the options that needs to be evaluated\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} - the evaluated value or null if syntax error\n */\nexport function getEvaluatedExpressionForSelect(\n  state: Partial<Store>,\n  expression: string,\n  options: any,\n  fieldTreeName: string\n): any {\n  return evaluater(\n    expression,\n    (state as any).userInput,\n    options,\n    fieldTreeName\n  );\n}\n\n/** check if the field element is present in the store\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {boolean} true if present; otherwise, false\n */\nexport function isPresentInError(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return (state as any).errors.includes(fieldTreeName);\n}\n\n/** check if the field elements under group are empty or not\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the group field\n * @return {boolean} true if empty; otherwise, false\n */\nexport function isGroupFieldsEmpty(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return checkGroupedValuesForEmpty((state as any).userInput, fieldTreeName);\n}\n\n/** check if the field elements under group are present in errors or not\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the group field\n * @return {boolean} true if present; otherwise, false\n */\nexport function isErrorsIncludeGroupFields(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  let isPresent = false;\n  (state as any).errors.forEach((fTName: string) => {\n    if (fTName.startsWith(fieldTreeName) && !isPresent) {\n      isPresent = true;\n    }\n  });\n  return isPresent;\n}\n\n/** check if the errors array in store empty or not\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} true if empty; otherwise, false\n */\nexport function isErrorsArrayEmpty(state: Partial<Store>): any {\n  return (state as any).errors && (state as any).errors.length ? false : true;\n}\n\n/** get the userInput object from store\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} the current userInputObject\n */\nexport function getUserInputFromStore(state: Partial<Store>): any {\n  return (state as any).getIn(['userInput']).asMutable({ deep: true });\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport GroupTypeEvaluator from '../../../../components/typeEvalutors/Group';\nimport {\n  emptyGroupFields,\n  getEvaluatedExpression,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  removeGroupFieldsFromErrors,\n} from '../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../utils/helpers';\n\nexport interface GroupProps {\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n}\n\nclass Group extends React.Component<GroupProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {fieldElement.children && (\n            <GroupTypeEvaluator\n              fieldElements={fieldElement.children}\n              fieldParentTreeName={\n                fieldParentTreeName + 'group/' + fieldElement.name + '/'\n              }\n              defaultLanguage={defaultLanguage}\n            />\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\n        );\n      }\n      if (\n        !this.props.isGroupFieldsEmptySelector(\n          fieldParentTreeName + fieldElement.name\n        )\n      ) {\n        this.props.emptyGroupFieldsActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n};\n\n/** connect Group component to the redux store */\nconst ConnectedGroup = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Group);\n\nexport default ConnectedGroup;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport GroupTypeEvaluator from '../../../../../components/typeEvalutors/Group';\n\nexport interface SingleRepeatProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  defaultLanguage: string;\n  repeatIndex: number;\n  assignmentHandler: any;\n  removeHandler: any;\n}\n\nclass SingleRepeat extends React.Component<SingleRepeatProps> {\n  public render() {\n    const {\n      defaultLanguage,\n      fieldElement,\n      fieldParentTreeName,\n      repeatIndex,\n    } = this.props;\n    return (\n      <div>\n        <div>\n          <span onClick={this.handleChange}>\n            <FontAwesomeIcon icon=\"minus-circle\" />\n          </span>\n        </div>\n        {fieldElement.children && (\n          <GroupTypeEvaluator\n            fieldElements={fieldElement.children}\n            fieldParentTreeName={\n              fieldParentTreeName +\n              'repeat/' +\n              fieldElement.name +\n              '/' +\n              repeatIndex +\n              '/'\n            }\n            defaultLanguage={defaultLanguage}\n          />\n        )}\n      </div>\n    );\n  }\n\n  // tslint:disable-next-line: variable-name\n  private handleChange = (_event: React.MouseEvent<HTMLDivElement>) => {\n    const {\n      repeatIndex,\n      fieldValue,\n      assignmentHandler,\n      fieldElement,\n      fieldParentTreeName,\n      removeHandler,\n    } = this.props;\n    let newFieldValue: any[] = [...fieldValue];\n    newFieldValue = newFieldValue.filter(\n      // tslint:disable-next-line: variable-name\n      (_elem, index) => index !== repeatIndex\n    );\n    assignmentHandler(fieldParentTreeName + fieldElement.name, newFieldValue);\n    removeHandler(fieldParentTreeName + 'repeat/' + fieldElement.name + '/');\n  };\n}\n\nexport default SingleRepeat;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport {\n  assignFieldValueAction,\n  emptyGroupFields,\n  getEvaluatedExpression,\n  getFieldValue,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  removeGroupFieldsFromErrors,\n} from '../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../utils/helpers';\nimport SingleRepeat from './Single Repeat';\n\nexport interface RepeatProps {\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldValue: any;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n}\n\nclass Repeat extends React.Component<RepeatProps> {\n  public render() {\n    const {\n      fieldValue,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n      assignFieldValueActionCreator,\n      removeGroupFieldsFromErrorsActionCreator,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (!fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          [{}]\n        );\n      }\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {fieldValue &&\n            // tslint:disable-next-line: variable-name\n            fieldValue.map((_elm: any, index: any) => (\n              <div className=\"repeat-fields-body\" key={'repeat' + index}>\n                <SingleRepeat\n                  defaultLanguage={defaultLanguage}\n                  fieldElement={fieldElement}\n                  fieldParentTreeName={fieldParentTreeName}\n                  fieldValue={fieldValue}\n                  repeatIndex={index}\n                  assignmentHandler={assignFieldValueActionCreator}\n                  removeHandler={removeGroupFieldsFromErrorsActionCreator}\n                />\n              </div>\n            ))}\n          <div>\n            <span onClick={this.addAnotherRepeat}>\n              <FontAwesomeIcon icon=\"plus-circle\" />\n            </span>\n          </div>\n        </FormGroup>\n      );\n    } else {\n      if (\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        );\n      }\n      if (fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  // tslint:disable-next-line: variable-name\n  private addAnotherRepeat = (_event: React.MouseEvent<HTMLDivElement>) => {\n    const { fieldValue, fieldParentTreeName, fieldElement } = this.props;\n    const newFieldValue = [...fieldValue];\n    newFieldValue.push({});\n    this.props.assignFieldValueActionCreator(\n      fieldParentTreeName + fieldElement.name,\n      newFieldValue\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n};\n\n/** connect Group component to the redux store */\nconst ConnectedRepeat = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Repeat);\n\nexport default ConnectedRepeat;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  getConstraintLabelText,\n  getFieldLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the KbDate component */\nexport interface DateProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass KbDate extends React.Component<DateProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      let defaultValue: string = '';\n      if (fieldValue) {\n        defaultValue = fieldValue.toISOString().slice(0, 10);\n      }\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Input\n            type=\"date\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={defaultValue}\n            readOnly={isReadonly}\n          />\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{constraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? new Date(event.currentTarget.value)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect KbDate component to the redux store */\nconst ConnectedDate = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(KbDate);\n\nexport default ConnectedDate;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  getConstraintLabelText,\n  getFieldLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the date Time component */\nexport interface DateTimeProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass DateTime extends React.Component<DateTimeProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      let defaultValue: string = '';\n      if (fieldValue) {\n        defaultValue = fieldValue.toISOString().slice(0, 23);\n      }\n\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Input\n            type=\"datetime-local\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={defaultValue}\n            readOnly={isReadonly}\n          />\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{constraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? new Date(event.currentTarget.value)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Date Time component to the redux store */\nconst ConnectedDateTime = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DateTime);\n\nexport default ConnectedDateTime;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  getConstraintLabelText,\n  getFieldLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the decimal component */\nexport interface DecimalProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Decimal extends React.Component<DecimalProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Input\n            type=\"number\"\n            step=\"any\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={fieldValue || fieldValue === 0 ? fieldValue : ''}\n            readOnly={isReadonly}\n          />\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{constraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? parseFloat(event.currentTarget.value)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedDecimal = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Decimal);\n\nexport default ConnectedDecimal;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  getConstraintLabelText,\n  getFieldLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the integer component */\nexport interface IntegerProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Integer extends React.Component<IntegerProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Input\n            type=\"number\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={fieldValue || fieldValue === 0 ? fieldValue : ''}\n            readOnly={isReadonly}\n          />\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{constraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? parseInt(event.currentTarget.value, 10)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Integer component to the redux store */\nconst ConnectedInteger = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Integer);\n\nexport default ConnectedInteger;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, FormText, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  getConstraintLabelText,\n  getFieldHintText,\n  getFieldLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the text component */\nexport interface NoteProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isPresentInErrorSelector: any;\n  isComponentRender: boolean;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Note extends React.Component<NoteProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const fieldHint = getFieldHintText(fieldElement, defaultLanguage);\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <FormText>{fieldHint}</FormText>\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{constraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(fieldElement.name, null);\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue:\n      getFieldValue(state, fieldParentTreeName + fieldElement.name) || '',\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Note component to the redux store */\nconst ConnectedNote = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Note);\n\nexport default ConnectedNote;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport { FieldElement } from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  assignFieldValueAction,\n  getFieldValue,\n} from '../../../../store/ducks/formState';\nimport { getFieldLabelText, isInputRequired } from '../../../../utils/helpers';\n\n/** props interface for the photo component */\nexport interface PhotoProps {\n  fieldElement: FieldElement;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  defaultLanguage: string;\n}\n\nclass Photo extends React.Component<PhotoProps> {\n  public render() {\n    const { fieldElement, fieldValue, defaultLanguage } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    return (\n      <FormGroup>\n        <Label>{fieldLabel}</Label>\n        {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n        <Input\n          type=\"file\"\n          accept=\"image/*\"\n          name={fieldElement.name}\n          onChange={this.onChangeHandler}\n          value={fieldValue}\n        />\n        {isRequired && <Label>{REQUIRED_FIELD_MSG}</Label>}\n      </FormGroup>\n    );\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      event.currentTarget.name,\n      event.currentTarget.value\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement } = parentProps;\n  const result = {\n    fieldValue: getFieldValue(state, fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n};\n\n/** connect Photo component to the redux store */\nconst ConnectedPhoto = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Photo);\n\nexport default ConnectedPhoto;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport {\n  geo,\n  REQUIRED_FIELD_MSG,\n  REQUIRED_SYMBOL,\n} from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  getConstraintLabelText,\n  getFieldLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectAll Dropdown component */\nexport interface SelectAllDropDownProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string[];\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectAllDropDown extends React.Component<SelectAllDropDownProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== [] &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (resultOptions.length > 0) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n      } else {\n        if (fieldElement.children) {\n          fieldElement.children.map(elem => {\n            const childrenLabel: string = getFieldLabelText(\n              elem,\n              defaultLanguage\n            );\n            options.push({ label: childrenLabel, value: elem.name });\n          });\n        }\n      }\n\n      const tmpValueArray: any = [];\n      let isNotIncluded: boolean = false;\n      if (fieldValue && fieldValue.length > 0) {\n        const optionsValueArray: any = [];\n        options.map(elem => {\n          if (elem.value) {\n            optionsValueArray.push(elem.value);\n          }\n        });\n\n        for (const row of fieldValue) {\n          if (!optionsValueArray.includes(row)) {\n            isNotIncluded = true;\n          } else {\n            tmpValueArray.push(row);\n          }\n        }\n      }\n\n      if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n        this.props.assignFieldValueActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          tmpValueArray || []\n        );\n      }\n\n      const selectedValues: any[] = [];\n      if (fieldValue && fieldValue.length > 0) {\n        options.map(elem => {\n          for (const row of fieldValue) {\n            if (elem.value === row) {\n              selectedValues.push(elem);\n            }\n          }\n        });\n      }\n\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Select\n            isMulti={true}\n            name={fieldElement.name}\n            options={options}\n            onChange={this.onChangeHandler(fieldElement.name)}\n            value={selectedValues || []}\n          />\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{constraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of field element in store\n   * @param {any} values - the onchange input values\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandler = (fieldName: any) => (values: any) => {\n    const selectedValues: any = [];\n    let i = 0;\n    if (values) {\n      values.map(() => {\n        if (!selectedValues.includes(values[i].value)) {\n          selectedValues.push(values[i].value);\n        }\n        i++;\n      });\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + fieldName,\n        selectedValues\n      );\n    } else {\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + fieldName,\n        null\n      );\n    }\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const finalRes: any[] = [];\n\n    if (csvName) {\n      options = [...geo];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n\n        tempOptions.forEach(elm => {\n          const filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n\n          let j = 0;\n          filterResult.map(() => {\n            options.map(option => {\n              if (option[nameOfKey] === filterResult[j]) {\n                finalRes.push(option);\n              }\n            });\n            j = j + 1;\n          });\n        });\n\n        i = i + 2;\n      }\n\n      options = [...Array.from(new Set(finalRes))];\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string[];\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Dropdown component to the redux store */\nconst ConnectedSelectAllDropDown = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectAllDropDown);\n\nexport default ConnectedSelectAllDropDown;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport {\n  geo,\n  REQUIRED_FIELD_MSG,\n  REQUIRED_SYMBOL,\n} from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  getConstraintLabelText,\n  getFieldLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectAll Radio component */\nexport interface SelectAllRadioProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string[];\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectAllRadio extends React.Component<SelectAllRadioProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== [] &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (resultOptions.length > 0) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n\n        const tmpValueArray: any = [];\n        let isNotIncluded: boolean = false;\n        if (fieldValue && fieldValue.length > 0) {\n          const optionsValueArray: any = [];\n          options.map(elem => {\n            if (elem.value) {\n              optionsValueArray.push(elem.value);\n            }\n          });\n\n          for (const row of fieldValue) {\n            if (!optionsValueArray.includes(row)) {\n              isNotIncluded = true;\n            } else {\n              tmpValueArray.push(row);\n            }\n          }\n        }\n\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            tmpValueArray || []\n          );\n        }\n\n        const selectedValues: any[] = [];\n        if (fieldValue && fieldValue.length > 0) {\n          options.map(elem => {\n            for (const row of fieldValue) {\n              if (elem.value === row) {\n                selectedValues.push(elem.value);\n              }\n            }\n          });\n        }\n\n        return (\n          <FormGroup>\n            <Label>{fieldLabel}</Label>\n            {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n            {resultOptions.map((elem, index) => (\n              <div key={index} className=\"col-md-12\">\n                <Input\n                  key={fieldElement.name + '-' + index}\n                  type=\"checkbox\"\n                  name={fieldElement.name}\n                  value={elem.name || []}\n                  onChange={this.onChangeHandlerCheckBox}\n                  readOnly={isReadonly}\n                  checked={selectedValues.includes(elem.name)}\n                />{' '}\n                {elem.label}\n              </div>\n            ))}\n            {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n            {isConstraintViolated && <Label>{constraintLabel}</Label>}\n          </FormGroup>\n        );\n      } else {\n        if (fieldElement.children) {\n          return (\n            <FormGroup>\n              <Label>{fieldLabel}</Label>\n              {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n              {fieldElement.children.map((elem, index) => (\n                <div key={index} className=\"col-md-12\">\n                  <Input\n                    key={fieldElement.name + '-' + index}\n                    type=\"checkbox\"\n                    name={fieldElement.name}\n                    value={elem.name || []}\n                    onChange={this.onChangeHandlerCheckBox}\n                    readOnly={isReadonly}\n                  />{' '}\n                  {elem.name}\n                </div>\n              ))}\n              {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n              {isConstraintViolated && <Label>{constraintLabel}</Label>}\n            </FormGroup>\n          );\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {any} event - the onchange event\n   */\n\n  private onChangeHandlerCheckBox = (event: any) => {\n    const { fieldValue, fieldElement, fieldParentTreeName } = this.props;\n    const fieldName = fieldParentTreeName + fieldElement.name;\n    if (event.target.checked) {\n      if (\n        fieldValue &&\n        fieldValue.length > 0 &&\n        !fieldValue.includes(event.target.value)\n      ) {\n        this.props.assignFieldValueActionCreator(fieldName, [\n          ...fieldValue,\n          event.target.value,\n        ]);\n      } else {\n        this.props.assignFieldValueActionCreator(fieldName, [\n          event.target.value,\n        ]);\n      }\n    } else {\n      if (\n        fieldValue &&\n        fieldValue.length > 0 &&\n        fieldValue.includes(event.target.value)\n      ) {\n        const newValue = fieldValue.filter(elm => elm !== event.target.value);\n\n        this.props.assignFieldValueActionCreator(\n          fieldName,\n          newValue.length ? newValue : null\n        );\n      }\n    }\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const finalRes: any[] = [];\n\n    if (csvName) {\n      options = [...geo];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n\n        tempOptions.forEach(elm => {\n          const filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n\n          let j = 0;\n          filterResult.map(() => {\n            options.map(option => {\n              if (option[nameOfKey] === filterResult[j]) {\n                finalRes.push(option);\n              }\n            });\n            j = j + 1;\n          });\n        });\n\n        i = i + 2;\n      }\n\n      options = [...Array.from(new Set(finalRes))];\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string[];\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Radio component to the redux store */\nconst ConnectedSelectAllRadio = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectAllRadio);\n\nexport default ConnectedSelectAllRadio;\n","import * as React from 'react';\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport Dropdown from './Dropdown';\nimport Radio from './Radio';\n\n/** props interface for the SelectOne component */\nexport interface SelectAllProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass SelectAll extends React.Component<SelectAllProps> {\n  public render() {\n    const { fieldElement } = this.props;\n\n    if (shouldComponentBeMinimal(fieldElement)) {\n      return <Dropdown {...this.props} />;\n    }\n    return <Radio {...this.props} />;\n  }\n}\n\nexport default SelectAll;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport {\n  geo,\n  REQUIRED_FIELD_MSG,\n  REQUIRED_SYMBOL,\n} from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  getConstraintLabelText,\n  getFieldLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneDropDownProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectOneDropDown extends React.Component<SelectOneDropDownProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (resultOptions.length > 0) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n      } else {\n        if (fieldElement.children) {\n          fieldElement.children.map(elem => {\n            const childrenLabel: string = getFieldLabelText(\n              elem,\n              defaultLanguage\n            );\n            options.push({ label: childrenLabel, value: elem.name });\n          });\n        }\n      }\n\n      if (fieldValue) {\n        const optionsValueArray: any = [];\n        options.map(elem => {\n          if (elem.value) {\n            optionsValueArray.push(elem.value);\n          }\n        });\n\n        if (!optionsValueArray.includes(fieldValue)) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            ''\n          );\n        }\n      }\n\n      let selectedValue: any;\n      options.map(elem => {\n        if (elem.value === fieldValue) {\n          selectedValue = elem;\n        }\n      });\n\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Select\n            multi={false}\n            name={fieldElement.name}\n            options={options}\n            value={selectedValue || ''}\n            onChange={this.onChangeHandler(fieldElement.name)}\n          />\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{constraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {any} event - the onchange input event\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandler = (fieldName: any) => (event: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + fieldName,\n      event.value || ''\n    );\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    if (csvName) {\n      options = [...geo];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n        tempOptions.forEach(elm => {\n          const filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n          options = options.filter(\n            option => option[nameOfKey] === filterResult\n          );\n        });\n\n        i = i + 2;\n      }\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne component to the redux store */\nconst ConnectedSelectOneDropDown = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectOneDropDown);\n\nexport default ConnectedSelectOneDropDown;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport {\n  geo,\n  REQUIRED_FIELD_MSG,\n  REQUIRED_SYMBOL,\n} from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  getConstraintLabelText,\n  getFieldLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneRadioProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectOneRadio extends React.Component<SelectOneRadioProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        if (/search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)) {\n          const processedStringArray = fieldElement.control.appearance.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (resultOptions.length > 0) {\n        if (fieldValue) {\n          const optionsValueArray: any = [];\n          resultOptions.map(elem => {\n            if (elem.name) {\n              optionsValueArray.push(elem.name);\n            }\n          });\n\n          if (!optionsValueArray.includes(fieldValue)) {\n            this.props.assignFieldValueActionCreator(\n              this.props.fieldParentTreeName + fieldElement.name,\n              ''\n            );\n          }\n        }\n        return (\n          <FormGroup>\n            <Label>{fieldLabel}</Label>\n            {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n            {resultOptions.map((elem, index) => (\n              <div key={index} className=\"col-md-12\">\n                <Input\n                  key={fieldElement.name + '-' + index}\n                  type=\"radio\"\n                  name={fieldElement.name}\n                  value={elem.name}\n                  onChange={this.onChangeHandlerRadio(fieldElement.name)}\n                  readOnly={isReadonly}\n                  checked={elem.name === fieldValue}\n                />{' '}\n                {elem.label}\n              </div>\n            ))}\n            {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n            {isConstraintViolated && <Label>{constraintLabel}</Label>}\n          </FormGroup>\n        );\n      } else {\n        if (fieldElement.children) {\n          return (\n            <FormGroup>\n              <Label>{fieldLabel}</Label>\n              {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n              {fieldElement.children.map((elem, index) => (\n                <div key={index} className=\"col-md-12\">\n                  <Input\n                    key={fieldElement.name + '-' + index}\n                    type=\"radio\"\n                    name={fieldElement.name}\n                    value={elem.name}\n                    onChange={this.onChangeHandlerRadio(fieldElement.name)}\n                    readOnly={isReadonly}\n                  />{' '}\n                  {elem.name}\n                </div>\n              ))}\n              {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n              {isConstraintViolated && <Label>{constraintLabel}</Label>}\n            </FormGroup>\n          );\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of Radio Button field element in store\n   * @param {any} event - the onchange input event\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandlerRadio = (fieldName: any) => (event: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + fieldName,\n      event.target.value || ''\n    );\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique radio button options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    if (csvName) {\n      options = [...geo];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n        tempOptions.forEach(elm => {\n          const filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n          options = options.filter(\n            option => option[nameOfKey] === filterResult\n          );\n        });\n\n        i = i + 2;\n      }\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Radio component to the redux store */\nconst ConnectedSelectOneRadio = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectOneRadio);\n\nexport default ConnectedSelectOneRadio;\n","import * as React from 'react';\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport Dropdown from './Dropdown';\nimport Radio from './Radio';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass SelectOne extends React.Component<SelectOneProps> {\n  public render() {\n    const { fieldElement } = this.props;\n    if (shouldComponentBeMinimal(fieldElement)) {\n      return <Dropdown {...this.props} />;\n    }\n    return <Radio {...this.props} />;\n  }\n}\n\nexport default SelectOne;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  getConstraintLabelText,\n  getFieldLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the text component */\nexport interface TextProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isPresentInErrorSelector: any;\n  isComponentRender: boolean;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Text extends React.Component<TextProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Input\n            type=\"text\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={fieldValue || ''}\n            readOnly={isReadonly}\n          />\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{constraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value || ''\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Text component to the redux store */\nconst ConnectedText = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Text);\n\nexport default ConnectedText;\n","import * as React from 'react';\nimport {\n  DATE_FIELD_TYPE,\n  DATE_TIME_FIELD_TYPE,\n  DECIMAL_FIELD_TYPE,\n  INTEGER_FIELD_TYPE,\n  NOTE_FIELD_TYPE,\n  PHOTO_FIELD_TYPE,\n  SELECT_ALL_FIELD_TYPE,\n  SELECT_ONE_FIELD_TYPE,\n  TEXT_FIELD_TYPE,\n} from '../../../constants';\nimport KbDate from '../../../containers/fields/base/Date';\nimport DateTime from '../../../containers/fields/base/Date Time';\nimport Decimal from '../../../containers/fields/base/Decimal';\nimport Integer from '../../../containers/fields/base/Integer';\nimport Note from '../../../containers/fields/base/Note';\nimport Photo from '../../../containers/fields/base/Photo';\nimport SelectAll from '../../../containers/fields/base/Select All';\nimport SelectOne from '../../../containers/fields/base/Select One';\nimport Text from '../../../containers/fields/base/Text';\n\n/** type of fieldParentTreeName */\nexport type FieldParentTreeName = string;\n\n/** interface for bind property */\ninterface BindProperty {\n  calculate?: string;\n  relevant?: string;\n  readonly?: string;\n  appearance?: string;\n  required?: string;\n  constraint?: string;\n  'jr:constraintMsg'?: { [key: string]: string } | string;\n}\n\n/** interface for kobo field element */\nexport interface FieldElement {\n  name: string;\n  type: string;\n  children?: any[];\n  bind?: BindProperty;\n  label?: { [key: string]: string } | string;\n  default?: any;\n  control?: any;\n  hint?: any;\n}\n\n/** props interface for BaseTypeEvaluator component */\nexport interface BaseTypeEvaluatorProps {\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\nclass BaseTypeEvaluator extends React.Component<BaseTypeEvaluatorProps> {\n  public render() {\n    const { fieldElement, fieldParentTreeName, defaultLanguage } = this.props;\n    return this.typeEvaluator(\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage\n    );\n  }\n\n  /** returns jsx components based on field types\n   * @param {FieldElement} fieldElement - the field element object\n   * @param {FieldParentTreeName} fieldParentTreeName - the field parent hierchical name\n   * @return {React.ReactElement} - jsx base components\n   */\n  private typeEvaluator(\n    fieldElement: FieldElement,\n    fieldParentTreeName: FieldParentTreeName,\n    defaultLanguage: string\n  ): React.ReactElement {\n    switch (fieldElement.type) {\n      case TEXT_FIELD_TYPE:\n        return (\n          <Text\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DATE_FIELD_TYPE:\n        return (\n          <KbDate\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DATE_TIME_FIELD_TYPE:\n        return (\n          <DateTime\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case INTEGER_FIELD_TYPE:\n        return (\n          <Integer\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DECIMAL_FIELD_TYPE:\n        return (\n          <Decimal\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case NOTE_FIELD_TYPE:\n        return (\n          <Note\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case SELECT_ONE_FIELD_TYPE:\n        return (\n          <SelectOne\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case SELECT_ALL_FIELD_TYPE:\n        return (\n          <SelectAll\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case PHOTO_FIELD_TYPE:\n        return (\n          <Photo\n            fieldElement={fieldElement}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      default:\n        return (\n          <div>\n            Other {fieldElement.type} {fieldElement.name}\n          </div>\n        );\n    }\n  }\n}\n\nexport default BaseTypeEvaluator;\n","import * as React from 'react';\nimport { GROUP_FIELD_TYPE, REPEAT_FIELD_TYPE } from '../../../constants';\nimport Group from '../../../containers/fields/group/Group';\nimport Repeat from '../../../containers/fields/group/Repeat';\nimport BaseTypeEvaluator, { FieldElement, FieldParentTreeName } from '../Base';\n\n/** props Interface for the GroupTypeEvaluator component */\nexport interface GroupTypeEvaluatorProps {\n  defaultLanguage: string;\n  fieldElements: FieldElement[];\n  fieldParentTreeName: string;\n}\n\nclass GroupTypeEvaluator extends React.Component<GroupTypeEvaluatorProps> {\n  public render() {\n    const { fieldElements, fieldParentTreeName, defaultLanguage } = this.props;\n    return (\n      <div>\n        {fieldElements.map(fieldElement => (\n          <div key={'group_' + fieldElement.name}>\n            {this.typeEvaluator(\n              fieldElement,\n              fieldParentTreeName,\n              defaultLanguage\n            )}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  /** returns jsx components based on field types\n   * @param {FieldElement} fieldElement - the field element object\n   * @param {FieldParentTreeName} - the field parent hierarchical name\n   * @return {React.ReactElement} - jsx group components/ base evaluator component\n   */\n  private typeEvaluator(\n    fieldElement: FieldElement,\n    fieldParentTreeName: FieldParentTreeName,\n    defaultLanguage: string\n  ): React.ReactElement {\n    switch (fieldElement.type) {\n      case GROUP_FIELD_TYPE:\n        return (\n          <div>\n            <Group\n              fieldElement={fieldElement}\n              fieldParentTreeName={fieldParentTreeName}\n              defaultLanguage={defaultLanguage}\n            />\n          </div>\n        );\n      case REPEAT_FIELD_TYPE:\n        return (\n          <div>\n            <Repeat\n              fieldElement={fieldElement}\n              fieldParentTreeName={fieldParentTreeName}\n              defaultLanguage={defaultLanguage}\n            />\n          </div>\n        );\n      default:\n        return (\n          <BaseTypeEvaluator\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n    }\n  }\n}\n\nexport default GroupTypeEvaluator;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { faMinusCircle, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Container, Row } from 'reactstrap';\nimport { Store } from 'redux';\nimport GroupTypeEvaluator from '../components/typeEvalutors/Group';\nimport {\n  getUserInputFromStore,\n  isErrorsArrayEmpty,\n  setUserInputObj,\n} from '../store/ducks/formState';\n\nlibrary.add(faPlusCircle, faMinusCircle);\n\nexport interface AppProps {\n  isNoErrors: any;\n  userInputObj: any;\n  userInputJson: any;\n  defaultLanguage: string;\n  formTitle: string;\n  fieldElements: any;\n  setUserInputAction: typeof setUserInputObj;\n  handleSubmit(userInput: any): any;\n}\n\nclass App extends React.Component<AppProps> {\n  public componentDidMount() {\n    const { userInputJson, userInputObj } = this.props;\n    if (userInputJson && userInputJson !== userInputObj) {\n      this.props.setUserInputAction(userInputJson);\n    }\n  }\n  public render() {\n    const { defaultLanguage, fieldElements, formTitle } = this.props;\n    const props = {\n      defaultLanguage,\n      fieldElements,\n      fieldParentTreeName: '',\n    };\n    return (\n      <Container className=\"form-container\">\n        <Row className=\"form-title\">\n          <Col>\n            <h3>{formTitle}</h3>\n          </Col>\n        </Row>\n        <GroupTypeEvaluator {...props} />\n        <Row className=\"welcome-box\">\n          <Col>\n            <Button className=\"btn btn-success\" onClick={this.handleClick}>\n              Submit\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  // tslint:disable-next-line: variable-name\n  private handleClick = (_event: React.MouseEvent<HTMLButtonElement>) => {\n    const { handleSubmit, isNoErrors, userInputObj } = this.props;\n    handleSubmit('submitted');\n    if (isNoErrors) {\n      handleSubmit(userInputObj);\n    } else {\n      handleSubmit('Field Violated');\n    }\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  isNoErrors: any;\n  userInputObj: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    isNoErrors: isErrorsArrayEmpty(state),\n    userInputObj: getUserInputFromStore(state),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  setUserInputAction: setUserInputObj,\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedApp = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\nexport default ConnectedApp;\n","import { createStore, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer, { FormState } from './ducks/formState';\n\n/** The initial store */\nconst store: Store & FormState = createStore(reducer, composeWithDevTools());\n\nexport default store;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nexport interface OdkFormRendererProps {\n  defaultLanguage: string;\n  formDefinitionJson: any;\n  userInputJson: any;\n  handleSubmit(userInput: any): any;\n}\n\nclass OdkFormRenderer extends React.Component<OdkFormRendererProps> {\n  public render() {\n    const {\n      defaultLanguage,\n      formDefinitionJson,\n      userInputJson,\n      handleSubmit,\n    } = this.props;\n    const props = {\n      defaultLanguage,\n      fieldElements: formDefinitionJson.children,\n      formTitle: formDefinitionJson.title,\n      handleSubmit,\n      userInputJson,\n    };\n    return (\n      <Provider store={store}>\n        <App {...props} />\n      </Provider>\n    );\n  }\n}\n\nexport default OdkFormRenderer;\n"],"names":["actualExpression","REQUIRED_FIELD_MSG","geo","district_code","district_name","division_code","division_name","union_code","union_name","upazila_code","upazila_name","currentHierarchicalName","formItemProperty","userInput","tokenizeCharacter","type","value","input","current","tokenizers","test","undefined","consumedChars","char","TypeError","matchQuote","pattern","tokenizePattern","kbSelected","funcName","params","_paramsTokens","tmp","Array","isArray","forEach","element","kbToday","_params","d","Date","setHours","kbRound","toFixed","parseFloat","kbRegex","RegExp","kbCountSelected","length","kbInt","parseInt","kbCoalesce","kbPosition","tmpName","split","kbSum","paramsTokens","sumValue","sumValuesOverJsn","sum","jsnObj","variableName","i","key","kbConcat","concatStr","kbSubstr","substring","outerScopedVariables","variableValue","tmpUserInput","nodeNames","parseMostClosestScopedVariable","tmpHierchicalName","parent","index","parseDot","path","push","getIn","parseLiterals","_tmpOutput","tokens","toLowerCase","parseFunction","_output","possibleFunctions","arrayOfParams","arrayOfOriginalTokens","tmpQueue","tmpTokens","pop","tmpVal","parser","parsedFn","parsedVal","functionFn","parseAnd","output","newOutput","parseParen","terminatingTokens","indexOf","parseDivide","parsed","ct","parseMinus","parserFn","consumedTokens","preOutput","preParsed","parseMultiply","preParseFn","Object","prototype","toString","call","isNaN","getTime","NaN","Math","ceil","parsers","j","flagLessThanOrEqual","flagGreaterThanOrEqual","leftOutput","pos","console","log","evaluater","expression","tmpFormItemProperty","tmpCurrentHierarchicalName","tokenized","tokenizerFn","token","tokenizer","getTextFromProperty","property","languageIdentifier","getFieldLabelText","fieldElement","label","getConstraintLabelText","bind","isInputRequired","isRequired","required","shouldComponentBeRelevant","fieldParentTreeName","evaluateExpression","relevant","name","shouldComponentBeReadOnly","readonly","shouldInputViolatesConstraint","constraint","shouldComponentBeMinimal","isMinimal","control","appearance","includes","FIELD_VALUE_ASSIGNED","RESET_STORE","ADD_ERROR_INPUT_ID","REMOVE_ERROR_INPUT_ID","EMPTY_GROUP_FIELDS","REMOVE_GROUP_FIELDS_FROM_ERRORS","SET_USER_INPUT_OBJ","assignFieldValueAction","fieldTreeName","fieldValue","addErrorInputId","removeErrorInputId","emptyGroupFields","removeGroupFieldsFromErrors","initialState","SeamlessImmutable","errors","reducer","state","action","modifiedUserInputObj","userInputObj","treeNodes","modifiedObj","getModifiedUserInputObject","asMutable","deep","stateM","updateIn","arr","concat","filter","elm","mUserInputObj","groupTreeName","keys","objKey","startsWith","emptyGroupedValues","mState","getFieldValue","getValueFromUserInputObj","getEvaluatedExpression","getEvaluatedExpressionForSelect","options","isPresentInError","isGroupFieldsEmpty","isEmpty","checkGroupedValuesForEmpty","isErrorsIncludeGroupFields","isPresent","fTName","isErrorsArrayEmpty","getUserInputFromStore","Group","render","this","props","defaultLanguage","isComponentRender","fieldLabel","React","FormGroup","Label","children","GroupTypeEvaluator","fieldElements","isErrorsIncludeGroupFieldsSelector","removeGroupFieldsFromErrorsActionCreator","isGroupFieldsEmptySelector","emptyGroupFieldsActionCreator","ConnectedGroup","connect","parentProps","getEvaluatedExpressionSelector","SingleRepeat","_event","_this","repeatIndex","assignmentHandler","removeHandler","newFieldValue","_elem","onClick","handleChange","FontAwesomeIcon","icon","Component","Repeat","assignFieldValueActionCreator","map","_elm","className","addAnotherRepeat","ConnectedRepeat","KbDate","event","currentTarget","isPresentInErrorSelector","isRequiredViolated","isConstraintViolated","constraintLabel","isReadonly","removeErrorInputIdActionCreator","addErrorInputIdActionCreator","defaultValue","toISOString","slice","Input","onChange","onChangeHandler","readOnly","ConnectedDate","DateTime","ConnectedDateTime","Decimal","step","ConnectedDecimal","Integer","ConnectedInteger","Note","fieldHint","hint","getFieldHintText","FormText","ConnectedNote","Photo","accept","ConnectedPhoto","SelectAllDropDown","fieldName","values","selectedValues","stringWithSearchKeyWord","match","resultArray","criteriaParams","splice","extractAndFilterOptions","csvName","criteriaType","filterCriterias","trim","distinctOptions","finalRes","nameOfKey","interConnectedValue","filterResult","getEvaluatedExpressionSelectorForSelect","option","from","Set","labelColumnName","valueColumnName","elem","tmpOpt","_","uniqBy","resultOptions","updatedFieldElement","replace","processedStringArray","getProcessedString","childrenLabel","tmpValueArray","isNotIncluded","optionsValueArray","row","Select","isMulti","ConnectedSelectAllDropDown","SelectAllRadio","target","checked","newValue","_this2","onChangeHandlerCheckBox","ConnectedSelectAllRadio","SelectAll","Dropdown","Radio","SelectOneDropDown","selectedValue","multi","ConnectedSelectOneDropDown","SelectOneRadio","onChangeHandlerRadio","ConnectedSelectOneRadio","SelectOne","Text","ConnectedText","BaseTypeEvaluator","typeEvaluator","library","add","faPlusCircle","faMinusCircle","App","handleSubmit","isNoErrors","componentDidMount","userInputJson","setUserInputAction","Container","Row","Col","formTitle","Button","handleClick","ConnectedApp","store","createStore","composeWithDevTools","formDefinitionJson","Provider","title"],"mappings":"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"}