{"version":3,"file":"odkformrenderer.cjs.production.min.js","sources":["../src/constants.tsx","../src/utils/compiler.ts","../src/utils/helpers.ts","../src/store/ducks/formState.ts","../src/containers/fields/group/Group/index.tsx","../src/containers/fields/group/Repeat/Single Repeat/index.tsx","../src/containers/fields/group/Repeat/index.tsx","../src/containers/fields/base/Calculate/index.tsx","../src/containers/fields/base/Date/index.tsx","../src/containers/fields/base/Date Time/index.tsx","../src/containers/fields/base/Decimal/index.tsx","../src/containers/fields/base/Integer/index.tsx","../src/containers/fields/base/Note/index.tsx","../src/containers/fields/base/Photo/index.tsx","../src/containers/fields/base/Select All/Dropdown/index.tsx","../src/containers/fields/base/Select All/Radio/index.tsx","../src/containers/fields/base/Select All/index.tsx","../src/containers/fields/base/Select One/Dropdown/index.tsx","../src/containers/fields/base/Select One/Radio/index.tsx","../src/containers/fields/base/Select One/index.tsx","../src/containers/fields/base/Text/index.tsx","../src/containers/fields/base/Time/index.tsx","../src/components/typeEvalutors/Base/index.tsx","../src/components/typeEvalutors/Group/index.tsx","../src/App/index.tsx","../src/store/index.tsx","../src/index.tsx"],"sourcesContent":["// Field Types\nexport const GROUP_FIELD_TYPE = 'group';\nexport type GROUP_FIELD_TYPE = typeof GROUP_FIELD_TYPE;\nexport const REPEAT_FIELD_TYPE = 'repeat';\nexport type REPEAT_FIELD_TYPE = typeof REPEAT_FIELD_TYPE;\nexport const TEXT_FIELD_TYPE = 'text';\nexport type TEXT_FIELD_TYPE = typeof TEXT_FIELD_TYPE;\nexport const DATE_FIELD_TYPE = 'date';\nexport type DATE_FIELD_TYPE = typeof DATE_FIELD_TYPE;\nexport const DATE_TIME_FIELD_TYPE = 'dateTime';\nexport type TIME_FIELD_TYPE = typeof TIME_FIELD_TYPE;\nexport const TIME_FIELD_TYPE = 'time';\nexport type DATE_TIME_FIELD_TYPE = typeof DATE_TIME_FIELD_TYPE;\nexport const INTEGER_FIELD_TYPE = 'integer';\nexport type INTEGER_FIELD_TYPE = typeof INTEGER_FIELD_TYPE;\nexport const DECIMAL_FIELD_TYPE = 'decimal';\nexport type DECIMAL_FIELD_TYPE = typeof DECIMAL_FIELD_TYPE;\nexport const PHOTO_FIELD_TYPE = 'photo';\nexport type PHOTO_FIELD_TYPE = typeof PHOTO_FIELD_TYPE;\nexport const NOTE_FIELD_TYPE = 'note';\nexport type NOTE_FIELD_TYPE = typeof NOTE_FIELD_TYPE;\nexport const SELECT_ONE_FIELD_TYPE = 'select one';\nexport type SELECT_ONE_FIELD_TYPE = typeof SELECT_ONE_FIELD_TYPE;\nexport const SELECT_ALL_FIELD_TYPE = 'select all that apply';\nexport type SELECT_ALL_FIELD_TYPE = typeof SELECT_ALL_FIELD_TYPE;\nexport const CALCULATE_FIELD_TYPE = 'calculate';\nexport type CALCULATE_FIELD_TYPE = typeof CALCULATE_FIELD_TYPE;\n\n// Required Properties\nexport const REQUIRED_FIELD_MSG = 'This field is required';\nexport type REQUIRED_FIELD_MSG = typeof REQUIRED_FIELD_MSG;\nexport const REQUIRED_SYMBOL = '*';\nexport type REQUIRED_SYMBOL = typeof REQUIRED_SYMBOL;\n","let actualExpression: string;\nlet currentHierarchicalName: string = '';\nlet formItemProperty: any = {};\nlet userInput: any = {};\n\nfunction tokenizeCharacter(type: any, value: any, input: any, current: any) {\n  return value === input[current] ? [1, { type, value }] : [0, null];\n}\n\nfunction tokenizeParenOpen(input: any, current: any) {\n  return tokenizeCharacter('paren', '(', input, current);\n}\n\nfunction tokenizeBrakeOpen(input: any, current: any) {\n  return tokenizeCharacter('brac', '[', input, current);\n}\n\nfunction tokenizeBrakeClose(input: any, current: any) {\n  return tokenizeCharacter('brac', ']', input, current);\n}\n\nfunction tokenizeParenClose(input: any, current: any) {\n  return tokenizeCharacter('paren', ')', input, current);\n}\n\nfunction tokenizeEqual(input: any, current: any) {\n  return tokenizeCharacter('equal', '=', input, current);\n}\n\nfunction tokenizePlus(input: any, current: any) {\n  return tokenizeCharacter('plus', '+', input, current);\n}\n\nfunction tokenizeMinus(input: any, current: any) {\n  return tokenizeCharacter('minus', '-', input, current);\n}\n\nfunction tokenizeMultiply(input: any, current: any) {\n  return tokenizeCharacter('multiply', '*', input, current);\n}\n\nfunction tokenizeDivide(input: any, current: any) {\n  return tokenizeCharacter('divide', '/', input, current);\n}\n\nfunction tokenizeLessThan(input: any, current: any) {\n  return tokenizeCharacter('lessThan', '<', input, current);\n}\n\nfunction tokenizeGreaterThan(input: any, current: any) {\n  return tokenizeCharacter('greaterThan', '>', input, current);\n}\n\nfunction tokenizeNot(input: any, current: any) {\n  return tokenizeCharacter('not', '!', input, current);\n}\n\nfunction tokenizeComma(input: any, current: any) {\n  return tokenizeCharacter('comma', ',', input, current);\n}\n\nfunction tokenizeDot(input: any, current: any) {\n  return tokenizeCharacter('dot', '.', input, current);\n}\n\nfunction tokenizePattern(type: any, pattern: any, input: any, current: any) {\n  let char = input[current];\n  let consumedChars = 0;\n  if (pattern.test(char)) {\n    let value = '';\n    while (char && pattern.test(char)) {\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    return [consumedChars, { type, value }];\n  }\n  return [0, null];\n}\n\nfunction tokenizeString(input: any, current: any) {\n  if (input[current] === '\"' || input[current] === \"'\") {\n    const matchQuote = input[current];\n    let value = '';\n    let consumedChars = 0;\n    consumedChars += 1;\n    let char = input[current + consumedChars];\n    while (char !== matchQuote) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    return [consumedChars + 1, { type: 'string', value }];\n  }\n  return [0, null];\n}\n\nfunction tokenizeFunction(input: any, current: any) {\n  if (/[a-z_]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (char && /[:a-z0-9_-]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    while (char && /\\s/.test(char)) {\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char && char === '(') {\n      return [consumedChars, { type: 'function', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeNumber(input: any, current: any) {\n  if (/[0-9]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (/[0-9]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char !== '.') {\n      return [consumedChars, { type: 'number', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeDecimal(input: any, current: any) {\n  if (/[0-9.]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (/[0-9]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char === '.') {\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n      if (/[0-9]/i.test(char)) {\n        while (/[0-9]/i.test(char)) {\n          if (char === undefined) {\n            throw new TypeError('unterminated string ');\n          }\n          value += char;\n          consumedChars += 1;\n          char = input[current + consumedChars];\n        }\n        return [consumedChars, { type: 'decimal', value }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeVariable(input: any, current: any) {\n  if (input[current] === '#' || input[current] === '$') {\n    if (input[current + 1] && input[current + 1] === '{') {\n      let value = '';\n      let consumedChars = 1;\n      consumedChars += 1;\n      let char = input[current + consumedChars];\n      while (char !== '}') {\n        if (char === undefined) {\n          throw new TypeError('unterminated string ');\n        }\n        value += char;\n        consumedChars += 1;\n        char = input[current + consumedChars];\n      }\n      return [consumedChars + 1, { type: 'variable', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeOr(input: any, current: any) {\n  if (input[current] === 'o') {\n    if (input[current + 1] && input[current + 1] === 'r') {\n      if (\n        input[current + 2] === undefined ||\n        /[0-9\\s]/.test(input[current + 2])\n      ) {\n        return [2, { type: 'or', value: 'or' }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeIf(input: any, current: any) {\n  if (input[current] === 'i') {\n    if (input[current + 1] && input[current + 1] === 'f') {\n      if (\n        input[current + 2] === undefined ||\n        !/[a-z]i/.test(input[current + 2])\n      ) {\n        return [2, { type: 'if', value: 'if' }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeAnd(input: any, current: any) {\n  if (input[current] === 'a') {\n    if (input[current + 1] && input[current + 1] === 'n') {\n      if (input[current + 2] && input[current + 2] === 'd') {\n        if (\n          input[current + 3] === undefined ||\n          /[0-9\\s]/.test(input[current + 3])\n        ) {\n          return [3, { type: 'and', value: 'and' }];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeDiv(input: any, current: any) {\n  if (input[current] === 'd') {\n    if (input[current + 1] && input[current + 1] === 'i') {\n      if (input[current + 2] && input[current + 2] === 'v') {\n        if (\n          input[current + 3] === undefined ||\n          /[0-9\\s]/.test(input[current + 3])\n        ) {\n          return [3, { type: 'divide', value: '/' }];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeName(input: any, current: any) {\n  return tokenizePattern('name', /[a-z]/i, input, current);\n}\n\nfunction skipWhiteSpace(input: any, current: any) {\n  return /\\s/.test(input[current]) ? [1, null] : [0, null];\n}\n\nconst tokenizers = [\n  skipWhiteSpace,\n  tokenizeParenOpen,\n  tokenizeParenClose,\n  tokenizeIf,\n  tokenizeOr,\n  tokenizeAnd,\n  tokenizeVariable,\n  tokenizeString,\n  tokenizeFunction,\n  tokenizeEqual,\n  tokenizePlus,\n  tokenizeMinus,\n  tokenizeMultiply,\n  tokenizeDivide,\n  tokenizeDiv,\n  tokenizeLessThan,\n  tokenizeGreaterThan,\n  tokenizeNot,\n  tokenizeBrakeOpen,\n  tokenizeBrakeClose,\n  tokenizeDot,\n  tokenizeComma,\n  tokenizeNumber,\n  tokenizeDecimal,\n  tokenizeName,\n];\n\nfunction tokenizer(input: any) {\n  let current: number = 0;\n  const tokens: any = [];\n  while (current < input.length) {\n    let tokenized = false;\n    tokenizers.forEach(tokenizerFn => {\n      if (tokenized) {\n        return;\n      }\n      const [consumedChars, token]: any = tokenizerFn(input, current);\n      if (consumedChars !== 0) {\n        tokenized = true;\n        current += consumedChars;\n      }\n      if (token) {\n        tokens.push(token);\n      }\n    });\n    if (!tokenized) {\n      throw new TypeError(\n        `I dont know what this character is: ${input[current]}`\n      );\n    }\n  }\n  return tokens;\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSelected(funcName: any, params: any, _paramsTokens: any) {\n  if (funcName === 'selected') {\n    let tmp = false;\n    if (Array.isArray(params[0])) {\n      params[0].forEach((element: any) => {\n        // tslint:disable-next-line: triple-equals\n        tmp = tmp || element == params[1];\n      });\n      return [true, tmp];\n    }\n    // tslint:disable-next-line: triple-equals\n    return [true, params[0] == params[1]];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbToday(funcName: any, _params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'today') {\n    const d = new Date();\n    d.setHours(0, 0, 0, 0);\n    return [true, d];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbRound(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'round') {\n    if (params[0] && params[1]) {\n      if (typeof params[0] === 'number' && typeof params[1] === 'number') {\n        return [true, params[0].toFixed(params[1])];\n      }\n      if (typeof params[0] === 'string' && typeof params[1] === 'number') {\n        return [true, parseFloat(params[0]).toFixed(params[1])];\n      }\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbRegex(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'regex') {\n    const regex = RegExp(params[1]);\n    return [true, regex.test(params[0])];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbCountSelected(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'count-selected') {\n    if (params[0] && Array.isArray(params[0])) {\n      return [true, params[0].length];\n    }\n    if (params[0] && typeof params[0] !== 'object') {\n      return [true, 1];\n    }\n    return [true, 0];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbInt(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'int') {\n    if (typeof params[0] === 'string') {\n      return [true, parseInt(params[0], 10)];\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbCoalesce(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'coalesce') {\n    if (!params[0] && params[0] !== 0) {\n      return [true, params[1]];\n    }\n    return [true, params[0]];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbPosition(funcName: any, _params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'position') {\n    if (currentHierarchicalName) {\n      const tmpName = currentHierarchicalName.split('/');\n      if (tmpName.length > 2) {\n        return [true, parseInt(tmpName[tmpName.length - 2], 10) + 1];\n      }\n    }\n  }\n  return [false, null];\n}\n\nfunction sumValuesOverJsn(sum: any, jsnObj: any, variableName: any) {\n  if (Array.isArray(jsnObj)) {\n    let i;\n    for (i = 0; i < jsnObj.length; i += 1) {\n      sum = sumValuesOverJsn(sum, jsnObj[i], variableName);\n    }\n  } else if (typeof jsnObj === 'object') {\n    for (const key in jsnObj) {\n      if (typeof jsnObj[key] === 'object') {\n        sum = sumValuesOverJsn(sum, jsnObj[key], variableName);\n      } else if (key === variableName) {\n        if (typeof jsnObj[key] === 'string') {\n          sum += parseFloat(jsnObj[key]);\n        }\n        if (typeof jsnObj[key] === 'number') {\n          sum += jsnObj[key];\n        }\n      }\n    }\n  }\n  return sum;\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSum(funcName: any, _params: any, paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'sum') {\n    let sumValue = null;\n    if (\n      paramsTokens &&\n      paramsTokens.length > 0 &&\n      paramsTokens[0] &&\n      paramsTokens[0].length > 0 &&\n      paramsTokens[0][0].type === 'variable'\n    ) {\n      sumValue = sumValuesOverJsn(0, userInput, paramsTokens[0][0].value);\n    }\n    return [true, sumValue];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbConcat(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'concat') {\n    if (params && params.length > 0) {\n      let concatStr = '';\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < params.length; i += 1) {\n        if (params[i] == null) {\n          return [false, null];\n        }\n        concatStr += params[i];\n      }\n      return [true, concatStr];\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSubstr(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'substr') {\n    if (params && params.length > 0) {\n      if (params[0] && params[1] !== null) {\n        if (params[2] !== null && params[2] < params[0].length) {\n          const subStr = params[0].substring(params[1], params[2]);\n          return [true, subStr];\n        }\n        return [true, params[0].substring(params[1])];\n      }\n    }\n  }\n  return [false, null];\n}\n\nfunction outerScopedVariables(\n  variableName: any,\n  variableValue: any,\n  tmpUserInput: any\n): any {\n  // tslint:disable-next-line: forin\n  for (const key in tmpUserInput) {\n    const nodeNames = key.split('/');\n    const variableNameFromKey = nodeNames[nodeNames.length - 1];\n    if (variableNameFromKey === variableName) {\n      return tmpUserInput[key];\n    }\n    if (typeof tmpUserInput[key] === 'object') {\n      if (variableValue == null) {\n        variableValue = outerScopedVariables(\n          variableName,\n          variableValue,\n          tmpUserInput[key]\n        );\n      }\n    }\n  }\n  return variableValue;\n}\n\nfunction parseMostClosestScopedVariable(variableName: any) {\n  const tmpHierchicalName = currentHierarchicalName.split('/');\n  let i;\n  const tmpUserInput = userInput;\n  let variableValue = null;\n  variableValue = outerScopedVariables(\n    variableName,\n    variableValue,\n    tmpUserInput\n  );\n  let parent = '';\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\n    // tslint:disable-next-line: triple-equals\n    if (tmpHierchicalName[i] == 'repeat') {\n      i += 1;\n      const index = parseInt(tmpHierchicalName[i + 1], 10);\n      variableValue = outerScopedVariables(\n        variableName,\n        variableValue,\n        tmpUserInput[parent + tmpHierchicalName[i]][index]\n      );\n      i += 2;\n    } else {\n      // path.push(parent + tmpHierchicalName[i + 1]);\n      parent = parent + tmpHierchicalName[i + 1] + '/';\n      i += 2;\n    }\n  }\n  return variableValue;\n}\n\nfunction parseDot() {\n  const tmpHierchicalName = currentHierarchicalName.split('/');\n  let i;\n  let tmpUserInput = userInput;\n  let parent = '';\n  const path = [];\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\n    // tslint:disable-next-line: triple-equals\n    if (tmpHierchicalName[i] == 'repeat') {\n      i += 1;\n      path.push(parent + tmpHierchicalName[i]);\n      path.push(parseInt(tmpHierchicalName[i + 1], 10));\n      parent = parent + tmpHierchicalName[i] + '/';\n      i += 2;\n    } else {\n      // path.push(parent + tmpHierchicalName[i + 1]);\n      parent = parent + tmpHierchicalName[i + 1] + '/';\n      i += 2;\n    }\n  }\n  path.push(parent + tmpHierchicalName[tmpHierchicalName.length - 1]);\n  tmpUserInput = userInput.getIn(path);\n  return tmpUserInput;\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseLiterals(_tmpOutput: any, tokens: any, current: any) {\n  if (tokens[current].type === 'number') {\n    return [1, parseInt(tokens[current].value, 10)];\n  }\n  if (tokens[current].type === 'string') {\n    return [1, tokens[current].value];\n  }\n  if (tokens[current].type === 'decimal') {\n    return [1, parseFloat(tokens[current].value)];\n  }\n  if (tokens[current].type === 'variable') {\n    return [1, parseMostClosestScopedVariable(tokens[current].value)];\n  }\n  if (tokens[current].type === 'name') {\n    if (tokens[current].value.toLowerCase() === 'true') {\n      return [1, true];\n    }\n    if (tokens[current].value.toLowerCase() === 'false') {\n      return [1, false];\n    }\n    if (tokens[current].value in formItemProperty) {\n      return [1, formItemProperty[tokens[current].value]];\n    }\n    return [1, null];\n  }\n  if (tokens[current].type === 'dot') {\n    return [1, parseDot()];\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseFunction(_output: any, tokens: any, current: any) {\n  const possibleFunctions = [\n    kbSelected,\n    kbCountSelected,\n    kbToday,\n    kbRegex,\n    kbInt,\n    kbCoalesce,\n    kbPosition,\n    kbSum,\n    kbConcat,\n    kbSubstr,\n    kbRound,\n  ];\n  if (tokens[current].type === 'function') {\n    const funcName = tokens[current].value;\n    const arrayOfParams: any = [];\n    const arrayOfOriginalTokens: any = [];\n    let i = 1;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      const tmpQueue = [];\n      tmpQueue.push(1);\n      i += 1;\n      let tmpTokens = [];\n      while (tokens[current + i] && tmpQueue.length) {\n        tmpTokens.push(tokens[current + i]);\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === ')'\n        ) {\n          tmpQueue.pop();\n        }\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === '('\n        ) {\n          tmpQueue.push(1);\n        }\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\n          tmpTokens.pop();\n          const tmpVal = parser(null, tmpTokens, 0);\n          arrayOfParams.push(tmpVal);\n          arrayOfOriginalTokens.push(tmpTokens);\n          tmpTokens = [];\n        }\n        i += 1;\n      }\n      i -= 1;\n\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpTokens.pop();\n        const tmpVal = parser(null, tmpTokens, 0);\n        arrayOfParams.push(tmpVal);\n        arrayOfOriginalTokens.push(tmpTokens);\n        let parsedFn = false;\n        let parsedVal = null;\n        possibleFunctions.forEach(functionFn => {\n          if (parsedFn) {\n            return;\n          }\n          [parsedFn, parsedVal] = functionFn(\n            funcName,\n            arrayOfParams,\n            arrayOfOriginalTokens\n          );\n        });\n        if (parsedFn) {\n          return [i + 1, parsedVal];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseIf(_output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'if') {\n    const arrayOfParams = [];\n    let i = 1;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      const tmpQueue = [];\n      tmpQueue.push(1);\n      i += 1;\n      let tmpTokens = [];\n      while (tokens[current + i] && tmpQueue.length) {\n        tmpTokens.push(tokens[current + i]);\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === ')'\n        ) {\n          tmpQueue.pop();\n        }\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === '('\n        ) {\n          tmpQueue.push(1);\n        }\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\n          tmpTokens.pop();\n          const tmpVal = parser(null, tmpTokens, 0);\n          arrayOfParams.push(tmpVal);\n          tmpTokens = [];\n        }\n        i += 1;\n      }\n      i -= 1;\n\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpTokens.pop();\n        const tmpVal = parser(null, tmpTokens, 0);\n        arrayOfParams.push(tmpVal);\n        if (arrayOfParams.length % 2 === 0) {\n          let j;\n          for (j = 0; j < arrayOfParams.length; j += 2) {\n            if (arrayOfParams[j]) {\n              return [i + 1, arrayOfParams[j + 1]];\n            }\n          }\n        } else {\n          let j;\n          for (j = 0; j < arrayOfParams.length - 1; j += 2) {\n            if (arrayOfParams[j]) {\n              return [i + 1, arrayOfParams[j + 1]];\n            }\n          }\n          return [i + 1, arrayOfParams[arrayOfParams.length - 1]];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseNot(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'not') {\n    let tmpTokens;\n    let i = 1;\n    if (tokens[current + i].type === 'equal' && output != null) {\n      tmpTokens = [];\n      i += 1;\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      let newOutput;\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n        // tslint:disable-next-line: triple-equals\n        return [i, output != newOutput];\n      }\n    } else {\n      let parsed = false;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      let consumedTokens;\n      let newOutput;\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          i += consumedTokens;\n        }\n      });\n      if (parsed) {\n        return [i, !newOutput];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseAnd(output: any, tokens: any, current: any): any {\n  if (tokens[current].type === 'and' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    let newOutput = null;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      let consumedChars;\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\n      i += consumedChars;\n    } else {\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n      }\n    }\n    if (newOutput != null) {\n      newOutput = output && newOutput;\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\n        let consumedChars = 0;\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\n        i += consumedChars;\n      }\n      return [i, newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseOr(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'or' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    let newOutput = null;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      let consumedChars;\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\n      i += consumedChars;\n    } else {\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n      }\n    }\n    if (newOutput != null) {\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\n        let consumedChars = 0;\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\n        i += consumedChars;\n      }\n      return [i, output || newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseEqual(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'equal' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n      // tslint:disable-next-line: triple-equals\n      return [i, output == newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseLessThan(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'lessThan' && output != null) {\n    let flagLessThanOrEqual = false;\n    const tmpTokens = [];\n    let i = 1;\n    if (tokens[current + i].type === 'equal') {\n      i += 1;\n      flagLessThanOrEqual = true;\n    }\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n      if (flagLessThanOrEqual) {\n        return [i, output <= newOutput];\n      }\n      return [i, output < newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseGreaterThan(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'greaterThan' && output != null) {\n    let flagGreaterThanOrEqual = false;\n    const tmpTokens = [];\n    let i = 1;\n    if (tokens[current + i].type === 'equal') {\n      i += 1;\n      flagGreaterThanOrEqual = true;\n    }\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n\n      if (flagGreaterThanOrEqual) {\n        return [i, output >= newOutput];\n      }\n      return [i, output > newOutput];\n    }\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseParen(_output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'paren' && tokens[current].value === '(') {\n    const tmpQueue = [];\n    tmpQueue.push(1);\n    let i = 1;\n    const tmpTokens = [];\n    while (tokens[current + i] && tmpQueue.length) {\n      tmpTokens.push(tokens[current + i]);\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpQueue.pop();\n      }\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === '('\n      ) {\n        tmpQueue.push(1);\n      }\n      i += 1;\n    }\n    i -= 1;\n\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === ')'\n    ) {\n      tmpTokens.pop();\n      const tmpVal = parser(null, tmpTokens, 0);\n      return [i + 1, tmpVal];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseDivide(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'divide') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n        }\n        const precedentParsers = [parseDivide, parseMultiply];\n        let preParsed = false;\n        let preOutput;\n        precedentParsers.forEach(preParseFn => {\n          if (preParsed) {\n            return;\n          }\n          if (tokens[current]) {\n            [consumedTokens, preOutput] = preParseFn(\n              newOutput,\n              tokens,\n              current\n            );\n            ct += consumedTokens;\n            if (consumedTokens !== 0) {\n              preParsed = true;\n              newOutput = preOutput;\n            }\n          }\n        });\n\n        if (newOutput != null) {\n          output /= newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseMultiply(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'multiply') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n        }\n        const precedentParsers = [parseDivide, parseMultiply];\n        let preParsed = false;\n        let preOutput;\n        precedentParsers.forEach(preParseFn => {\n          if (preParsed) {\n            return;\n          }\n          if (tokens[current]) {\n            [consumedTokens, preOutput] = preParseFn(\n              newOutput,\n              tokens,\n              current\n            );\n            ct += consumedTokens;\n            if (consumedTokens !== 0) {\n              preParsed = true;\n              newOutput = preOutput;\n            }\n          }\n        });\n\n        if (newOutput != null) {\n          output *= newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parsePlus(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'plus') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'string',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n          const precedentParsers = [parseDivide, parseMultiply];\n          let preParsed = false;\n          let preOutput;\n          precedentParsers.forEach(preParseFn => {\n            if (preParsed) {\n              return;\n            }\n            if (tokens[current]) {\n              [consumedTokens, preOutput] = preParseFn(\n                newOutput,\n                tokens,\n                current\n              );\n              ct += consumedTokens;\n              if (consumedTokens !== 0) {\n                preParsed = true;\n                newOutput = preOutput;\n              }\n            }\n          });\n        }\n        if (newOutput != null) {\n          output += newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseMinus(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'minus') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [parseLiterals, parseParen, parseFunction];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n          const precedentParsers = [parseDivide, parseMultiply];\n          let preParsed = false;\n          let preOutput;\n          precedentParsers.forEach(preParseFn => {\n            if (preParsed) {\n              return;\n            }\n            if (tokens[current]) {\n              [consumedTokens, preOutput] = preParseFn(\n                newOutput,\n                tokens,\n                current\n              );\n              ct += consumedTokens;\n              if (consumedTokens !== 0) {\n                preParsed = true;\n                newOutput = preOutput;\n              }\n            }\n          });\n        }\n        if (newOutput) {\n          if (output) {\n            if (\n              Object.prototype.toString.call(newOutput) === '[object Date]' &&\n              Object.prototype.toString.call(output) === '[object Date]'\n            ) {\n              if (!isNaN(output.getTime()) && !isNaN(newOutput.getTime())) {\n                output -= newOutput;\n                output = Math.ceil(output / (1000 * 60 * 60 * 24));\n              } else {\n                output = NaN;\n              }\n            } else if (\n              Object.prototype.toString.call(newOutput) === '[object Date]' ||\n              Object.prototype.toString.call(output) === '[object Date]'\n            ) {\n              output = NaN;\n            } else if (newOutput === '' || output === '') {\n              output = NaN;\n            } else {\n              output -= newOutput;\n            }\n          } else {\n            if (Object.prototype.toString.call(newOutput) === '[object Date]') {\n              output = NaN;\n            } else {\n              output = -newOutput;\n            }\n          }\n        } else {\n          output = NaN;\n        }\n      });\n      if (parsed) {\n        if (output === '') {\n          output = NaN;\n        }\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nconst parsers = [\n  parseIf,\n  parseParen,\n  parseLiterals,\n  parseDivide,\n  parseMultiply,\n  parsePlus,\n  parseMinus,\n  parseLessThan,\n  parseGreaterThan,\n  parseEqual,\n  parseAnd,\n  parseOr,\n  parseNot,\n  parseFunction,\n];\n\nfunction parser(leftOutput: any, tokens: any, pos: any) {\n  let current = pos;\n  let output = leftOutput;\n  while (current < tokens.length) {\n    let parsed = false;\n    parsers.forEach(parserFn => {\n      if (parsed) {\n        return;\n      }\n      const [consumedTokens, newOutput] = parserFn(output, tokens, current);\n      if (consumedTokens !== 0) {\n        parsed = true;\n        current += consumedTokens;\n      }\n      if (newOutput != null) {\n        output = newOutput;\n      }\n    });\n    if (!parsed) {\n      // throw new TypeError('syntax error');\n      // tslint:disable-next-line: no-console\n      console.log('syntax error');\n      // tslint:disable-next-line: no-console\n      console.log(actualExpression);\n      return null;\n    }\n  }\n  return output;\n}\n\nexport default function evaluater(\n  expression: string,\n  tmpUserInput: any,\n  tmpFormItemProperty: any,\n  tmpCurrentHierarchicalName: string\n) {\n  if (!tmpUserInput) {\n    tmpUserInput = {};\n  }\n  currentHierarchicalName = tmpCurrentHierarchicalName;\n  actualExpression = expression;\n  userInput = tmpUserInput;\n  formItemProperty = tmpFormItemProperty;\n  return parser(null, tokenizer(expression), 0);\n}\n","import { FieldElement } from '../components/typeEvalutors/Base';\n\n/**\n * get the text from multilang obj based on language identifier,\n * @param {FieldElement} property - field multilang property or string\n * @return {string} - text value of the property based on language identifier, empty if not present\n */\nexport default function getTextFromProperty(\n  property: string | { [key: string]: string },\n  languageIdentifier: string\n): string {\n  if (typeof property === 'string') {\n    return property || '';\n  }\n  return property[languageIdentifier] || '';\n}\n\n/**\n * get the label text of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field label text\n */\nexport function getFieldLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.label) {\n    return getTextFromProperty(fieldElement.label, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the label hint of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field label text\n */\nexport function getHintLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.hint) {\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the customised label text with previous input of the fieldElement\n * @param {any} evaluator - the getEvaluatedExpressionSelector Function\n * @param {string} labelText - the current Label Text\n * @param {string} fieldTreeName - the field tree name\n * @return {string | null} - field label text or null\n */\nexport function customizeLabelsWithPreviousInputs(\n  evaluator: any,\n  labelText: string,\n  fieldTreeName: string\n): string | null {\n  if (labelText === null || labelText === undefined) {\n    return null;\n  }\n  const placesOfCustomizationsRequiredList = labelText.match(/\\[(.*?)\\]/g);\n\n  if (placesOfCustomizationsRequiredList) {\n    placesOfCustomizationsRequiredList.forEach(tmpPlace => {\n      tmpPlace = tmpPlace.substring(1, tmpPlace.length - 1);\n      const customizedName = evaluator(tmpPlace, fieldTreeName);\n      const tmp = '[' + tmpPlace + ']';\n      if (customizedName != null && customizedName !== undefined) {\n        labelText = labelText.replace(tmp, customizedName);\n      } else {\n        labelText = labelText.replace(tmp, '');\n      }\n    });\n  }\n\n  return labelText;\n}\n\n/**\n * get the hint text of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field hint text\n */\nexport function getFieldHintText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.hint) {\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the label text of the fieldElement constraint msg\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - constraint label text\n */\nexport function getConstraintLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.bind && fieldElement.bind['jr:constraintMsg']) {\n    return getTextFromProperty(\n      fieldElement.bind['jr:constraintMsg'],\n      languageIdentifier\n    );\n  }\n  return '';\n}\n\n/**\n * get the boolean result depending on the expression\n * @param {string} - required string\n * @returns {boolean} - true if required, otherwise false\n */\nfunction requiredEvaluator(expression: string): boolean {\n  if (\n    expression.toLowerCase() === 'yes' ||\n    expression === '1' ||\n    expression.toLowerCase() === 'true'\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * get the boolean result of fieldElement string\n * @param fieldElement\n * @return {boolean} - boolean value by calculating fieldElement required properties\n */\nexport function isInputRequired(fieldElement: FieldElement): boolean {\n  let isRequired = false;\n  if (fieldElement.bind) {\n    if (fieldElement.bind.required) {\n      if (\n        typeof fieldElement.bind.required === 'string' &&\n        requiredEvaluator(fieldElement.bind.required)\n      ) {\n        isRequired = true;\n      }\n    }\n  }\n  return isRequired;\n}\n\n/** interface for EvaluateExpression\n * @param {string} expression - the expression that needs to be evaluated\n * @param {fieldTreeName} - the field Tree name\n * @returns {any} - evaluated value\n */\nexport type EvaluateExpression = (\n  expression: string,\n  fieldTreeName: string\n) => any;\n\n/** evaluates whether a component be relevant or not\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the relevant expression\n * @returns {boolean} - true if relevant; otherwise, false;\n */\nexport function shouldComponentBeRelevant(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.relevant) {\n    const isRelevant = evaluateExpression(\n      fieldElement.bind.relevant,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isRelevant) {\n      return true;\n    }\n    return false;\n  }\n  return true;\n}\n\n/** evaluates whether a component be readonly or not\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the readonly expression\n * @returns {boolean} - true if readonly; otherwise, false;\n */\nexport function shouldComponentBeReadOnly(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.readonly) {\n    const isReadOnly = evaluateExpression(\n      fieldElement.bind.readonly,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isReadOnly) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/** evaluates whether the input violates constraint or not\n * @param {FieldElement} fieldElement - the constraint expression\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the expression\n * @returns {boolean} - true if violates; otherwise, false;\n */\nexport function shouldInputViolatesConstraint(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.constraint) {\n    const isConstraintViolated = !evaluateExpression(\n      fieldElement.bind.constraint,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isConstraintViolated) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/** returns the new user input object after assigning value of passed fieldTreeName\n * @param {any} userInputObj - the current user input object\n * @param {string} fieldTreeName - the field Tree name\n * @param {any} fieldValue - the value that needs to be assigned\n * @returns {any} - the new user input object after assignment\n */\nexport function getModifiedUserInputObject(\n  userInputObj: any,\n  fieldTreeName: string,\n  fieldValue: any\n): any {\n  const treeNodes = fieldTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  modifiedObj[parent + treeNodes[treeNodes.length - 1]] = fieldValue;\n  return userInputObj;\n}\n\n/** Returns the filtered option list Array For Repeat property\n * @param {any} userInputObj - the current option list object\n * @param {string} fieldTreeName - the field Tree name\n * @param {any} repeatIndex - the repeat index to remove\n * @returns {any} - the new user filredred repear array after assignment\n */\nexport function getModifiedOptionListForRepeat(\n  userInputObj: any,\n  fieldTreeName: string,\n  repeatIndex: number\n): any {\n  const filteredRepeatArray: any = [];\n  const optionListobj: any = userInputObj;\n\n  Object.entries(optionListobj).forEach(key => {\n    const keyNameOptionListobj: any = key[0];\n    const keyValueOptionListobj: any = key[1];\n    if (keyNameOptionListobj === fieldTreeName) {\n      const repeatIndexString: string = String(repeatIndex);\n      Object.entries(keyValueOptionListobj).map(keyRepeat => {\n        const keyNameRepeatObject: any = keyRepeat[0];\n        const keyValueRepeatValue: any = keyRepeat[1];\n        if (keyNameRepeatObject !== repeatIndexString) {\n          filteredRepeatArray.push(keyValueRepeatValue);\n        }\n      });\n    }\n  });\n  return filteredRepeatArray;\n}\n\n/** returns the value from the user input object\n * @param {any} userInputObj - the user input object\n * @param {string} fieldTreeName - the field Tree name\n * @returns {any} - the value, present in user input object, of the fieldTreeName\n */\nexport function getValueFromUserInputObj(\n  userInputObj: any,\n  fieldTreeName: string\n): any {\n  const treeNodes = fieldTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  return modifiedObj[parent + treeNodes[treeNodes.length - 1]];\n}\n\n/** evaluates whether the component is minimal or not\n * @param {FieldElement} fieldElement - the constraint expression\n * @returns {boolean} - true if minimal; otherwise, false;\n */\nexport function shouldComponentBeMinimal(fieldElement: FieldElement): boolean {\n  let isMinimal = false;\n  if (fieldElement.control && fieldElement.control.appearance) {\n    fieldElement.control.appearance.toString().includes('minimal')\n      ? (isMinimal = true)\n      : (isMinimal = false);\n  }\n  return isMinimal;\n}\n\n/** returns the new user input object after emptying the desired grouped values\n * @param {any} userInputObj - the current user input object\n * @param {string} groupTreeName - the group Tree name\n * @returns {any} - the new user input object after emptying the grouped values\n */\nexport function emptyGroupedValues(\n  userInputObj: any,\n  groupTreeName: string\n): any {\n  const treeNodes = groupTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  Object.keys(modifiedObj).forEach(objKey => {\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\n      modifiedObj[objKey] = null;\n    }\n  });\n  return userInputObj;\n}\n\n/** returns whether the grouped values are empty or not\n * @param {any} userInputObj - the current user input object\n * @param {string} groupTreeName - the group Tree name\n * @returns {any} - true if empty; otherwise, false\n */\nexport function checkGroupedValuesForEmpty(\n  userInputObj: any,\n  groupTreeName: string\n): any {\n  const treeNodes = groupTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  let isEmpty: boolean = true;\n  Object.keys(modifiedObj).forEach(objKey => {\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\n      if (\n        modifiedObj[objKey] !== null &&\n        modifiedObj[objKey] !== undefined &&\n        isEmpty\n      ) {\n        isEmpty = false;\n      }\n    }\n  });\n  return isEmpty;\n}\n","import { AnyAction, Store } from 'redux';\nimport SeamlessImmutable from 'seamless-immutable';\nimport evaluater from '../../utils/compiler';\nimport {\n  checkGroupedValuesForEmpty,\n  emptyGroupedValues,\n  getModifiedOptionListForRepeat,\n  getModifiedUserInputObject,\n  getValueFromUserInputObj,\n} from '../../utils/helpers';\n\n/** interface for the store state */\nexport interface FormState {\n  userInput: object;\n  errors: string[];\n  optionList: object;\n}\n\n// actions\n\n/** FIELD_VALUE_ASSIGNED action type */\nexport const FIELD_VALUE_ASSIGNED = 'odk/reducer/form/FIELD_VALUE_ASSIGNED';\n/** OPTION_LIST_ASSIGNED action type */\nexport const OPTION_LIST_ASSIGNED = 'odk/reducer/form/OPTION_LIST_ASSIGNED';\n/** REMOVE_FROM_OPTION_LIST action type */\nexport const REMOVE_FROM_OPTION_LIST_REPEAT =\n  'odk/reducer/form/REMOVE_FROM_OPTION_LIST_REPEAT';\n/** RESET_STORE action type */\nexport const RESET_STORE = 'odk/reducer/form/RESET_STORE';\n/** ADD_ERROR_INPUT_ID action type */\nexport const ADD_ERROR_INPUT_ID = 'odk/reducer/form/ADD_ERROR_INPUT_ID';\n/** REMOVE_ERROR_INPUT_ID action type */\nexport const REMOVE_ERROR_INPUT_ID = 'odk/reducer/form/REMOVE_ERROR_INPUT_ID';\n/** EMPTY_GROUP_FIELDS */\nexport const EMPTY_GROUP_FIELDS = 'odk/reducer/form/EMPTY_GROUP_FIELDS';\n/** REMOVE_GROUP_FIELDS_FROM_ERRORS */\nexport const REMOVE_GROUP_FIELDS_FROM_ERRORS =\n  'odk/reducer/form/REMOVE_GROUP_FIELDS_FROM_ERRORS';\nexport const SET_USER_INPUT_OBJ = 'odk/reducer/form/SET_USER_INPUT_OBJ';\n\n/** interface for ASSIGN_FIELD_VALUE action */\nexport interface AssignFieldValueAction extends AnyAction {\n  fieldTreeName: string;\n  fieldValue: any;\n  type: typeof FIELD_VALUE_ASSIGNED;\n}\n\n/** interface for OPTION_LIST_ASSIGNED action */\nexport interface AssignOptionListAction extends AnyAction {\n  fieldTreeName: string;\n  optionList: any;\n  type: typeof OPTION_LIST_ASSIGNED;\n}\n\n/** interface for REMOVE_FROM_OPTION_LIST action */\nexport interface RemoveFromOptionList extends AnyAction {\n  fieldTreeName: string;\n  repeatIndex: number;\n  type: typeof REMOVE_FROM_OPTION_LIST_REPEAT;\n}\n\n/** interface for RESET_STORE action */\nexport interface ResetStoreAction extends AnyAction {\n  type: typeof RESET_STORE;\n}\n\n/** interface for ADD_ERROR_INPUT_ID action */\nexport interface AddErrorInputId extends AnyAction {\n  fieldTreeName: string;\n  type: typeof ADD_ERROR_INPUT_ID;\n}\n\n/** interface for REMOVE_ERROR_INPUT_ID action */\nexport interface RemoveErrorInputId extends AnyAction {\n  fieldTreeName: string;\n  type: typeof REMOVE_ERROR_INPUT_ID;\n}\n\n/** interface for EMPTY_GROUP_FIELDS action */\nexport interface EmptyGroupFields extends AnyAction {\n  fieldTreeName: string;\n  type: typeof EMPTY_GROUP_FIELDS;\n}\n\n/** interface for REMOVE_GROUP_FIELDS_FROM_ERRORS action */\nexport interface RemoveGroupFieldsFromErrors extends AnyAction {\n  fieldTreeName: string;\n  type: typeof REMOVE_GROUP_FIELDS_FROM_ERRORS;\n}\n\n/** interface for SET_USER_INPUT_OBJ action */\nexport interface SetUserInputObj extends AnyAction {\n  userInputObj: any;\n  type: typeof SET_USER_INPUT_OBJ;\n}\n\n/** Assigns the value to the proper field name\n * @param {string} fieldTreeName - the extended field name\n * @param {any} fieldValue - the value that will be assigned\n * @return {AssignFieldValueAction} - an action to assign value to a field in the redux store\n */\nexport const assignFieldValueAction = (\n  fieldTreeName: string,\n  fieldValue: any\n): AssignFieldValueAction => ({\n  fieldTreeName,\n  fieldValue,\n  type: FIELD_VALUE_ASSIGNED,\n});\n\n/** Assigns option list to the proper field name\n * @param {string} fieldTreeName - the extended field name\n * @param {any} fieldValue - the option list that will be assigned\n * @return {AssignOptionListAction} - an action to assign option List to a field in the redux store\n */\nexport const assignOptionListAction = (\n  fieldTreeName: string,\n  optionList: any\n): AssignOptionListAction => ({\n  fieldTreeName,\n  optionList,\n  type: OPTION_LIST_ASSIGNED,\n});\n\n/** Remove option list from Redux Store\n * @param fieldTreeName - the field tree name\n * @returns {RemoveFromOptionList} - an action to remove input id for errors\n */\nexport const RemoveFromOptionList = (\n  fieldTreeName: string,\n  repeatIndex: number\n): RemoveFromOptionList => ({\n  fieldTreeName,\n  repeatIndex,\n  type: REMOVE_FROM_OPTION_LIST_REPEAT,\n});\n\n/** Resets the redux store state to initial state\n * @return {ResetStoreAction} - an action to reset the redux store state\n */\nexport const resetStoreAction = (): ResetStoreAction => ({\n  type: RESET_STORE,\n});\n\n/** add the field tree name as error id to store in redux store that violates constraints\n * @param fieldTreeName - the field tree name\n * @returns {AddErrorInputId} - an action to add input id for errors\n */\nexport const addErrorInputId = (fieldTreeName: string): AddErrorInputId => ({\n  fieldTreeName,\n  type: ADD_ERROR_INPUT_ID,\n});\n\n/** remove the field tree name as error id to store in redux store that violates constraints\n * @param fieldTreeName - the field tree name\n * @returns {RemoveErrorInputId} - an action to remove input id for errors\n */\nexport const removeErrorInputId = (\n  fieldTreeName: string\n): RemoveErrorInputId => ({\n  fieldTreeName,\n  type: REMOVE_ERROR_INPUT_ID,\n});\n\n/** empties the values of the fields of the group\n * @param fieldTreeName - the group field tree name\n * @returns {RemoveErrorInputId} - an action to empty the group field values\n */\nexport const emptyGroupFields = (fieldTreeName: string): EmptyGroupFields => ({\n  fieldTreeName,\n  type: EMPTY_GROUP_FIELDS,\n});\n\n/** removes the group field names from store errors obj\n * @param {string} fieldTreeName - the group field tree name\n * @returns {RemoveGroupFieldsFromErrors} - an action to remove group field names from errors\n */\nexport const removeGroupFieldsFromErrors = (\n  fieldTreeName: string\n): RemoveGroupFieldsFromErrors => ({\n  fieldTreeName,\n  type: REMOVE_GROUP_FIELDS_FROM_ERRORS,\n});\n\n/** sets the user input object to redux store\n * @param {any} userInputObj - the user input obj\n * @returns {SetUserInputObj} - an action to set user input to redux store\n */\nexport const setUserInputObj = (userInputObj: any): SetUserInputObj => ({\n  type: SET_USER_INPUT_OBJ,\n  userInputObj,\n});\n\n/** Create type for forms reducer actions */\nexport type FormActionTypes =\n  | AssignFieldValueAction\n  | AssignOptionListAction\n  | RemoveFromOptionList\n  | ResetStoreAction\n  | AddErrorInputId\n  | RemoveErrorInputId\n  | EmptyGroupFields\n  | RemoveGroupFieldsFromErrors\n  | SetUserInputObj\n  | AnyAction;\n\n/** Create an immutable form state */\nexport type ImmutableFormState = SeamlessImmutable.ImmutableObject<FormState>;\n\n/** initial form state */\nexport const initialState: ImmutableFormState = SeamlessImmutable({\n  errors: [],\n  optionList: {},\n  userInput: {},\n});\n\n/** the form reducer function */\nexport default function reducer(\n  state: ImmutableFormState = initialState,\n  action: FormActionTypes\n): ImmutableFormState {\n  switch (action.type) {\n    case FIELD_VALUE_ASSIGNED:\n      const modifiedUserInputObj = getModifiedUserInputObject(\n        state.getIn(['userInput']).asMutable({ deep: true }),\n        action.fieldTreeName,\n        action.fieldValue\n      );\n      const stateM = state.asMutable({ deep: true });\n      return SeamlessImmutable({ ...stateM, userInput: modifiedUserInputObj });\n    case OPTION_LIST_ASSIGNED:\n      const modifiedUserInputObjList = getModifiedUserInputObject(\n        state.getIn(['optionList']).asMutable({ deep: true }),\n        action.fieldTreeName,\n        action.optionList != null ? { ...action.optionList } : null\n      );\n      const newState = state.asMutable({ deep: true });\n      return SeamlessImmutable({\n        ...newState,\n        optionList: modifiedUserInputObjList,\n      });\n    case REMOVE_FROM_OPTION_LIST_REPEAT:\n      let filteredRepeatArray: any = [];\n      if (\n        state\n          .getIn(['optionList'])\n          .asMutable({ deep: true })\n          .hasOwnProperty(action.fieldTreeName)\n      ) {\n        filteredRepeatArray = [\n          ...getModifiedOptionListForRepeat(\n            state.getIn(['optionList']).asMutable({ deep: true }),\n            action.fieldTreeName,\n            action.repeatIndex\n          ),\n        ];\n        const modifiedOptionListRepeat = getModifiedUserInputObject(\n          state.getIn(['optionList']).asMutable({ deep: true }),\n          action.fieldTreeName,\n          { ...filteredRepeatArray }\n        );\n        const newStateForRepeat = state.asMutable({ deep: true });\n        return SeamlessImmutable({\n          ...newStateForRepeat,\n          optionList: modifiedOptionListRepeat,\n        });\n      }\n      return state;\n    case RESET_STORE:\n      return initialState;\n    case ADD_ERROR_INPUT_ID:\n      if (!state.errors.includes(action.fieldTreeName)) {\n        return state.updateIn(['errors'], arr =>\n          arr.concat([action.fieldTreeName])\n        );\n      }\n      return state;\n    case REMOVE_ERROR_INPUT_ID:\n      if (state.errors.includes(action.fieldTreeName)) {\n        return state.updateIn(['errors'], arr =>\n          arr.filter(elm => elm !== action.fieldTreeName)\n        );\n      }\n      return state;\n    case EMPTY_GROUP_FIELDS:\n      const mUserInputObj = emptyGroupedValues(\n        state.getIn(['userInput']).asMutable({ deep: true }),\n        action.fieldTreeName\n      );\n      const mState = state.asMutable({ deep: true });\n      return SeamlessImmutable({ ...mState, userInput: mUserInputObj });\n    case REMOVE_GROUP_FIELDS_FROM_ERRORS:\n      return state.updateIn(['errors'], arr =>\n        arr.filter(elm => !elm.startsWith(action.fieldTreeName))\n      );\n    case SET_USER_INPUT_OBJ:\n      return SeamlessImmutable({\n        ...state,\n        userInput: (action as any).userInputObj,\n      });\n    default:\n      return state;\n  }\n}\n\n// selectors\n\n/** get the value by their respective element tree name\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} value if the element name is found else null\n */\nexport function getFieldValue(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return getValueFromUserInputObj(\n    (state as any).getIn(['userInput']).asMutable({ deep: true }),\n    fieldTreeName\n  );\n}\n\n/** get option list by their respective element tree name\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} value if the element name is found else null\n */\nexport function getOptionList(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return getValueFromUserInputObj(\n    (state as any).getIn(['optionList']).asMutable({ deep: true }),\n    fieldTreeName\n  );\n}\n\n/** get the value of the evaluated expression\n * @param {Partial<Store>} state - the redux store\n * @param {string} expression - the expression that needs to be evaluated\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} - the evaluated value or null if syntax error\n */\nexport function getEvaluatedExpression(\n  state: Partial<Store>,\n  expression: string,\n  fieldTreeName: string\n): any {\n  return evaluater(expression, (state as any).userInput, null, fieldTreeName);\n}\n\n/** get the value of the evaluated expression for Select One and Select All\n * @param {Partial<Store>} state - the redux store\n * @param {string} expression - the expression that needs to be evaluated\n * @param {any} options - the options that needs to be evaluated\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} - the evaluated value or null if syntax error\n */\nexport function getEvaluatedExpressionForSelect(\n  state: Partial<Store>,\n  expression: string,\n  options: any,\n  fieldTreeName: string\n): any {\n  return evaluater(\n    expression,\n    (state as any).userInput,\n    options,\n    fieldTreeName\n  );\n}\n\n/** check if the field element is present in the store\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {boolean} true if present; otherwise, false\n */\nexport function isPresentInError(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return (state as any).errors.includes(fieldTreeName);\n}\n\n/** check if the field elements under group are empty or not\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the group field\n * @return {boolean} true if empty; otherwise, false\n */\nexport function isGroupFieldsEmpty(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return checkGroupedValuesForEmpty((state as any).userInput, fieldTreeName);\n}\n\n/** check if the field elements under group are present in errors or not\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the group field\n * @return {boolean} true if present; otherwise, false\n */\nexport function isErrorsIncludeGroupFields(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  let isPresent = false;\n  (state as any).errors.forEach((fTName: string) => {\n    if (fTName.startsWith(fieldTreeName) && !isPresent) {\n      isPresent = true;\n    }\n  });\n  return isPresent;\n}\n\n/** check if the errors array in store empty or not\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} true if empty; otherwise, false\n */\nexport function isErrorsArrayEmpty(state: Partial<Store>): any {\n  return (state as any).errors && (state as any).errors.length ? false : true;\n}\n\n/** get the userInput object from store\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} the current userInputObject\n */\nexport function getUserInputFromStore(state: Partial<Store>): any {\n  return (state as any).getIn(['userInput']).asMutable({ deep: true });\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport GroupTypeEvaluator from '../../../../components/typeEvalutors/Group';\nimport {\n  emptyGroupFields,\n  getEvaluatedExpression,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  removeGroupFieldsFromErrors,\n} from '../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../utils/helpers';\n\nexport interface GroupProps {\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n}\n\nclass Group extends React.Component<GroupProps> {\n  public render() {\n    const {\n      csvList,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {fieldElement.children && (\n            <GroupTypeEvaluator\n              fieldElements={fieldElement.children}\n              fieldParentTreeName={\n                fieldParentTreeName + 'group/' + fieldElement.name + '/'\n              }\n              defaultLanguage={defaultLanguage}\n              csvList={csvList}\n            />\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\n        );\n      }\n      if (\n        !this.props.isGroupFieldsEmptySelector(\n          fieldParentTreeName + fieldElement.name\n        )\n      ) {\n        this.props.emptyGroupFieldsActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n};\n\n/** connect Group component to the redux store */\nconst ConnectedGroup = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Group);\n\nexport default ConnectedGroup;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport GroupTypeEvaluator from '../../../../../components/typeEvalutors/Group';\n\nexport interface SingleRepeatProps {\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  defaultLanguage: string;\n  repeatIndex: number;\n  assignmentHandler: any;\n  removeHandler: any;\n  removeOptionHandler: any;\n}\n\nclass SingleRepeat extends React.Component<SingleRepeatProps> {\n  public render() {\n    const {\n      csvList,\n      defaultLanguage,\n      fieldElement,\n      fieldParentTreeName,\n      repeatIndex,\n    } = this.props;\n    return (\n      <div>\n        <div>\n          <span onClick={this.handleChange}>\n            <FontAwesomeIcon icon=\"minus-circle\" />\n          </span>\n        </div>\n        {fieldElement.children && (\n          <GroupTypeEvaluator\n            fieldElements={fieldElement.children}\n            fieldParentTreeName={\n              fieldParentTreeName +\n              'repeat/' +\n              fieldElement.name +\n              '/' +\n              repeatIndex +\n              '/'\n            }\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        )}\n      </div>\n    );\n  }\n\n  // tslint:disable-next-line: variable-name\n  private handleChange = (_event: React.MouseEvent<HTMLDivElement>) => {\n    const {\n      repeatIndex,\n      fieldValue,\n      assignmentHandler,\n      fieldElement,\n      fieldParentTreeName,\n      removeHandler,\n      removeOptionHandler,\n    } = this.props;\n    let newFieldValue: any[] = [...fieldValue];\n    newFieldValue = newFieldValue.filter(\n      // tslint:disable-next-line: variable-name\n      (_elem, index) => index !== repeatIndex\n    );\n    assignmentHandler(fieldParentTreeName + fieldElement.name, newFieldValue);\n    removeHandler(fieldParentTreeName + 'repeat/' + fieldElement.name + '/');\n    removeOptionHandler(fieldParentTreeName + fieldElement.name, repeatIndex);\n  };\n}\n\nexport default SingleRepeat;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport {\n  assignFieldValueAction,\n  emptyGroupFields,\n  getEvaluatedExpression,\n  getFieldValue,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  RemoveFromOptionList,\n  removeGroupFieldsFromErrors,\n} from '../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../utils/helpers';\nimport SingleRepeat from './Single Repeat';\n\nexport interface RepeatProps {\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldValue: any;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\n}\n\nclass Repeat extends React.Component<RepeatProps> {\n  public render() {\n    const {\n      csvList,\n      fieldValue,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n      assignFieldValueActionCreator,\n      removeGroupFieldsFromErrorsActionCreator,\n      removeOptionListFromActionCreator,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (!fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          [{}]\n        );\n      }\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {fieldValue &&\n            // tslint:disable-next-line: variable-name\n            fieldValue.map((_elm: any, index: any) => (\n              <div className=\"repeat-fields-body\" key={'repeat' + index}>\n                <SingleRepeat\n                  defaultLanguage={defaultLanguage}\n                  fieldElement={fieldElement}\n                  fieldParentTreeName={fieldParentTreeName}\n                  fieldValue={fieldValue}\n                  repeatIndex={index}\n                  assignmentHandler={assignFieldValueActionCreator}\n                  removeHandler={removeGroupFieldsFromErrorsActionCreator}\n                  removeOptionHandler={removeOptionListFromActionCreator}\n                  csvList={csvList}\n                />\n              </div>\n            ))}\n          <div>\n            <span onClick={this.addAnotherRepeat}>\n              <FontAwesomeIcon icon=\"plus-circle\" />\n            </span>\n          </div>\n        </FormGroup>\n      );\n    } else {\n      if (\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        );\n      }\n      if (fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  // tslint:disable-next-line: variable-name\n  private addAnotherRepeat = (_event: React.MouseEvent<HTMLDivElement>) => {\n    const { fieldValue, fieldParentTreeName, fieldElement } = this.props;\n    const newFieldValue = [...fieldValue];\n    newFieldValue.push({});\n    this.props.assignFieldValueActionCreator(\n      fieldParentTreeName + fieldElement.name,\n      newFieldValue\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n  removeOptionListFromActionCreator: RemoveFromOptionList,\n};\n\n/** connect Group component to the redux store */\nconst ConnectedRepeat = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Repeat);\n\nexport default ConnectedRepeat;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\n\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the calculate component */\nexport interface CalculateProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Calculate extends React.Component<CalculateProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      let calculatedValue: any = '';\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (calculatedValue !== fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          calculatedValue\n        );\n      }\n      return (\n        <FormGroup>\n          <Input\n            type=\"hidden\"\n            name={fieldElement.name}\n            value={calculatedValue || ''}\n            readOnly={isReadonly}\n          />\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Calculate component to the redux store */\nconst ConnectedCalculate = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Calculate);\n\nexport default ConnectedCalculate;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the KbDate component */\nexport interface DateProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass KbDate extends React.Component<DateProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      let defaultValue: string = '';\n      if (fieldValue && fieldValue !== '') {\n        const modifiedDate = new Date(fieldValue);\n        defaultValue = modifiedDate.toISOString().slice(0, 10);\n      }\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Input\n            type=\"date\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={defaultValue}\n            readOnly={isReadonly}\n          />\n          {fieldElement.hint && <Label>{hintLabel}</Label>}\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? new Date(event.currentTarget.value)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect KbDate component to the redux store */\nconst ConnectedDate = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(KbDate);\n\nexport default ConnectedDate;\n","import * as React from 'react';\nimport DatePicker from 'react-datepicker';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\n/** props interface for the date Time component */\nexport interface DateTimeProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass DateTime extends React.Component<DateTimeProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <br />\n          <DatePicker\n            name={fieldElement.name}\n            selected={fieldValue ? new Date(fieldValue) : null}\n            onChange={this.handleChange(fieldElement.name)}\n            showTimeSelect={true}\n            timeFormat=\"h:m aa\"\n            timeIntervals={15}\n            timeCaption=\"time\"\n            dateFormat=\"MM/dd/yyyy h:mm aa\"\n            placeholderText=\"mm/dd/yyyy h:m aa\"\n            className=\"form-control\"\n            readOnly={isReadonly}\n          />\n          <br />\n          {fieldElement.hint && <Label>{hintLabel}</Label>}\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  private handleChange = (name: any) => (value: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + name,\n      value !== '' ? new Date(value) : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Date Time component to the redux store */\nconst ConnectedDateTime = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DateTime);\n\nexport default ConnectedDateTime;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the decimal component */\nexport interface DecimalProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Decimal extends React.Component<DecimalProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Input\n            type=\"number\"\n            step=\"any\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={fieldValue || fieldValue === 0 ? fieldValue : ''}\n            readOnly={isReadonly}\n          />\n          {fieldElement.hint && <Label>{hintLabel}</Label>}\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? parseFloat(event.currentTarget.value)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedDecimal = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Decimal);\n\nexport default ConnectedDecimal;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the integer component */\nexport interface IntegerProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Integer extends React.Component<IntegerProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Input\n            type=\"number\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={fieldValue || fieldValue === 0 ? fieldValue : ''}\n            readOnly={isReadonly}\n          />\n          {fieldElement.hint && <Label>{hintLabel}</Label>}\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? parseInt(event.currentTarget.value, 10)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Integer component to the redux store */\nconst ConnectedInteger = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Integer);\n\nexport default ConnectedInteger;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, FormText, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the text component */\nexport interface NoteProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isPresentInErrorSelector: any;\n  isComponentRender: boolean;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Note extends React.Component<NoteProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const fieldHint = getHintLabelText(fieldElement, defaultLanguage);\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          {fieldElement.hint && <FormText>{fieldHint}</FormText>}\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(fieldElement.name, null);\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue:\n      getFieldValue(state, fieldParentTreeName + fieldElement.name) || '',\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Note component to the redux store */\nconst ConnectedNote = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Note);\n\nexport default ConnectedNote;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport { FieldElement } from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  assignFieldValueAction,\n  getFieldValue,\n} from '../../../../store/ducks/formState';\nimport { getFieldLabelText, isInputRequired } from '../../../../utils/helpers';\n\n/** props interface for the photo component */\nexport interface PhotoProps {\n  fieldElement: FieldElement;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  defaultLanguage: string;\n}\n\nclass Photo extends React.Component<PhotoProps> {\n  public render() {\n    const { fieldElement, fieldValue, defaultLanguage } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    return (\n      <FormGroup>\n        <Label>{fieldLabel}</Label>\n        {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n        <Input\n          type=\"file\"\n          accept=\"image/*\"\n          name={fieldElement.name}\n          onChange={this.onChangeHandler}\n          value={fieldValue}\n        />\n        {isRequired && <Label>{REQUIRED_FIELD_MSG}</Label>}\n      </FormGroup>\n    );\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      event.currentTarget.name,\n      event.currentTarget.value\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement } = parentProps;\n  const result = {\n    fieldValue: getFieldValue(state, fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n};\n\n/** connect Photo component to the redux store */\nconst ConnectedPhoto = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Photo);\n\nexport default ConnectedPhoto;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectAll Dropdown component */\nexport interface SelectAllDropDownProps {\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string[];\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectAllDropDown extends React.Component<SelectAllDropDownProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== [] &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n        this.setOptionList(resultOptions);\n      } else {\n        if (fieldElement.children) {\n          fieldElement.children.map(elem => {\n            const childrenLabel: string = getFieldLabelText(\n              elem,\n              defaultLanguage\n            );\n            console.log('elem', elem);\n            options.push({ label: childrenLabel, value: elem.name });\n          });\n          this.setOptionList(fieldElement.children);\n        }\n      }\n\n      const tmpValueArray: any = [];\n      let isNotIncluded: boolean = false;\n      if (fieldValue && fieldValue.length > 0) {\n        const optionsValueArray: any = [];\n        options.map(elem => {\n          if (elem.value) {\n            optionsValueArray.push(elem.value);\n          }\n        });\n\n        for (const row of fieldValue) {\n          if (!optionsValueArray.includes(row)) {\n            isNotIncluded = true;\n          } else {\n            tmpValueArray.push(row);\n          }\n        }\n      }\n\n      if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n        this.props.assignFieldValueActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          tmpValueArray || []\n        );\n      }\n\n      const selectedValues: any[] = [];\n      if (fieldValue && fieldValue.length > 0) {\n        options.map(elem => {\n          for (const row of fieldValue) {\n            if (elem.value === row) {\n              selectedValues.push(elem);\n            }\n          }\n        });\n      }\n\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Select\n            isMulti={true}\n            name={fieldElement.name}\n            options={options}\n            onChange={this.onChangeHandler(fieldElement.name)}\n            value={selectedValues || []}\n          />\n          {fieldElement.hint && <Label>{hintLabel}</Label>}\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      if (this.props.optionList != null) {\n        this.props.assignOptionListActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  /** Sets the option list to the Redux Store\n   * @param {any} optionObject - the option object to be processed\n   */\n  private setOptionList = (optionObject: any) => {\n    const tempObjArray: any = [];\n    optionObject.map((elem: { name: any; label: any }) => {\n      const elemObj: any = {};\n      const name: string = 'name';\n      const label: string = 'label';\n      elemObj[name] = elem.name;\n      elemObj[label] = elem.label;\n      tempObjArray.push(elemObj);\n    });\n\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\n      this.props.assignOptionListActionCreator(\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\n        tempObjArray\n      );\n    }\n  };\n\n  /** sets the value of field element in store\n   * @param {any} values - the onchange input values\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandler = (fieldName: any) => (values: any) => {\n    const selectedValues: any = [];\n    let i = 0;\n    if (values) {\n      values.map(() => {\n        if (!selectedValues.includes(values[i].value)) {\n          selectedValues.push(values[i].value);\n        }\n        i++;\n      });\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + fieldName,\n        selectedValues\n      );\n    } else {\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + fieldName,\n        null\n      );\n    }\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const finalRes: any[] = [];\n\n    if (csvName) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n\n        tempOptions.forEach(elm => {\n          const filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n\n          let j = 0;\n          filterResult.map(() => {\n            options.map(option => {\n              if (option[nameOfKey] === filterResult[j]) {\n                finalRes.push(option);\n              }\n            });\n            j = j + 1;\n          });\n        });\n\n        i = i + 2;\n      }\n\n      options = [...Array.from(new Set(finalRes))];\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string[];\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Dropdown component to the redux store */\nconst ConnectedSelectAllDropDown = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectAllDropDown);\n\nexport default ConnectedSelectAllDropDown;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectAll Radio component */\nexport interface SelectAllRadioProps {\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string[];\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n  optionList: object;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectAllRadio extends React.Component<SelectAllRadioProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== [] &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n\n        const tmpValueArray: any = [];\n        let isNotIncluded: boolean = false;\n        if (fieldValue && fieldValue.length > 0) {\n          const optionsValueArray: any = [];\n          options.map(elem => {\n            if (elem.value) {\n              optionsValueArray.push(elem.value);\n            }\n          });\n\n          for (const row of fieldValue) {\n            if (!optionsValueArray.includes(row)) {\n              isNotIncluded = true;\n            } else {\n              tmpValueArray.push(row);\n            }\n          }\n        }\n\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            tmpValueArray || []\n          );\n        }\n\n        const selectedValues: any[] = [];\n        if (fieldValue && fieldValue.length > 0) {\n          options.map(elem => {\n            for (const row of fieldValue) {\n              if (elem.value === row) {\n                selectedValues.push(elem.value);\n              }\n            }\n          });\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            resultOptions\n          );\n        }\n\n        return (\n          <FormGroup>\n            <Label>{modifiedFieldLabel}</Label>\n            {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n            {resultOptions.map((elem, index) => (\n              <div key={index} className=\"col-md-12\">\n                <Input\n                  key={fieldElement.name + '-' + index}\n                  type=\"checkbox\"\n                  name={fieldElement.name}\n                  value={elem.name || []}\n                  onChange={this.onChangeHandlerCheckBox}\n                  readOnly={isReadonly}\n                  checked={selectedValues.includes(elem.name)}\n                />{' '}\n                {getFieldLabelText(elem, defaultLanguage)}\n              </div>\n            ))}\n            {fieldElement.hint && <Label>{hintLabel}</Label>}\n            {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n            {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n          </FormGroup>\n        );\n      } else {\n        if (fieldElement.children) {\n          const tempObjArray: any = [];\n          fieldElement.children.map(elem => {\n            const elemObj: any = {};\n            const name: string = 'name';\n            const label: string = 'label';\n            elemObj[name] = elem.name;\n            elemObj[label] = elem.label;\n            tempObjArray.push(elemObj);\n          });\n\n          if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\n            this.props.assignOptionListActionCreator(\n              this.props.fieldParentTreeName + fieldElement.name,\n              tempObjArray\n            );\n          }\n          return (\n            <FormGroup>\n              <Label>{modifiedFieldLabel}</Label>\n              {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n              {fieldElement.children.map((elem, index) => (\n                <div key={index} className=\"col-md-12\">\n                  <Input\n                    key={fieldElement.name + '-' + index}\n                    type=\"checkbox\"\n                    name={fieldElement.name}\n                    value={elem.name || []}\n                    onChange={this.onChangeHandlerCheckBox}\n                    readOnly={isReadonly}\n                  />{' '}\n                  {getFieldLabelText(elem, defaultLanguage)}\n                </div>\n              ))}\n              {fieldElement.hint && <Label>{hintLabel}</Label>}\n              {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n              {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n            </FormGroup>\n          );\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n\n      if (this.props.optionList != null) {\n        this.props.assignOptionListActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {any} event - the onchange event\n   */\n\n  private onChangeHandlerCheckBox = (event: any) => {\n    const { fieldValue, fieldElement, fieldParentTreeName } = this.props;\n    const fieldName = fieldParentTreeName + fieldElement.name;\n    if (event.target.checked) {\n      if (\n        fieldValue &&\n        fieldValue.length > 0 &&\n        !fieldValue.includes(event.target.value)\n      ) {\n        this.props.assignFieldValueActionCreator(fieldName, [\n          ...fieldValue,\n          event.target.value,\n        ]);\n      } else {\n        this.props.assignFieldValueActionCreator(fieldName, [\n          event.target.value,\n        ]);\n      }\n    } else {\n      if (\n        fieldValue &&\n        fieldValue.length > 0 &&\n        fieldValue.includes(event.target.value)\n      ) {\n        const newValue = fieldValue.filter(elm => elm !== event.target.value);\n\n        this.props.assignFieldValueActionCreator(\n          fieldName,\n          newValue.length ? newValue : null\n        );\n      }\n    }\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const finalRes: any[] = [];\n\n    if (csvName) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n\n        tempOptions.forEach(elm => {\n          const filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n\n          let j = 0;\n          filterResult.map(() => {\n            options.map(option => {\n              if (option[nameOfKey] === filterResult[j]) {\n                finalRes.push(option);\n              }\n            });\n            j = j + 1;\n          });\n        });\n\n        i = i + 2;\n      }\n\n      options = [...Array.from(new Set(finalRes))];\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string[];\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Radio component to the redux store */\nconst ConnectedSelectAllRadio = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectAllRadio);\n\nexport default ConnectedSelectAllRadio;\n","import * as React from 'react';\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport Dropdown from './Dropdown';\nimport Radio from './Radio';\n\n/** props interface for the SelectOne component */\nexport interface SelectAllProps {\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass SelectAll extends React.Component<SelectAllProps> {\n  public render() {\n    const { fieldElement } = this.props;\n\n    if (shouldComponentBeMinimal(fieldElement)) {\n      return <Dropdown {...this.props} />;\n    }\n    return <Radio {...this.props} />;\n  }\n}\n\nexport default SelectAll;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneDropDownProps {\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectOneDropDown extends React.Component<SelectOneDropDownProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n\n        this.setOptionList(resultOptions);\n      } else {\n        if (fieldElement.children) {\n          fieldElement.children.map(elem => {\n            const childrenLabel: string = getFieldLabelText(\n              elem,\n              defaultLanguage\n            );\n            options.push({ label: childrenLabel, value: elem.name });\n          });\n\n          this.setOptionList(fieldElement.children);\n        }\n      }\n\n      if (fieldValue) {\n        const optionsValueArray: any = [];\n        options.map(elem => {\n          if (elem.value) {\n            optionsValueArray.push(elem.value);\n          }\n        });\n\n        if (!optionsValueArray.includes(fieldValue)) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            ''\n          );\n        }\n      }\n\n      let selectedValue: any;\n      options.map(elem => {\n        if (elem.value === fieldValue) {\n          selectedValue = elem;\n        }\n      });\n\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Select\n            multi={false}\n            name={fieldElement.name}\n            options={options}\n            value={selectedValue || ''}\n            onChange={this.onChangeHandler(fieldElement.name)}\n          />\n          {fieldElement.hint && <Label>{hintLabel}</Label>}\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** Sets the option list to the Redux Store\n   * @param {any} optionObject - the option object to be processed\n   */\n  private setOptionList = (optionObject: any) => {\n    const tempObjArray: any = [];\n    optionObject.map((elem: { name: any; label: any }) => {\n      const elemObj: any = {};\n      const name: string = 'name';\n      const label: string = 'label';\n      elemObj[name] = elem.name;\n      elemObj[label] = elem.label;\n      tempObjArray.push(elemObj);\n    });\n\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\n      this.props.assignOptionListActionCreator(\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\n        tempObjArray\n      );\n    }\n  };\n\n  /** sets the value of field element in store\n   * @param {any} event - the onchange input event\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandler = (fieldName: any) => (event: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + fieldName,\n      event.value || ''\n    );\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    if (csvName) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n        tempOptions.forEach(elm => {\n          const filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n          options = options.filter(\n            option => option[nameOfKey] === filterResult\n          );\n        });\n\n        i = i + 2;\n      }\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne component to the redux store */\nconst ConnectedSelectOneDropDown = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectOneDropDown);\n\nexport default ConnectedSelectOneDropDown;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneRadioProps {\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectOneRadio extends React.Component<SelectOneRadioProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        if (/search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)) {\n          const processedStringArray = fieldElement.control.appearance.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        if (fieldValue) {\n          const optionsValueArray: any = [];\n          resultOptions.map(elem => {\n            if (elem.name) {\n              optionsValueArray.push(elem.name);\n            }\n          });\n\n          if (!optionsValueArray.includes(fieldValue)) {\n            this.props.assignFieldValueActionCreator(\n              this.props.fieldParentTreeName + fieldElement.name,\n              ''\n            );\n          }\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            resultOptions\n          );\n        }\n\n        return (\n          <FormGroup>\n            <Label>{modifiedFieldLabel}</Label>\n            {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n            {resultOptions.map((elem, index) => (\n              <div key={index} className=\"col-md-12\">\n                <Input\n                  key={fieldElement.name + '-' + index}\n                  type=\"radio\"\n                  name={fieldElement.name}\n                  value={elem.name}\n                  onChange={this.onChangeHandlerRadio(fieldElement.name)}\n                  readOnly={isReadonly}\n                  checked={elem.name === fieldValue}\n                />{' '}\n                {getFieldLabelText(elem, defaultLanguage)}\n              </div>\n            ))}\n            {fieldElement.hint && <Label>{hintLabel}</Label>}\n            {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n            {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n          </FormGroup>\n        );\n      } else {\n        if (fieldElement.children) {\n          const tempObjArray: any = [];\n          fieldElement.children.map(elem => {\n            const elemObj: any = {};\n            const name: string = 'name';\n            const label: string = 'label';\n            elemObj[name] = elem.name;\n            elemObj[label] = elem.label;\n            tempObjArray.push(elemObj);\n          });\n\n          if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\n            this.props.assignOptionListActionCreator(\n              this.props.fieldParentTreeName + fieldElement.name,\n              tempObjArray\n            );\n          }\n\n          return (\n            <FormGroup>\n              <Label>{modifiedFieldLabel}</Label>\n              {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n              {fieldElement.children.map((elem, index) => (\n                <div key={index} className=\"col-md-12\">\n                  <Input\n                    key={fieldElement.name + '-' + index}\n                    type=\"radio\"\n                    name={fieldElement.name}\n                    value={elem.name}\n                    onChange={this.onChangeHandlerRadio(fieldElement.name)}\n                    readOnly={isReadonly}\n                  />{' '}\n                  {getFieldLabelText(elem, defaultLanguage)}\n                </div>\n              ))}\n              {fieldElement.hint && <Label>{hintLabel}</Label>}\n              {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n              {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n            </FormGroup>\n          );\n        } else {\n          return null;\n        }\n      }\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of Radio Button field element in store\n   * @param {any} event - the onchange input event\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandlerRadio = (fieldName: any) => (event: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + fieldName,\n      event.target.value || ''\n    );\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique radio button options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    if (csvName) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n        tempOptions.forEach(elm => {\n          const filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n          options = options.filter(\n            option => option[nameOfKey] === filterResult\n          );\n        });\n\n        i = i + 2;\n      }\n    }\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Radio component to the redux store */\nconst ConnectedSelectOneRadio = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectOneRadio);\n\nexport default ConnectedSelectOneRadio;\n","import * as React from 'react';\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport Dropdown from './Dropdown';\nimport Radio from './Radio';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneProps {\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass SelectOne extends React.Component<SelectOneProps> {\n  public render() {\n    const { fieldElement } = this.props;\n    if (shouldComponentBeMinimal(fieldElement)) {\n      return <Dropdown {...this.props} />;\n    }\n    return <Radio {...this.props} />;\n  }\n}\n\nexport default SelectOne;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the text component */\nexport interface TextProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isPresentInErrorSelector: any;\n  isComponentRender: boolean;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Text extends React.Component<TextProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        let calculatedValue: any = '';\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n\n        if (calculatedValue !== fieldValue) {\n          this.props.assignFieldValueActionCreator(\n            fieldParentTreeName + fieldElement.name,\n            calculatedValue\n          );\n        }\n\n        return (\n          <FormGroup>\n            <Label>{modifiedFieldLabel}</Label>\n            {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n            <Input\n              type=\"text\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              value={calculatedValue || ''}\n              readOnly={isReadonly}\n            />\n            {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n            <Label>{hintLabel}</Label>\n            {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n          </FormGroup>\n        );\n      } else {\n        return (\n          <FormGroup>\n            <Label>{modifiedFieldLabel}</Label>\n            {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n            <Input\n              type=\"text\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              value={fieldValue || ''}\n              readOnly={isReadonly}\n            />\n            {fieldElement.hint && <Label>{hintLabel}</Label>}\n            {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n            {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n          </FormGroup>\n        );\n      }\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value || ''\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Text component to the redux store */\nconst ConnectedText = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Text);\n\nexport default ConnectedText;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the KbTime component */\nexport interface TimeProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass KbTime extends React.Component<TimeProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n          <Input\n            type=\"time\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={fieldValue || ''}\n            readOnly={isReadonly}\n          />\n          {fieldElement.hint && <Label>{hintLabel}</Label>}\n          {isRequiredViolated && <Label>{REQUIRED_FIELD_MSG}</Label>}\n          {isConstraintViolated && <Label>{modifiedConstraintLabel}</Label>}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== '' ? event.currentTarget.value : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect KbTime component to the redux store */\nconst ConnectedTime = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(KbTime);\n\nexport default ConnectedTime;\n","import * as React from 'react';\nimport {\n  CALCULATE_FIELD_TYPE,\n  DATE_FIELD_TYPE,\n  DATE_TIME_FIELD_TYPE,\n  DECIMAL_FIELD_TYPE,\n  INTEGER_FIELD_TYPE,\n  NOTE_FIELD_TYPE,\n  PHOTO_FIELD_TYPE,\n  SELECT_ALL_FIELD_TYPE,\n  SELECT_ONE_FIELD_TYPE,\n  TEXT_FIELD_TYPE,\n  TIME_FIELD_TYPE,\n} from '../../../constants';\nimport Calculate from '../../../containers/fields/base/Calculate';\nimport KbDate from '../../../containers/fields/base/Date';\nimport DateTime from '../../../containers/fields/base/Date Time';\nimport Decimal from '../../../containers/fields/base/Decimal';\nimport Integer from '../../../containers/fields/base/Integer';\nimport Note from '../../../containers/fields/base/Note';\nimport Photo from '../../../containers/fields/base/Photo';\nimport SelectAll from '../../../containers/fields/base/Select All';\nimport SelectOne from '../../../containers/fields/base/Select One';\nimport Text from '../../../containers/fields/base/Text';\nimport KbTime from '../../../containers/fields/base/Time';\n\n/** type of fieldParentTreeName */\nexport type FieldParentTreeName = string;\n\n/** interface for bind property */\ninterface BindProperty {\n  calculate?: string;\n  relevant?: string;\n  readonly?: string;\n  appearance?: string;\n  required?: string;\n  constraint?: string;\n  'jr:constraintMsg'?: { [key: string]: string } | string;\n}\n\n/** interface for kobo field element */\nexport interface FieldElement {\n  name: string;\n  type: string;\n  children?: any[];\n  bind?: BindProperty;\n  label?: { [key: string]: string } | string;\n  default?: any;\n  control?: any;\n  hint?: any;\n}\n\n/** props interface for BaseTypeEvaluator component */\nexport interface BaseTypeEvaluatorProps {\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\nclass BaseTypeEvaluator extends React.Component<BaseTypeEvaluatorProps> {\n  public render() {\n    const {\n      csvList,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n    } = this.props;\n    return this.typeEvaluator(\n      csvList,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage\n    );\n  }\n\n  /** returns jsx components based on field types\n   * @param {FieldElement} fieldElement - the field element object\n   * @param {FieldParentTreeName} fieldParentTreeName - the field parent hierchical name\n   * @return {React.ReactElement} - jsx base components\n   */\n  private typeEvaluator(\n    csvList: any,\n    fieldElement: FieldElement,\n    fieldParentTreeName: FieldParentTreeName,\n    defaultLanguage: string\n  ): React.ReactElement {\n    switch (fieldElement.type) {\n      case TEXT_FIELD_TYPE:\n        return (\n          <Text\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DATE_FIELD_TYPE:\n        return (\n          <KbDate\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case TIME_FIELD_TYPE:\n        return (\n          <KbTime\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DATE_TIME_FIELD_TYPE:\n        return (\n          <DateTime\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case INTEGER_FIELD_TYPE:\n        return (\n          <Integer\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DECIMAL_FIELD_TYPE:\n        return (\n          <Decimal\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case NOTE_FIELD_TYPE:\n        return (\n          <Note\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case CALCULATE_FIELD_TYPE:\n        return (\n          <Calculate\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case SELECT_ONE_FIELD_TYPE:\n        return (\n          <SelectOne\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n      case SELECT_ALL_FIELD_TYPE:\n        return (\n          <SelectAll\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n      case PHOTO_FIELD_TYPE:\n        return (\n          <Photo\n            fieldElement={fieldElement}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      default:\n        return (\n          <div>\n            Other {fieldElement.type} {fieldElement.name}\n          </div>\n        );\n    }\n  }\n}\n\nexport default BaseTypeEvaluator;\n","import * as React from 'react';\nimport { GROUP_FIELD_TYPE, REPEAT_FIELD_TYPE } from '../../../constants';\nimport Group from '../../../containers/fields/group/Group';\nimport Repeat from '../../../containers/fields/group/Repeat';\nimport BaseTypeEvaluator, { FieldElement, FieldParentTreeName } from '../Base';\n\n/** props Interface for the GroupTypeEvaluator component */\nexport interface GroupTypeEvaluatorProps {\n  csvList: any;\n  defaultLanguage: string;\n  fieldElements: FieldElement[];\n  fieldParentTreeName: string;\n}\n\nclass GroupTypeEvaluator extends React.Component<GroupTypeEvaluatorProps> {\n  public render() {\n    const {\n      csvList,\n      fieldElements,\n      fieldParentTreeName,\n      defaultLanguage,\n    } = this.props;\n    return (\n      <div>\n        {fieldElements.map(fieldElement => (\n          <div key={'group_' + fieldElement.name}>\n            {this.typeEvaluator(\n              csvList,\n              fieldElement,\n              fieldParentTreeName,\n              defaultLanguage\n            )}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  /** returns jsx components based on field types\n   * @param {FieldElement} fieldElement - the field element object\n   * @param {FieldParentTreeName} - the field parent hierarchical name\n   * @return {React.ReactElement} - jsx group components/ base evaluator component\n   */\n  private typeEvaluator(\n    csvList: any,\n    fieldElement: FieldElement,\n    fieldParentTreeName: FieldParentTreeName,\n    defaultLanguage: string\n  ): React.ReactElement {\n    switch (fieldElement.type) {\n      case GROUP_FIELD_TYPE:\n        return (\n          <div>\n            <Group\n              fieldElement={fieldElement}\n              fieldParentTreeName={fieldParentTreeName}\n              defaultLanguage={defaultLanguage}\n              csvList={csvList}\n            />\n          </div>\n        );\n      case REPEAT_FIELD_TYPE:\n        return (\n          <div>\n            <Repeat\n              fieldElement={fieldElement}\n              fieldParentTreeName={fieldParentTreeName}\n              defaultLanguage={defaultLanguage}\n              csvList={csvList}\n            />\n          </div>\n        );\n      default:\n        return (\n          <BaseTypeEvaluator\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n    }\n  }\n}\n\nexport default GroupTypeEvaluator;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { faMinusCircle, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Container, Row } from 'reactstrap';\nimport { Store } from 'redux';\nimport GroupTypeEvaluator from '../components/typeEvalutors/Group';\nimport {\n  getUserInputFromStore,\n  isErrorsArrayEmpty,\n  setUserInputObj,\n} from '../store/ducks/formState';\n\nlibrary.add(faPlusCircle, faMinusCircle);\n\nexport interface AppProps {\n  csvList: any;\n  isNoErrors: any;\n  userInputObj: any;\n  userInputJson: any;\n  defaultLanguage: string;\n  formTitle: string;\n  fieldElements: any;\n  setUserInputAction: typeof setUserInputObj;\n  handleSubmit(userInput: any): any;\n}\n\nclass App extends React.Component<AppProps> {\n  public componentDidMount() {\n    const { userInputJson, userInputObj } = this.props;\n    if (userInputJson && userInputJson !== userInputObj) {\n      this.props.setUserInputAction(userInputJson);\n    }\n  }\n  public render() {\n    const { csvList, defaultLanguage, fieldElements, formTitle } = this.props;\n\n    const props = {\n      csvList,\n      defaultLanguage,\n      fieldElements,\n      fieldParentTreeName: '',\n    };\n    return (\n      <Container className=\"form-container\">\n        <Row className=\"form-title\">\n          <Col>\n            <h3>{formTitle}</h3>\n          </Col>\n        </Row>\n        <GroupTypeEvaluator {...props} />\n        <Row className=\"welcome-box\">\n          <Col>\n            <Button className=\"btn btn-success\" onClick={this.handleClick}>\n              Submit\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  // tslint:disable-next-line: variable-name\n  private handleClick = (_event: React.MouseEvent<HTMLButtonElement>) => {\n    const { handleSubmit, isNoErrors, userInputObj } = this.props;\n    handleSubmit('submitted');\n    if (isNoErrors) {\n      handleSubmit(userInputObj);\n    } else {\n      handleSubmit('Field Violated');\n    }\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  isNoErrors: any;\n  userInputObj: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    isNoErrors: isErrorsArrayEmpty(state),\n    userInputObj: getUserInputFromStore(state),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  setUserInputAction: setUserInputObj,\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedApp = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\nexport default ConnectedApp;\n","import { createStore, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer, { FormState } from './ducks/formState';\n\n/** The initial store */\nconst store: Store & FormState = createStore(reducer, composeWithDevTools());\n\nexport default store;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nexport interface OdkFormRendererProps {\n  csvList: any;\n  defaultLanguage: string;\n  formDefinitionJson: any;\n  userInputJson: any;\n  handleSubmit(userInput: any): any;\n}\n\nclass OdkFormRenderer extends React.Component<OdkFormRendererProps> {\n  public render() {\n    const {\n      csvList,\n      defaultLanguage,\n      formDefinitionJson,\n      userInputJson,\n      handleSubmit,\n    } = this.props;\n    const props = {\n      csvList,\n      defaultLanguage,\n      fieldElements: formDefinitionJson.children,\n      formTitle: formDefinitionJson.title,\n      handleSubmit,\n      userInputJson,\n    };\n    return (\n      <Provider store={store}>\n        <App {...props} />\n      </Provider>\n    );\n  }\n}\n\nexport default OdkFormRenderer;\n"],"names":["actualExpression","REQUIRED_FIELD_MSG","currentHierarchicalName","formItemProperty","userInput","tokenizeCharacter","type","value","input","current","tokenizers","test","undefined","consumedChars","char","TypeError","matchQuote","pattern","tokenizePattern","kbSelected","funcName","params","_paramsTokens","tmp","Array","isArray","forEach","element","kbToday","_params","d","Date","setHours","kbRound","toFixed","parseFloat","kbRegex","RegExp","kbCountSelected","length","kbInt","parseInt","kbCoalesce","kbPosition","tmpName","split","kbSum","paramsTokens","sumValue","sumValuesOverJsn","sum","jsnObj","variableName","i","key","kbConcat","concatStr","kbSubstr","substring","outerScopedVariables","variableValue","tmpUserInput","nodeNames","parseMostClosestScopedVariable","tmpHierchicalName","parent","index","parseDot","path","push","getIn","parseLiterals","_tmpOutput","tokens","toLowerCase","parseFunction","_output","possibleFunctions","arrayOfParams","arrayOfOriginalTokens","tmpQueue","tmpTokens","pop","tmpVal","parser","parsedFn","parsedVal","functionFn","parseAnd","output","newOutput","parseParen","terminatingTokens","indexOf","parseDivide","parsed","ct","parseMinus","parserFn","consumedTokens","preOutput","preParsed","parseMultiply","preParseFn","Object","prototype","toString","call","isNaN","getTime","NaN","Math","ceil","parsers","j","flagLessThanOrEqual","flagGreaterThanOrEqual","leftOutput","pos","console","log","evaluater","expression","tmpFormItemProperty","tmpCurrentHierarchicalName","tokenized","tokenizerFn","token","tokenizer","getTextFromProperty","property","languageIdentifier","getFieldLabelText","fieldElement","label","getHintLabelText","hint","customizeLabelsWithPreviousInputs","evaluator","labelText","fieldTreeName","placesOfCustomizationsRequiredList","match","tmpPlace","customizedName","replace","getConstraintLabelText","bind","isInputRequired","isRequired","required","shouldComponentBeRelevant","fieldParentTreeName","evaluateExpression","relevant","name","shouldComponentBeReadOnly","readonly","shouldInputViolatesConstraint","constraint","getModifiedUserInputObject","userInputObj","fieldValue","treeNodes","modifiedObj","getValueFromUserInputObj","shouldComponentBeMinimal","isMinimal","control","appearance","includes","FIELD_VALUE_ASSIGNED","OPTION_LIST_ASSIGNED","REMOVE_FROM_OPTION_LIST_REPEAT","RESET_STORE","ADD_ERROR_INPUT_ID","REMOVE_ERROR_INPUT_ID","EMPTY_GROUP_FIELDS","REMOVE_GROUP_FIELDS_FROM_ERRORS","SET_USER_INPUT_OBJ","assignFieldValueAction","assignOptionListAction","optionList","addErrorInputId","removeErrorInputId","emptyGroupFields","removeGroupFieldsFromErrors","initialState","SeamlessImmutable","errors","reducer","state","action","modifiedUserInputObj","asMutable","deep","stateM","modifiedUserInputObjList","newState","filteredRepeatArray","hasOwnProperty","repeatIndex","entries","keyValueOptionListobj","repeatIndexString","String","map","keyRepeat","getModifiedOptionListForRepeat","modifiedOptionListRepeat","newStateForRepeat","updateIn","arr","concat","filter","elm","mUserInputObj","groupTreeName","keys","objKey","startsWith","emptyGroupedValues","mState","getFieldValue","getOptionList","getEvaluatedExpression","getEvaluatedExpressionForSelect","options","isPresentInError","isGroupFieldsEmpty","isEmpty","checkGroupedValuesForEmpty","isErrorsIncludeGroupFields","isPresent","fTName","isErrorsArrayEmpty","getUserInputFromStore","Group","render","this","props","csvList","defaultLanguage","isComponentRender","fieldLabel","React","FormGroup","Label","children","GroupTypeEvaluator","fieldElements","isErrorsIncludeGroupFieldsSelector","removeGroupFieldsFromErrorsActionCreator","isGroupFieldsEmptySelector","emptyGroupFieldsActionCreator","ConnectedGroup","connect","parentProps","getEvaluatedExpressionSelector","SingleRepeat","_event","_this","assignmentHandler","removeHandler","removeOptionHandler","newFieldValue","_elem","onClick","handleChange","FontAwesomeIcon","icon","Component","Repeat","assignFieldValueActionCreator","removeOptionListFromActionCreator","_elm","className","addAnotherRepeat","ConnectedRepeat","Calculate","isPresentInErrorSelector","isRequiredViolated","isConstraintViolated","isReadonly","removeErrorInputIdActionCreator","addErrorInputIdActionCreator","calculatedValue","calculate","Input","readOnly","ConnectedCalculate","KbDate","event","currentTarget","modifiedFieldLabel","modifiedConstraintLabel","hintLabel","defaultValue","toISOString","slice","onChange","onChangeHandler","ConnectedDate","DateTime","DatePicker","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","placeholderText","ConnectedDateTime","Decimal","step","ConnectedDecimal","Integer","ConnectedInteger","Note","fieldHint","FormText","ConnectedNote","Photo","accept","ConnectedPhoto","SelectAllDropDown","optionObject","tempObjArray","elem","elemObj","_","isEqual","assignOptionListActionCreator","fieldName","values","selectedValues","stringWithSearchKeyWord","resultArray","criteriaParams","splice","extractAndFilterOptions","csvName","criteriaType","filterCriterias","trim","distinctOptions","finalRes","modifiedName","nameOfKey","interConnectedValue","filterResult","getEvaluatedExpressionSelectorForSelect","option","from","Set","labelColumnName","valueColumnName","tmpOpt","uniqBy","resultOptions","updatedFieldElement","processedStringArray","getProcessedString","setOptionList","childrenLabel","tmpValueArray","isNotIncluded","optionsValueArray","row","Select","isMulti","ConnectedSelectAllDropDown","SelectAllRadio","target","checked","newValue","_this2","onChangeHandlerCheckBox","ConnectedSelectAllRadio","SelectAll","Dropdown","Radio","SelectOneDropDown","selectedValue","multi","ConnectedSelectOneDropDown","SelectOneRadio","onChangeHandlerRadio","ConnectedSelectOneRadio","SelectOne","Text","ConnectedText","KbTime","ConnectedTime","BaseTypeEvaluator","typeEvaluator","library","add","faPlusCircle","faMinusCircle","App","handleSubmit","isNoErrors","componentDidMount","userInputJson","setUserInputAction","Container","Row","Col","formTitle","Button","handleClick","ConnectedApp","store","createStore","composeWithDevTools","formDefinitionJson","Provider","title"],"mappings":"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"}