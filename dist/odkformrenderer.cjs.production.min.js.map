{"version":3,"file":"odkformrenderer.cjs.production.min.js","sources":["../src/utils/Theme.ts","../src/utils/compiler.ts","../src/components/Alert/index.tsx","../src/components/DropDown/index.tsx","../src/constants.tsx","../src/store/index.tsx","../src/utils/helpers.ts","../src/store/ducks/formState.ts","../src/containers/fields/group/Group/styles.ts","../src/containers/fields/group/Group/index.tsx","../src/containers/fields/group/Repeat/Single Repeat/index.tsx","../src/containers/fields/group/Repeat/Controlled Repeat/index.tsx","../src/containers/fields/group/Repeat/Uncontrolled Repeat/index.tsx","../src/containers/fields/group/Repeat/index.tsx","../src/containers/fields/base/Calculate/index.tsx","../src/containers/fields/base/Date/index.tsx","../src/containers/fields/base/Date Time/index.tsx","../src/containers/fields/base/Decimal/index.tsx","../src/containers/fields/base/File/FilePreview/FilePreview.tsx","../src/containers/fields/base/File/index.tsx","../src/containers/fields/base/Integer/index.tsx","../src/containers/fields/base/Note/index.tsx","../src/containers/fields/base/Select All/Dropdown/index.tsx","../src/containers/fields/base/Select All/Radio/index.tsx","../src/containers/fields/base/Select All/index.tsx","../src/containers/fields/base/Select One/Dropdown/index.tsx","../src/containers/fields/base/Select One/Radio/index.tsx","../src/containers/fields/base/Select One/index.tsx","../src/containers/fields/base/Text/index.tsx","../src/containers/fields/base/Time/index.tsx","../src/components/typeEvalutors/Base/index.tsx","../src/components/typeEvalutors/Group/index.tsx","../src/App/index.tsx","../src/index.tsx"],"sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#649A6A',\r\n      dark: '#8ac390',\r\n    },\r\n    secondary: {\r\n      main: '#D2AB16',\r\n      light: '#EBFDED',\r\n      dark: '#AD8C0F',\r\n    },\r\n    // error: {\r\n    //   main: '#f44336',\r\n    // },\r\n    // warning: {\r\n    //   main: '#ff9800',\r\n    // },\r\n    //table stripe\r\n    info: {\r\n      dark: '#F5F4F4',\r\n      main: '#EBFDED',\r\n      light: '#F9F9F9',\r\n    },\r\n    // success: {\r\n    //   main: '#4caf50',\r\n    // },\r\n    text: {\r\n      primary: '#EBFDED',\r\n      secondary: '#000000',\r\n      disabled: 'rgba(0, 0, 0, 0.38)',\r\n      hint: 'rgba(0, 0, 0, 0.38)',\r\n    },\r\n    // divider: 'rgba(0, 0, 0, 0.12)',\r\n    // background: {\r\n    //   paper: '#fff',\r\n    //   default: '#fff',\r\n    // },\r\n    // action: {\r\n    //   active: '#EEEEEE',\r\n    //   hover: '#888888',\r\n    //   hoverOpacity: 0.04,\r\n    //   selected: '#FFFFFF',\r\n    //   disabled: '#666666',\r\n    // },\r\n  },\r\n  typography: {\r\n    h1: {\r\n      fontWeight: 700,\r\n      // lineHeight: 0.35,\r\n      fontSize: 30,\r\n      // color: '#FFFFFF',\r\n    },\r\n    h2: {\r\n      fontWeight: 500,\r\n      fontSize: 20,\r\n      // lineHeight: 0.23,\r\n    },\r\n    h3: {\r\n      fontWeight: 400,\r\n      fontSize: 18,\r\n      // lineHeight: 0.21,\r\n      // color: '#FFFFFF',\r\n    },\r\n    h4: {\r\n      fontWeight: 700,\r\n      // lineHeight: 0.35,\r\n      fontSize: 26,\r\n    },\r\n    body1: {\r\n      fontFamily: 'Roboto',\r\n      fontWeight: 400,\r\n      // lineHeight: 1.18,\r\n      fontSize: 16,\r\n    },\r\n    caption: {\r\n      fontFamily: 'Roboto',\r\n      fontWeight: 600,\r\n      // lineHeight: 0.18,\r\n      fontSize: 16,\r\n    },\r\n    subtitle1: {\r\n      fontFamily: 'Roboto',\r\n      fontWeight: 400,\r\n      // lineHeight: 0.18,\r\n      fontSize: 16,\r\n    },\r\n    subtitle2: {\r\n      fontFamily: 'Roboto',\r\n      fontWeight: 500,\r\n      // lineHeight: 0.18,\r\n      fontSize: 16,\r\n    },\r\n  },\r\n  //menu\r\n  overrides: {\r\n    MuiListItem: {\r\n      root: {\r\n        paddingTop: 12,\r\n        paddingBottom: 12,\r\n        color: '#666666',\r\n        '&:hover': {\r\n          // backgroundColor: '#EBFDED',\r\n          textDecoration: 'none',\r\n        },\r\n        '&:selected': {\r\n          color: '#222222',\r\n          textDecoration: 'none',\r\n        },\r\n      },\r\n    },\r\n    MuiInputLabel: {\r\n      outlined: {\r\n        color: '#222222',\r\n      },\r\n    },\r\n    MuiInputBase: {\r\n      root: {\r\n        color: '#222222',\r\n      },\r\n    },\r\n    MuiStepIcon: {\r\n      active: {\r\n        color: '#649A6A',\r\n      },\r\n      // completed: {\r\n      //   color: '#8ac390 !important',\r\n      // },\r\n      // active: {\r\n      //\r\n      // }\r\n    },\r\n    MuiStepLabel: {\r\n      label: {\r\n        color: '#649A6A',\r\n      },\r\n    },\r\n    MuiStepConnector: {\r\n      line: {\r\n        color: '#EBFDED',\r\n      },\r\n    },\r\n    MuiTypography: {\r\n      root: {\r\n        fontStyle: 'normal',\r\n      },\r\n    },\r\n    MuiTextField: {\r\n      root: {\r\n        backgroundColor: '#EBFDED',\r\n        borderRadius: 5,\r\n      },\r\n    },\r\n    // MuiTableCell: {\r\n    //   root: {\r\n    //     fontSize: 16,\r\n    //     lineHeight: 0.21,\r\n    //     fontWeight: 400,\r\n    //     whiteSpace: 'nowrap',\r\n    //   },\r\n    // },\r\n    // MuiSelect: {\r\n    //   icon: {\r\n    //     fill: '#666666',\r\n    //   },\r\n    // },\r\n    // MuiFormLabel: {\r\n    //   root: {\r\n    //     color: '#666666',\r\n    //   },\r\n    // },\r\n    MuiButton: {\r\n      root: {\r\n        height: 40,\r\n      },\r\n      label: {\r\n        fontWeight: 400,\r\n        // fontSize: 16,\r\n        // lineHeight: 0.18,\r\n        // color: '#EBFDED',\r\n        fontFamily: 'Roboto',\r\n      },\r\n      containedPrimary: {\r\n        color: '#FFFFFF',\r\n      },\r\n    },\r\n    MuiRadio: {\r\n      root: {\r\n        color: '#EBFDED',\r\n      },\r\n    },\r\n    MuiSelect: {\r\n      select: {\r\n        color: '#222222',\r\n      },\r\n    },\r\n    // MuiTabs: {\r\n    //   flexContainer: {\r\n    //     justifyContent: 'flex-end',\r\n    //   },\r\n    //   indicator: {\r\n    //     backgroundColor: '#FFFFFF',\r\n    //   },\r\n    // },\r\n    // MuiTab: {\r\n    //   textColorPrimary: {\r\n    //     color: '#777171',\r\n    //     backgroundColor: '#EFEFEF',\r\n    //     margin: 10,\r\n    //     border: 'none',\r\n    //     '&$selected': { color: '#FFFFFF', backgroundColor: '#44B4DB' },\r\n    //   },\r\n    // },\r\n    // MuiTableFooter: {\r\n    //   root: {\r\n    //     justifyContent: 'flex-end',\r\n    //   },\r\n    // },\r\n    // MuiIconButton: {\r\n    //   root: {\r\n    //     color: '#888888',\r\n    //   },\r\n    // },\r\n    // MuiPopover: {\r\n    //   paper: {\r\n    //     minWidth: '50%',\r\n    //   },\r\n    // },\r\n  },\r\n});\r\n","import store from '../store';\r\n\r\nlet actualExpression: string;\r\nlet currentHierarchicalName: string = '';\r\nlet formItemProperty: any = {};\r\nlet userInput: any = {};\r\n\r\n/**\r\n * tokenizeCharacter is a type of util method\r\n * @param {any} type - the type that will be returned if matches\r\n * @param {any} value - the actual value of the tokenize character\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeCharacter(type: any, value: any, input: any, current: any) {\r\n  return value === input[current] ? [1, { type, value }] : [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeParenOpen returns tokenizeReturnObject for character (\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeParenOpen(input: any, current: any) {\r\n  return tokenizeCharacter('paren', '(', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeBrakeOpen returns tokenizeReturnObject for character [\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeBrakeOpen(input: any, current: any) {\r\n  return tokenizeCharacter('brac', '[', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeBrakeClose returns tokenizeReturnObject for character ]\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeBrakeClose(input: any, current: any) {\r\n  return tokenizeCharacter('brac', ']', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeParenClose returns tokenizeReturnObject for character )\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeParenClose(input: any, current: any) {\r\n  return tokenizeCharacter('paren', ')', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeEqual returns tokenizeReturnObject for character =\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeEqual(input: any, current: any) {\r\n  return tokenizeCharacter('equal', '=', input, current);\r\n}\r\n\r\n/**\r\n * tokenizePlus returns tokenizeReturnObject for character +\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizePlus(input: any, current: any) {\r\n  return tokenizeCharacter('plus', '+', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeMinus returns tokenizeReturnObject for character -\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeMinus(input: any, current: any) {\r\n  return tokenizeCharacter('minus', '-', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeMultiply returns tokenizeReturnObject for character *\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeMultiply(input: any, current: any) {\r\n  return tokenizeCharacter('multiply', '*', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeDivide returns tokenizeReturnObject for character /\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeDivide(input: any, current: any) {\r\n  return tokenizeCharacter('divide', '/', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeLessThan returns tokenizeReturnObject for character <\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeLessThan(input: any, current: any) {\r\n  return tokenizeCharacter('lessThan', '<', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeGreaterThan returns tokenizeReturnObject for character >\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeGreaterThan(input: any, current: any) {\r\n  return tokenizeCharacter('greaterThan', '>', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeNot returns tokenizeReturnObject for character !\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeNot(input: any, current: any) {\r\n  if (input[current] == '!') {\r\n    return tokenizeCharacter('not', '!', input, current);\r\n  } else if (input[current] == 'n') {\r\n    if (\r\n      input[current + 1] &&\r\n      input[current + 1] == 'o' &&\r\n      (input[current + 2] && input[current + 2] == 't')\r\n    ) {\r\n      const type = 'not';\r\n      const value = '!';\r\n      return [3, { type, value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeComma returns tokenizeReturnObject for character ,\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeComma(input: any, current: any) {\r\n  return tokenizeCharacter('comma', ',', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeDot returns tokenizeReturnObject for character .\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeDot(input: any, current: any) {\r\n  return tokenizeCharacter('dot', '.', input, current);\r\n}\r\n\r\n/**\r\n * tokenizePattern is a type of util method\r\n * @param {any} type - the type that will be returned if matches\r\n * @param {any} pattern - the pattern that will be matched for tokenization\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizePattern(type: any, pattern: any, input: any, current: any) {\r\n  let char = input[current];\r\n  let consumedChars = 0;\r\n  if (pattern.test(char)) {\r\n    let value = '';\r\n    while (char && pattern.test(char)) {\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    return [consumedChars, { type, value }];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeString returns tokenizeReturnObject for strings. example: 'abc12' , \"test1\", \"afgkj dafgk\"\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeString(input: any, current: any) {\r\n  if (input[current] === '\"' || input[current] === \"'\") {\r\n    const matchQuote = input[current];\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    consumedChars += 1;\r\n    let char = input[current + consumedChars];\r\n    while (char !== matchQuote) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    return [consumedChars + 1, { type: 'string', value }];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeFunction returns tokenizeReturnObject for functions. Example: round( , substring(\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject; value contains function name if matched\r\n */\r\nfunction tokenizeFunction(input: any, current: any) {\r\n  if (/[a-z_]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (char && /[:a-z0-9_-]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    while (char && /\\s/.test(char)) {\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if (value == 'not') {\r\n      return [0, null];\r\n    }\r\n    if (char && char === '(') {\r\n      return [consumedChars, { type: 'function', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeNumber returns tokenizeReturnObject for discrete numbers. Example: 123 , 02113\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeNumber(input: any, current: any) {\r\n  if (/[0-9]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (/[0-9]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if (char !== '.') {\r\n      return [consumedChars, { type: 'number', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeDecimal returns tokenizeReturnObject for decimal numbers. Example: 12.3 , 0.2113\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeDecimal(input: any, current: any) {\r\n  if (/[0-9.]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (/[0-9]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if (char === '.') {\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n      if (/[0-9]/i.test(char)) {\r\n        while (/[0-9]/i.test(char)) {\r\n          if (char === undefined) {\r\n            throw new TypeError('unterminated string ');\r\n          }\r\n          value += char;\r\n          consumedChars += 1;\r\n          char = input[current + consumedChars];\r\n        }\r\n        return [consumedChars, { type: 'decimal', value }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeVariable returns tokenizeReturnObject for variables. Example syntax: ${Iamvariable} , #{urvariable}\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeVariable(input: any, current: any) {\r\n  if (input[current] === '#' || input[current] === '$') {\r\n    if (input[current + 1] && input[current + 1] === '{') {\r\n      let value = '';\r\n      let consumedChars = 1;\r\n      consumedChars += 1;\r\n      let char = input[current + consumedChars];\r\n      while (char !== '}') {\r\n        if (char === undefined) {\r\n          throw new TypeError('unterminated string ');\r\n        }\r\n        value += char;\r\n        consumedChars += 1;\r\n        char = input[current + consumedChars];\r\n      }\r\n      return [consumedChars + 1, { type: 'variable', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeOr returns tokenizeReturnObject for syntax or\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeOr(input: any, current: any) {\r\n  if (input[current] === 'o') {\r\n    if (input[current + 1] && input[current + 1] === 'r') {\r\n      if (\r\n        input[current + 2] === undefined ||\r\n        /[0-9\\s]/.test(input[current + 2])\r\n      ) {\r\n        return [2, { type: 'or', value: 'or' }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeIf returns tokenizeReturnObject for word if\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeIf(input: any, current: any) {\r\n  if (input[current] === 'i') {\r\n    if (input[current + 1] && input[current + 1] === 'f') {\r\n      if (\r\n        input[current + 2] === undefined ||\r\n        !/[a-z]i/.test(input[current + 2])\r\n      ) {\r\n        return [2, { type: 'if', value: 'if' }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeAnd returns tokenizeReturnObject for word and\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeAnd(input: any, current: any) {\r\n  if (input[current] === 'a') {\r\n    if (input[current + 1] && input[current + 1] === 'n') {\r\n      if (input[current + 2] && input[current + 2] === 'd') {\r\n        if (\r\n          input[current + 3] === undefined ||\r\n          /[0-9\\s]/.test(input[current + 3])\r\n        ) {\r\n          return [3, { type: 'and', value: 'and' }];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeDiv returns tokenizeReturnObject of type divide for word div\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeDiv(input: any, current: any) {\r\n  if (input[current] === 'd') {\r\n    if (input[current + 1] && input[current + 1] === 'i') {\r\n      if (input[current + 2] && input[current + 2] === 'v') {\r\n        if (\r\n          input[current + 3] === undefined ||\r\n          /[0-9\\s]/.test(input[current + 3])\r\n        ) {\r\n          return [3, { type: 'divide', value: '/' }];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeName returns tokenizeReturnObject of type name for regex [a-z_]+\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeName(input: any, current: any) {\r\n  return tokenizePattern('name', /[a-z_]/i, input, current);\r\n}\r\n\r\n/**\r\n * skipWhiteSpace removes space and iterates the position of compiler\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject that consumes characters without returning type\r\n */\r\nfunction skipWhiteSpace(input: any, current: any) {\r\n  return /\\s/.test(input[current]) ? [1, null] : [0, null];\r\n}\r\n\r\n/**\r\n * Precedence of the tokenizer methods\r\n * If new tokenizer method is created, please add inside tokenizers with correct precedence\r\n */\r\nconst tokenizers = [\r\n  skipWhiteSpace,\r\n  tokenizeParenOpen,\r\n  tokenizeParenClose,\r\n  tokenizeIf,\r\n  tokenizeOr,\r\n  tokenizeAnd,\r\n  tokenizeVariable,\r\n  tokenizeString,\r\n  tokenizeFunction,\r\n  tokenizeEqual,\r\n  tokenizePlus,\r\n  tokenizeMinus,\r\n  tokenizeMultiply,\r\n  tokenizeDivide,\r\n  tokenizeDiv,\r\n  tokenizeLessThan,\r\n  tokenizeGreaterThan,\r\n  tokenizeNot,\r\n  tokenizeBrakeOpen,\r\n  tokenizeBrakeClose,\r\n  tokenizeDot,\r\n  tokenizeComma,\r\n  tokenizeNumber,\r\n  tokenizeDecimal,\r\n  tokenizeName,\r\n];\r\n\r\n/**\r\n * tokenizer is primary method that takes the expression and convert them to appropiate tokens.\r\n * Throws syntax error if expression is not appropiate or could not be tokenized properly\r\n * @param {string} input - should be of string for valid cases\r\n * @returns array of tokens\r\n */\r\nfunction tokenizer(input: any) {\r\n  let current: number = 0;\r\n  const tokens: any = [];\r\n  while (current < input.length) {\r\n    let tokenized = false;\r\n    tokenizers.forEach(tokenizerFn => {\r\n      if (tokenized) {\r\n        return;\r\n      }\r\n      const [consumedChars, token]: any = tokenizerFn(input, current);\r\n      if (consumedChars !== 0) {\r\n        tokenized = true;\r\n        current += consumedChars;\r\n      }\r\n      if (token) {\r\n        tokens.push(token);\r\n      }\r\n    });\r\n    if (!tokenized) {\r\n      throw new TypeError(\r\n        `I dont know what this character is: ${input[current]}`\r\n      );\r\n    }\r\n  }\r\n  return tokens;\r\n}\r\n\r\n/**\r\n * kbSelected parses the function selected and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSelected(funcName: any, params: any, _paramsTokens: any) {\r\n  if (funcName === 'selected') {\r\n    let tmp = false;\r\n    if (Array.isArray(params[0])) {\r\n      params[0].forEach((element: any) => {\r\n        // tslint:disable-next-line: triple-equals\r\n        tmp = tmp || element == params[1];\r\n      });\r\n      return [true, tmp];\r\n    }\r\n    // tslint:disable-next-line: triple-equals\r\n    return [true, params[0] == params[1]];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n// tslint:disable-next-line: variable-name\r\nfunction kbChoice(funcName: any, params: any, _paramsTokens: any) {\r\n  if (funcName === 'jr:choice-name') {\r\n    const tmpHierchicalName = currentHierarchicalName.split('/');\r\n    let i;\r\n    let parent = '';\r\n    for (i = 0; i < tmpHierchicalName.length - 1; ) {\r\n      // tslint:disable-next-line: triple-equals\r\n      if (tmpHierchicalName[i] == 'repeat') {\r\n        i += 3;\r\n      } else {\r\n        // path.push(parent + tmpHierchicalName[i + 1]);\r\n        parent = parent + tmpHierchicalName[i + 1] + '/';\r\n        i += 2;\r\n      }\r\n    }\r\n    const state = store.getState();\r\n    const variableName =\r\n      parent + params[params.length - 1].replace(/[^a-zA-Z ]/g, '');\r\n    if (variableName in state.optionList) {\r\n      for (const key in state.optionList[variableName]) {\r\n        if (state.optionList[variableName][key].name === params[0]) {\r\n          return [\r\n            true,\r\n            state.optionList[variableName][key].label[state.language],\r\n          ];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbToday parses the function today and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbToday(funcName: any, _params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'today') {\r\n    const d = new Date();\r\n    d.setHours(0, 0, 0, 0);\r\n    return [true, d];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbRound parses the function round and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbRound(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'round') {\r\n    if (params[0] && params[1]) {\r\n      if (typeof params[0] === 'number' && typeof params[1] === 'number') {\r\n        return [true, params[0].toFixed(params[1])];\r\n      }\r\n      if (typeof params[0] === 'string' && typeof params[1] === 'number') {\r\n        return [true, parseFloat(params[0]).toFixed(params[1])];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbRegex parses the function regex and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbRegex(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'regex') {\r\n    const regex = RegExp(params[1]);\r\n    return [true, regex.test(params[0])];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbCountSelected parses the function count-selected and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbCountSelected(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'count-selected') {\r\n    if (params[0] && Array.isArray(params[0])) {\r\n      return [true, params[0].length];\r\n    }\r\n    if (params[0] && typeof params[0] !== 'object') {\r\n      return [true, 1];\r\n    }\r\n    return [true, 0];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbInt parses the function int and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbInt(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'int') {\r\n    if (typeof params[0] === 'string') {\r\n      return [true, parseInt(params[0], 10)];\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbCoalesce parses the function coalesce and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbCoalesce(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'coalesce') {\r\n    if (!params[0] && params[0] !== 0) {\r\n      return [true, params[1]];\r\n    }\r\n    return [true, params[0]];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbPosition parses the function position and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbPosition(funcName: any, _params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'position') {\r\n    if (currentHierarchicalName) {\r\n      const tmpName = currentHierarchicalName.split('/');\r\n      if (tmpName.length > 2) {\r\n        return [true, parseInt(tmpName[tmpName.length - 2], 10) + 1];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * sumValuesOverJsn is a utility method for kbSum\r\n * @param sum - initial sum value\r\n * @param jsnObj - variable name and value in json object\r\n * @param variableName - variable name\r\n * @returns the calculated sum\r\n */\r\nfunction sumValuesOverJsn(sum: any, jsnObj: any, variableName: any) {\r\n  if (Array.isArray(jsnObj)) {\r\n    let i;\r\n    for (i = 0; i < jsnObj.length; i += 1) {\r\n      sum = sumValuesOverJsn(sum, jsnObj[i], variableName);\r\n    }\r\n  } else if (typeof jsnObj === 'object') {\r\n    for (const key in jsnObj) {\r\n      if (typeof jsnObj[key] === 'object') {\r\n        sum = sumValuesOverJsn(sum, jsnObj[key], variableName);\r\n      } else if (key === variableName) {\r\n        if (typeof jsnObj[key] === 'string') {\r\n          sum += parseFloat(jsnObj[key]);\r\n        }\r\n        if (typeof jsnObj[key] === 'number') {\r\n          sum += jsnObj[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\n/**\r\n * kbSum parses the function sum and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSum(funcName: any, _params: any, paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'sum') {\r\n    let sumValue = null;\r\n    if (\r\n      paramsTokens &&\r\n      paramsTokens.length > 0 &&\r\n      paramsTokens[0] &&\r\n      paramsTokens[0].length > 0 &&\r\n      paramsTokens[0][0].type === 'variable'\r\n    ) {\r\n      sumValue = sumValuesOverJsn(0, userInput, paramsTokens[0][0].value);\r\n    }\r\n    return [true, sumValue];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbConcat parses the function concat and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbConcat(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'concat') {\r\n    if (params && params.length > 0) {\r\n      let concatStr = '';\r\n      // tslint:disable-next-line: prefer-for-of\r\n      for (let i = 0; i < params.length; i += 1) {\r\n        if (params[i] == null) {\r\n          // continue;\r\n          // return [false, null];\r\n          concatStr += '';\r\n        } else {\r\n          concatStr += params[i];\r\n        }\r\n      }\r\n      return [true, concatStr];\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbSubstr parses the function substr and returns functionParseReturnObject\r\n * @param {any} funcName - the function name of the token\r\n * @param {any} params - calculated value of the params tokens\r\n * @param {any} _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSubstr(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'substr') {\r\n    if (params && params.length > 0) {\r\n      if (params[0] && params[1] !== null) {\r\n        if (params[2] !== null && params[2] < params[0].length) {\r\n          const subStr = params[0].substring(params[1], params[2]);\r\n          return [true, subStr];\r\n        }\r\n        return [true, params[0].substring(params[1])];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * outerScopedVariables is a utility method that returns same variable values based on outerscope\r\n * @param {any} variableName - variable name\r\n * @param {any} variableValue - variable value upto now\r\n * @param {any} tmpUserInput - variable key-value storage\r\n * @returns parsed scoped variable value\r\n */\r\nfunction outerScopedVariables(\r\n  variableName: any,\r\n  variableValue: any,\r\n  tmpUserInput: any\r\n): any {\r\n  // tslint:disable-next-line: forin\r\n  for (const key in tmpUserInput) {\r\n    const nodeNames = key.split('/');\r\n    const variableNameFromKey = nodeNames[nodeNames.length - 1];\r\n    if (variableNameFromKey === variableName) {\r\n      return tmpUserInput[key];\r\n    }\r\n    if (typeof tmpUserInput[key] === 'object') {\r\n      if (variableValue == null) {\r\n        variableValue = outerScopedVariables(\r\n          variableName,\r\n          variableValue,\r\n          tmpUserInput[key]\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return variableValue;\r\n}\r\n\r\n/**\r\n * parseMostClosestScopedVariable returns the closest scoped parsed variable value\r\n * @param {any} variableName - the variable name\r\n * @returns the parsed variable value\r\n */\r\nfunction parseMostClosestScopedVariable(variableName: any) {\r\n  const tmpHierchicalName = currentHierarchicalName.split('/');\r\n  let i;\r\n  const tmpUserInput = userInput;\r\n  let variableValue = null;\r\n  variableValue = outerScopedVariables(\r\n    variableName,\r\n    variableValue,\r\n    tmpUserInput\r\n  );\r\n  let parent = '';\r\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\r\n    // tslint:disable-next-line: triple-equals\r\n    if (tmpHierchicalName[i] == 'repeat') {\r\n      i += 1;\r\n      const index = parseInt(tmpHierchicalName[i + 1], 10);\r\n      variableValue = outerScopedVariables(\r\n        variableName,\r\n        variableValue,\r\n        tmpUserInput[parent + tmpHierchicalName[i]][index]\r\n      );\r\n      i += 2;\r\n    } else {\r\n      parent = parent + tmpHierchicalName[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  return variableValue;\r\n}\r\n\r\n/**\r\n * parseDot parses the dot\r\n * @returns parsed value\r\n */\r\nfunction parseDot() {\r\n  const tmpHierchicalName = currentHierarchicalName.split('/');\r\n  let i;\r\n  let tmpUserInput = userInput;\r\n  let parent = '';\r\n  const path = [];\r\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\r\n    // tslint:disable-next-line: triple-equals\r\n    if (tmpHierchicalName[i] == 'repeat') {\r\n      i += 1;\r\n      path.push(parent + tmpHierchicalName[i]);\r\n      path.push(parseInt(tmpHierchicalName[i + 1], 10));\r\n      parent = parent + tmpHierchicalName[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      // path.push(parent + tmpHierchicalName[i + 1]);\r\n      parent = parent + tmpHierchicalName[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  path.push(parent + tmpHierchicalName[tmpHierchicalName.length - 1]);\r\n  tmpUserInput = userInput.getIn(path);\r\n  return tmpUserInput;\r\n}\r\n\r\n/**\r\n * parseLiterals parse a set of tokens, starting from number, string, decimal, variable, name, dot\r\n * @param {any} _tmpOutput - the parsed value of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the position of parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseLiterals(_tmpOutput: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'number') {\r\n    return [1, parseInt(tokens[current].value, 10)];\r\n  }\r\n  if (tokens[current].type === 'string') {\r\n    return [1, tokens[current].value];\r\n  }\r\n  if (tokens[current].type === 'decimal') {\r\n    return [1, parseFloat(tokens[current].value)];\r\n  }\r\n  if (tokens[current].type === 'variable') {\r\n    return [1, parseMostClosestScopedVariable(tokens[current].value)];\r\n  }\r\n  if (tokens[current].type === 'name') {\r\n    if (tokens[current].value.toLowerCase() === 'true') {\r\n      return [1, true];\r\n    }\r\n    if (tokens[current].value.toLowerCase() === 'false') {\r\n      return [1, false];\r\n    }\r\n    if (formItemProperty && tokens[current].value in formItemProperty) {\r\n      return [1, formItemProperty[tokens[current].value]];\r\n    }\r\n    return [1, null];\r\n  }\r\n  if (tokens[current].type === 'dot') {\r\n    return [1, parseDot()];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseFuntion parses the functions present in expression\r\n * @param {any} _output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseFunction(_output: any, tokens: any, current: any) {\r\n  // precedence of functions\r\n  const possibleFunctions = [\r\n    kbSelected,\r\n    kbCountSelected,\r\n    kbChoice,\r\n    kbToday,\r\n    kbRegex,\r\n    kbInt,\r\n    kbCoalesce,\r\n    kbPosition,\r\n    kbSum,\r\n    kbConcat,\r\n    kbSubstr,\r\n    kbRound,\r\n  ];\r\n  if (tokens[current].type === 'function') {\r\n    const funcName = tokens[current].value;\r\n    const arrayOfParams: any = [];\r\n    const arrayOfOriginalTokens: any = [];\r\n    let i = 1;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      const tmpQueue = [];\r\n      tmpQueue.push(1);\r\n      i += 1;\r\n      let tmpTokens = [];\r\n      while (tokens[current + i] && tmpQueue.length) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === ')'\r\n        ) {\r\n          tmpQueue.pop();\r\n        }\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === '('\r\n        ) {\r\n          tmpQueue.push(1);\r\n        }\r\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\r\n          tmpTokens.pop();\r\n          const tmpVal = parser(null, tmpTokens, 0);\r\n          arrayOfParams.push(tmpVal);\r\n          arrayOfOriginalTokens.push(tmpTokens);\r\n          tmpTokens = [];\r\n        }\r\n        i += 1;\r\n      }\r\n      i -= 1;\r\n\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpTokens.pop();\r\n        const tmpVal = parser(null, tmpTokens, 0);\r\n        arrayOfParams.push(tmpVal);\r\n        arrayOfOriginalTokens.push(tmpTokens);\r\n        let parsedFn = false;\r\n        let parsedVal = null;\r\n        possibleFunctions.forEach(functionFn => {\r\n          if (parsedFn) {\r\n            return;\r\n          }\r\n          [parsedFn, parsedVal] = functionFn(\r\n            funcName,\r\n            arrayOfParams,\r\n            arrayOfOriginalTokens\r\n          );\r\n        });\r\n        if (parsedFn) {\r\n          return [i + 1, parsedVal];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseIf parses the if present in expression\r\n * @param {any} _output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseIf(_output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'if') {\r\n    const arrayOfParams = [];\r\n    let i = 1;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      const tmpQueue = [];\r\n      tmpQueue.push(1);\r\n      i += 1;\r\n      let tmpTokens = [];\r\n      while (tokens[current + i] && tmpQueue.length) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === ')'\r\n        ) {\r\n          tmpQueue.pop();\r\n        }\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === '('\r\n        ) {\r\n          tmpQueue.push(1);\r\n        }\r\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\r\n          tmpTokens.pop();\r\n          const tmpVal = parser(null, tmpTokens, 0);\r\n          // console.log(tmpTokens, tmpVal);\r\n          arrayOfParams.push(tmpVal);\r\n          tmpTokens = [];\r\n        }\r\n        i += 1;\r\n      }\r\n      i -= 1;\r\n\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpTokens.pop();\r\n        const tmpVal = parser(null, tmpTokens, 0);\r\n        arrayOfParams.push(tmpVal);\r\n        if (arrayOfParams.length % 2 === 0) {\r\n          let j;\r\n          for (j = 0; j < arrayOfParams.length; j += 2) {\r\n            if (arrayOfParams[j]) {\r\n              return [i + 1, arrayOfParams[j + 1]];\r\n            }\r\n          }\r\n        } else {\r\n          let j;\r\n          for (j = 0; j < arrayOfParams.length - 1; j += 2) {\r\n            if (arrayOfParams[j]) {\r\n              return [i + 1, arrayOfParams[j + 1]];\r\n            }\r\n          }\r\n          return [i + 1, arrayOfParams[arrayOfParams.length - 1]];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseNot parses the not present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseNot(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'not') {\r\n    let tmpTokens;\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal' && output != null) {\r\n      tmpTokens = [];\r\n      i += 1;\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      let newOutput;\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n        // tslint:disable-next-line: triple-equals\r\n        return [i, output != newOutput];\r\n      }\r\n    } else {\r\n      let parsed = false;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      let consumedTokens;\r\n      let newOutput;\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          i += consumedTokens;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [i, !newOutput];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseAnd parses the and present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseAnd(output: any, tokens: any, current: any): any {\r\n  if (tokens[current].type === 'and' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    let newOutput = null;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      let consumedChars;\r\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\r\n      i += consumedChars;\r\n    } else {\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n      }\r\n    }\r\n    if (newOutput != null) {\r\n      newOutput = output && newOutput;\r\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\r\n        let consumedChars = 0;\r\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\r\n        i += consumedChars;\r\n      }\r\n      return [i, newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseOr parses the or present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseOr(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'or' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    let newOutput = null;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      let consumedChars;\r\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\r\n      i += consumedChars;\r\n    } else {\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n      }\r\n    }\r\n    if (newOutput != null || output != null) {\r\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\r\n        let consumedChars = 0;\r\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\r\n        i += consumedChars;\r\n      }\r\n      return [i, output || newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseEqual parses the equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseEqual(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'equal' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n      // tslint:disable-next-line: triple-equals\r\n      return [i, output == newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseLessThan parses the less than or equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseLessThan(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'lessThan' && output != null) {\r\n    let flagLessThanOrEqual = false;\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal') {\r\n      i += 1;\r\n      flagLessThanOrEqual = true;\r\n    }\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n      if (flagLessThanOrEqual) {\r\n        return [i, output <= newOutput];\r\n      }\r\n      return [i, output < newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseGreaterThan parses the greater than or equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseGreaterThan(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'greaterThan' && output != null) {\r\n    let flagGreaterThanOrEqual = false;\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal') {\r\n      i += 1;\r\n      flagGreaterThanOrEqual = true;\r\n    }\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n\r\n      if (flagGreaterThanOrEqual) {\r\n        return [i, output >= newOutput];\r\n      }\r\n      return [i, output > newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseParen parses the paren present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseParen(_output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'paren' && tokens[current].value === '(') {\r\n    const tmpQueue = [];\r\n    tmpQueue.push(1);\r\n    let i = 1;\r\n    const tmpTokens = [];\r\n    while (tokens[current + i] && tmpQueue.length) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpQueue.pop();\r\n      }\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === '('\r\n      ) {\r\n        tmpQueue.push(1);\r\n      }\r\n      i += 1;\r\n    }\r\n    i -= 1;\r\n\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === ')'\r\n    ) {\r\n      tmpTokens.pop();\r\n      const tmpVal = parser(null, tmpTokens, 0);\r\n      return [i + 1, tmpVal];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseDivide parses the divide present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseDivide(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'divide') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n        }\r\n        const precedentParsers = [parseDivide, parseMultiply];\r\n        let preParsed = false;\r\n        let preOutput;\r\n        precedentParsers.forEach(preParseFn => {\r\n          if (preParsed) {\r\n            return;\r\n          }\r\n          if (tokens[current]) {\r\n            [consumedTokens, preOutput] = preParseFn(\r\n              newOutput,\r\n              tokens,\r\n              current\r\n            );\r\n            ct += consumedTokens;\r\n            if (consumedTokens !== 0) {\r\n              preParsed = true;\r\n              newOutput = preOutput;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (newOutput != null) {\r\n          output /= newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseMultiply parses the multiply present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseMultiply(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'multiply') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n        }\r\n        const precedentParsers = [parseDivide, parseMultiply];\r\n        let preParsed = false;\r\n        let preOutput;\r\n        precedentParsers.forEach(preParseFn => {\r\n          if (preParsed) {\r\n            return;\r\n          }\r\n          if (tokens[current]) {\r\n            [consumedTokens, preOutput] = preParseFn(\r\n              newOutput,\r\n              tokens,\r\n              current\r\n            );\r\n            ct += consumedTokens;\r\n            if (consumedTokens !== 0) {\r\n              preParsed = true;\r\n              newOutput = preOutput;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (newOutput != null) {\r\n          output *= newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parsePlus parses the addition present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parsePlus(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'plus') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'string',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n          const precedentParsers = [parseDivide, parseMultiply];\r\n          let preParsed = false;\r\n          let preOutput;\r\n          precedentParsers.forEach(preParseFn => {\r\n            if (preParsed) {\r\n              return;\r\n            }\r\n            if (tokens[current]) {\r\n              [consumedTokens, preOutput] = preParseFn(\r\n                newOutput,\r\n                tokens,\r\n                current\r\n              );\r\n              ct += consumedTokens;\r\n              if (consumedTokens !== 0) {\r\n                preParsed = true;\r\n                newOutput = preOutput;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (newOutput != null) {\r\n          output += newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseMinus parses the minus present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseMinus(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'minus') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [parseLiterals, parseParen, parseFunction];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n          const precedentParsers = [parseDivide, parseMultiply];\r\n          let preParsed = false;\r\n          let preOutput;\r\n          precedentParsers.forEach(preParseFn => {\r\n            if (preParsed) {\r\n              return;\r\n            }\r\n            if (tokens[current]) {\r\n              [consumedTokens, preOutput] = preParseFn(\r\n                newOutput,\r\n                tokens,\r\n                current\r\n              );\r\n              ct += consumedTokens;\r\n              if (consumedTokens !== 0) {\r\n                preParsed = true;\r\n                newOutput = preOutput;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (newOutput) {\r\n          if (output) {\r\n            if (\r\n              Object.prototype.toString.call(newOutput) === '[object Date]' &&\r\n              Object.prototype.toString.call(output) === '[object Date]'\r\n            ) {\r\n              if (!isNaN(output.getTime()) && !isNaN(newOutput.getTime())) {\r\n                output -= newOutput;\r\n                output = Math.ceil(output / (1000 * 60 * 60 * 24));\r\n              } else {\r\n                output = NaN;\r\n              }\r\n            } else if (\r\n              Object.prototype.toString.call(newOutput) === '[object Date]' ||\r\n              Object.prototype.toString.call(output) === '[object Date]'\r\n            ) {\r\n              output = NaN;\r\n            } else if (newOutput === '' || output === '') {\r\n              output = NaN;\r\n            } else {\r\n              output -= newOutput;\r\n            }\r\n          } else {\r\n            if (Object.prototype.toString.call(newOutput) === '[object Date]') {\r\n              output = NaN;\r\n            } else {\r\n              output = -newOutput;\r\n            }\r\n          }\r\n        } else {\r\n          output = NaN;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        if (output === '') {\r\n          output = NaN;\r\n        }\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n// precedence of the parser methods\r\nconst parsers = [\r\n  parseIf,\r\n  parseParen,\r\n  parseLiterals,\r\n  parseDivide,\r\n  parseMultiply,\r\n  parsePlus,\r\n  parseMinus,\r\n  parseLessThan,\r\n  parseGreaterThan,\r\n  parseEqual,\r\n  parseAnd,\r\n  parseOr,\r\n  parseNot,\r\n  parseFunction,\r\n];\r\n\r\n/**\r\n * the main parser that parses the series of tokens generated by the tokenizer.\r\n * Throws syntax error if not parsed\r\n * @param {any} leftOutput - the initial output or output of previous left side tokens\r\n * @param {any} tokens - the set or array of tokens need to be parsed\r\n * @param {any} pos - the start position of the parser\r\n * @returns parsed value of the set of tokens\r\n */\r\nfunction parser(leftOutput: any, tokens: any, pos: any) {\r\n  let current = pos;\r\n  let output = leftOutput;\r\n  while (current < tokens.length) {\r\n    let parsed = false;\r\n    parsers.forEach(parserFn => {\r\n      if (parsed) {\r\n        return;\r\n      }\r\n      const [consumedTokens, newOutput] = parserFn(output, tokens, current);\r\n      if (consumedTokens !== 0) {\r\n        parsed = true;\r\n        current += consumedTokens;\r\n      }\r\n      // console.log(current);\r\n      if (newOutput != null) {\r\n        output = newOutput;\r\n      }\r\n    });\r\n    if (!parsed) {\r\n      // throw new TypeError('syntax error');\r\n      // tslint:disable-next-line: no-console\r\n      console.log('syntax error');\r\n      // tslint:disable-next-line: no-console\r\n      console.log(actualExpression);\r\n      return null;\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * odk wrapper evaluator, default method that will be exported, parses expressions\r\n * @param {any} expression - expression that needs to be evaluated\r\n * @param {any} tmpUserInput - the variable key-value json, (current user input json)\r\n * @param {any} tmpFormItemProperty - the name key-value json (current option list)\r\n * @param {any} tmpCurrentHierarchicalName - the node at which the evaluater is called\r\n * @returns evaluated value\r\n */\r\nexport default function evaluater(\r\n  expression: string,\r\n  tmpUserInput: any,\r\n  tmpFormItemProperty: any,\r\n  tmpCurrentHierarchicalName: string\r\n) {\r\n  if (!tmpUserInput) {\r\n    tmpUserInput = {};\r\n  }\r\n  currentHierarchicalName = tmpCurrentHierarchicalName;\r\n  actualExpression = expression;\r\n  userInput = tmpUserInput;\r\n  formItemProperty = tmpFormItemProperty;\r\n  return parser(null, tokenizer(expression), 0);\r\n}\r\n","import * as React from 'react';\r\nimport { Alert } from 'reactstrap';\r\n\r\nexport interface KbAlertProps {\r\n  headerText: string;\r\n  bodyText: string;\r\n  handleToggle: any;\r\n  isOpen: boolean;\r\n  color: string;\r\n}\r\n\r\nclass KbAlert extends React.Component<KbAlertProps> {\r\n  public render() {\r\n    const { headerText, bodyText, handleToggle, isOpen, color } = this.props;\r\n    return (\r\n      <Alert color={color} isOpen={isOpen} toggle={handleToggle}>\r\n        <h4 className=\"alert-heading\">{headerText}</h4>\r\n        <p>{bodyText}</p>\r\n      </Alert>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KbAlert;\r\n","import * as React from 'react';\r\nimport Select from 'react-select';\r\n\r\nexport interface DropDownProps {\r\n  languages: any;\r\n  onChangeSelect: any;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass DropDown extends React.Component<DropDownProps> {\r\n  public render() {\r\n    const options: Options[] = [];\r\n    const languageOptions = [...this.props.languages];\r\n    languageOptions.map((elem: any) => {\r\n      options.push({ label: elem.label, value: elem.value });\r\n    });\r\n\r\n    let selectedValue: any;\r\n    options.map(elem => {\r\n      if (elem.value === this.props.defaultLanguage) {\r\n        selectedValue = elem;\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Select\r\n        multi={false}\r\n        options={options}\r\n        className={'col-md-2 dropDown'}\r\n        placeholder=\"Language\"\r\n        onChange={this.onChangeHandler}\r\n        value={selectedValue || ''}\r\n      />\r\n    );\r\n  }\r\n\r\n  /** pass the selected value to the parent class\r\n   * @param {any} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: any) => {\r\n    this.props.onChangeSelect(event.value);\r\n  };\r\n}\r\n\r\nexport default DropDown;\r\n","// Field Types\r\nexport const GROUP_FIELD_TYPE = 'group';\r\nexport type GROUP_FIELD_TYPE = typeof GROUP_FIELD_TYPE;\r\nexport const REPEAT_FIELD_TYPE = 'repeat';\r\nexport type REPEAT_FIELD_TYPE = typeof REPEAT_FIELD_TYPE;\r\nexport const TEXT_FIELD_TYPE = 'text';\r\nexport type TEXT_FIELD_TYPE = typeof TEXT_FIELD_TYPE;\r\nexport const DATE_FIELD_TYPE = 'date';\r\nexport type DATE_FIELD_TYPE = typeof DATE_FIELD_TYPE;\r\nexport const DATE_TIME_FIELD_TYPE = 'dateTime';\r\nexport type TIME_FIELD_TYPE = typeof TIME_FIELD_TYPE;\r\nexport const TIME_FIELD_TYPE = 'time';\r\nexport type DATE_TIME_FIELD_TYPE = typeof DATE_TIME_FIELD_TYPE;\r\nexport const INTEGER_FIELD_TYPE = 'integer';\r\nexport type INTEGER_FIELD_TYPE = typeof INTEGER_FIELD_TYPE;\r\nexport const DECIMAL_FIELD_TYPE = 'decimal';\r\nexport type DECIMAL_FIELD_TYPE = typeof DECIMAL_FIELD_TYPE;\r\nexport const PHOTO_FIELD_TYPE = 'photo';\r\nexport type PHOTO_FIELD_TYPE = typeof PHOTO_FIELD_TYPE;\r\nexport const FILE_FIELD_TYPE = 'file';\r\nexport type FILE_FIELD_TYPE = typeof FILE_FIELD_TYPE;\r\nexport const NOTE_FIELD_TYPE = 'note';\r\nexport type NOTE_FIELD_TYPE = typeof NOTE_FIELD_TYPE;\r\nexport const SELECT_ONE_FIELD_TYPE = 'select one';\r\nexport type SELECT_ONE_FIELD_TYPE = typeof SELECT_ONE_FIELD_TYPE;\r\nexport const SELECT_ALL_FIELD_TYPE = 'select all that apply';\r\nexport type SELECT_ALL_FIELD_TYPE = typeof SELECT_ALL_FIELD_TYPE;\r\nexport const CALCULATE_FIELD_TYPE = 'calculate';\r\nexport type CALCULATE_FIELD_TYPE = typeof CALCULATE_FIELD_TYPE;\r\n\r\n// Required Properties\r\nexport const REQUIRED_FIELD_MSG = 'This field is required';\r\nexport type REQUIRED_FIELD_MSG = typeof REQUIRED_FIELD_MSG;\r\nexport const REQUIRED_SYMBOL = '*';\r\nexport type REQUIRED_SYMBOL = typeof REQUIRED_SYMBOL;\r\n","import { createStore, Store } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer, { FormState } from './ducks/formState';\r\n\r\n/** The initial store */\r\nconst store: Store & FormState = createStore(reducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import { FieldElement } from '../components/typeEvalutors/Base';\r\n\r\n/**\r\n * get the text from multilang obj based on language identifier,\r\n * @param {FieldElement} property - field multilang property or string\r\n * @return {string} - text value of the property based on language identifier, empty if not present\r\n */\r\nexport default function getTextFromProperty(\r\n  property: string | { [key: string]: string },\r\n  languageIdentifier: string\r\n): string {\r\n  if (typeof property === 'string') {\r\n    return property || '';\r\n  }\r\n  return property[languageIdentifier] || '';\r\n}\r\n\r\n/**\r\n * get the label text of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field label text\r\n */\r\nexport function getFieldLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.label) {\r\n    return getTextFromProperty(fieldElement.label, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the label hint of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field label text\r\n */\r\nexport function getHintLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.hint) {\r\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the customised label text with previous input of the fieldElement\r\n * @param {any} evaluator - the getEvaluatedExpressionSelector Function\r\n * @param {string} labelText - the current Label Text\r\n * @param {string} fieldTreeName - the field tree name\r\n * @return {string | null} - field label text or null\r\n */\r\nexport function customizeLabelsWithPreviousInputs(\r\n  evaluator: any,\r\n  labelText: string,\r\n  fieldTreeName: string\r\n): string | null {\r\n  if (labelText === null || labelText === undefined) {\r\n    return null;\r\n  }\r\n  const placesOfCustomizationsRequiredList = labelText.match(/\\[(.*?)\\]/g);\r\n\r\n  // to calculate - i.e, [${departure_date_from_bangladesh}]\r\n  if (placesOfCustomizationsRequiredList) {\r\n    placesOfCustomizationsRequiredList.forEach(tmpPlace => {\r\n      tmpPlace = tmpPlace.substring(1, tmpPlace.length - 1);\r\n      const customizedName = evaluator(tmpPlace, fieldTreeName);\r\n      const tmp = '[' + tmpPlace + ']';\r\n      if (customizedName != null && customizedName !== undefined) {\r\n        labelText = labelText.replace(tmp, customizedName);\r\n      } else {\r\n        labelText = labelText.replace(tmp, '');\r\n      }\r\n    });\r\n  } else {\r\n    // to calculate - i.e, ${departure_date_from_bangladesh}\r\n    const matchList = labelText.match(/\\${(.*[^}])[\\}?]$/g);\r\n    if (matchList) {\r\n      matchList.forEach(tmpPlace => {\r\n        const customizedName = evaluator(tmpPlace, fieldTreeName);\r\n        if (customizedName != null && customizedName !== undefined) {\r\n          labelText = labelText.replace(tmpPlace, customizedName);\r\n        } else {\r\n          labelText = labelText.replace(tmpPlace, '');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return labelText;\r\n}\r\n\r\n/**\r\n * get the hint text of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field hint text\r\n */\r\nexport function getFieldHintText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.hint) {\r\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the label text of the fieldElement constraint msg\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - constraint label text\r\n */\r\nexport function getConstraintLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.bind && fieldElement.bind['jr:constraintMsg']) {\r\n    return getTextFromProperty(\r\n      fieldElement.bind['jr:constraintMsg'],\r\n      languageIdentifier\r\n    );\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the boolean result depending on the expression\r\n * @param {string} - required string\r\n * @returns {boolean} - true if required, otherwise false\r\n */\r\nfunction requiredEvaluator(expression: string): boolean {\r\n  if (\r\n    expression.toLowerCase() === 'yes' ||\r\n    expression === '1' ||\r\n    expression.toLowerCase() === 'true'\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * get the boolean result of fieldElement string\r\n * @param fieldElement\r\n * @return {boolean} - boolean value by calculating fieldElement required properties\r\n */\r\nexport function isInputRequired(fieldElement: FieldElement): boolean {\r\n  let isRequired = false;\r\n  if (fieldElement.bind) {\r\n    if (fieldElement.bind.required) {\r\n      if (\r\n        typeof fieldElement.bind.required === 'string' &&\r\n        requiredEvaluator(fieldElement.bind.required)\r\n      ) {\r\n        isRequired = true;\r\n      }\r\n    }\r\n  }\r\n  return isRequired;\r\n}\r\n\r\n/** interface for EvaluateExpression\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {fieldTreeName} - the field Tree name\r\n * @returns {any} - evaluated value\r\n */\r\nexport type EvaluateExpression = (\r\n  expression: string,\r\n  fieldTreeName: string\r\n) => any;\r\n\r\n/** evaluates whether a component be relevant or not\r\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the relevant expression\r\n * @returns {boolean} - true if relevant; otherwise, false;\r\n */\r\nexport function shouldComponentBeRelevant(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.relevant) {\r\n    const isRelevant = evaluateExpression(\r\n      fieldElement.bind.relevant,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isRelevant) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/** evaluates whether a component be readonly or not\r\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the readonly expression\r\n * @returns {boolean} - true if readonly; otherwise, false;\r\n */\r\nexport function shouldComponentBeReadOnly(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.readonly) {\r\n    const isReadOnly = evaluateExpression(\r\n      fieldElement.bind.readonly,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isReadOnly) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** evaluates whether the input violates constraint or not\r\n * @param {FieldElement} fieldElement - the constraint expression\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the expression\r\n * @returns {boolean} - true if violates; otherwise, false;\r\n */\r\nexport function shouldInputViolatesConstraint(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.constraint) {\r\n    const isConstraintViolated = !evaluateExpression(\r\n      fieldElement.bind.constraint,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isConstraintViolated) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** returns the new user input object after assigning value of passed fieldTreeName\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @param {any} fieldValue - the value that needs to be assigned\r\n * @returns {any} - the new user input object after assignment\r\n */\r\nexport function getModifiedUserInputObject(\r\n  userInputObj: any,\r\n  fieldTreeName: string,\r\n  fieldValue: any\r\n): any {\r\n  const treeNodes = fieldTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  modifiedObj[parent + treeNodes[treeNodes.length - 1]] = fieldValue;\r\n  return userInputObj;\r\n}\r\n\r\n/** Returns the filtered option list Array For Repeat property\r\n * @param {any} userInputObj - the current option list object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @param {any} repeatIndex - the repeat index to remove\r\n * @returns {any} - the new user filredred repear array after assignment\r\n */\r\nexport function getModifiedOptionListForRepeat(\r\n  userInputObj: any,\r\n  fieldTreeName: string,\r\n  repeatIndex: number\r\n): any {\r\n  const filteredRepeatArray: any = [];\r\n  const optionListobj: any = userInputObj;\r\n\r\n  Object.entries(optionListobj).forEach(key => {\r\n    const keyNameOptionListobj: any = key[0];\r\n    const keyValueOptionListobj: any = key[1];\r\n    if (keyNameOptionListobj === fieldTreeName) {\r\n      const repeatIndexString: string = String(repeatIndex);\r\n      Object.entries(keyValueOptionListobj).map(keyRepeat => {\r\n        const keyNameRepeatObject: any = keyRepeat[0];\r\n        const keyValueRepeatValue: any = keyRepeat[1];\r\n        if (keyNameRepeatObject !== repeatIndexString) {\r\n          filteredRepeatArray.push(keyValueRepeatValue);\r\n        }\r\n      });\r\n    }\r\n  });\r\n  return filteredRepeatArray;\r\n}\r\n\r\n/** returns the value from the user input object\r\n * @param {any} userInputObj - the user input object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @returns {any} - the value, present in user input object, of the fieldTreeName\r\n */\r\nexport function getValueFromUserInputObj(\r\n  userInputObj: any,\r\n  fieldTreeName: string\r\n): any {\r\n  const treeNodes = fieldTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  return modifiedObj[parent + treeNodes[treeNodes.length - 1]];\r\n}\r\n\r\n/** evaluates whether the component is minimal or not\r\n * @param {FieldElement} fieldElement - the constraint expression\r\n * @returns {boolean} - true if minimal; otherwise, false;\r\n */\r\nexport function shouldComponentBeMinimal(fieldElement: FieldElement): boolean {\r\n  let isMinimal = false;\r\n  if (fieldElement.control && fieldElement.control.appearance) {\r\n    fieldElement.control.appearance.toString().includes('minimal')\r\n      ? (isMinimal = true)\r\n      : (isMinimal = false);\r\n  }\r\n  return isMinimal;\r\n}\r\n\r\n/** returns the new user input object after emptying the desired grouped values\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} groupTreeName - the group Tree name\r\n * @returns {any} - the new user input object after emptying the grouped values\r\n */\r\nexport function emptyGroupedValues(\r\n  userInputObj: any,\r\n  groupTreeName: string\r\n): any {\r\n  const treeNodes = groupTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  Object.keys(modifiedObj).forEach(objKey => {\r\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\r\n      modifiedObj[objKey] = null;\r\n    }\r\n  });\r\n  return userInputObj;\r\n}\r\n\r\n/** returns whether the grouped values are empty or not\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} groupTreeName - the group Tree name\r\n * @returns {any} - true if empty; otherwise, false\r\n */\r\nexport function checkGroupedValuesForEmpty(\r\n  userInputObj: any,\r\n  groupTreeName: string\r\n): any {\r\n  const treeNodes = groupTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  let isEmpty: boolean = true;\r\n  Object.keys(modifiedObj).forEach(objKey => {\r\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\r\n      if (\r\n        modifiedObj[objKey] !== null &&\r\n        modifiedObj[objKey] !== undefined &&\r\n        isEmpty\r\n      ) {\r\n        isEmpty = false;\r\n      }\r\n    }\r\n  });\r\n  return isEmpty;\r\n}\r\n","import { AnyAction, Store } from 'redux';\r\nimport SeamlessImmutable from 'seamless-immutable';\r\nimport evaluater from '../../utils/compiler';\r\nimport {\r\n  checkGroupedValuesForEmpty,\r\n  emptyGroupedValues,\r\n  getModifiedOptionListForRepeat,\r\n  getModifiedUserInputObject,\r\n  getValueFromUserInputObj,\r\n} from '../../utils/helpers';\r\n\r\n/** interface for the store state */\r\nexport interface FormState {\r\n  userInput: object;\r\n  errors: string[];\r\n  optionList: object;\r\n  isFormSubmitted: boolean;\r\n  mediaList: object;\r\n  language: string;\r\n}\r\n\r\n// actions\r\n\r\n/** FIELD_VALUE_ASSIGNED action type */\r\nexport const FIELD_VALUE_ASSIGNED = 'odk/reducer/form/FIELD_VALUE_ASSIGNED';\r\n/** OPTION_LIST_ASSIGNED action type */\r\nexport const OPTION_LIST_ASSIGNED = 'odk/reducer/form/OPTION_LIST_ASSIGNED';\r\n/** MEDIA_LIST_ASSIGNED action type */\r\nexport const MEDIA_LIST_ADDED = 'odk/reducer/form/MEDIA_LIST_ADDED';\r\n/** REMOVE_FROM_MEDIA_LIST action type */\r\nexport const REMOVE_FROM_MEDIA_LIST = 'odk/reducer/form/REMOVE_FROM_MEDIA_LIST';\r\n/** REMOVE_FROM_OPTION_LIST action type */\r\nexport const REMOVE_FROM_OPTION_LIST_REPEAT =\r\n  'odk/reducer/form/REMOVE_FROM_OPTION_LIST_REPEAT';\r\n/** RESET_STORE action type */\r\nexport const RESET_STORE = 'odk/reducer/form/RESET_STORE';\r\n/** ADD_ERROR_INPUT_ID action type */\r\nexport const ADD_ERROR_INPUT_ID = 'odk/reducer/form/ADD_ERROR_INPUT_ID';\r\n/** REMOVE_ERROR_INPUT_ID action type */\r\nexport const REMOVE_ERROR_INPUT_ID = 'odk/reducer/form/REMOVE_ERROR_INPUT_ID';\r\n/** EMPTY_GROUP_FIELDS */\r\nexport const EMPTY_GROUP_FIELDS = 'odk/reducer/form/EMPTY_GROUP_FIELDS';\r\n/** REMOVE_GROUP_FIELDS_FROM_ERRORS */\r\nexport const REMOVE_GROUP_FIELDS_FROM_ERRORS =\r\n  'odk/reducer/form/REMOVE_GROUP_FIELDS_FROM_ERRORS';\r\nexport const SET_USER_INPUT_OBJ = 'odk/reducer/form/SET_USER_INPUT_OBJ';\r\nexport const SET_FORM_SUBMIT_STATUS = 'odk/reducer/form/SET_FORM_SUBMIT_STATUS';\r\nexport const SET_LANGUAGE = 'odk/reducer/form/SET_LANGUAGE';\r\n\r\n/** interface for ASSIGN_FIELD_VALUE action */\r\nexport interface AssignFieldValueAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  fieldValue: any;\r\n  type: typeof FIELD_VALUE_ASSIGNED;\r\n}\r\n\r\n/** interface for OPTION_LIST_ASSIGNED action */\r\nexport interface AssignOptionListAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  optionList: any;\r\n  type: typeof OPTION_LIST_ASSIGNED;\r\n}\r\n\r\n/** interface for MEDIA_LIST_ADDED action */\r\nexport interface AddMediaListAction extends AnyAction {\r\n  mediaObject: any;\r\n  type: typeof MEDIA_LIST_ADDED;\r\n}\r\n\r\n/** interface for REMOVE_FROM_MEDIA_LIST action */\r\nexport interface RemoveFromMediaListAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  mediaList: any;\r\n  type: typeof REMOVE_FROM_MEDIA_LIST;\r\n}\r\n\r\n/** interface for REMOVE_FROM_OPTION_LIST action */\r\nexport interface RemoveFromOptionList extends AnyAction {\r\n  fieldTreeName: string;\r\n  repeatIndex: number;\r\n  type: typeof REMOVE_FROM_OPTION_LIST_REPEAT;\r\n}\r\n\r\n/** interface for RESET_STORE action */\r\nexport interface ResetStoreAction extends AnyAction {\r\n  type: typeof RESET_STORE;\r\n}\r\n\r\n/** interface for ADD_ERROR_INPUT_ID action */\r\nexport interface AddErrorInputId extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof ADD_ERROR_INPUT_ID;\r\n}\r\n\r\n/** interface for REMOVE_ERROR_INPUT_ID action */\r\nexport interface RemoveErrorInputId extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof REMOVE_ERROR_INPUT_ID;\r\n}\r\n\r\n/** interface for EMPTY_GROUP_FIELDS action */\r\nexport interface EmptyGroupFields extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof EMPTY_GROUP_FIELDS;\r\n}\r\n\r\n/** interface for REMOVE_GROUP_FIELDS_FROM_ERRORS action */\r\nexport interface RemoveGroupFieldsFromErrors extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof REMOVE_GROUP_FIELDS_FROM_ERRORS;\r\n}\r\n\r\n/** interface for SET_USER_INPUT_OBJ action */\r\nexport interface SetUserInputObj extends AnyAction {\r\n  userInputObj: any;\r\n  type: typeof SET_USER_INPUT_OBJ;\r\n}\r\n\r\n/** interface for SET_LANGUAGE action */\r\nexport interface SetLanguage extends AnyAction {\r\n  language: string;\r\n  type: typeof SET_LANGUAGE;\r\n}\r\n\r\n/** interface for SET_FORM_SUBMIT_STATUS action */\r\nexport interface SetFormSubmitStatus extends AnyAction {\r\n  isFormSubmitted: boolean;\r\n  type: typeof SET_FORM_SUBMIT_STATUS;\r\n}\r\n\r\n/** Assigns the value to the proper field name\r\n * @param {string} fieldTreeName - the extended field name\r\n * @param {any} fieldValue - the value that will be assigned\r\n * @return {AssignFieldValueAction} - an action to assign value to a field in the redux store\r\n */\r\nexport const assignFieldValueAction = (\r\n  fieldTreeName: string,\r\n  fieldValue: any\r\n): AssignFieldValueAction => ({\r\n  fieldTreeName,\r\n  fieldValue,\r\n  type: FIELD_VALUE_ASSIGNED,\r\n});\r\n\r\n/** Assigns option list to the proper field name\r\n * @param {string} fieldTreeName - the extended field name\r\n * @param {any} optionList - the option list that will be assigned\r\n * @return {AssignOptionListAction} - an action to assign option List to a field in the redux store\r\n */\r\nexport const assignOptionListAction = (\r\n  fieldTreeName: string,\r\n  optionList: any\r\n): AssignOptionListAction => ({\r\n  fieldTreeName,\r\n  optionList,\r\n  type: OPTION_LIST_ASSIGNED,\r\n});\r\n\r\n/** Remove option list from Redux Store\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveFromOptionList} - an action to remove input id for errors\r\n */\r\nexport const RemoveFromOptionList = (\r\n  fieldTreeName: string,\r\n  repeatIndex: number\r\n): RemoveFromOptionList => ({\r\n  fieldTreeName,\r\n  repeatIndex,\r\n  type: REMOVE_FROM_OPTION_LIST_REPEAT,\r\n});\r\n\r\n/** Adds media object to the proper field name\r\n * @param {any} mediaObject - the media object that will be added\r\n * @return {AddMediaListAction} - an action to assign media object to a field in the redux store\r\n */\r\nexport const addMediaListAction = (mediaObject: any): AddMediaListAction => ({\r\n  mediaObject,\r\n  type: MEDIA_LIST_ADDED,\r\n});\r\n\r\n/** Remove a media item in option list from Redux Store\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveFromMediaListAction} - an action to remove media info from redux store\r\n */\r\nexport const removeFromMediaListAction = (\r\n  fieldTreeName: string,\r\n  mediaList: any\r\n): RemoveFromMediaListAction => ({\r\n  fieldTreeName,\r\n  mediaList,\r\n  type: REMOVE_FROM_MEDIA_LIST,\r\n});\r\n\r\n/** Resets the redux store state to initial state\r\n * @return {ResetStoreAction} - an action to reset the redux store state\r\n */\r\nexport const resetStoreAction = (): ResetStoreAction => ({\r\n  type: RESET_STORE,\r\n});\r\n\r\n/** add the field tree name as error id to store in redux store that violates constraints\r\n * @param fieldTreeName - the field tree name\r\n * @returns {AddErrorInputId} - an action to add input id for errors\r\n */\r\nexport const addErrorInputId = (fieldTreeName: string): AddErrorInputId => ({\r\n  fieldTreeName,\r\n  type: ADD_ERROR_INPUT_ID,\r\n});\r\n\r\n/** remove the field tree name as error id to store in redux store that violates constraints\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveErrorInputId} - an action to remove input id for errors\r\n */\r\nexport const removeErrorInputId = (\r\n  fieldTreeName: string\r\n): RemoveErrorInputId => ({\r\n  fieldTreeName,\r\n  type: REMOVE_ERROR_INPUT_ID,\r\n});\r\n\r\n/** empties the values of the fields of the group\r\n * @param fieldTreeName - the group field tree name\r\n * @returns {RemoveErrorInputId} - an action to empty the group field values\r\n */\r\nexport const emptyGroupFields = (fieldTreeName: string): EmptyGroupFields => ({\r\n  fieldTreeName,\r\n  type: EMPTY_GROUP_FIELDS,\r\n});\r\n\r\n/** removes the group field names from store errors obj\r\n * @param {string} fieldTreeName - the group field tree name\r\n * @returns {RemoveGroupFieldsFromErrors} - an action to remove group field names from errors\r\n */\r\nexport const removeGroupFieldsFromErrors = (\r\n  fieldTreeName: string\r\n): RemoveGroupFieldsFromErrors => ({\r\n  fieldTreeName,\r\n  type: REMOVE_GROUP_FIELDS_FROM_ERRORS,\r\n});\r\n\r\n/** sets the user input object to redux store\r\n * @param {any} userInputObj - the user input obj\r\n * @returns {SetUserInputObj} - an action to set user input to redux store\r\n */\r\nexport const setUserInputObj = (userInputObj: any): SetUserInputObj => ({\r\n  type: SET_USER_INPUT_OBJ,\r\n  userInputObj,\r\n});\r\n\r\n/** sets the language to redux store\r\n * @param {string} language - the user input obj\r\n * @returns {SetLanguage} - an action to set user input to redux store\r\n */\r\nexport const setUserLanguage = (language: string): SetLanguage => ({\r\n  type: SET_LANGUAGE,\r\n  language,\r\n});\r\n\r\n/** sets the form submit info to redux store\r\n * @param {boolean} isFormSubmitted - the form submit info variable\r\n * @returns {SetFormSubmitInfo} - an action to set form submit info to redux store\r\n */\r\nexport const setFormSubmitStatus = (\r\n  isFormSubmitted: boolean\r\n): SetFormSubmitStatus => ({\r\n  isFormSubmitted,\r\n  type: SET_FORM_SUBMIT_STATUS,\r\n});\r\n\r\n/** Create type for forms reducer actions */\r\nexport type FormActionTypes =\r\n  | AssignFieldValueAction\r\n  | AssignOptionListAction\r\n  | RemoveFromOptionList\r\n  | AddMediaListAction\r\n  | RemoveFromMediaListAction\r\n  | ResetStoreAction\r\n  | AddErrorInputId\r\n  | RemoveErrorInputId\r\n  | EmptyGroupFields\r\n  | RemoveGroupFieldsFromErrors\r\n  | SetUserInputObj\r\n  | SetFormSubmitStatus\r\n  | AnyAction;\r\n\r\n/** Create an immutable form state */\r\nexport type ImmutableFormState = SeamlessImmutable.ImmutableObject<FormState>;\r\n\r\n/** initial form state */\r\nexport const initialState: ImmutableFormState = SeamlessImmutable({\r\n  errors: [],\r\n  isFormSubmitted: false,\r\n  mediaList: {},\r\n  optionList: {},\r\n  userInput: {},\r\n  language: 'English'\r\n});\r\n\r\n/** the form reducer function */\r\nexport default function reducer(\r\n  state: ImmutableFormState = initialState,\r\n  action: FormActionTypes\r\n): ImmutableFormState {\r\n  switch (action.type) {\r\n    case FIELD_VALUE_ASSIGNED:\r\n      const modifiedUserInputObj = getModifiedUserInputObject(\r\n        state.getIn(['userInput']).asMutable({ deep: true }),\r\n        action.fieldTreeName,\r\n        action.fieldValue\r\n      );\r\n      const stateM = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({ ...stateM, userInput: modifiedUserInputObj });\r\n\r\n    case OPTION_LIST_ASSIGNED:\r\n      const modifiedUserInputObjList = getModifiedUserInputObject(\r\n        state.getIn(['optionList']).asMutable({ deep: true }),\r\n        action.fieldTreeName,\r\n        action.optionList != null ? { ...action.optionList } : null\r\n      );\r\n      const newState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({\r\n        ...newState,\r\n        optionList: modifiedUserInputObjList,\r\n      });\r\n\r\n    case REMOVE_FROM_OPTION_LIST_REPEAT:\r\n      let filteredRepeatArray: any = [];\r\n      if (\r\n        state\r\n          .getIn(['optionList'])\r\n          .asMutable({ deep: true })\r\n          .hasOwnProperty(action.fieldTreeName)\r\n      ) {\r\n        filteredRepeatArray = [\r\n          ...getModifiedOptionListForRepeat(\r\n            state.getIn(['optionList']).asMutable({ deep: true }),\r\n            action.fieldTreeName,\r\n            action.repeatIndex\r\n          ),\r\n        ];\r\n        const modifiedOptionListRepeat = getModifiedUserInputObject(\r\n          state.getIn(['optionList']).asMutable({ deep: true }),\r\n          action.fieldTreeName,\r\n          { ...filteredRepeatArray }\r\n        );\r\n        const newStateForRepeat = state.asMutable({ deep: true });\r\n        return SeamlessImmutable({\r\n          ...newStateForRepeat,\r\n          optionList: modifiedOptionListRepeat,\r\n        });\r\n      }\r\n      return state;\r\n\r\n    case MEDIA_LIST_ADDED:\r\n      const modifiedMediaList = {\r\n        ...state.getIn(['mediaList']).asMutable({ deep: true }),\r\n        [action.mediaObject.name]: action.mediaObject,\r\n      };\r\n      const newMediaState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({\r\n        ...newMediaState,\r\n        mediaList: modifiedMediaList,\r\n      });\r\n\r\n    case REMOVE_FROM_MEDIA_LIST:\r\n      if (\r\n        state\r\n          .getIn(['mediaList'])\r\n          .asMutable({ deep: true })\r\n          .hasOwnProperty(action.fieldTreeName)\r\n      ) {\r\n        // const tempMediaState = state.asMutable({ deep: true });\r\n        // return SeamlessImmutable({\r\n        //   ...tempMediaState,\r\n        //   mediaList: modifiedMediaObject,\r\n        // });\r\n      }\r\n      return state;\r\n\r\n    case RESET_STORE:\r\n      return initialState;\r\n\r\n    case ADD_ERROR_INPUT_ID:\r\n      if (!state.errors.includes(action.fieldTreeName)) {\r\n        return state.updateIn(['errors'], arr =>\r\n          arr.concat([action.fieldTreeName])\r\n        );\r\n      }\r\n      return state;\r\n\r\n    case REMOVE_ERROR_INPUT_ID:\r\n      if (state.errors.includes(action.fieldTreeName)) {\r\n        return state.updateIn(['errors'], arr =>\r\n          arr.filter(elm => elm !== action.fieldTreeName)\r\n        );\r\n      }\r\n      return state;\r\n\r\n    case EMPTY_GROUP_FIELDS:\r\n      const mUserInputObj = emptyGroupedValues(\r\n        state.getIn(['userInput']).asMutable({ deep: true }),\r\n        action.fieldTreeName\r\n      );\r\n      const mState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({ ...mState, userInput: mUserInputObj });\r\n\r\n    case REMOVE_GROUP_FIELDS_FROM_ERRORS:\r\n      return state.updateIn(['errors'], arr =>\r\n        arr.filter(elm => !elm.startsWith(action.fieldTreeName))\r\n      );\r\n\r\n    case SET_USER_INPUT_OBJ:\r\n      return SeamlessImmutable({\r\n        ...state,\r\n        userInput: (action as any).userInputObj,\r\n      });\r\n\r\n    case SET_FORM_SUBMIT_STATUS:\r\n      return SeamlessImmutable({\r\n        ...state,\r\n        isFormSubmitted: (action as any).isFormSubmitted,\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// selectors\r\n\r\n/** get the value by their respective element tree name\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} value if the element name is found else null\r\n */\r\nexport function getFieldValue(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return getValueFromUserInputObj(\r\n    (state as any) != undefined && (state as any).getIn(['userInput']).asMutable({ deep: true }),\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** get option list by their respective element tree name\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} value if the element name is found else null\r\n */\r\nexport function getOptionList(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return getValueFromUserInputObj(\r\n    (state as any) != undefined && (state as any).getIn(['optionList']).asMutable({ deep: true }),\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** get the value of the evaluated expression\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} - the evaluated value or null if syntax error\r\n */\r\nexport function getEvaluatedExpression(\r\n  state: Partial<Store>,\r\n  expression: string,\r\n  fieldTreeName: string\r\n): any {\r\n  return evaluater(expression, (state as any) != undefined && (state as any).userInput, null, fieldTreeName);\r\n}\r\n\r\n/** get the value of the evaluated expression for Select One and Select All\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {any} options - the options that needs to be evaluated\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} - the evaluated value or null if syntax error\r\n */\r\nexport function getEvaluatedExpressionForSelect(\r\n  state: Partial<Store>,\r\n  expression: string,\r\n  options: any,\r\n  fieldTreeName: string\r\n): any {\r\n  return evaluater(\r\n    expression,\r\n    (state as any).userInput,\r\n    options,\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** check if the field element is present in the store\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {boolean} true if present; otherwise, false\r\n */\r\nexport function isPresentInError(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return  (state as any) != undefined && (state as any).errors.includes(fieldTreeName);\r\n}\r\n\r\n/** check if the field elements under group are empty or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the group field\r\n * @return {boolean} true if empty; otherwise, false\r\n */\r\nexport function isGroupFieldsEmpty(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return checkGroupedValuesForEmpty( (state as any) != undefined && (state as any).userInput, fieldTreeName);\r\n}\r\n\r\n/** check if the field elements under group are present in errors or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the group field\r\n * @return {boolean} true if present; otherwise, false\r\n */\r\nexport function isErrorsIncludeGroupFields(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  let isPresent = false;\r\n  (state as any).errors.forEach((fTName: string) => {\r\n    if (fTName.startsWith(fieldTreeName) && !isPresent) {\r\n      isPresent = true;\r\n    }\r\n  });\r\n  return isPresent;\r\n}\r\n\r\n/** check if the errors array in store empty or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} true if empty; otherwise, false\r\n */\r\nexport function isErrorsArrayEmpty(state: Partial<Store>): any {\r\n  return (state as any) != undefined && (state as any).errors && (state as any).errors.length ? false : true;\r\n}\r\n\r\n/** get the userInput object from store\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} the current userInputObject\r\n */\r\nexport function getUserInputFromStore(state: Partial<Store>): any {\r\n  return (state as any) != undefined && (state as any).getIn(['userInput']).asMutable({ deep: true });\r\n}\r\n\r\n/** get the userInput object from store\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} the current isFormSubmitted\r\n */\r\nexport function getFormSubmitStatus(state: Partial<Store>): any {\r\n  return (state as any) != undefined && (state as any).isFormSubmitted;\r\n}\r\n\r\n/** get the file if present in store\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fileName - the fileName\r\n * @return {any} - the file or null\r\n */\r\nexport function getFileObject(state: Partial<Store>, fileName: string): any {\r\n  const fileObject = (state as any).getIn(['mediaList', fileName]);\r\n  return fileObject ? (state as any).getIn(['mediaList', fileName]) : null;\r\n}\r\n\r\n/** get all the files\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {any} - the files or empty object\r\n */\r\nexport function getAllFileObjects(state: Partial<Store>): any {\r\n  return (state as any) != undefined && (state as any).getIn(['mediaList']);\r\n}\r\n","import { createStyles, Theme } from '@material-ui/core';\r\n\r\nconst GroupStyle = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      color: theme.palette.common.white,\r\n      '&.MuiAccordionSummary-root': {\r\n        borderTop: `5px solid ${theme.palette.primary.dark}`,\r\n        color: theme.palette.primary.dark,\r\n        '&:hover': {\r\n          backgroundColor: theme.palette.primary.dark,\r\n          color: theme.palette.common.white,\r\n        },\r\n        '&.Mui-expanded': {\r\n          backgroundColor: theme.palette.primary.dark,\r\n          color: theme.palette.common.white,\r\n        },\r\n      },\r\n    },\r\n    toolbarIcon: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: '0 8px',\r\n      ...theme.mixins.toolbar,\r\n      '& button': {\r\n        color: '#FFF',\r\n      },\r\n    },\r\n    drawerPaperClose: {\r\n      overflowX: 'hidden',\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      width: theme.spacing(7),\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(9),\r\n      },\r\n      background: theme.palette.primary.dark,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      display: 'flex',\r\n      overflow: 'auto',\r\n      flexDirection: 'column',\r\n    },\r\n    listItem: {\r\n      width: '94%',\r\n      background: theme.palette.primary.main,\r\n      color: '#FFF',\r\n      marginTop: '2px',\r\n      marginLeft: '8px',\r\n      marginRight: '2px',\r\n      borderRadius: '3px',\r\n      '&:hover': {\r\n        background: theme.palette.primary.light,\r\n      },\r\n    },\r\n    listItemIcon: {\r\n      color: '#FFF',\r\n    },\r\n    listItemActive: {\r\n      width: '94%',\r\n      background: theme.palette.primary.light,\r\n      color: '#FFF',\r\n      marginTop: '2px',\r\n      marginLeft: '8px',\r\n      marginRight: '2px',\r\n      borderRadius: '3px',\r\n      '&:hover': {\r\n        background: theme.palette.primary.light,\r\n      },\r\n    },\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n      color: '#FFF',\r\n    },\r\n    navlogo: {\r\n      width: '40%',\r\n      margin: '0 auto',\r\n      padding: 3,\r\n      backgroundColor: '#FFF',\r\n      borderRadius: 5,\r\n    },\r\n    listParent: {\r\n      color: theme.palette.common.white,\r\n      '&.MuiListItem-root': {\r\n        color: theme.palette.common.white,\r\n        '&.Mui-selected': { color: theme.palette.common.white, backgroundColor: theme.palette.primary.main },\r\n        '&:hover': {\r\n          color: theme.palette.common.white,\r\n          backgroundColor: theme.palette.primary.dark,\r\n        },\r\n      },\r\n    },\r\n    drawerClose: {\r\n      overflowX: 'hidden',\r\n      transition: theme.transitions.create('width', {\r\n        duration: theme.transitions.duration.leavingScreen,\r\n        easing: theme.transitions.easing.sharp,\r\n      }),\r\n      width: theme.spacing(7) + 1,\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(7) + 1,\r\n      },\r\n      background: theme.palette.primary.dark,\r\n    },\r\n    drawerOpen: {\r\n      '&:hover': {\r\n        overflowY: 'auto',\r\n      },\r\n      overflowY: 'hidden',\r\n      transition: theme.transitions.create('width', {\r\n        duration: theme.transitions.duration.enteringScreen,\r\n        easing: theme.transitions.easing.sharp,\r\n      }),\r\n    },\r\n  });\r\n\r\nexport default GroupStyle;\r\n","import { Accordion, AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport { useTheme } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport GroupTypeEvaluator from '../../../../components/typeEvalutors/Group';\r\nimport {\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../utils/helpers';\r\nimport GroupStyle from './styles';\r\n\r\nexport interface GroupProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n}\r\n\r\nfunction Group(props: GroupProps) {\r\n  const {\r\n    choices,\r\n    csvList,\r\n    fieldElement,\r\n    fieldParentTreeName,\r\n    defaultLanguage,\r\n    isComponentRender,\r\n  } = props;\r\n  const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n  let isAppearanceApplicable = false;\r\n  if (fieldElement.control && fieldElement.control.appearance) {\r\n    if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n      isAppearanceApplicable = true;\r\n    }\r\n  }\r\n  const theme = useTheme();\r\n  const useStyles = makeStyles(GroupStyle(theme));\r\n  const classNames = useStyles();\r\n  if (\r\n    isComponentRender\r\n    && (fieldElement.control.bodyless\r\n      ? fieldElement.control.bodyless === false\r\n      : true)\r\n  ) {\r\n    return (\r\n      <Accordion>\r\n        <AccordionSummary\r\n          className={classNames.root}\r\n          expandIcon={<ExpandMoreIcon />}\r\n        >\r\n          <Typography>{fieldLabel}</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <FormGroup>\r\n            <Label className=\"groupLabel\">{fieldLabel}</Label>\r\n            {fieldElement.children && (\r\n              <GroupTypeEvaluator\r\n                choices={choices}\r\n                fieldElements={fieldElement.children}\r\n                fieldParentTreeName={`${fieldParentTreeName}group/${fieldElement.name}/`}\r\n                defaultLanguage={defaultLanguage}\r\n                csvList={csvList}\r\n                isAppearanceApplicable={isAppearanceApplicable}\r\n              />\r\n            )}\r\n          </FormGroup>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    );\r\n  }\r\n\r\n  if (\r\n    props.isErrorsIncludeGroupFieldsSelector(\r\n      `${fieldParentTreeName}group/${fieldElement.name}/`\r\n    )\r\n  ) {\r\n    props.removeGroupFieldsFromErrorsActionCreator(\r\n      `${fieldParentTreeName}group/${fieldElement.name}/`\r\n    );\r\n  }\r\n  if (\r\n    !props.isGroupFieldsEmptySelector(fieldParentTreeName + fieldElement.name)\r\n  ) {\r\n    props.emptyGroupFieldsActionCreator(\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n};\r\n\r\n/** connect Group component to the redux store */\r\nconst ConnectedGroup = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Group);\r\n\r\nexport default ConnectedGroup;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport GroupTypeEvaluator from '../../../../../components/typeEvalutors/Group';\r\n\r\nexport interface SingleRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  defaultLanguage: string;\r\n  repeatIndex: number;\r\n  assignmentHandler: any;\r\n  removeHandler: any;\r\n  removeOptionHandler: any;\r\n  unControlFlag: boolean;\r\n}\r\n\r\nclass SingleRepeat extends React.Component<SingleRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      repeatIndex,\r\n      unControlFlag,\r\n    } = this.props;\r\n    let isAppearanceApplicable = false;\r\n    if (fieldElement.control && fieldElement.control.appearance) {\r\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n        isAppearanceApplicable = true;\r\n      }\r\n    }\r\n    return (\r\n      <div className={'groupFormFieldBody'}>\r\n        {fieldElement.children && (\r\n          <GroupTypeEvaluator\r\n            choices={choices}\r\n            fieldElements={fieldElement.children}\r\n            fieldParentTreeName={\r\n              fieldParentTreeName +\r\n              'repeat/' +\r\n              fieldElement.name +\r\n              '/' +\r\n              repeatIndex +\r\n              '/'\r\n            }\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n            isAppearanceApplicable={isAppearanceApplicable}\r\n          />\r\n        )}\r\n\r\n        {unControlFlag === false ? (\r\n          <div className={'minusIconWrapper'}>\r\n            <span onClick={this.handleChange}>\r\n              <FontAwesomeIcon icon=\"minus-circle\" className={'minusIcon'} />\r\n            </span>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private handleChange = (_event: React.MouseEvent<HTMLDivElement>) => {\r\n    const {\r\n      repeatIndex,\r\n      fieldValue,\r\n      assignmentHandler,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      removeHandler,\r\n      removeOptionHandler,\r\n    } = this.props;\r\n    let newFieldValue: any[] = [...fieldValue];\r\n    newFieldValue = newFieldValue.filter(\r\n      // tslint:disable-next-line: variable-name\r\n      (_elem, index) => index !== repeatIndex\r\n    );\r\n    assignmentHandler(fieldParentTreeName + fieldElement.name, newFieldValue);\r\n    removeHandler(fieldParentTreeName + 'repeat/' + fieldElement.name + '/');\r\n    removeOptionHandler(fieldParentTreeName + fieldElement.name, repeatIndex);\r\n  };\r\n}\r\n\r\nexport default SingleRepeat;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport {\r\n  assignFieldValueAction,\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  RemoveFromOptionList,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../../utils/helpers';\r\nimport SingleRepeat from '.././Single Repeat';\r\n\r\nexport interface ControlledRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldValue: any;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\r\n}\r\n\r\nclass ControlledRepeat extends React.Component<ControlledRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldValue,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isComponentRender,\r\n      assignFieldValueActionCreator,\r\n      removeGroupFieldsFromErrorsActionCreator,\r\n      removeOptionListFromActionCreator,\r\n    } = this.props;\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (!fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          [{}]\r\n        );\r\n      }\r\n\r\n      return (\r\n        <FormGroup className={'groupBody'}>\r\n          <Label>{fieldLabel}</Label>\r\n          {fieldValue &&\r\n            // tslint:disable-next-line: variable-name\r\n            fieldValue.map((_elm: any, index: any) => (\r\n              <div className=\"repeat-fields-body\" key={'repeat' + index}>\r\n                <SingleRepeat\r\n                  choices={choices}\r\n                  defaultLanguage={defaultLanguage}\r\n                  fieldElement={fieldElement}\r\n                  fieldParentTreeName={fieldParentTreeName}\r\n                  fieldValue={fieldValue}\r\n                  repeatIndex={index}\r\n                  assignmentHandler={assignFieldValueActionCreator}\r\n                  removeHandler={removeGroupFieldsFromErrorsActionCreator}\r\n                  removeOptionHandler={removeOptionListFromActionCreator}\r\n                  csvList={csvList}\r\n                  unControlFlag={false}\r\n                />\r\n              </div>\r\n            ))}\r\n          <div>\r\n            <span onClick={this.addAnotherRepeat}>\r\n              <FontAwesomeIcon icon=\"plus-circle\" className={'plusIcon'} />\r\n            </span>\r\n          </div>\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (\r\n        this.props.isErrorsIncludeGroupFieldsSelector(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        )\r\n      ) {\r\n        this.props.removeGroupFieldsFromErrorsActionCreator(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        );\r\n      }\r\n      if (fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private addAnotherRepeat = (_event: React.MouseEvent<HTMLDivElement>) => {\r\n    const { fieldValue, fieldParentTreeName, fieldElement } = this.props;\r\n    const newFieldValue = [...fieldValue];\r\n    newFieldValue.push({});\r\n    this.props.assignFieldValueActionCreator(\r\n      fieldParentTreeName + fieldElement.name,\r\n      newFieldValue\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n  removeOptionListFromActionCreator: RemoveFromOptionList,\r\n};\r\n\r\n/** connect Group component to the redux store */\r\nconst ConnectedControlledRepeat = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ControlledRepeat);\r\n\r\nexport default ConnectedControlledRepeat;\r\n","import _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport {\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getOptionList,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  RemoveFromOptionList,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../../utils/helpers';\r\nimport SingleRepeat from '.././Single Repeat';\r\n\r\nexport interface UncontrolledRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldValue: any;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  optionList: object;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\r\n}\r\n\r\nclass UncontrolledRepeat extends React.Component<UncontrolledRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldValue,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isComponentRender,\r\n      optionList,\r\n      assignFieldValueActionCreator,\r\n      removeGroupFieldsFromErrorsActionCreator,\r\n      removeOptionListFromActionCreator,\r\n    } = this.props;\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (!fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      let noOfJrCount: number = 0;\r\n\r\n      if (fieldElement.control) {\r\n        const jrCount: string = 'jr:count';\r\n        const res: any = fieldElement.control[jrCount];\r\n\r\n        if (/^[0-9]*$/i.test(res)) {\r\n          noOfJrCount = parseInt(res, 10);\r\n        } else {\r\n          const value: any = this.props.getEvaluatedExpressionSelector(\r\n            res,\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n          if (value) {\r\n            noOfJrCount = parseInt(value, 10);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length === 0 &&\r\n        noOfJrCount === 0 &&\r\n        this.props.isErrorsIncludeGroupFieldsSelector(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        )\r\n      ) {\r\n        this.props.removeGroupFieldsFromErrorsActionCreator(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        );\r\n      }\r\n\r\n      if (fieldValue && fieldValue.length > 0 && noOfJrCount === 0) {\r\n        this.removeFromError();\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      if (optionList && _.size(optionList) > noOfJrCount && noOfJrCount === 0) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      if (noOfJrCount > 0) {\r\n        const newFieldValue = [...fieldValue];\r\n\r\n        if (fieldValue && fieldValue.length < noOfJrCount) {\r\n          const iterate = noOfJrCount - fieldValue.length;\r\n          for (let j = 0; j < iterate; j++) {\r\n            newFieldValue.push({});\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > noOfJrCount) {\r\n          const iterate = fieldValue.length - noOfJrCount;\r\n          for (let i = 0; i < iterate; i++) {\r\n            newFieldValue.pop();\r\n          }\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            newFieldValue\r\n          );\r\n          this.removeFromError();\r\n        }\r\n\r\n        if (optionList && _.size(optionList) > noOfJrCount) {\r\n          const iterate = _.size(optionList) - noOfJrCount;\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            Array.prototype.slice.call(optionList, iterate)\r\n          );\r\n          this.removeFromError();\r\n        }\r\n\r\n        return (\r\n          <FormGroup className={'groupBodyUnControlled'}>\r\n            <Label>{fieldLabel}</Label>\r\n            {newFieldValue &&\r\n              // tslint:disable-next-line: variable-name\r\n              newFieldValue.map((_elm: any, index: any) => (\r\n                <div className=\"repeat-fields-body\" key={'repeat' + index}>\r\n                  <SingleRepeat\r\n                    choices={choices}\r\n                    defaultLanguage={defaultLanguage}\r\n                    fieldElement={fieldElement}\r\n                    fieldParentTreeName={fieldParentTreeName}\r\n                    fieldValue={fieldValue}\r\n                    repeatIndex={index}\r\n                    assignmentHandler={assignFieldValueActionCreator}\r\n                    removeHandler={removeGroupFieldsFromErrorsActionCreator}\r\n                    removeOptionHandler={removeOptionListFromActionCreator}\r\n                    csvList={csvList}\r\n                    unControlFlag={true}\r\n                  />\r\n                </div>\r\n              ))}\r\n          </FormGroup>\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      this.removeFromError();\r\n      if (fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private removeFromError() {\r\n    if (\r\n      this.props.isErrorsIncludeGroupFieldsSelector(\r\n        this.props.fieldParentTreeName +\r\n          'repeat/' +\r\n          this.props.fieldElement.name +\r\n          '/'\r\n      )\r\n    ) {\r\n      this.props.removeGroupFieldsFromErrorsActionCreator(\r\n        this.props.fieldParentTreeName +\r\n          'repeat/' +\r\n          this.props.fieldElement.name +\r\n          '/'\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n  removeOptionListFromActionCreator: RemoveFromOptionList,\r\n};\r\n\r\n/** connect Repeat component to the redux store */\r\nconst ConnectedUncontrolledRepeat = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UncontrolledRepeat);\r\n\r\nexport default ConnectedUncontrolledRepeat;\r\n","import * as React from 'react';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport ControlledRepeat from './Controlled Repeat';\r\nimport UncontrolledRepeat from './Uncontrolled Repeat';\r\n\r\n/** props interface for the Repeat component */\r\nexport interface RepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Repeat extends React.Component<RepeatProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (fieldElement.control && fieldElement.control['jr:count']) {\r\n      return <UncontrolledRepeat {...this.props} />;\r\n    }\r\n    return <ControlledRepeat {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default Repeat;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Input } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\n\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the calculate component */\r\nexport interface CalculateProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Calculate extends React.Component<CalculateProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      isPresentInErrorSelector,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      let calculatedValue: any = '';\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (calculatedValue && fieldValue !== calculatedValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          calculatedValue\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          <Input\r\n            type=\"hidden\"\r\n            name={fieldElement.name}\r\n            value={calculatedValue || ''}\r\n            readOnly={isReadonly}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Calculate component to the redux store */\r\nconst ConnectedCalculate = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Calculate);\r\n\r\nexport default ConnectedCalculate;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the KbDate component */\r\nexport interface DateProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass KbDate extends React.Component<DateProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      let defaultValue: string = '';\r\n      if (fieldValue && fieldValue !== '') {\r\n        const modifiedDate = new Date(fieldValue);\r\n        defaultValue = modifiedDate.toISOString().slice(0, 10);\r\n      }\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"date\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            value={defaultValue}\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? new Date(event.currentTarget.value)\r\n        : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect KbDate component to the redux store */\r\nconst ConnectedDate = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(KbDate);\r\n\r\nexport default ConnectedDate;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n/** props interface for the date Time component */\r\nexport interface DateTimeProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass DateTime extends React.Component<DateTimeProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      let modifiedDate: any = null;\r\n      if (fieldValue) {\r\n        modifiedDate = new Date(fieldValue);\r\n        const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\r\n        modifiedDate.setHours(modifiedDate.getHours() - timeZoneOffset);\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <br />\r\n          <DatePicker\r\n            name={fieldElement.name}\r\n            selected={fieldValue ? modifiedDate : null}\r\n            onChange={this.handleChange(fieldElement.name)}\r\n            showTimeSelect={true}\r\n            timeFormat=\"h:m aa\"\r\n            timeIntervals={15}\r\n            timeCaption=\"time\"\r\n            dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n            placeholderText=\"mm/dd/yyyy h:m aa\"\r\n            className=\"form-control\"\r\n            readOnly={isReadonly}\r\n          />\r\n          <br />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private handleChange = (name: any) => (value: any) => {\r\n    const modifiedDate: any = new Date(value);\r\n    const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\r\n    modifiedDate.setHours(modifiedDate.getHours() + timeZoneOffset);\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + name,\r\n      value !== '' ? modifiedDate : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Date Time component to the redux store */\r\nconst ConnectedDateTime = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DateTime);\r\n\r\nexport default ConnectedDateTime;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the decimal component */\r\nexport interface DecimalProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface DecimalState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\n\r\nclass Decimal extends React.Component<DecimalProps, DecimalState> {\r\n  constructor(props: DecimalProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated =\r\n      isRequired &&\r\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\r\n    const isConstraintViolated =\r\n      fieldValue !== '' &&\r\n      fieldValue !== null &&\r\n      fieldValue !== undefined &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          parseFloat(this.props.fieldValue)\r\n        );\r\n      }\r\n\r\n      let modifiedValue: any;\r\n      {\r\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (fieldValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n        modifiedValue = calculatedValue;\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"number\"\r\n            step=\"any\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            onBlur={this.onBlurHandler}\r\n            value={\r\n              this.state.isFocused\r\n                ? this.state.fieldValue || ''\r\n                : modifiedValue || ''\r\n            }\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? parseFloat(event.currentTarget.value)\r\n        : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Decimal component to the redux store */\r\nconst ConnectedDecimal = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Decimal);\r\n\r\nexport default ConnectedDecimal;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  assignFieldValueAction,\r\n  getFileObject,\r\n} from '../../../../../store/ducks/formState';\r\n\r\ninterface FilePreviewProps {\r\n  fieldName: string;\r\n  fieldValue: any;\r\n  fileObject: any;\r\n  assignFieldValueActionCreator: any;\r\n}\r\n\r\nclass FilePreview extends React.Component<FilePreviewProps> {\r\n  public render() {\r\n    const { fieldName, fieldValue, assignFieldValueActionCreator } = this.props;\r\n    const removeHandler = () => {\r\n      assignFieldValueActionCreator(fieldName, null);\r\n    };\r\n    return (\r\n      <>\r\n        <p className=\"text-muted\">\r\n          Uploaded File Name: <strong className=\"text-primary\"> {fieldValue} </strong>\r\n        </p>\r\n        <Button size=\"sm\" color=\"danger\" onClick={removeHandler}>\r\n          Remove File\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fileObject: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldName: string;\r\n  fieldValue: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldValue } = parentProps;\r\n  const result = {\r\n    fileObject: getFileObject(state, fieldValue),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n};\r\n\r\n/** connect FilePreview component to the redux store */\r\nconst ConnectedFilePreview = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FilePreview);\r\n\r\nexport default ConnectedFilePreview;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport { PHOTO_FIELD_TYPE } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  addMediaListAction,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\nimport FilePreview from './FilePreview/FilePreview';\r\n\r\n/** props interface for the file component */\r\nexport interface FileProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  addMediaListActionCreator: typeof addMediaListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass File extends React.Component<FileProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          {fieldValue ? (\r\n            <FilePreview\r\n              fieldName={fieldParentTreeName + fieldElement.name}\r\n              fieldValue={fieldValue}\r\n            />\r\n          ) : fieldElement.type === PHOTO_FIELD_TYPE ? (\r\n            <Input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              readOnly={isReadonly}\r\n            />\r\n          ) : (\r\n            <Input\r\n              type=\"file\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              readOnly={isReadonly}\r\n            />\r\n          )}\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: any) => {\r\n    if (event.target.files[0]) {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + event.target.name,\r\n        event.target.files[0].name\r\n      );\r\n      this.props.addMediaListActionCreator(event.target.files[0]);\r\n    } else {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + event.target.name,\r\n        null\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  addMediaListActionCreator: addMediaListAction,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect File component to the redux store */\r\nconst ConnectedFile = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(File);\r\n\r\nexport default ConnectedFile;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the integer component */\r\nexport interface IntegerProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\nexport interface IntegerState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\nclass Integer extends React.Component<IntegerProps, IntegerState> {\r\n  constructor(props: IntegerProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated =\r\n      isRequired &&\r\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\r\n\r\n    const isConstraintViolated =\r\n      fieldValue !== '' &&\r\n      fieldValue !== null &&\r\n      fieldValue !== undefined &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel =\r\n      customizeLabelsWithPreviousInputs(\r\n        getEvaluatedExpressionSelector,\r\n        constraintLabel,\r\n        fieldParentTreeName + fieldElement.name\r\n      ) || '';\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          parseInt(this.props.fieldValue, 10)\r\n        );\r\n      }\r\n\r\n      let modifiedValue: any;\r\n      {\r\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (fieldValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n        modifiedValue = calculatedValue;\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"number\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            onBlur={this.onBlurHandler}\r\n            value={\r\n              this.state.isFocused\r\n                ? this.state.fieldValue || ''\r\n                : modifiedValue || ''\r\n            }\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? parseInt(event.currentTarget.value, 10)\r\n        : null\r\n    );\r\n  };\r\n}\r\n/** connect the component to the store */\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n/** connect Integer component to the redux store */\r\nconst ConnectedInteger = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Integer);\r\nexport default ConnectedInteger;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, FormText, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the text component */\r\nexport interface NoteProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  isPresentInErrorSelector: any;\r\n  isComponentRender: boolean;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Note extends React.Component<NoteProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const fieldHint = getHintLabelText(fieldElement, defaultLanguage);\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      return (\r\n        <FormGroup>\r\n          <Label>{fieldLabel}</Label>\r\n          {isRequired && (\r\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\r\n          )}\r\n          {fieldElement.hint && (\r\n            <FormText className=\"hintText\">{fieldHint}</FormText>\r\n          )}\r\n\r\n          {isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Note component to the redux store */\r\nconst ConnectedNote = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Note);\r\n\r\nexport default ConnectedNote;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from 'react-select';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectAll Dropdown component */\r\nexport interface SelectAllDropDownProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectAllDropDown extends React.Component<SelectAllDropDownProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== [] &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      const options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n        this.setOptionList(resultOptions);\r\n      } else if (fieldElement.itemset) {\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n\r\n          const optionsArray: any = [];\r\n          if (options) {\r\n            options.map(elem => {\r\n              const elemObj: any = {};\r\n              const name: string = 'name';\r\n              const label: string = 'label';\r\n              elemObj[name] = elem.value;\r\n              elemObj[label] = elem.label;\r\n              optionsArray.push(elemObj);\r\n            });\r\n          }\r\n          this.setOptionList(optionsArray);\r\n        }\r\n      } else {\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem => {\r\n            const childrenLabel: string = getFieldLabelText(\r\n              elem,\r\n              defaultLanguage\r\n            );\r\n\r\n            options.push({ label: childrenLabel, value: elem.name });\r\n          });\r\n          this.setOptionList(fieldElement.children);\r\n        }\r\n      }\r\n\r\n      const tmpValueArray: any = [];\r\n      let isNotIncluded: boolean = false;\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        const optionsValueArray: any = [];\r\n        options.map(elem => {\r\n          if (elem.value) {\r\n            optionsValueArray.push(elem.value);\r\n          }\r\n        });\r\n\r\n        for (const row of fieldValue) {\r\n          if (!optionsValueArray.includes(row)) {\r\n            isNotIncluded = true;\r\n          } else {\r\n            tmpValueArray.push(row);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n        this.props.assignFieldValueActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          tmpValueArray || []\r\n        );\r\n      }\r\n\r\n      const selectedValues: any[] = [];\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        options.map(elem => {\r\n          for (const row of fieldValue) {\r\n            if (elem.value === row) {\r\n              selectedValues.push(elem);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        const seperatedValues: string[] = fieldValue.split(' ');\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          seperatedValues\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <div key={fieldElement.name} className=\"selectAllDropDown\">\r\n            <Select\r\n              isMulti={true}\r\n              name={fieldElement.name}\r\n              options={options}\r\n              onChange={this.onChangeHandler(fieldElement.name)}\r\n              value={selectedValues || []}\r\n            />\r\n          </div>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      if (this.props.optionList != null) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** Sets the option list to the Redux Store\r\n   * @param {any} optionObject - the option object to be processed\r\n   */\r\n  private setOptionList = (optionObject: any) => {\r\n    const tempObjArray: any = [];\r\n    optionObject.map((elem: { name: any; label: any }) => {\r\n      const elemObj: any = {};\r\n      const name: string = 'name';\r\n      const label: string = 'label';\r\n      elemObj[name] = elem.name;\r\n      elemObj[label] = elem.label;\r\n      tempObjArray.push(elemObj);\r\n    });\r\n\r\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\r\n      this.props.assignOptionListActionCreator(\r\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n        tempObjArray\r\n      );\r\n    }\r\n  };\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} values - the onchange input values\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandler = (fieldName: any) => (values: any) => {\r\n    const selectedValues: any = [];\r\n    let i = 0;\r\n    if (values && values.length > 0) {\r\n      values.map(() => {\r\n        if (!selectedValues.includes(values[i].value)) {\r\n          selectedValues.push(values[i].value);\r\n        }\r\n        i++;\r\n      });\r\n\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + fieldName,\r\n        selectedValues\r\n      );\r\n    } else {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + fieldName,\r\n        null\r\n      );\r\n    }\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const finalRes: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n\r\n        let filterResult: any = [];\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n\r\n        let j = 0;\r\n        filterResult.map(() => {\r\n          options.map(option => {\r\n            if (option[nameOfKey] === filterResult[j]) {\r\n              finalRes.push(option);\r\n            }\r\n          });\r\n          j = j + 1;\r\n        });\r\n\r\n        i = i + 2;\r\n      }\r\n\r\n      options = [...Array.from(new Set(finalRes))];\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string[];\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Dropdown component to the redux store */\r\nconst ConnectedSelectAllDropDown = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectAllDropDown);\r\n\r\nexport default ConnectedSelectAllDropDown;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectAll Radio component */\r\nexport interface SelectAllRadioProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n  optionList: object;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectAllRadio extends React.Component<SelectAllRadioProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== [] &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      let options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      const childrenArray: any = [];\r\n      if (fieldElement.children) {\r\n        fieldElement.children.map(elem => {\r\n          const elemObj: any = {};\r\n          const name: string = 'name';\r\n          const label: string = 'label';\r\n          elemObj[name] = elem.name;\r\n          elemObj[label] = elem.label;\r\n          childrenArray.push(elemObj);\r\n        });\r\n      }\r\n\r\n      let values: any = [];\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        values = [];\r\n        options = [];\r\n        const tmpValueArray: any = [];\r\n        let isNotIncluded: boolean = false;\r\n\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n\r\n        if (fieldValue && fieldValue.length > 0) {\r\n          const optionsValueArray: any = [];\r\n          options.map(elem => {\r\n            if (elem.value) {\r\n              optionsValueArray.push(elem.value);\r\n            }\r\n          });\r\n\r\n          for (const row of fieldValue) {\r\n            if (!optionsValueArray.includes(row)) {\r\n              isNotIncluded = true;\r\n            } else {\r\n              tmpValueArray.push(row);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            tmpValueArray || []\r\n          );\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            resultOptions\r\n          );\r\n        }\r\n        values = [...resultOptions];\r\n      } else if (fieldElement.itemset) {\r\n        values = [];\r\n        options = [];\r\n        const tmpValueArray: any = [];\r\n        const optionsArray: any = [];\r\n        let isNotIncluded: boolean = false;\r\n\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0) {\r\n          const optionsValueArray: any = [];\r\n          options.map((elem: any) => {\r\n            if (elem.value) {\r\n              optionsValueArray.push(elem.value);\r\n            }\r\n          });\r\n\r\n          for (const row of fieldValue) {\r\n            if (!optionsValueArray.includes(row)) {\r\n              isNotIncluded = true;\r\n            } else {\r\n              tmpValueArray.push(row);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            tmpValueArray || []\r\n          );\r\n        }\r\n\r\n        if (options) {\r\n          options.map(elem => {\r\n            const elemObj: any = {};\r\n            const name: string = 'name';\r\n            const label: string = 'label';\r\n            elemObj[name] = elem.value;\r\n            elemObj[label] = elem.label;\r\n            optionsArray.push(elemObj);\r\n          });\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...optionsArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            optionsArray\r\n          );\r\n        }\r\n\r\n        values = [...optionsArray];\r\n      } else {\r\n        values = [];\r\n        options = [];\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem =>\r\n            options.push({ label: elem.label, value: elem.name })\r\n          );\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            childrenArray\r\n          );\r\n        }\r\n        values = [...childrenArray];\r\n      }\r\n\r\n      const selectedValues: any[] = [];\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        options.map(elem => {\r\n          for (const row of fieldValue) {\r\n            if (elem.value === row) {\r\n              selectedValues.push(elem.value);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      let flagInline = false;\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\r\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\r\n            flagInline = true;\r\n          }\r\n        });\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        const seperatedValues: string[] = fieldValue.split(' ');\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          seperatedValues\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <div>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Form key=\"selectAll\">\r\n            {values.map((elem: any, index: any) => (\r\n              <FormGroup key={index} check={true} inline={flagInline}>\r\n                <Label check={true}>\r\n                  <Input\r\n                    key={fieldElement.name + '-' + index}\r\n                    type=\"checkbox\"\r\n                    name={fieldElement.name}\r\n                    value={elem.name || []}\r\n                    onChange={this.onChangeHandlerCheckBox}\r\n                    readOnly={isReadonly}\r\n                    checked={selectedValues.includes(elem.name)}\r\n                  />{' '}\r\n                  {getFieldLabelText(elem, defaultLanguage)}\r\n                </Label>\r\n              </FormGroup>\r\n            ))}\r\n          </Form>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n\r\n      if (this.props.optionList != null) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} event - the onchange event\r\n   */\r\n\r\n  private onChangeHandlerCheckBox = (event: any) => {\r\n    const { fieldValue, fieldElement, fieldParentTreeName } = this.props;\r\n    const fieldName = fieldParentTreeName + fieldElement.name;\r\n    if (event.target.checked) {\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length > 0 &&\r\n        !fieldValue.includes(event.target.value)\r\n      ) {\r\n        this.props.assignFieldValueActionCreator(fieldName, [\r\n          ...fieldValue,\r\n          event.target.value,\r\n        ]);\r\n      } else {\r\n        this.props.assignFieldValueActionCreator(fieldName, [\r\n          event.target.value,\r\n        ]);\r\n      }\r\n    } else {\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length > 0 &&\r\n        fieldValue.includes(event.target.value)\r\n      ) {\r\n        const newValue = fieldValue.filter(\r\n          (elm: any) => elm !== event.target.value\r\n        );\r\n\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldName,\r\n          newValue.length ? newValue : null\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const finalRes: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n\r\n        let filterResult: any = [];\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n\r\n        let j = 0;\r\n        filterResult.map(() => {\r\n          options.map(option => {\r\n            if (option[nameOfKey] === filterResult[j]) {\r\n              finalRes.push(option);\r\n            }\r\n          });\r\n          j = j + 1;\r\n        });\r\n\r\n        i = i + 2;\r\n      }\r\n\r\n      options = [...Array.from(new Set(finalRes))];\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string[];\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Radio component to the redux store */\r\nconst ConnectedSelectAllRadio = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectAllRadio);\r\n\r\nexport default ConnectedSelectAllRadio;\r\n","import * as React from 'react';\r\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport Dropdown from './Dropdown';\r\nimport Radio from './Radio';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectAllProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass SelectAll extends React.Component<SelectAllProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (shouldComponentBeMinimal(fieldElement)) {\r\n      return <Dropdown {...this.props} />;\r\n    }\r\n    return <Radio {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default SelectAll;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from 'react-select';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneDropDownProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectOneDropDown extends React.Component<SelectOneDropDownProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      const options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n\r\n        this.setOptionList(resultOptions);\r\n      } else if (fieldElement.itemset) {\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n          this.setOptionList(choices[fieldElement.itemset.trim()]);\r\n        }\r\n      } else {\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem => {\r\n            const childrenLabel: string = getFieldLabelText(\r\n              elem,\r\n              defaultLanguage\r\n            );\r\n            options.push({ label: childrenLabel, value: elem.name });\r\n          });\r\n\r\n          this.setOptionList(fieldElement.children);\r\n        }\r\n      }\r\n\r\n      if (fieldValue) {\r\n        const optionsValueArray: any = [];\r\n        options.map(elem => {\r\n          if (elem.value) {\r\n            optionsValueArray.push(elem.value);\r\n          }\r\n        });\r\n\r\n        if (!optionsValueArray.includes(fieldValue)) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            ''\r\n          );\r\n        }\r\n      }\r\n\r\n      let selectedValue: any;\r\n      options.map(elem => {\r\n        if (elem.value === fieldValue) {\r\n          selectedValue = elem;\r\n        }\r\n      });\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <div key={fieldElement.name} className=\"selectOneDropDown\">\r\n            <Select\r\n              multi={false}\r\n              name={fieldElement.name}\r\n              options={options}\r\n              value={selectedValue || ''}\r\n              onChange={this.onChangeHandler(fieldElement.name)}\r\n            />\r\n          </div>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** Sets the option list to the Redux Store\r\n   * @param {any} optionObject - the option object to be processed\r\n   */\r\n  private setOptionList = (optionObject: any) => {\r\n    const tempObjArray: any = [];\r\n    optionObject.map((elem: { name: any; label: any }) => {\r\n      const elemObj: any = {};\r\n      const name: string = 'name';\r\n      const label: string = 'label';\r\n      elemObj[name] = elem.name;\r\n      elemObj[label] = elem.label;\r\n      tempObjArray.push(elemObj);\r\n    });\r\n\r\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\r\n      this.props.assignOptionListActionCreator(\r\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n        tempObjArray\r\n      );\r\n    }\r\n  };\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} event - the onchange input event\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandler = (fieldName: any) => (event: any) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + fieldName,\r\n      event.value || ''\r\n    );\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n        let filterResult: any = '';\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n        options = options.filter(option => option[nameOfKey] === filterResult);\r\n        i = i + 2;\r\n      }\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne component to the redux store */\r\nconst ConnectedSelectOneDropDown = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectOneDropDown);\r\n\r\nexport default ConnectedSelectOneDropDown;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneRadioProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectOneRadio extends React.Component<SelectOneRadioProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        if (/search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)) {\r\n          const processedStringArray = fieldElement.control.appearance.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      const childrenArray: any = [];\r\n      if (fieldElement.children) {\r\n        fieldElement.children.map(elem => {\r\n          const elemObj: any = {};\r\n          const name: string = 'name';\r\n          const label: string = 'label';\r\n          elemObj[name] = elem.name;\r\n          elemObj[label] = elem.label;\r\n          childrenArray.push(elemObj);\r\n        });\r\n      }\r\n\r\n      let values: any = [];\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        values = [];\r\n        if (fieldValue) {\r\n          const optionsValueArray: any = [];\r\n          resultOptions.map(elem => {\r\n            if (elem.name) {\r\n              optionsValueArray.push(elem.name);\r\n            }\r\n          });\r\n\r\n          if (!optionsValueArray.includes(fieldValue)) {\r\n            this.props.assignFieldValueActionCreator(\r\n              this.props.fieldParentTreeName + fieldElement.name,\r\n              ''\r\n            );\r\n          }\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            resultOptions\r\n          );\r\n        }\r\n        values = [...resultOptions];\r\n      } else if (fieldElement.itemset) {\r\n        const choiceOptions: any = [];\r\n        values = [];\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              choiceOptions.push({ label: childrenLabel, name: elem.name });\r\n            }\r\n          });\r\n\r\n          if (fieldValue) {\r\n            const optionsValueArray: any = [];\r\n            choiceOptions.map((elem: any) => {\r\n              if (elem.name) {\r\n                optionsValueArray.push(elem.name);\r\n              }\r\n            });\r\n            if (!optionsValueArray.includes(fieldValue)) {\r\n              this.props.assignFieldValueActionCreator(\r\n                this.props.fieldParentTreeName + fieldElement.name,\r\n                ''\r\n              );\r\n            }\r\n          }\r\n          if (!_.isEqual(this.props.optionList, { ...choiceOptions })) {\r\n            this.props.assignOptionListActionCreator(\r\n              this.props.fieldParentTreeName + fieldElement.name,\r\n              choiceOptions\r\n            );\r\n          }\r\n          values = [...choiceOptions];\r\n        }\r\n      } else {\r\n        values = [];\r\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            childrenArray\r\n          );\r\n        }\r\n        values = [...childrenArray];\r\n      }\r\n\r\n      let flagInline = false;\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\r\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\r\n            flagInline = true;\r\n          }\r\n        });\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <div>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Form key=\"selectOne\">\r\n            {values.map((elem: any, index: any) => (\r\n              <FormGroup key={index} check={true} inline={flagInline}>\r\n                <Label check={true}>\r\n                  <Input\r\n                    key={fieldElement.name + '-' + index}\r\n                    type=\"radio\"\r\n                    name={fieldElement.name}\r\n                    value={elem.name}\r\n                    onChange={this.onChangeHandlerRadio(fieldElement.name)}\r\n                    readOnly={isReadonly}\r\n                    checked={elem.name === fieldValue}\r\n                  />{' '}\r\n                  {getFieldLabelText(elem, defaultLanguage)}\r\n                </Label>\r\n              </FormGroup>\r\n            ))}\r\n          </Form>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n  /** sets the value of Radio Button field element in store\r\n   * @param {any} event - the onchange input event\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandlerRadio = (fieldName: any) => (event: any) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + fieldName,\r\n      event.target.value || ''\r\n    );\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique radio button options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n        let filterResult: any = '';\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n        options = options.filter(option => option[nameOfKey] === filterResult);\r\n        i = i + 2;\r\n      }\r\n    }\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Radio component to the redux store */\r\nconst ConnectedSelectOneRadio = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectOneRadio);\r\n\r\nexport default ConnectedSelectOneRadio;\r\n","import * as React from 'react';\r\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport Dropdown from './Dropdown';\r\nimport Radio from './Radio';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass SelectOne extends React.Component<SelectOneProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (shouldComponentBeMinimal(fieldElement)) {\r\n      return <Dropdown {...this.props} />;\r\n    }\r\n    return <Radio {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default SelectOne;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the text component */\r\nexport interface TextProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isPresentInErrorSelector: any;\r\n  isComponentRender: boolean;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface TextState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\n\r\nclass Text extends React.Component<TextProps, TextState> {\r\n  constructor(props: TextProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (calculatedValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n\r\n        return (\r\n          <FormGroup>\r\n            <Label>\r\n              {modifiedFieldLabel}{' '}\r\n              {isRequired && (\r\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n              )}\r\n            </Label>\r\n            <Input\r\n              type=\"text\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              onBlur={this.onBlurHandler}\r\n              value={\r\n                this.state.isFocused\r\n                  ? this.state.fieldValue || ''\r\n                  : calculatedValue || ''\r\n              }\r\n              readOnly={isReadonly}\r\n            />\r\n            {isFormSubmitted && isError && (\r\n              <FontAwesomeIcon\r\n                icon=\"exclamation-circle\"\r\n                className=\"errorSign\"\r\n              />\r\n            )}\r\n            {fieldElement.hint && (\r\n              <Label className=\"hintText\">{hintLabel}</Label>\r\n            )}\r\n            {isFormSubmitted && isRequiredViolated && (\r\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n            )}\r\n            {isConstraintViolated && (\r\n              <Label className=\"constraintText\">\r\n                {modifiedConstraintLabel}\r\n              </Label>\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      } else {\r\n        return (\r\n          <FormGroup>\r\n            <Label>\r\n              {modifiedFieldLabel}{' '}\r\n              {isRequired && (\r\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n              )}\r\n            </Label>\r\n            <Input\r\n              type=\"text\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              onBlur={this.onBlurHandler}\r\n              value={\r\n                this.state.isFocused\r\n                  ? this.state.fieldValue || ''\r\n                  : fieldValue || ''\r\n              }\r\n              readOnly={isReadonly}\r\n            />\r\n            {isFormSubmitted && isError && (\r\n              <FontAwesomeIcon\r\n                icon=\"exclamation-circle\"\r\n                className=\"errorSign\"\r\n              />\r\n            )}\r\n            {fieldElement.hint && (\r\n              <Label className=\"hintText\">{hintLabel}</Label>\r\n            )}\r\n            {isFormSubmitted && isRequiredViolated && (\r\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n            )}\r\n            {isConstraintViolated && (\r\n              <Label className=\"constraintText\">\r\n                {modifiedConstraintLabel}\r\n              </Label>\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      }\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value || ''\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Text component to the redux store */\r\nconst ConnectedText = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Text);\r\n\r\nexport default ConnectedText;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the KbTime component */\r\nexport interface TimeProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass KbTime extends React.Component<TimeProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"time\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            value={fieldValue || ''}\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== '' ? event.currentTarget.value : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect KbTime component to the redux store */\r\nconst ConnectedTime = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(KbTime);\r\n\r\nexport default ConnectedTime;\r\n","import * as React from 'react';\r\nimport {\r\n  CALCULATE_FIELD_TYPE,\r\n  DATE_FIELD_TYPE,\r\n  DATE_TIME_FIELD_TYPE,\r\n  DECIMAL_FIELD_TYPE,\r\n  FILE_FIELD_TYPE,\r\n  INTEGER_FIELD_TYPE,\r\n  NOTE_FIELD_TYPE,\r\n  PHOTO_FIELD_TYPE,\r\n  SELECT_ALL_FIELD_TYPE,\r\n  SELECT_ONE_FIELD_TYPE,\r\n  TEXT_FIELD_TYPE,\r\n  TIME_FIELD_TYPE,\r\n} from '../../../constants';\r\nimport Calculate from '../../../containers/fields/base/Calculate';\r\nimport KbDate from '../../../containers/fields/base/Date';\r\nimport DateTime from '../../../containers/fields/base/Date Time';\r\nimport Decimal from '../../../containers/fields/base/Decimal';\r\nimport File from '../../../containers/fields/base/File';\r\nimport Integer from '../../../containers/fields/base/Integer';\r\nimport Note from '../../../containers/fields/base/Note';\r\nimport SelectAll from '../../../containers/fields/base/Select All';\r\nimport SelectOne from '../../../containers/fields/base/Select One';\r\nimport Text from '../../../containers/fields/base/Text';\r\nimport KbTime from '../../../containers/fields/base/Time';\r\n\r\n/** type of fieldParentTreeName */\r\nexport type FieldParentTreeName = string;\r\n\r\n/** interface for bind property */\r\ninterface BindProperty {\r\n  calculate?: string;\r\n  relevant?: string;\r\n  readonly?: string;\r\n  appearance?: string;\r\n  required?: string;\r\n  constraint?: string;\r\n  'jr:constraintMsg'?: { [key: string]: string } | string;\r\n}\r\n\r\n/** interface for kobo field element */\r\nexport interface FieldElement {\r\n  name: string;\r\n  type: string;\r\n  children?: any[];\r\n  bind?: BindProperty;\r\n  label?: { [key: string]: string } | string;\r\n  default?: any;\r\n  control?: any;\r\n  hint?: any;\r\n  itemset?: string;\r\n  choice_filter?: string;\r\n}\r\n\r\n/** props interface for BaseTypeEvaluator component */\r\nexport interface BaseTypeEvaluatorProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\nclass BaseTypeEvaluator extends React.Component<BaseTypeEvaluatorProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    return this.typeEvaluator(\r\n      choices,\r\n      csvList,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage\r\n    );\r\n  }\r\n\r\n  /** returns jsx components based on field types\r\n   * @param {any} choices - the choices of form definition\r\n   * @param {FieldElement} fieldElement - the field element object\r\n   * @param {FieldParentTreeName} fieldParentTreeName - the field parent hierchical name\r\n   * @return {React.ReactElement} - jsx base components\r\n   */\r\n  private typeEvaluator(\r\n    choices: any,\r\n    csvList: any,\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: FieldParentTreeName,\r\n    defaultLanguage: string\r\n  ): React.ReactElement {\r\n    switch (fieldElement.type) {\r\n      case TEXT_FIELD_TYPE:\r\n        return (\r\n          <Text\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DATE_FIELD_TYPE:\r\n        return (\r\n          <KbDate\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case TIME_FIELD_TYPE:\r\n        return (\r\n          <KbTime\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DATE_TIME_FIELD_TYPE:\r\n        return (\r\n          <DateTime\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case INTEGER_FIELD_TYPE:\r\n        return (\r\n          <Integer\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DECIMAL_FIELD_TYPE:\r\n        return (\r\n          <Decimal\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case NOTE_FIELD_TYPE:\r\n        return (\r\n          <Note\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case CALCULATE_FIELD_TYPE:\r\n        return (\r\n          <Calculate\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case SELECT_ONE_FIELD_TYPE:\r\n        return (\r\n          <SelectOne\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n      case SELECT_ALL_FIELD_TYPE:\r\n        return (\r\n          <SelectAll\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n      case PHOTO_FIELD_TYPE:\r\n        return (\r\n          <File\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case FILE_FIELD_TYPE:\r\n        return (\r\n          <File\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <div style={{ display: 'none' }}>\r\n            Other {fieldElement.type} {fieldElement.name}\r\n          </div>\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nexport default BaseTypeEvaluator;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport { GROUP_FIELD_TYPE, REPEAT_FIELD_TYPE } from '../../../constants';\r\nimport Group from '../../../containers/fields/group/Group';\r\nimport Repeat from '../../../containers/fields/group/Repeat';\r\nimport { getEvaluatedExpression } from '../../../store/ducks/formState';\r\nimport { shouldComponentBeRelevant } from '../../../utils/helpers';\r\nimport BaseTypeEvaluator, { FieldElement, FieldParentTreeName } from '../Base';\r\n\r\n/** props Interface for the GroupTypeEvaluator component */\r\nexport interface GroupTypeEvaluatorProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElements: FieldElement[];\r\n  fieldParentTreeName: string;\r\n  isAppearanceApplicable: boolean;\r\n  getEvaluatedExpressionSelector: any;\r\n}\r\n\r\nclass GroupTypeEvaluator extends React.Component<GroupTypeEvaluatorProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldElements,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isAppearanceApplicable,\r\n    } = this.props;\r\n    return (\r\n      <Row className=\"groupTypeEvaluatorRow\">\r\n        {fieldElements.map((fieldElement) => {\r\n          const value: number = this.getAppearanceValue(\r\n            fieldElement,\r\n            fieldParentTreeName,\r\n            isAppearanceApplicable,\r\n          );\r\n          return (\r\n            <Col\r\n              key={`group_${fieldElement.name}`}\r\n              className=\"groupTypeEvaluator\"\r\n              md={value}\r\n              hidden={value === 0}\r\n            >\r\n              {this.typeEvaluator(\r\n                choices,\r\n                csvList,\r\n                fieldElement,\r\n                fieldParentTreeName,\r\n                defaultLanguage,\r\n              )}\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  /** returns jsx components based on field types\r\n   * @param {any} choices - the form choices\r\n   * @param {FieldElement} fieldElement - the field element object\r\n   * @param {FieldParentTreeName} - the field parent hierarchical name\r\n   * @return {React.ReactElement} - jsx group components/ base evaluator component\r\n   */\r\n  private typeEvaluator(\r\n    choices: any,\r\n    csvList: any,\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: FieldParentTreeName,\r\n    defaultLanguage: string,\r\n  ): React.ReactElement {\r\n    switch (fieldElement.type) {\r\n      case GROUP_FIELD_TYPE:\r\n        return (\r\n          <div>\r\n            <Group\r\n              choices={choices}\r\n              fieldElement={fieldElement}\r\n              fieldParentTreeName={fieldParentTreeName}\r\n              defaultLanguage={defaultLanguage}\r\n              csvList={csvList}\r\n            />\r\n          </div>\r\n        );\r\n      case REPEAT_FIELD_TYPE:\r\n        return (\r\n          <div>\r\n            <Repeat\r\n              choices={choices}\r\n              fieldElement={fieldElement}\r\n              fieldParentTreeName={fieldParentTreeName}\r\n              defaultLanguage={defaultLanguage}\r\n              csvList={csvList}\r\n            />\r\n          </div>\r\n        );\r\n      default:\r\n        return (\r\n          <BaseTypeEvaluator\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n    }\r\n  }\r\n\r\n  private getAppearanceValue = (\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: string,\r\n    isAppearanceApplicable: boolean,\r\n  ): number => {\r\n    const isRender: boolean = shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      this.props.getEvaluatedExpressionSelector,\r\n    );\r\n\r\n    if (!isRender) {\r\n      return 0;\r\n    } if (\r\n      isRender\r\n      && isAppearanceApplicable\r\n      && fieldElement.control\r\n      && fieldElement.control.appearance\r\n    ) {\r\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n        const processedStringArray = fieldElement.control.appearance.match(\r\n          /^w(\\d+)\\b/i,\r\n        );\r\n        const processedString = processedStringArray[0].replace('w', '');\r\n        const result = isNaN(processedString)\r\n          ? 12\r\n          : parseInt(processedString, 10);\r\n        return result;\r\n      }\r\n    }\r\n    return 12;\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  getEvaluatedExpressionSelector: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n\r\n  const result = {\r\n    getEvaluatedExpressionSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** connect GroupTypeEvaluator component to the redux store */\r\nconst ConnectedGroupTypeEvaluator = connect(mapStateToProps)(\r\n  GroupTypeEvaluator,\r\n);\r\n\r\nexport default ConnectedGroupTypeEvaluator;\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n  faExclamationCircle,\r\n  faMinusCircle,\r\n  faPlusCircle,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Col, Container, Row } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport KbAlert from '../components/Alert';\r\nimport DropDown from '../components/DropDown';\r\nimport GroupTypeEvaluator from '../components/typeEvalutors/Group';\r\nimport {\r\n  getAllFileObjects,\r\n  getUserInputFromStore,\r\n  isErrorsArrayEmpty,\r\n  resetStoreAction,\r\n  setFormSubmitStatus,\r\n  setUserInputObj,\r\n  setUserLanguage,\r\n} from '../store/ducks/formState';\r\n\r\nlibrary.add(faPlusCircle, faMinusCircle, faExclamationCircle);\r\n\r\nexport interface AppProps {\r\n  choices: any;\r\n  csvList: any;\r\n  isNoErrors: any;\r\n  userInputObj: any;\r\n  userInputJson: any;\r\n  defaultLanguage: string;\r\n  formTitle: string;\r\n  fieldElements: any;\r\n  setUserInputAction: typeof setUserInputObj;\r\n  setUserLanguageAction: typeof setUserLanguage;\r\n  languageOptions: any;\r\n  setFormSubmitStatusAction: typeof setFormSubmitStatus;\r\n  resetStoreActionCreator: typeof resetStoreAction;\r\n  mediaList: any;\r\n  handleSubmit(userInput: any, mediaList: any): any;\r\n}\r\n\r\nexport interface AppState {\r\n  defaultLanguage: string;\r\n  isSubmissionError: boolean;\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    const { userInputJson, userInputObj } = this.props;\r\n    this.props.resetStoreActionCreator();\r\n    if (userInputJson && userInputJson !== userInputObj) {\r\n      this.props.setUserInputAction(userInputJson);\r\n    }\r\n    this.props.setUserLanguageAction(this.props.defaultLanguage);\r\n    this.setState({\r\n      defaultLanguage: this.props.defaultLanguage,\r\n      isSubmissionError: false,\r\n    });\r\n  }\r\n\r\n  public handleSelect = (languageName: string) => {\r\n    this.setState({ defaultLanguage: languageName });\r\n    this.props.setUserLanguageAction(this.props.defaultLanguage);\r\n  };\r\n\r\n  public render() {\r\n    const {\r\n      csvList,\r\n      fieldElements,\r\n      formTitle,\r\n      languageOptions,\r\n      choices,\r\n    } = this.props;\r\n    const { defaultLanguage } = this.state || this.props;\r\n\r\n    const props = {\r\n      choices,\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElements,\r\n      fieldParentTreeName: '',\r\n      isAppearanceApplicable: false,\r\n      languageOptions,\r\n    };\r\n\r\n    return (\r\n      <Container className=\"form-container\">\r\n        <Row className={'form-title formTitle'}>\r\n          <Col>\r\n            <h3 className=\"headerText\">{formTitle}</h3>\r\n          </Col>\r\n          <DropDown\r\n            languages={...languageOptions}\r\n            onChangeSelect={this.handleSelect}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        </Row>\r\n        {this.state && this.state.isSubmissionError && (\r\n          <KbAlert\r\n            color={'danger'}\r\n            isOpen={this.state.isSubmissionError}\r\n            handleToggle={this.toggleStateValue}\r\n            headerText={'Oh snap! You got an error!'}\r\n            bodyText={\r\n              'Please make sure the required fields are not missing and there are no errors'\r\n            }\r\n          />\r\n        )}\r\n        <Row className=\"formFieldBody\">\r\n          <Col>\r\n            <GroupTypeEvaluator {...props} />\r\n            <Row className=\"welcome-box\" style={{ padding: 10 }}>\r\n              <Col>\r\n                <Button className=\"btn btn-success\" onClick={this.handleClick}>\r\n                  Submit\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private handleClick = (_event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const { handleSubmit, isNoErrors, userInputObj, mediaList } = this.props;\r\n    if (isNoErrors) {\r\n      handleSubmit(userInputObj, mediaList);\r\n    } else {\r\n      handleSubmit('Field Violated', mediaList);\r\n      this.setState({ isSubmissionError: true });\r\n      this.props.setFormSubmitStatusAction(true);\r\n      window.scrollTo(0, 0);\r\n    }\r\n  };\r\n\r\n  private toggleStateValue = () => {\r\n    this.setState({ isSubmissionError: false });\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  isNoErrors: any;\r\n  userInputObj: any;\r\n  mediaList: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\r\n  const result = {\r\n    isNoErrors: isErrorsArrayEmpty(state),\r\n    mediaList: getAllFileObjects(state),\r\n    userInputObj: getUserInputFromStore(state),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  resetStoreActionCreator: resetStoreAction,\r\n  setFormSubmitStatusAction: setFormSubmitStatus,\r\n  setUserInputAction: setUserInputObj,\r\n  setUserLanguageAction: setUserLanguage,\r\n};\r\n\r\n/** connect Decimal component to the redux store */\r\nconst ConnectedApp = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n\r\nexport default ConnectedApp;\r\n","import { MuiThemeProvider } from '@material-ui/core';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { theme } from './utils/Theme';\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nexport interface OdkFormRendererProps {\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  formDefinitionJson: any;\r\n  languageOptions: any;\r\n  userInputJson: any;\r\n  handleSubmit: (userInput: any, mediaList: any) => any;\r\n}\r\n\r\nclass OdkFormRenderer extends React.Component<OdkFormRendererProps> {\r\n  public render() {\r\n    const {\r\n      csvList,\r\n      defaultLanguage,\r\n      formDefinitionJson,\r\n      userInputJson,\r\n      languageOptions,\r\n      handleSubmit,\r\n    } = this.props;\r\n    const props = {\r\n      choices: formDefinitionJson.choices || {},\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElements: formDefinitionJson.children,\r\n      formTitle: formDefinitionJson.title,\r\n      handleSubmit,\r\n      languageOptions,\r\n      userInputJson,\r\n    };\r\n    return (\r\n      <Provider store={store}>\r\n        <MuiThemeProvider theme={theme}>\r\n        <App {...props} />\r\n      </MuiThemeProvider>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OdkFormRenderer;\r\n"],"names":["actualExpression","theme","createMuiTheme","palette","primary","main","dark","secondary","light","info","text","disabled","hint","typography","h1","fontWeight","fontSize","h2","h3","h4","body1","fontFamily","caption","subtitle1","subtitle2","overrides","MuiListItem","root","paddingTop","paddingBottom","color","textDecoration","MuiInputLabel","outlined","MuiInputBase","MuiStepIcon","active","MuiStepLabel","label","MuiStepConnector","line","MuiTypography","fontStyle","MuiTextField","backgroundColor","borderRadius","MuiButton","height","containedPrimary","MuiRadio","MuiSelect","select","KbAlert","render","this","props","bodyText","React","Alert","isOpen","toggle","handleToggle","className","headerText","DropDown","event","onChangeSelect","value","selectedValue","options","languages","map","elem","push","_this2","defaultLanguage","Select","multi","placeholder","onChange","onChangeHandler","REQUIRED_FIELD_MSG","store","createStore","reducer","composeWithDevTools","currentHierarchicalName","formItemProperty","userInput","tokenizeCharacter","type","input","current","tokenizers","test","undefined","consumedChars","char","TypeError","matchQuote","pattern","tokenizePattern","kbSelected","funcName","params","_paramsTokens","tmp","Array","isArray","forEach","element","kbChoice","i","tmpHierchicalName","split","parent","length","state","getState","variableName","replace","optionList","key","name","language","kbToday","_params","d","Date","setHours","kbRound","toFixed","parseFloat","kbRegex","RegExp","kbCountSelected","kbInt","parseInt","kbCoalesce","kbPosition","tmpName","kbSum","paramsTokens","sumValue","sumValuesOverJsn","sum","jsnObj","kbConcat","concatStr","kbSubstr","substring","outerScopedVariables","variableValue","tmpUserInput","nodeNames","parseMostClosestScopedVariable","index","parseDot","path","getIn","parseLiterals","_tmpOutput","tokens","toLowerCase","parseFunction","_output","possibleFunctions","arrayOfParams","arrayOfOriginalTokens","tmpQueue","tmpTokens","pop","tmpVal","parser","parsedFn","parsedVal","functionFn","parseAnd","output","newOutput","parseParen","terminatingTokens","indexOf","parseDivide","parsed","ct","parseMinus","parserFn","consumedTokens","preOutput","preParsed","parseMultiply","preParseFn","Object","prototype","toString","call","isNaN","getTime","NaN","Math","ceil","parsers","j","flagLessThanOrEqual","flagGreaterThanOrEqual","leftOutput","pos","console","log","evaluater","expression","tmpFormItemProperty","tmpCurrentHierarchicalName","tokenized","tokenizerFn","token","tokenizer","getTextFromProperty","property","languageIdentifier","getFieldLabelText","fieldElement","getHintLabelText","customizeLabelsWithPreviousInputs","evaluator","labelText","fieldTreeName","placesOfCustomizationsRequiredList","match","tmpPlace","customizedName","matchList","getConstraintLabelText","bind","isInputRequired","isRequired","required","shouldComponentBeRelevant","fieldParentTreeName","evaluateExpression","relevant","shouldComponentBeReadOnly","readonly","shouldInputViolatesConstraint","constraint","getModifiedUserInputObject","userInputObj","fieldValue","treeNodes","modifiedObj","getValueFromUserInputObj","shouldComponentBeMinimal","isMinimal","control","appearance","includes","FIELD_VALUE_ASSIGNED","OPTION_LIST_ASSIGNED","MEDIA_LIST_ADDED","REMOVE_FROM_MEDIA_LIST","REMOVE_FROM_OPTION_LIST_REPEAT","RESET_STORE","ADD_ERROR_INPUT_ID","REMOVE_ERROR_INPUT_ID","EMPTY_GROUP_FIELDS","REMOVE_GROUP_FIELDS_FROM_ERRORS","SET_USER_INPUT_OBJ","SET_FORM_SUBMIT_STATUS","assignFieldValueAction","assignOptionListAction","RemoveFromOptionList","repeatIndex","addErrorInputId","removeErrorInputId","emptyGroupFields","removeGroupFieldsFromErrors","initialState","SeamlessImmutable","errors","isFormSubmitted","mediaList","action","modifiedUserInputObj","asMutable","deep","stateM","modifiedUserInputObjList","newState","filteredRepeatArray","hasOwnProperty","entries","keyValueOptionListobj","repeatIndexString","String","keyRepeat","getModifiedOptionListForRepeat","modifiedOptionListRepeat","newStateForRepeat","modifiedMediaList","mediaObject","newMediaState","updateIn","arr","concat","filter","elm","mUserInputObj","groupTreeName","keys","objKey","startsWith","emptyGroupedValues","mState","getFieldValue","getOptionList","getEvaluatedExpression","getEvaluatedExpressionForSelect","isPresentInError","isGroupFieldsEmpty","isEmpty","checkGroupedValuesForEmpty","isErrorsIncludeGroupFields","isPresent","fTName","isErrorsArrayEmpty","getUserInputFromStore","getFormSubmitStatus","getFileObject","fileName","getAllFileObjects","GroupStyle","createStyles","common","white","borderTop","toolbarIcon","display","alignItems","justifyContent","padding","mixins","toolbar","drawerPaperClose","overflowX","transition","transitions","create","easing","sharp","duration","leavingScreen","width","spacing","breakpoints","up","background","paper","overflow","flexDirection","listItem","marginTop","marginLeft","marginRight","listItemIcon","listItemActive","nested","paddingLeft","navlogo","margin","listParent","drawerClose","drawerOpen","overflowY","enteringScreen","Group","choices","csvList","isComponentRender","fieldLabel","isAppearanceApplicable","useTheme","classNames","makeStyles","useStyles","bodyless","isErrorsIncludeGroupFieldsSelector","removeGroupFieldsFromErrorsActionCreator","isGroupFieldsEmptySelector","emptyGroupFieldsActionCreator","Accordion","AccordionSummary","expandIcon","ExpandMoreIcon","Typography","AccordionDetails","FormGroup","Label","children","GroupTypeEvaluator","fieldElements","ConnectedGroup","connect","parentProps","getEvaluatedExpressionSelector","SingleRepeat","_event","_this","assignmentHandler","removeHandler","removeOptionHandler","newFieldValue","_elem","unControlFlag","onClick","handleChange","FontAwesomeIcon","icon","Component","ControlledRepeat","assignFieldValueActionCreator","removeOptionListFromActionCreator","_elm","addAnotherRepeat","ConnectedControlledRepeat","UncontrolledRepeat","noOfJrCount","res","removeFromError","_","size","assignOptionListActionCreator","iterate","slice","ConnectedUncontrolledRepeat","Repeat","Calculate","isPresentInErrorSelector","isRequiredViolated","isConstraintViolated","isReadonly","removeErrorInputIdActionCreator","addErrorInputIdActionCreator","calculatedValue","calculate","Input","readOnly","ConnectedCalculate","KbDate","currentTarget","getFormSubmitStatusSelector","modifiedFieldLabel","modifiedConstraintLabel","hintLabel","defaultValue","toISOString","isError","ConnectedDate","DateTime","modifiedDate","timeZoneOffset","getTimezoneOffset","getHours","DatePicker","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","placeholderText","ConnectedDateTime","Decimal","setState","isFocused","modifiedValue","step","onBlur","onBlurHandler","ConnectedDecimal","FilePreview","fieldName","Button","ConnectedFilePreview","fileObject","File","target","files","addMediaListActionCreator","accept","ConnectedFile","Integer","ConnectedInteger","Note","fieldHint","FormText","ConnectedNote","SelectAllDropDown","optionObject","tempObjArray","elemObj","isEqual","values","selectedValues","stringWithSearchKeyWord","resultArray","criteriaParams","splice","extractAndFilterOptions","csvName","criteriaType","filterCriterias","trim","distinctOptions","finalRes","modifiedName","nameOfKey","interConnectedValue","tempOptions","filterResult","getEvaluatedExpressionSelectorForSelect","option","from","Set","labelColumnName","valueColumnName","tmpOpt","uniqBy","resultOptions","updatedFieldElement","processedStringArray","getProcessedString","setOptionList","itemset","choice_filter","childrenLabel","optionsArray","tmpValueArray","isNotIncluded","optionsValueArray","row","seperatedValues","isMulti","ConnectedSelectAllDropDown","SelectAllRadio","checked","newValue","childrenArray","flagInline","tmpStyle","Form","check","inline","onChangeHandlerCheckBox","ConnectedSelectAllRadio","SelectAll","Dropdown","Radio","SelectOneDropDown","ConnectedSelectOneDropDown","SelectOneRadio","choiceOptions","onChangeHandlerRadio","ConnectedSelectOneRadio","SelectOne","Text","ConnectedText","KbTime","ConnectedTime","BaseTypeEvaluator","typeEvaluator","style","isRender","processedString","Row","getAppearanceValue","Col","md","hidden","ConnectedGroupTypeEvaluator","library","add","faPlusCircle","faMinusCircle","faExclamationCircle","App","languageName","setUserLanguageAction","handleSubmit","isNoErrors","isSubmissionError","setFormSubmitStatusAction","window","scrollTo","componentDidMount","userInputJson","resetStoreActionCreator","setUserInputAction","languageOptions","Container","formTitle","handleSelect","toggleStateValue","handleClick","ConnectedApp","formDefinitionJson","Provider","MuiThemeProvider","title"],"mappings":"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"}