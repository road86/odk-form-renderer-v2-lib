{"version":3,"file":"odkformrenderer.cjs.production.min.js","sources":["../src/utils/compiler.ts","../src/components/Alert/index.tsx","../src/components/DropDown/index.tsx","../src/constants.tsx","../src/utils/helpers.ts","../src/store/ducks/formState.ts","../src/containers/fields/group/Group/index.tsx","../src/containers/fields/group/Repeat/Single Repeat/index.tsx","../src/containers/fields/group/Repeat/Controlled Repeat/index.tsx","../src/containers/fields/group/Repeat/Uncontrolled Repeat/index.tsx","../src/containers/fields/group/Repeat/index.tsx","../src/containers/fields/base/Calculate/index.tsx","../src/containers/fields/base/Date/index.tsx","../src/containers/fields/base/Date Time/index.tsx","../src/containers/fields/base/Decimal/index.tsx","../src/containers/fields/base/File/FilePreview/FilePreview.tsx","../src/containers/fields/base/File/index.tsx","../src/containers/fields/base/Integer/index.tsx","../src/containers/fields/base/Note/index.tsx","../src/containers/fields/base/Select All/Dropdown/index.tsx","../src/containers/fields/base/Select All/Radio/index.tsx","../src/containers/fields/base/Select All/index.tsx","../src/containers/fields/base/Select One/Dropdown/index.tsx","../src/containers/fields/base/Select One/Radio/index.tsx","../src/containers/fields/base/Select One/index.tsx","../src/containers/fields/base/Text/index.tsx","../src/containers/fields/base/Time/index.tsx","../src/components/typeEvalutors/Base/index.tsx","../src/components/typeEvalutors/Group/index.tsx","../src/App/index.tsx","../src/store/index.tsx","../src/index.tsx"],"sourcesContent":["let actualExpression: string;\nlet currentHierarchicalName: string = '';\nlet formItemProperty: any = {};\nlet userInput: any = {};\n\nfunction tokenizeCharacter(type: any, value: any, input: any, current: any) {\n  return value === input[current] ? [1, { type, value }] : [0, null];\n}\n\nfunction tokenizeParenOpen(input: any, current: any) {\n  return tokenizeCharacter('paren', '(', input, current);\n}\n\nfunction tokenizeBrakeOpen(input: any, current: any) {\n  return tokenizeCharacter('brac', '[', input, current);\n}\n\nfunction tokenizeBrakeClose(input: any, current: any) {\n  return tokenizeCharacter('brac', ']', input, current);\n}\n\nfunction tokenizeParenClose(input: any, current: any) {\n  return tokenizeCharacter('paren', ')', input, current);\n}\n\nfunction tokenizeEqual(input: any, current: any) {\n  return tokenizeCharacter('equal', '=', input, current);\n}\n\nfunction tokenizePlus(input: any, current: any) {\n  return tokenizeCharacter('plus', '+', input, current);\n}\n\nfunction tokenizeMinus(input: any, current: any) {\n  return tokenizeCharacter('minus', '-', input, current);\n}\n\nfunction tokenizeMultiply(input: any, current: any) {\n  return tokenizeCharacter('multiply', '*', input, current);\n}\n\nfunction tokenizeDivide(input: any, current: any) {\n  return tokenizeCharacter('divide', '/', input, current);\n}\n\nfunction tokenizeLessThan(input: any, current: any) {\n  return tokenizeCharacter('lessThan', '<', input, current);\n}\n\nfunction tokenizeGreaterThan(input: any, current: any) {\n  return tokenizeCharacter('greaterThan', '>', input, current);\n}\n\nfunction tokenizeNot(input: any, current: any) {\n  return tokenizeCharacter('not', '!', input, current);\n}\n\nfunction tokenizeComma(input: any, current: any) {\n  return tokenizeCharacter('comma', ',', input, current);\n}\n\nfunction tokenizeDot(input: any, current: any) {\n  return tokenizeCharacter('dot', '.', input, current);\n}\n\nfunction tokenizePattern(type: any, pattern: any, input: any, current: any) {\n  let char = input[current];\n  let consumedChars = 0;\n  if (pattern.test(char)) {\n    let value = '';\n    while (char && pattern.test(char)) {\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    return [consumedChars, { type, value }];\n  }\n  return [0, null];\n}\n\nfunction tokenizeString(input: any, current: any) {\n  if (input[current] === '\"' || input[current] === \"'\") {\n    const matchQuote = input[current];\n    let value = '';\n    let consumedChars = 0;\n    consumedChars += 1;\n    let char = input[current + consumedChars];\n    while (char !== matchQuote) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    return [consumedChars + 1, { type: 'string', value }];\n  }\n  return [0, null];\n}\n\nfunction tokenizeFunction(input: any, current: any) {\n  if (/[a-z_]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (char && /[:a-z0-9_-]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    while (char && /\\s/.test(char)) {\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char && char === '(') {\n      return [consumedChars, { type: 'function', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeNumber(input: any, current: any) {\n  if (/[0-9]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (/[0-9]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char !== '.') {\n      return [consumedChars, { type: 'number', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeDecimal(input: any, current: any) {\n  if (/[0-9.]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (/[0-9]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char === '.') {\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n      if (/[0-9]/i.test(char)) {\n        while (/[0-9]/i.test(char)) {\n          if (char === undefined) {\n            throw new TypeError('unterminated string ');\n          }\n          value += char;\n          consumedChars += 1;\n          char = input[current + consumedChars];\n        }\n        return [consumedChars, { type: 'decimal', value }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeVariable(input: any, current: any) {\n  if (input[current] === '#' || input[current] === '$') {\n    if (input[current + 1] && input[current + 1] === '{') {\n      let value = '';\n      let consumedChars = 1;\n      consumedChars += 1;\n      let char = input[current + consumedChars];\n      while (char !== '}') {\n        if (char === undefined) {\n          throw new TypeError('unterminated string ');\n        }\n        value += char;\n        consumedChars += 1;\n        char = input[current + consumedChars];\n      }\n      return [consumedChars + 1, { type: 'variable', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeOr(input: any, current: any) {\n  if (input[current] === 'o') {\n    if (input[current + 1] && input[current + 1] === 'r') {\n      if (\n        input[current + 2] === undefined ||\n        /[0-9\\s]/.test(input[current + 2])\n      ) {\n        return [2, { type: 'or', value: 'or' }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeIf(input: any, current: any) {\n  if (input[current] === 'i') {\n    if (input[current + 1] && input[current + 1] === 'f') {\n      if (\n        input[current + 2] === undefined ||\n        !/[a-z]i/.test(input[current + 2])\n      ) {\n        return [2, { type: 'if', value: 'if' }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeAnd(input: any, current: any) {\n  if (input[current] === 'a') {\n    if (input[current + 1] && input[current + 1] === 'n') {\n      if (input[current + 2] && input[current + 2] === 'd') {\n        if (\n          input[current + 3] === undefined ||\n          /[0-9\\s]/.test(input[current + 3])\n        ) {\n          return [3, { type: 'and', value: 'and' }];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeDiv(input: any, current: any) {\n  if (input[current] === 'd') {\n    if (input[current + 1] && input[current + 1] === 'i') {\n      if (input[current + 2] && input[current + 2] === 'v') {\n        if (\n          input[current + 3] === undefined ||\n          /[0-9\\s]/.test(input[current + 3])\n        ) {\n          return [3, { type: 'divide', value: '/' }];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeName(input: any, current: any) {\n  return tokenizePattern('name', /[a-z_]/i, input, current);\n}\n\nfunction skipWhiteSpace(input: any, current: any) {\n  return /\\s/.test(input[current]) ? [1, null] : [0, null];\n}\n\nconst tokenizers = [\n  skipWhiteSpace,\n  tokenizeParenOpen,\n  tokenizeParenClose,\n  tokenizeIf,\n  tokenizeOr,\n  tokenizeAnd,\n  tokenizeVariable,\n  tokenizeString,\n  tokenizeFunction,\n  tokenizeEqual,\n  tokenizePlus,\n  tokenizeMinus,\n  tokenizeMultiply,\n  tokenizeDivide,\n  tokenizeDiv,\n  tokenizeLessThan,\n  tokenizeGreaterThan,\n  tokenizeNot,\n  tokenizeBrakeOpen,\n  tokenizeBrakeClose,\n  tokenizeDot,\n  tokenizeComma,\n  tokenizeNumber,\n  tokenizeDecimal,\n  tokenizeName,\n];\n\nfunction tokenizer(input: any) {\n  let current: number = 0;\n  const tokens: any = [];\n  while (current < input.length) {\n    let tokenized = false;\n    tokenizers.forEach(tokenizerFn => {\n      if (tokenized) {\n        return;\n      }\n      const [consumedChars, token]: any = tokenizerFn(input, current);\n      if (consumedChars !== 0) {\n        tokenized = true;\n        current += consumedChars;\n      }\n      if (token) {\n        tokens.push(token);\n      }\n    });\n    if (!tokenized) {\n      throw new TypeError(\n        `I dont know what this character is: ${input[current]}`\n      );\n    }\n  }\n  return tokens;\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSelected(funcName: any, params: any, _paramsTokens: any) {\n  if (funcName === 'selected') {\n    let tmp = false;\n    if (Array.isArray(params[0])) {\n      params[0].forEach((element: any) => {\n        // tslint:disable-next-line: triple-equals\n        tmp = tmp || element == params[1];\n      });\n      return [true, tmp];\n    }\n    // tslint:disable-next-line: triple-equals\n    return [true, params[0] == params[1]];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbToday(funcName: any, _params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'today') {\n    const d = new Date();\n    d.setHours(0, 0, 0, 0);\n    return [true, d];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbRound(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'round') {\n    if (params[0] && params[1]) {\n      if (typeof params[0] === 'number' && typeof params[1] === 'number') {\n        return [true, params[0].toFixed(params[1])];\n      }\n      if (typeof params[0] === 'string' && typeof params[1] === 'number') {\n        return [true, parseFloat(params[0]).toFixed(params[1])];\n      }\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbRegex(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'regex') {\n    const regex = RegExp(params[1]);\n    return [true, regex.test(params[0])];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbCountSelected(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'count-selected') {\n    if (params[0] && Array.isArray(params[0])) {\n      return [true, params[0].length];\n    }\n    if (params[0] && typeof params[0] !== 'object') {\n      return [true, 1];\n    }\n    return [true, 0];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbInt(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'int') {\n    if (typeof params[0] === 'string') {\n      return [true, parseInt(params[0], 10)];\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbCoalesce(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'coalesce') {\n    if (!params[0] && params[0] !== 0) {\n      return [true, params[1]];\n    }\n    return [true, params[0]];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbPosition(funcName: any, _params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'position') {\n    if (currentHierarchicalName) {\n      const tmpName = currentHierarchicalName.split('/');\n      if (tmpName.length > 2) {\n        return [true, parseInt(tmpName[tmpName.length - 2], 10) + 1];\n      }\n    }\n  }\n  return [false, null];\n}\n\nfunction sumValuesOverJsn(sum: any, jsnObj: any, variableName: any) {\n  if (Array.isArray(jsnObj)) {\n    let i;\n    for (i = 0; i < jsnObj.length; i += 1) {\n      sum = sumValuesOverJsn(sum, jsnObj[i], variableName);\n    }\n  } else if (typeof jsnObj === 'object') {\n    for (const key in jsnObj) {\n      if (typeof jsnObj[key] === 'object') {\n        sum = sumValuesOverJsn(sum, jsnObj[key], variableName);\n      } else if (key === variableName) {\n        if (typeof jsnObj[key] === 'string') {\n          sum += parseFloat(jsnObj[key]);\n        }\n        if (typeof jsnObj[key] === 'number') {\n          sum += jsnObj[key];\n        }\n      }\n    }\n  }\n  return sum;\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSum(funcName: any, _params: any, paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'sum') {\n    let sumValue = null;\n    if (\n      paramsTokens &&\n      paramsTokens.length > 0 &&\n      paramsTokens[0] &&\n      paramsTokens[0].length > 0 &&\n      paramsTokens[0][0].type === 'variable'\n    ) {\n      sumValue = sumValuesOverJsn(0, userInput, paramsTokens[0][0].value);\n    }\n    return [true, sumValue];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbConcat(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'concat') {\n    if (params && params.length > 0) {\n      let concatStr = '';\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < params.length; i += 1) {\n        if (params[i] == null) {\n          return [false, null];\n        }\n        concatStr += params[i];\n      }\n      return [true, concatStr];\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSubstr(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'substr') {\n    if (params && params.length > 0) {\n      if (params[0] && params[1] !== null) {\n        if (params[2] !== null && params[2] < params[0].length) {\n          const subStr = params[0].substring(params[1], params[2]);\n          return [true, subStr];\n        }\n        return [true, params[0].substring(params[1])];\n      }\n    }\n  }\n  return [false, null];\n}\n\nfunction outerScopedVariables(\n  variableName: any,\n  variableValue: any,\n  tmpUserInput: any\n): any {\n  // tslint:disable-next-line: forin\n  for (const key in tmpUserInput) {\n    const nodeNames = key.split('/');\n    const variableNameFromKey = nodeNames[nodeNames.length - 1];\n    if (variableNameFromKey === variableName) {\n      return tmpUserInput[key];\n    }\n    if (typeof tmpUserInput[key] === 'object') {\n      if (variableValue == null) {\n        variableValue = outerScopedVariables(\n          variableName,\n          variableValue,\n          tmpUserInput[key]\n        );\n      }\n    }\n  }\n  return variableValue;\n}\n\nfunction parseMostClosestScopedVariable(variableName: any) {\n  const tmpHierchicalName = currentHierarchicalName.split('/');\n  let i;\n  const tmpUserInput = userInput;\n  let variableValue = null;\n  variableValue = outerScopedVariables(\n    variableName,\n    variableValue,\n    tmpUserInput\n  );\n  let parent = '';\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\n    // tslint:disable-next-line: triple-equals\n    if (tmpHierchicalName[i] == 'repeat') {\n      i += 1;\n      const index = parseInt(tmpHierchicalName[i + 1], 10);\n      variableValue = outerScopedVariables(\n        variableName,\n        variableValue,\n        tmpUserInput[parent + tmpHierchicalName[i]][index]\n      );\n      i += 2;\n    } else {\n      // path.push(parent + tmpHierchicalName[i + 1]);\n      parent = parent + tmpHierchicalName[i + 1] + '/';\n      i += 2;\n    }\n  }\n  return variableValue;\n}\n\nfunction parseDot() {\n  const tmpHierchicalName = currentHierarchicalName.split('/');\n  let i;\n  let tmpUserInput = userInput;\n  let parent = '';\n  const path = [];\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\n    // tslint:disable-next-line: triple-equals\n    if (tmpHierchicalName[i] == 'repeat') {\n      i += 1;\n      path.push(parent + tmpHierchicalName[i]);\n      path.push(parseInt(tmpHierchicalName[i + 1], 10));\n      parent = parent + tmpHierchicalName[i] + '/';\n      i += 2;\n    } else {\n      // path.push(parent + tmpHierchicalName[i + 1]);\n      parent = parent + tmpHierchicalName[i + 1] + '/';\n      i += 2;\n    }\n  }\n  path.push(parent + tmpHierchicalName[tmpHierchicalName.length - 1]);\n  tmpUserInput = userInput.getIn(path);\n  return tmpUserInput;\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseLiterals(_tmpOutput: any, tokens: any, current: any) {\n  if (tokens[current].type === 'number') {\n    return [1, parseInt(tokens[current].value, 10)];\n  }\n  if (tokens[current].type === 'string') {\n    return [1, tokens[current].value];\n  }\n  if (tokens[current].type === 'decimal') {\n    return [1, parseFloat(tokens[current].value)];\n  }\n  if (tokens[current].type === 'variable') {\n    return [1, parseMostClosestScopedVariable(tokens[current].value)];\n  }\n  if (tokens[current].type === 'name') {\n    if (tokens[current].value.toLowerCase() === 'true') {\n      return [1, true];\n    }\n    if (tokens[current].value.toLowerCase() === 'false') {\n      return [1, false];\n    }\n    if (formItemProperty && tokens[current].value in formItemProperty) {\n      return [1, formItemProperty[tokens[current].value]];\n    }\n    return [1, null];\n  }\n  if (tokens[current].type === 'dot') {\n    return [1, parseDot()];\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseFunction(_output: any, tokens: any, current: any) {\n  const possibleFunctions = [\n    kbSelected,\n    kbCountSelected,\n    kbToday,\n    kbRegex,\n    kbInt,\n    kbCoalesce,\n    kbPosition,\n    kbSum,\n    kbConcat,\n    kbSubstr,\n    kbRound,\n  ];\n  if (tokens[current].type === 'function') {\n    const funcName = tokens[current].value;\n    const arrayOfParams: any = [];\n    const arrayOfOriginalTokens: any = [];\n    let i = 1;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      const tmpQueue = [];\n      tmpQueue.push(1);\n      i += 1;\n      let tmpTokens = [];\n      while (tokens[current + i] && tmpQueue.length) {\n        tmpTokens.push(tokens[current + i]);\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === ')'\n        ) {\n          tmpQueue.pop();\n        }\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === '('\n        ) {\n          tmpQueue.push(1);\n        }\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\n          tmpTokens.pop();\n          const tmpVal = parser(null, tmpTokens, 0);\n          arrayOfParams.push(tmpVal);\n          arrayOfOriginalTokens.push(tmpTokens);\n          tmpTokens = [];\n        }\n        i += 1;\n      }\n      i -= 1;\n\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpTokens.pop();\n        const tmpVal = parser(null, tmpTokens, 0);\n        arrayOfParams.push(tmpVal);\n        arrayOfOriginalTokens.push(tmpTokens);\n        let parsedFn = false;\n        let parsedVal = null;\n        possibleFunctions.forEach(functionFn => {\n          if (parsedFn) {\n            return;\n          }\n          [parsedFn, parsedVal] = functionFn(\n            funcName,\n            arrayOfParams,\n            arrayOfOriginalTokens\n          );\n        });\n        if (parsedFn) {\n          return [i + 1, parsedVal];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseIf(_output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'if') {\n    const arrayOfParams = [];\n    let i = 1;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      const tmpQueue = [];\n      tmpQueue.push(1);\n      i += 1;\n      let tmpTokens = [];\n      while (tokens[current + i] && tmpQueue.length) {\n        tmpTokens.push(tokens[current + i]);\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === ')'\n        ) {\n          tmpQueue.pop();\n        }\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === '('\n        ) {\n          tmpQueue.push(1);\n        }\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\n          tmpTokens.pop();\n          const tmpVal = parser(null, tmpTokens, 0);\n          arrayOfParams.push(tmpVal);\n          tmpTokens = [];\n        }\n        i += 1;\n      }\n      i -= 1;\n\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpTokens.pop();\n        const tmpVal = parser(null, tmpTokens, 0);\n        arrayOfParams.push(tmpVal);\n        if (arrayOfParams.length % 2 === 0) {\n          let j;\n          for (j = 0; j < arrayOfParams.length; j += 2) {\n            if (arrayOfParams[j]) {\n              return [i + 1, arrayOfParams[j + 1]];\n            }\n          }\n        } else {\n          let j;\n          for (j = 0; j < arrayOfParams.length - 1; j += 2) {\n            if (arrayOfParams[j]) {\n              return [i + 1, arrayOfParams[j + 1]];\n            }\n          }\n          return [i + 1, arrayOfParams[arrayOfParams.length - 1]];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseNot(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'not') {\n    let tmpTokens;\n    let i = 1;\n    if (tokens[current + i].type === 'equal' && output != null) {\n      tmpTokens = [];\n      i += 1;\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      let newOutput;\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n        // tslint:disable-next-line: triple-equals\n        return [i, output != newOutput];\n      }\n    } else {\n      let parsed = false;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      let consumedTokens;\n      let newOutput;\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          i += consumedTokens;\n        }\n      });\n      if (parsed) {\n        return [i, !newOutput];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseAnd(output: any, tokens: any, current: any): any {\n  if (tokens[current].type === 'and' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    let newOutput = null;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      let consumedChars;\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\n      i += consumedChars;\n    } else {\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n      }\n    }\n    if (newOutput != null) {\n      newOutput = output && newOutput;\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\n        let consumedChars = 0;\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\n        i += consumedChars;\n      }\n      return [i, newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseOr(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'or' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    let newOutput = null;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      let consumedChars;\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\n      i += consumedChars;\n    } else {\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n      }\n    }\n    if (newOutput != null) {\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\n        let consumedChars = 0;\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\n        i += consumedChars;\n      }\n      return [i, output || newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseEqual(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'equal' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n      // tslint:disable-next-line: triple-equals\n      return [i, output == newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseLessThan(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'lessThan' && output != null) {\n    let flagLessThanOrEqual = false;\n    const tmpTokens = [];\n    let i = 1;\n    if (tokens[current + i].type === 'equal') {\n      i += 1;\n      flagLessThanOrEqual = true;\n    }\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n      if (flagLessThanOrEqual) {\n        return [i, output <= newOutput];\n      }\n      return [i, output < newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseGreaterThan(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'greaterThan' && output != null) {\n    let flagGreaterThanOrEqual = false;\n    const tmpTokens = [];\n    let i = 1;\n    if (tokens[current + i].type === 'equal') {\n      i += 1;\n      flagGreaterThanOrEqual = true;\n    }\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n\n      if (flagGreaterThanOrEqual) {\n        return [i, output >= newOutput];\n      }\n      return [i, output > newOutput];\n    }\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseParen(_output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'paren' && tokens[current].value === '(') {\n    const tmpQueue = [];\n    tmpQueue.push(1);\n    let i = 1;\n    const tmpTokens = [];\n    while (tokens[current + i] && tmpQueue.length) {\n      tmpTokens.push(tokens[current + i]);\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpQueue.pop();\n      }\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === '('\n      ) {\n        tmpQueue.push(1);\n      }\n      i += 1;\n    }\n    i -= 1;\n\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === ')'\n    ) {\n      tmpTokens.pop();\n      const tmpVal = parser(null, tmpTokens, 0);\n      return [i + 1, tmpVal];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseDivide(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'divide') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n        }\n        const precedentParsers = [parseDivide, parseMultiply];\n        let preParsed = false;\n        let preOutput;\n        precedentParsers.forEach(preParseFn => {\n          if (preParsed) {\n            return;\n          }\n          if (tokens[current]) {\n            [consumedTokens, preOutput] = preParseFn(\n              newOutput,\n              tokens,\n              current\n            );\n            ct += consumedTokens;\n            if (consumedTokens !== 0) {\n              preParsed = true;\n              newOutput = preOutput;\n            }\n          }\n        });\n\n        if (newOutput != null) {\n          output /= newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseMultiply(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'multiply') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n        }\n        const precedentParsers = [parseDivide, parseMultiply];\n        let preParsed = false;\n        let preOutput;\n        precedentParsers.forEach(preParseFn => {\n          if (preParsed) {\n            return;\n          }\n          if (tokens[current]) {\n            [consumedTokens, preOutput] = preParseFn(\n              newOutput,\n              tokens,\n              current\n            );\n            ct += consumedTokens;\n            if (consumedTokens !== 0) {\n              preParsed = true;\n              newOutput = preOutput;\n            }\n          }\n        });\n\n        if (newOutput != null) {\n          output *= newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parsePlus(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'plus') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'string',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n          const precedentParsers = [parseDivide, parseMultiply];\n          let preParsed = false;\n          let preOutput;\n          precedentParsers.forEach(preParseFn => {\n            if (preParsed) {\n              return;\n            }\n            if (tokens[current]) {\n              [consumedTokens, preOutput] = preParseFn(\n                newOutput,\n                tokens,\n                current\n              );\n              ct += consumedTokens;\n              if (consumedTokens !== 0) {\n                preParsed = true;\n                newOutput = preOutput;\n              }\n            }\n          });\n        }\n        if (newOutput != null) {\n          output += newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseMinus(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'minus') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [parseLiterals, parseParen, parseFunction];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n          const precedentParsers = [parseDivide, parseMultiply];\n          let preParsed = false;\n          let preOutput;\n          precedentParsers.forEach(preParseFn => {\n            if (preParsed) {\n              return;\n            }\n            if (tokens[current]) {\n              [consumedTokens, preOutput] = preParseFn(\n                newOutput,\n                tokens,\n                current\n              );\n              ct += consumedTokens;\n              if (consumedTokens !== 0) {\n                preParsed = true;\n                newOutput = preOutput;\n              }\n            }\n          });\n        }\n        if (newOutput) {\n          if (output) {\n            if (\n              Object.prototype.toString.call(newOutput) === '[object Date]' &&\n              Object.prototype.toString.call(output) === '[object Date]'\n            ) {\n              if (!isNaN(output.getTime()) && !isNaN(newOutput.getTime())) {\n                output -= newOutput;\n                output = Math.ceil(output / (1000 * 60 * 60 * 24));\n              } else {\n                output = NaN;\n              }\n            } else if (\n              Object.prototype.toString.call(newOutput) === '[object Date]' ||\n              Object.prototype.toString.call(output) === '[object Date]'\n            ) {\n              output = NaN;\n            } else if (newOutput === '' || output === '') {\n              output = NaN;\n            } else {\n              output -= newOutput;\n            }\n          } else {\n            if (Object.prototype.toString.call(newOutput) === '[object Date]') {\n              output = NaN;\n            } else {\n              output = -newOutput;\n            }\n          }\n        } else {\n          output = NaN;\n        }\n      });\n      if (parsed) {\n        if (output === '') {\n          output = NaN;\n        }\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nconst parsers = [\n  parseIf,\n  parseParen,\n  parseLiterals,\n  parseDivide,\n  parseMultiply,\n  parsePlus,\n  parseMinus,\n  parseLessThan,\n  parseGreaterThan,\n  parseEqual,\n  parseAnd,\n  parseOr,\n  parseNot,\n  parseFunction,\n];\n\nfunction parser(leftOutput: any, tokens: any, pos: any) {\n  let current = pos;\n  let output = leftOutput;\n  while (current < tokens.length) {\n    let parsed = false;\n    parsers.forEach(parserFn => {\n      if (parsed) {\n        return;\n      }\n      const [consumedTokens, newOutput] = parserFn(output, tokens, current);\n      if (consumedTokens !== 0) {\n        parsed = true;\n        current += consumedTokens;\n      }\n      if (newOutput != null) {\n        output = newOutput;\n      }\n    });\n    if (!parsed) {\n      // throw new TypeError('syntax error');\n      // tslint:disable-next-line: no-console\n      console.log('syntax error');\n      // tslint:disable-next-line: no-console\n      console.log(actualExpression);\n      return null;\n    }\n  }\n  return output;\n}\n\nexport default function evaluater(\n  expression: string,\n  tmpUserInput: any,\n  tmpFormItemProperty: any,\n  tmpCurrentHierarchicalName: string\n) {\n  if (!tmpUserInput) {\n    tmpUserInput = {};\n  }\n  currentHierarchicalName = tmpCurrentHierarchicalName;\n  actualExpression = expression;\n  userInput = tmpUserInput;\n  formItemProperty = tmpFormItemProperty;\n  return parser(null, tokenizer(expression), 0);\n}\n","import * as React from 'react';\nimport { Alert } from 'reactstrap';\n\nexport interface KbAlertProps {\n  headerText: string;\n  bodyText: string;\n  handleToggle: any;\n  isOpen: boolean;\n  color: string;\n}\n\nclass KbAlert extends React.Component<KbAlertProps> {\n  public render() {\n    const { headerText, bodyText, handleToggle, isOpen, color } = this.props;\n    return (\n      <Alert color={color} isOpen={isOpen} toggle={handleToggle}>\n        <h4 className=\"alert-heading\">{headerText}</h4>\n        <p>{bodyText}</p>\n      </Alert>\n    );\n  }\n}\n\nexport default KbAlert;\n","import * as React from 'react';\nimport Select from 'react-select';\n\nexport interface DropDownProps {\n  languages: any;\n  onChangeSelect: any;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass DropDown extends React.Component<DropDownProps> {\n  public render() {\n    const options: Options[] = [];\n    const languageOptions = [...this.props.languages];\n    languageOptions.map((elem: any) => {\n      options.push({ label: elem.label, value: elem.value });\n    });\n\n    let selectedValue: any;\n    options.map(elem => {\n      if (elem.value === this.props.defaultLanguage) {\n        selectedValue = elem;\n      }\n    });\n\n    return (\n      <Select\n        multi={false}\n        options={options}\n        className={'col-md-2 dropDown'}\n        placeholder=\"Language\"\n        onChange={this.onChangeHandler}\n        value={selectedValue || ''}\n      />\n    );\n  }\n\n  /** pass the selected value to the parent class\n   * @param {any} event - the onchange input event\n   */\n  private onChangeHandler = (event: any) => {\n    this.props.onChangeSelect(event.value);\n  };\n}\n\nexport default DropDown;\n","// Field Types\nexport const GROUP_FIELD_TYPE = 'group';\nexport type GROUP_FIELD_TYPE = typeof GROUP_FIELD_TYPE;\nexport const REPEAT_FIELD_TYPE = 'repeat';\nexport type REPEAT_FIELD_TYPE = typeof REPEAT_FIELD_TYPE;\nexport const TEXT_FIELD_TYPE = 'text';\nexport type TEXT_FIELD_TYPE = typeof TEXT_FIELD_TYPE;\nexport const DATE_FIELD_TYPE = 'date';\nexport type DATE_FIELD_TYPE = typeof DATE_FIELD_TYPE;\nexport const DATE_TIME_FIELD_TYPE = 'dateTime';\nexport type TIME_FIELD_TYPE = typeof TIME_FIELD_TYPE;\nexport const TIME_FIELD_TYPE = 'time';\nexport type DATE_TIME_FIELD_TYPE = typeof DATE_TIME_FIELD_TYPE;\nexport const INTEGER_FIELD_TYPE = 'integer';\nexport type INTEGER_FIELD_TYPE = typeof INTEGER_FIELD_TYPE;\nexport const DECIMAL_FIELD_TYPE = 'decimal';\nexport type DECIMAL_FIELD_TYPE = typeof DECIMAL_FIELD_TYPE;\nexport const PHOTO_FIELD_TYPE = 'photo';\nexport type PHOTO_FIELD_TYPE = typeof PHOTO_FIELD_TYPE;\nexport const FILE_FIELD_TYPE = 'file';\nexport type FILE_FIELD_TYPE = typeof FILE_FIELD_TYPE;\nexport const NOTE_FIELD_TYPE = 'note';\nexport type NOTE_FIELD_TYPE = typeof NOTE_FIELD_TYPE;\nexport const SELECT_ONE_FIELD_TYPE = 'select one';\nexport type SELECT_ONE_FIELD_TYPE = typeof SELECT_ONE_FIELD_TYPE;\nexport const SELECT_ALL_FIELD_TYPE = 'select all that apply';\nexport type SELECT_ALL_FIELD_TYPE = typeof SELECT_ALL_FIELD_TYPE;\nexport const CALCULATE_FIELD_TYPE = 'calculate';\nexport type CALCULATE_FIELD_TYPE = typeof CALCULATE_FIELD_TYPE;\n\n// Required Properties\nexport const REQUIRED_FIELD_MSG = 'This field is required';\nexport type REQUIRED_FIELD_MSG = typeof REQUIRED_FIELD_MSG;\nexport const REQUIRED_SYMBOL = '*';\nexport type REQUIRED_SYMBOL = typeof REQUIRED_SYMBOL;\n","import { FieldElement } from '../components/typeEvalutors/Base';\n\n/**\n * get the text from multilang obj based on language identifier,\n * @param {FieldElement} property - field multilang property or string\n * @return {string} - text value of the property based on language identifier, empty if not present\n */\nexport default function getTextFromProperty(\n  property: string | { [key: string]: string },\n  languageIdentifier: string\n): string {\n  if (typeof property === 'string') {\n    return property || '';\n  }\n  return property[languageIdentifier] || '';\n}\n\n/**\n * get the label text of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field label text\n */\nexport function getFieldLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.label) {\n    return getTextFromProperty(fieldElement.label, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the label hint of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field label text\n */\nexport function getHintLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.hint) {\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the customised label text with previous input of the fieldElement\n * @param {any} evaluator - the getEvaluatedExpressionSelector Function\n * @param {string} labelText - the current Label Text\n * @param {string} fieldTreeName - the field tree name\n * @return {string | null} - field label text or null\n */\nexport function customizeLabelsWithPreviousInputs(\n  evaluator: any,\n  labelText: string,\n  fieldTreeName: string\n): string | null {\n  if (labelText === null || labelText === undefined) {\n    return null;\n  }\n  const placesOfCustomizationsRequiredList = labelText.match(/\\[(.*?)\\]/g);\n\n  // to calculate - i.e, [${departure_date_from_bangladesh}]\n  if (placesOfCustomizationsRequiredList) {\n    placesOfCustomizationsRequiredList.forEach(tmpPlace => {\n      tmpPlace = tmpPlace.substring(1, tmpPlace.length - 1);\n      const customizedName = evaluator(tmpPlace, fieldTreeName);\n      const tmp = '[' + tmpPlace + ']';\n      if (customizedName != null && customizedName !== undefined) {\n        labelText = labelText.replace(tmp, customizedName);\n      } else {\n        labelText = labelText.replace(tmp, '');\n      }\n    });\n  } else {\n    // to calculate - i.e, ${departure_date_from_bangladesh}\n    const matchList = labelText.match(/\\${(.*[^}])[\\}?]$/g);\n    if (matchList) {\n      matchList.forEach(tmpPlace => {\n        const customizedName = evaluator(tmpPlace, fieldTreeName);\n        if (customizedName != null && customizedName !== undefined) {\n          labelText = labelText.replace(tmpPlace, customizedName);\n        } else {\n          labelText = labelText.replace(tmpPlace, '');\n        }\n      });\n    }\n  }\n\n  return labelText;\n}\n\n/**\n * get the hint text of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field hint text\n */\nexport function getFieldHintText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.hint) {\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the label text of the fieldElement constraint msg\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - constraint label text\n */\nexport function getConstraintLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.bind && fieldElement.bind['jr:constraintMsg']) {\n    return getTextFromProperty(\n      fieldElement.bind['jr:constraintMsg'],\n      languageIdentifier\n    );\n  }\n  return '';\n}\n\n/**\n * get the boolean result depending on the expression\n * @param {string} - required string\n * @returns {boolean} - true if required, otherwise false\n */\nfunction requiredEvaluator(expression: string): boolean {\n  if (\n    expression.toLowerCase() === 'yes' ||\n    expression === '1' ||\n    expression.toLowerCase() === 'true'\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * get the boolean result of fieldElement string\n * @param fieldElement\n * @return {boolean} - boolean value by calculating fieldElement required properties\n */\nexport function isInputRequired(fieldElement: FieldElement): boolean {\n  let isRequired = false;\n  if (fieldElement.bind) {\n    if (fieldElement.bind.required) {\n      if (\n        typeof fieldElement.bind.required === 'string' &&\n        requiredEvaluator(fieldElement.bind.required)\n      ) {\n        isRequired = true;\n      }\n    }\n  }\n  return isRequired;\n}\n\n/** interface for EvaluateExpression\n * @param {string} expression - the expression that needs to be evaluated\n * @param {fieldTreeName} - the field Tree name\n * @returns {any} - evaluated value\n */\nexport type EvaluateExpression = (\n  expression: string,\n  fieldTreeName: string\n) => any;\n\n/** evaluates whether a component be relevant or not\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the relevant expression\n * @returns {boolean} - true if relevant; otherwise, false;\n */\nexport function shouldComponentBeRelevant(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.relevant) {\n    const isRelevant = evaluateExpression(\n      fieldElement.bind.relevant,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isRelevant) {\n      return true;\n    }\n    return false;\n  }\n  return true;\n}\n\n/** evaluates whether a component be readonly or not\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the readonly expression\n * @returns {boolean} - true if readonly; otherwise, false;\n */\nexport function shouldComponentBeReadOnly(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.readonly) {\n    const isReadOnly = evaluateExpression(\n      fieldElement.bind.readonly,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isReadOnly) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/** evaluates whether the input violates constraint or not\n * @param {FieldElement} fieldElement - the constraint expression\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the expression\n * @returns {boolean} - true if violates; otherwise, false;\n */\nexport function shouldInputViolatesConstraint(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.constraint) {\n    const isConstraintViolated = !evaluateExpression(\n      fieldElement.bind.constraint,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isConstraintViolated) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/** returns the new user input object after assigning value of passed fieldTreeName\n * @param {any} userInputObj - the current user input object\n * @param {string} fieldTreeName - the field Tree name\n * @param {any} fieldValue - the value that needs to be assigned\n * @returns {any} - the new user input object after assignment\n */\nexport function getModifiedUserInputObject(\n  userInputObj: any,\n  fieldTreeName: string,\n  fieldValue: any\n): any {\n  const treeNodes = fieldTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  modifiedObj[parent + treeNodes[treeNodes.length - 1]] = fieldValue;\n  return userInputObj;\n}\n\n/** Returns the filtered option list Array For Repeat property\n * @param {any} userInputObj - the current option list object\n * @param {string} fieldTreeName - the field Tree name\n * @param {any} repeatIndex - the repeat index to remove\n * @returns {any} - the new user filredred repear array after assignment\n */\nexport function getModifiedOptionListForRepeat(\n  userInputObj: any,\n  fieldTreeName: string,\n  repeatIndex: number\n): any {\n  const filteredRepeatArray: any = [];\n  const optionListobj: any = userInputObj;\n\n  Object.entries(optionListobj).forEach(key => {\n    const keyNameOptionListobj: any = key[0];\n    const keyValueOptionListobj: any = key[1];\n    if (keyNameOptionListobj === fieldTreeName) {\n      const repeatIndexString: string = String(repeatIndex);\n      Object.entries(keyValueOptionListobj).map(keyRepeat => {\n        const keyNameRepeatObject: any = keyRepeat[0];\n        const keyValueRepeatValue: any = keyRepeat[1];\n        if (keyNameRepeatObject !== repeatIndexString) {\n          filteredRepeatArray.push(keyValueRepeatValue);\n        }\n      });\n    }\n  });\n  return filteredRepeatArray;\n}\n\n/** returns the value from the user input object\n * @param {any} userInputObj - the user input object\n * @param {string} fieldTreeName - the field Tree name\n * @returns {any} - the value, present in user input object, of the fieldTreeName\n */\nexport function getValueFromUserInputObj(\n  userInputObj: any,\n  fieldTreeName: string\n): any {\n  const treeNodes = fieldTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  return modifiedObj[parent + treeNodes[treeNodes.length - 1]];\n}\n\n/** evaluates whether the component is minimal or not\n * @param {FieldElement} fieldElement - the constraint expression\n * @returns {boolean} - true if minimal; otherwise, false;\n */\nexport function shouldComponentBeMinimal(fieldElement: FieldElement): boolean {\n  let isMinimal = false;\n  if (fieldElement.control && fieldElement.control.appearance) {\n    fieldElement.control.appearance.toString().includes('minimal')\n      ? (isMinimal = true)\n      : (isMinimal = false);\n  }\n  return isMinimal;\n}\n\n/** returns the new user input object after emptying the desired grouped values\n * @param {any} userInputObj - the current user input object\n * @param {string} groupTreeName - the group Tree name\n * @returns {any} - the new user input object after emptying the grouped values\n */\nexport function emptyGroupedValues(\n  userInputObj: any,\n  groupTreeName: string\n): any {\n  const treeNodes = groupTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  Object.keys(modifiedObj).forEach(objKey => {\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\n      modifiedObj[objKey] = null;\n    }\n  });\n  return userInputObj;\n}\n\n/** returns whether the grouped values are empty or not\n * @param {any} userInputObj - the current user input object\n * @param {string} groupTreeName - the group Tree name\n * @returns {any} - true if empty; otherwise, false\n */\nexport function checkGroupedValuesForEmpty(\n  userInputObj: any,\n  groupTreeName: string\n): any {\n  const treeNodes = groupTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  let isEmpty: boolean = true;\n  Object.keys(modifiedObj).forEach(objKey => {\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\n      if (\n        modifiedObj[objKey] !== null &&\n        modifiedObj[objKey] !== undefined &&\n        isEmpty\n      ) {\n        isEmpty = false;\n      }\n    }\n  });\n  return isEmpty;\n}\n","import { AnyAction, Store } from 'redux';\nimport SeamlessImmutable from 'seamless-immutable';\nimport evaluater from '../../utils/compiler';\nimport {\n  checkGroupedValuesForEmpty,\n  emptyGroupedValues,\n  getModifiedOptionListForRepeat,\n  getModifiedUserInputObject,\n  getValueFromUserInputObj,\n} from '../../utils/helpers';\n\n/** interface for the store state */\nexport interface FormState {\n  userInput: object;\n  errors: string[];\n  optionList: object;\n  isFormSubmitted: boolean;\n  mediaList: object;\n}\n\n// actions\n\n/** FIELD_VALUE_ASSIGNED action type */\nexport const FIELD_VALUE_ASSIGNED = 'odk/reducer/form/FIELD_VALUE_ASSIGNED';\n/** OPTION_LIST_ASSIGNED action type */\nexport const OPTION_LIST_ASSIGNED = 'odk/reducer/form/OPTION_LIST_ASSIGNED';\n/** MEDIA_LIST_ASSIGNED action type */\nexport const MEDIA_LIST_ADDED = 'odk/reducer/form/MEDIA_LIST_ADDED';\n/** REMOVE_FROM_MEDIA_LIST action type */\nexport const REMOVE_FROM_MEDIA_LIST = 'odk/reducer/form/REMOVE_FROM_MEDIA_LIST';\n/** REMOVE_FROM_OPTION_LIST action type */\nexport const REMOVE_FROM_OPTION_LIST_REPEAT =\n  'odk/reducer/form/REMOVE_FROM_OPTION_LIST_REPEAT';\n/** RESET_STORE action type */\nexport const RESET_STORE = 'odk/reducer/form/RESET_STORE';\n/** ADD_ERROR_INPUT_ID action type */\nexport const ADD_ERROR_INPUT_ID = 'odk/reducer/form/ADD_ERROR_INPUT_ID';\n/** REMOVE_ERROR_INPUT_ID action type */\nexport const REMOVE_ERROR_INPUT_ID = 'odk/reducer/form/REMOVE_ERROR_INPUT_ID';\n/** EMPTY_GROUP_FIELDS */\nexport const EMPTY_GROUP_FIELDS = 'odk/reducer/form/EMPTY_GROUP_FIELDS';\n/** REMOVE_GROUP_FIELDS_FROM_ERRORS */\nexport const REMOVE_GROUP_FIELDS_FROM_ERRORS =\n  'odk/reducer/form/REMOVE_GROUP_FIELDS_FROM_ERRORS';\nexport const SET_USER_INPUT_OBJ = 'odk/reducer/form/SET_USER_INPUT_OBJ';\nexport const SET_FORM_SUBMIT_STATUS = 'odk/reducer/form/SET_FORM_SUBMIT_STATUS';\n\n/** interface for ASSIGN_FIELD_VALUE action */\nexport interface AssignFieldValueAction extends AnyAction {\n  fieldTreeName: string;\n  fieldValue: any;\n  type: typeof FIELD_VALUE_ASSIGNED;\n}\n\n/** interface for OPTION_LIST_ASSIGNED action */\nexport interface AssignOptionListAction extends AnyAction {\n  fieldTreeName: string;\n  optionList: any;\n  type: typeof OPTION_LIST_ASSIGNED;\n}\n\n/** interface for MEDIA_LIST_ADDED action */\nexport interface AddMediaListAction extends AnyAction {\n  mediaObject: any;\n  type: typeof MEDIA_LIST_ADDED;\n}\n\n/** interface for REMOVE_FROM_MEDIA_LIST action */\nexport interface RemoveFromMediaListAction extends AnyAction {\n  fieldTreeName: string;\n  mediaList: any;\n  type: typeof REMOVE_FROM_MEDIA_LIST;\n}\n\n/** interface for REMOVE_FROM_OPTION_LIST action */\nexport interface RemoveFromOptionList extends AnyAction {\n  fieldTreeName: string;\n  repeatIndex: number;\n  type: typeof REMOVE_FROM_OPTION_LIST_REPEAT;\n}\n\n/** interface for RESET_STORE action */\nexport interface ResetStoreAction extends AnyAction {\n  type: typeof RESET_STORE;\n}\n\n/** interface for ADD_ERROR_INPUT_ID action */\nexport interface AddErrorInputId extends AnyAction {\n  fieldTreeName: string;\n  type: typeof ADD_ERROR_INPUT_ID;\n}\n\n/** interface for REMOVE_ERROR_INPUT_ID action */\nexport interface RemoveErrorInputId extends AnyAction {\n  fieldTreeName: string;\n  type: typeof REMOVE_ERROR_INPUT_ID;\n}\n\n/** interface for EMPTY_GROUP_FIELDS action */\nexport interface EmptyGroupFields extends AnyAction {\n  fieldTreeName: string;\n  type: typeof EMPTY_GROUP_FIELDS;\n}\n\n/** interface for REMOVE_GROUP_FIELDS_FROM_ERRORS action */\nexport interface RemoveGroupFieldsFromErrors extends AnyAction {\n  fieldTreeName: string;\n  type: typeof REMOVE_GROUP_FIELDS_FROM_ERRORS;\n}\n\n/** interface for SET_USER_INPUT_OBJ action */\nexport interface SetUserInputObj extends AnyAction {\n  userInputObj: any;\n  type: typeof SET_USER_INPUT_OBJ;\n}\n\n/** interface for SET_FORM_SUBMIT_STATUS action */\nexport interface SetFormSubmitStatus extends AnyAction {\n  isFormSubmitted: boolean;\n  type: typeof SET_FORM_SUBMIT_STATUS;\n}\n\n/** Assigns the value to the proper field name\n * @param {string} fieldTreeName - the extended field name\n * @param {any} fieldValue - the value that will be assigned\n * @return {AssignFieldValueAction} - an action to assign value to a field in the redux store\n */\nexport const assignFieldValueAction = (\n  fieldTreeName: string,\n  fieldValue: any\n): AssignFieldValueAction => ({\n  fieldTreeName,\n  fieldValue,\n  type: FIELD_VALUE_ASSIGNED,\n});\n\n/** Assigns option list to the proper field name\n * @param {string} fieldTreeName - the extended field name\n * @param {any} optionList - the option list that will be assigned\n * @return {AssignOptionListAction} - an action to assign option List to a field in the redux store\n */\nexport const assignOptionListAction = (\n  fieldTreeName: string,\n  optionList: any\n): AssignOptionListAction => ({\n  fieldTreeName,\n  optionList,\n  type: OPTION_LIST_ASSIGNED,\n});\n\n/** Remove option list from Redux Store\n * @param fieldTreeName - the field tree name\n * @returns {RemoveFromOptionList} - an action to remove input id for errors\n */\nexport const RemoveFromOptionList = (\n  fieldTreeName: string,\n  repeatIndex: number\n): RemoveFromOptionList => ({\n  fieldTreeName,\n  repeatIndex,\n  type: REMOVE_FROM_OPTION_LIST_REPEAT,\n});\n\n/** Adds media object to the proper field name\n * @param {any} mediaObject - the media object that will be added\n * @return {AddMediaListAction} - an action to assign media object to a field in the redux store\n */\nexport const addMediaListAction = (mediaObject: any): AddMediaListAction => ({\n  mediaObject,\n  type: MEDIA_LIST_ADDED,\n});\n\n/** Remove a media item in option list from Redux Store\n * @param fieldTreeName - the field tree name\n * @returns {RemoveFromMediaListAction} - an action to remove media info from redux store\n */\nexport const removeFromMediaListAction = (\n  fieldTreeName: string,\n  mediaList: any\n): RemoveFromMediaListAction => ({\n  fieldTreeName,\n  mediaList,\n  type: REMOVE_FROM_MEDIA_LIST,\n});\n\n/** Resets the redux store state to initial state\n * @return {ResetStoreAction} - an action to reset the redux store state\n */\nexport const resetStoreAction = (): ResetStoreAction => ({\n  type: RESET_STORE,\n});\n\n/** add the field tree name as error id to store in redux store that violates constraints\n * @param fieldTreeName - the field tree name\n * @returns {AddErrorInputId} - an action to add input id for errors\n */\nexport const addErrorInputId = (fieldTreeName: string): AddErrorInputId => ({\n  fieldTreeName,\n  type: ADD_ERROR_INPUT_ID,\n});\n\n/** remove the field tree name as error id to store in redux store that violates constraints\n * @param fieldTreeName - the field tree name\n * @returns {RemoveErrorInputId} - an action to remove input id for errors\n */\nexport const removeErrorInputId = (\n  fieldTreeName: string\n): RemoveErrorInputId => ({\n  fieldTreeName,\n  type: REMOVE_ERROR_INPUT_ID,\n});\n\n/** empties the values of the fields of the group\n * @param fieldTreeName - the group field tree name\n * @returns {RemoveErrorInputId} - an action to empty the group field values\n */\nexport const emptyGroupFields = (fieldTreeName: string): EmptyGroupFields => ({\n  fieldTreeName,\n  type: EMPTY_GROUP_FIELDS,\n});\n\n/** removes the group field names from store errors obj\n * @param {string} fieldTreeName - the group field tree name\n * @returns {RemoveGroupFieldsFromErrors} - an action to remove group field names from errors\n */\nexport const removeGroupFieldsFromErrors = (\n  fieldTreeName: string\n): RemoveGroupFieldsFromErrors => ({\n  fieldTreeName,\n  type: REMOVE_GROUP_FIELDS_FROM_ERRORS,\n});\n\n/** sets the user input object to redux store\n * @param {any} userInputObj - the user input obj\n * @returns {SetUserInputObj} - an action to set user input to redux store\n */\nexport const setUserInputObj = (userInputObj: any): SetUserInputObj => ({\n  type: SET_USER_INPUT_OBJ,\n  userInputObj,\n});\n\n/** sets the form submit info to redux store\n * @param {boolean} isFormSubmitted - the form submit info variable\n * @returns {SetFormSubmitInfo} - an action to set form submit info to redux store\n */\nexport const setFormSubmitStatus = (\n  isFormSubmitted: boolean\n): SetFormSubmitStatus => ({\n  isFormSubmitted,\n  type: SET_FORM_SUBMIT_STATUS,\n});\n\n/** Create type for forms reducer actions */\nexport type FormActionTypes =\n  | AssignFieldValueAction\n  | AssignOptionListAction\n  | RemoveFromOptionList\n  | AddMediaListAction\n  | RemoveFromMediaListAction\n  | ResetStoreAction\n  | AddErrorInputId\n  | RemoveErrorInputId\n  | EmptyGroupFields\n  | RemoveGroupFieldsFromErrors\n  | SetUserInputObj\n  | SetFormSubmitStatus\n  | AnyAction;\n\n/** Create an immutable form state */\nexport type ImmutableFormState = SeamlessImmutable.ImmutableObject<FormState>;\n\n/** initial form state */\nexport const initialState: ImmutableFormState = SeamlessImmutable({\n  errors: [],\n  isFormSubmitted: false,\n  mediaList: {},\n  optionList: {},\n  userInput: {},\n});\n\n/** the form reducer function */\nexport default function reducer(\n  state: ImmutableFormState = initialState,\n  action: FormActionTypes\n): ImmutableFormState {\n  switch (action.type) {\n    case FIELD_VALUE_ASSIGNED:\n      const modifiedUserInputObj = getModifiedUserInputObject(\n        state.getIn(['userInput']).asMutable({ deep: true }),\n        action.fieldTreeName,\n        action.fieldValue\n      );\n      const stateM = state.asMutable({ deep: true });\n      return SeamlessImmutable({ ...stateM, userInput: modifiedUserInputObj });\n\n    case OPTION_LIST_ASSIGNED:\n      const modifiedUserInputObjList = getModifiedUserInputObject(\n        state.getIn(['optionList']).asMutable({ deep: true }),\n        action.fieldTreeName,\n        action.optionList != null ? { ...action.optionList } : null\n      );\n      const newState = state.asMutable({ deep: true });\n      return SeamlessImmutable({\n        ...newState,\n        optionList: modifiedUserInputObjList,\n      });\n\n    case REMOVE_FROM_OPTION_LIST_REPEAT:\n      let filteredRepeatArray: any = [];\n      if (\n        state\n          .getIn(['optionList'])\n          .asMutable({ deep: true })\n          .hasOwnProperty(action.fieldTreeName)\n      ) {\n        filteredRepeatArray = [\n          ...getModifiedOptionListForRepeat(\n            state.getIn(['optionList']).asMutable({ deep: true }),\n            action.fieldTreeName,\n            action.repeatIndex\n          ),\n        ];\n        const modifiedOptionListRepeat = getModifiedUserInputObject(\n          state.getIn(['optionList']).asMutable({ deep: true }),\n          action.fieldTreeName,\n          { ...filteredRepeatArray }\n        );\n        const newStateForRepeat = state.asMutable({ deep: true });\n        return SeamlessImmutable({\n          ...newStateForRepeat,\n          optionList: modifiedOptionListRepeat,\n        });\n      }\n      return state;\n\n    case MEDIA_LIST_ADDED:\n      const modifiedMediaList = {\n        ...state.getIn(['mediaList']).asMutable({ deep: true }),\n        [action.mediaObject.name]: action.mediaObject,\n      };\n      const newMediaState = state.asMutable({ deep: true });\n      return SeamlessImmutable({\n        ...newMediaState,\n        mediaList: modifiedMediaList,\n      });\n\n    case REMOVE_FROM_MEDIA_LIST:\n      if (\n        state\n          .getIn(['mediaList'])\n          .asMutable({ deep: true })\n          .hasOwnProperty(action.fieldTreeName)\n      ) {\n        // const tempMediaState = state.asMutable({ deep: true });\n        // return SeamlessImmutable({\n        //   ...tempMediaState,\n        //   mediaList: modifiedMediaObject,\n        // });\n      }\n      return state;\n\n    case RESET_STORE:\n      return initialState;\n\n    case ADD_ERROR_INPUT_ID:\n      if (!state.errors.includes(action.fieldTreeName)) {\n        return state.updateIn(['errors'], arr =>\n          arr.concat([action.fieldTreeName])\n        );\n      }\n      return state;\n\n    case REMOVE_ERROR_INPUT_ID:\n      if (state.errors.includes(action.fieldTreeName)) {\n        return state.updateIn(['errors'], arr =>\n          arr.filter(elm => elm !== action.fieldTreeName)\n        );\n      }\n      return state;\n\n    case EMPTY_GROUP_FIELDS:\n      const mUserInputObj = emptyGroupedValues(\n        state.getIn(['userInput']).asMutable({ deep: true }),\n        action.fieldTreeName\n      );\n      const mState = state.asMutable({ deep: true });\n      return SeamlessImmutable({ ...mState, userInput: mUserInputObj });\n\n    case REMOVE_GROUP_FIELDS_FROM_ERRORS:\n      return state.updateIn(['errors'], arr =>\n        arr.filter(elm => !elm.startsWith(action.fieldTreeName))\n      );\n\n    case SET_USER_INPUT_OBJ:\n      return SeamlessImmutable({\n        ...state,\n        userInput: (action as any).userInputObj,\n      });\n\n    case SET_FORM_SUBMIT_STATUS:\n      return SeamlessImmutable({\n        ...state,\n        isFormSubmitted: (action as any).isFormSubmitted,\n      });\n\n    default:\n      return state;\n  }\n}\n\n// selectors\n\n/** get the value by their respective element tree name\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} value if the element name is found else null\n */\nexport function getFieldValue(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return getValueFromUserInputObj(\n    (state as any).getIn(['userInput']).asMutable({ deep: true }),\n    fieldTreeName\n  );\n}\n\n/** get option list by their respective element tree name\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} value if the element name is found else null\n */\nexport function getOptionList(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return getValueFromUserInputObj(\n    (state as any).getIn(['optionList']).asMutable({ deep: true }),\n    fieldTreeName\n  );\n}\n\n/** get the value of the evaluated expression\n * @param {Partial<Store>} state - the redux store\n * @param {string} expression - the expression that needs to be evaluated\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} - the evaluated value or null if syntax error\n */\nexport function getEvaluatedExpression(\n  state: Partial<Store>,\n  expression: string,\n  fieldTreeName: string\n): any {\n  return evaluater(expression, (state as any).userInput, null, fieldTreeName);\n}\n\n/** get the value of the evaluated expression for Select One and Select All\n * @param {Partial<Store>} state - the redux store\n * @param {string} expression - the expression that needs to be evaluated\n * @param {any} options - the options that needs to be evaluated\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} - the evaluated value or null if syntax error\n */\nexport function getEvaluatedExpressionForSelect(\n  state: Partial<Store>,\n  expression: string,\n  options: any,\n  fieldTreeName: string\n): any {\n  return evaluater(\n    expression,\n    (state as any).userInput,\n    options,\n    fieldTreeName\n  );\n}\n\n/** check if the field element is present in the store\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {boolean} true if present; otherwise, false\n */\nexport function isPresentInError(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return (state as any).errors.includes(fieldTreeName);\n}\n\n/** check if the field elements under group are empty or not\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the group field\n * @return {boolean} true if empty; otherwise, false\n */\nexport function isGroupFieldsEmpty(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return checkGroupedValuesForEmpty((state as any).userInput, fieldTreeName);\n}\n\n/** check if the field elements under group are present in errors or not\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the group field\n * @return {boolean} true if present; otherwise, false\n */\nexport function isErrorsIncludeGroupFields(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  let isPresent = false;\n  (state as any).errors.forEach((fTName: string) => {\n    if (fTName.startsWith(fieldTreeName) && !isPresent) {\n      isPresent = true;\n    }\n  });\n  return isPresent;\n}\n\n/** check if the errors array in store empty or not\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} true if empty; otherwise, false\n */\nexport function isErrorsArrayEmpty(state: Partial<Store>): any {\n  return (state as any).errors && (state as any).errors.length ? false : true;\n}\n\n/** get the userInput object from store\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} the current userInputObject\n */\nexport function getUserInputFromStore(state: Partial<Store>): any {\n  return (state as any).getIn(['userInput']).asMutable({ deep: true });\n}\n\n/** get the userInput object from store\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} the current isFormSubmitted\n */\nexport function getFormSubmitStatus(state: Partial<Store>): any {\n  return (state as any).isFormSubmitted;\n}\n\n/** get the file if present in store\n * @param {Partial<Store>} state - the redux store\n * @param {string} fileName - the fileName\n * @return {any} - the file or null\n */\nexport function getFileObject(state: Partial<Store>, fileName: string): any {\n  const fileObject = (state as any).getIn(['mediaList', fileName]);\n  return fileObject ? (state as any).getIn(['mediaList', fileName]) : null;\n}\n\n/** get all the files\n * @param {Partial<Store>} state - the redux store\n * @return {any} - the files or empty object\n */\nexport function getAllFileObjects(state: Partial<Store>): any {\n  return (state as any).getIn(['mediaList']);\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport GroupTypeEvaluator from '../../../../components/typeEvalutors/Group';\nimport {\n  emptyGroupFields,\n  getEvaluatedExpression,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  removeGroupFieldsFromErrors,\n} from '../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../utils/helpers';\n\nexport interface GroupProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n}\n\nclass Group extends React.Component<GroupProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    let isAppearanceApplicable = false;\n    if (fieldElement.control && fieldElement.control.appearance) {\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\n        isAppearanceApplicable = true;\n      }\n    }\n    if (isComponentRender) {\n      return (\n        <FormGroup>\n          <Label className={'groupLabel'}>{fieldLabel}</Label>\n          {fieldElement.children && (\n            <GroupTypeEvaluator\n              choices={choices}\n              fieldElements={fieldElement.children}\n              fieldParentTreeName={\n                fieldParentTreeName + 'group/' + fieldElement.name + '/'\n              }\n              defaultLanguage={defaultLanguage}\n              csvList={csvList}\n              isAppearanceApplicable={isAppearanceApplicable}\n            />\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\n        );\n      }\n      if (\n        !this.props.isGroupFieldsEmptySelector(\n          fieldParentTreeName + fieldElement.name\n        )\n      ) {\n        this.props.emptyGroupFieldsActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n};\n\n/** connect Group component to the redux store */\nconst ConnectedGroup = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Group);\n\nexport default ConnectedGroup;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport GroupTypeEvaluator from '../../../../../components/typeEvalutors/Group';\n\nexport interface SingleRepeatProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  defaultLanguage: string;\n  repeatIndex: number;\n  assignmentHandler: any;\n  removeHandler: any;\n  removeOptionHandler: any;\n  unControlFlag: boolean;\n}\n\nclass SingleRepeat extends React.Component<SingleRepeatProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      defaultLanguage,\n      fieldElement,\n      fieldParentTreeName,\n      repeatIndex,\n      unControlFlag,\n    } = this.props;\n    let isAppearanceApplicable = false;\n    if (fieldElement.control && fieldElement.control.appearance) {\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\n        isAppearanceApplicable = true;\n      }\n    }\n    return (\n      <div className={'groupFormFieldBody'}>\n        {fieldElement.children && (\n          <GroupTypeEvaluator\n            choices={choices}\n            fieldElements={fieldElement.children}\n            fieldParentTreeName={\n              fieldParentTreeName +\n              'repeat/' +\n              fieldElement.name +\n              '/' +\n              repeatIndex +\n              '/'\n            }\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n            isAppearanceApplicable={isAppearanceApplicable}\n          />\n        )}\n\n        {unControlFlag === false ? (\n          <div className={'minusIconWrapper'}>\n            <span onClick={this.handleChange}>\n              <FontAwesomeIcon icon=\"minus-circle\" className={'minusIcon'} />\n            </span>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  // tslint:disable-next-line: variable-name\n  private handleChange = (_event: React.MouseEvent<HTMLDivElement>) => {\n    const {\n      repeatIndex,\n      fieldValue,\n      assignmentHandler,\n      fieldElement,\n      fieldParentTreeName,\n      removeHandler,\n      removeOptionHandler,\n    } = this.props;\n    let newFieldValue: any[] = [...fieldValue];\n    newFieldValue = newFieldValue.filter(\n      // tslint:disable-next-line: variable-name\n      (_elem, index) => index !== repeatIndex\n    );\n    assignmentHandler(fieldParentTreeName + fieldElement.name, newFieldValue);\n    removeHandler(fieldParentTreeName + 'repeat/' + fieldElement.name + '/');\n    removeOptionHandler(fieldParentTreeName + fieldElement.name, repeatIndex);\n  };\n}\n\nexport default SingleRepeat;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport {\n  assignFieldValueAction,\n  emptyGroupFields,\n  getEvaluatedExpression,\n  getFieldValue,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  RemoveFromOptionList,\n  removeGroupFieldsFromErrors,\n} from '../../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../../utils/helpers';\nimport SingleRepeat from '.././Single Repeat';\n\nexport interface ControlledRepeatProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldValue: any;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\n}\n\nclass ControlledRepeat extends React.Component<ControlledRepeatProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldValue,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n      assignFieldValueActionCreator,\n      removeGroupFieldsFromErrorsActionCreator,\n      removeOptionListFromActionCreator,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (!fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          [{}]\n        );\n      }\n\n      return (\n        <FormGroup className={'groupBody'}>\n          <Label>{fieldLabel}</Label>\n          {fieldValue &&\n            // tslint:disable-next-line: variable-name\n            fieldValue.map((_elm: any, index: any) => (\n              <div className=\"repeat-fields-body\" key={'repeat' + index}>\n                <SingleRepeat\n                  choices={choices}\n                  defaultLanguage={defaultLanguage}\n                  fieldElement={fieldElement}\n                  fieldParentTreeName={fieldParentTreeName}\n                  fieldValue={fieldValue}\n                  repeatIndex={index}\n                  assignmentHandler={assignFieldValueActionCreator}\n                  removeHandler={removeGroupFieldsFromErrorsActionCreator}\n                  removeOptionHandler={removeOptionListFromActionCreator}\n                  csvList={csvList}\n                  unControlFlag={false}\n                />\n              </div>\n            ))}\n          <div>\n            <span onClick={this.addAnotherRepeat}>\n              <FontAwesomeIcon icon=\"plus-circle\" className={'plusIcon'} />\n            </span>\n          </div>\n        </FormGroup>\n      );\n    } else {\n      if (\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        );\n      }\n      if (fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  // tslint:disable-next-line: variable-name\n  private addAnotherRepeat = (_event: React.MouseEvent<HTMLDivElement>) => {\n    const { fieldValue, fieldParentTreeName, fieldElement } = this.props;\n    const newFieldValue = [...fieldValue];\n    newFieldValue.push({});\n    this.props.assignFieldValueActionCreator(\n      fieldParentTreeName + fieldElement.name,\n      newFieldValue\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n  removeOptionListFromActionCreator: RemoveFromOptionList,\n};\n\n/** connect Group component to the redux store */\nconst ConnectedControlledRepeat = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ControlledRepeat);\n\nexport default ConnectedControlledRepeat;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport {\n  assignFieldValueAction,\n  assignOptionListAction,\n  emptyGroupFields,\n  getEvaluatedExpression,\n  getFieldValue,\n  getOptionList,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  RemoveFromOptionList,\n  removeGroupFieldsFromErrors,\n} from '../../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../../utils/helpers';\nimport SingleRepeat from '.././Single Repeat';\n\nexport interface UncontrolledRepeatProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldValue: any;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  optionList: object;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\n}\n\nclass UncontrolledRepeat extends React.Component<UncontrolledRepeatProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldValue,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n      optionList,\n      assignFieldValueActionCreator,\n      removeGroupFieldsFromErrorsActionCreator,\n      removeOptionListFromActionCreator,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (!fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          []\n        );\n      }\n\n      let noOfJrCount: number = 0;\n\n      if (fieldElement.control) {\n        const jrCount: string = 'jr:count';\n        const res: any = fieldElement.control[jrCount];\n\n        if (/^[0-9]*$/i.test(res)) {\n          noOfJrCount = parseInt(res, 10);\n        } else {\n          const value: any = this.props.getEvaluatedExpressionSelector(\n            res,\n            fieldParentTreeName + fieldElement.name\n          );\n          if (value) {\n            noOfJrCount = parseInt(value, 10);\n          }\n        }\n      }\n\n      if (\n        fieldValue &&\n        fieldValue.length === 0 &&\n        noOfJrCount === 0 &&\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        );\n      }\n\n      if (fieldValue && fieldValue.length > 0 && noOfJrCount === 0) {\n        this.removeFromError();\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          []\n        );\n      }\n\n      if (optionList && _.size(optionList) > noOfJrCount && noOfJrCount === 0) {\n        this.props.assignOptionListActionCreator(\n          this.props.fieldParentTreeName + this.props.fieldElement.name,\n          []\n        );\n      }\n\n      if (noOfJrCount > 0) {\n        const newFieldValue = [...fieldValue];\n\n        if (fieldValue && fieldValue.length < noOfJrCount) {\n          const iterate = noOfJrCount - fieldValue.length;\n          for (let j = 0; j < iterate; j++) {\n            newFieldValue.push({});\n          }\n        }\n\n        if (fieldValue && fieldValue.length > noOfJrCount) {\n          const iterate = fieldValue.length - noOfJrCount;\n          for (let i = 0; i < iterate; i++) {\n            newFieldValue.pop();\n          }\n          this.props.assignFieldValueActionCreator(\n            fieldParentTreeName + fieldElement.name,\n            newFieldValue\n          );\n          this.removeFromError();\n        }\n\n        if (optionList && _.size(optionList) > noOfJrCount) {\n          const iterate = _.size(optionList) - noOfJrCount;\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            Array.prototype.slice.call(optionList, iterate)\n          );\n          this.removeFromError();\n        }\n\n        return (\n          <FormGroup className={'groupBodyUnControlled'}>\n            <Label>{fieldLabel}</Label>\n            {newFieldValue &&\n              // tslint:disable-next-line: variable-name\n              newFieldValue.map((_elm: any, index: any) => (\n                <div className=\"repeat-fields-body\" key={'repeat' + index}>\n                  <SingleRepeat\n                    choices={choices}\n                    defaultLanguage={defaultLanguage}\n                    fieldElement={fieldElement}\n                    fieldParentTreeName={fieldParentTreeName}\n                    fieldValue={fieldValue}\n                    repeatIndex={index}\n                    assignmentHandler={assignFieldValueActionCreator}\n                    removeHandler={removeGroupFieldsFromErrorsActionCreator}\n                    removeOptionHandler={removeOptionListFromActionCreator}\n                    csvList={csvList}\n                    unControlFlag={true}\n                  />\n                </div>\n              ))}\n          </FormGroup>\n        );\n      } else {\n        return null;\n      }\n    } else {\n      this.removeFromError();\n      if (fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  private removeFromError() {\n    if (\n      this.props.isErrorsIncludeGroupFieldsSelector(\n        this.props.fieldParentTreeName +\n          'repeat/' +\n          this.props.fieldElement.name +\n          '/'\n      )\n    ) {\n      this.props.removeGroupFieldsFromErrorsActionCreator(\n        this.props.fieldParentTreeName +\n          'repeat/' +\n          this.props.fieldElement.name +\n          '/'\n      );\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n  removeOptionListFromActionCreator: RemoveFromOptionList,\n};\n\n/** connect Repeat component to the redux store */\nconst ConnectedUncontrolledRepeat = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UncontrolledRepeat);\n\nexport default ConnectedUncontrolledRepeat;\n","import * as React from 'react';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport ControlledRepeat from './Controlled Repeat';\nimport UncontrolledRepeat from './Uncontrolled Repeat';\n\n/** props interface for the Repeat component */\nexport interface RepeatProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass Repeat extends React.Component<RepeatProps> {\n  public render() {\n    const { fieldElement } = this.props;\n    if (fieldElement.control && fieldElement.control['jr:count']) {\n      return <UncontrolledRepeat {...this.props} />;\n    }\n    return <ControlledRepeat {...this.props} />;\n  }\n}\n\nexport default Repeat;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Input } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\n\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the calculate component */\nexport interface CalculateProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Calculate extends React.Component<CalculateProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      let calculatedValue: any = '';\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (calculatedValue && fieldValue !== calculatedValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          calculatedValue\n        );\n      }\n\n      return (\n        <div>\n          <Input\n            type=\"hidden\"\n            name={fieldElement.name}\n            value={calculatedValue || ''}\n            readOnly={isReadonly}\n          />\n        </div>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Calculate component to the redux store */\nconst ConnectedCalculate = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Calculate);\n\nexport default ConnectedCalculate;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the KbDate component */\nexport interface DateProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass KbDate extends React.Component<DateProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      let defaultValue: string = '';\n      if (fieldValue && fieldValue !== '') {\n        const modifiedDate = new Date(fieldValue);\n        defaultValue = modifiedDate.toISOString().slice(0, 10);\n      }\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <Input\n            type=\"date\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={defaultValue}\n            readOnly={isReadonly}\n          />\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? new Date(event.currentTarget.value)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect KbDate component to the redux store */\nconst ConnectedDate = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(KbDate);\n\nexport default ConnectedDate;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport DatePicker from 'react-datepicker';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\n/** props interface for the date Time component */\nexport interface DateTimeProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass DateTime extends React.Component<DateTimeProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      let modifiedDate: any = null;\n      if (fieldValue) {\n        modifiedDate = new Date(fieldValue);\n        const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\n        modifiedDate.setHours(modifiedDate.getHours() - timeZoneOffset);\n      }\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <br />\n          <DatePicker\n            name={fieldElement.name}\n            selected={fieldValue ? modifiedDate : null}\n            onChange={this.handleChange(fieldElement.name)}\n            showTimeSelect={true}\n            timeFormat=\"h:m aa\"\n            timeIntervals={15}\n            timeCaption=\"time\"\n            dateFormat=\"MM/dd/yyyy h:mm aa\"\n            placeholderText=\"mm/dd/yyyy h:m aa\"\n            className=\"form-control\"\n            readOnly={isReadonly}\n          />\n          <br />\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  private handleChange = (name: any) => (value: any) => {\n    const modifiedDate: any = new Date(value);\n    const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\n    modifiedDate.setHours(modifiedDate.getHours() + timeZoneOffset);\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + name,\n      value !== '' ? modifiedDate : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Date Time component to the redux store */\nconst ConnectedDateTime = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DateTime);\n\nexport default ConnectedDateTime;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the decimal component */\nexport interface DecimalProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface DecimalState {\n  fieldValue: string;\n  isFocused: boolean;\n}\n\nclass Decimal extends React.Component<DecimalProps, DecimalState> {\n  constructor(props: DecimalProps) {\n    super(props);\n    this.state = { fieldValue: '', isFocused: false };\n  }\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated =\n      isRequired &&\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\n    const isConstraintViolated =\n      fieldValue !== '' &&\n      fieldValue !== null &&\n      fieldValue !== undefined &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (typeof this.props.fieldValue === 'string') {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          parseFloat(this.props.fieldValue)\n        );\n      }\n\n      let modifiedValue: any;\n      {\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        let calculatedValue: any = '';\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n\n        if (fieldValue && calculatedValue !== fieldValue) {\n          this.props.assignFieldValueActionCreator(\n            fieldParentTreeName + fieldElement.name,\n            calculatedValue\n          );\n        }\n        modifiedValue = calculatedValue;\n      }\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <Input\n            type=\"number\"\n            step=\"any\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            onBlur={this.onBlurHandler}\n            value={\n              this.state.isFocused\n                ? this.state.fieldValue || ''\n                : modifiedValue || ''\n            }\n            readOnly={isReadonly}\n          />\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (this.state.isFocused) {\n        this.setState({ ...this.state, isFocused: false });\n      }\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: true,\n    });\n  };\n\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: false,\n    });\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? parseFloat(event.currentTarget.value)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedDecimal = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Decimal);\n\nexport default ConnectedDecimal;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  assignFieldValueAction,\n  getFileObject,\n} from '../../../../../store/ducks/formState';\n\ninterface FilePreviewProps {\n  fieldName: string;\n  fieldValue: any;\n  fileObject: any;\n  assignFieldValueActionCreator: any;\n}\n\nclass FilePreview extends React.Component<FilePreviewProps> {\n  public render() {\n    const { fieldName, fieldValue, assignFieldValueActionCreator } = this.props;\n    const removeHandler = () => {\n      assignFieldValueActionCreator(fieldName, null);\n    };\n    return (\n      <>\n        <p className=\"text-muted\">\n          Uploaded File Name: <strong className=\"text-primary\"> {fieldValue} </strong>\n        </p>\n        <Button size=\"sm\" color=\"danger\" onClick={removeHandler}>\n          Remove File\n        </Button>\n      </>\n    );\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fileObject: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldName: string;\n  fieldValue: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldValue } = parentProps;\n  const result = {\n    fileObject: getFileObject(state, fieldValue),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n};\n\n/** connect FilePreview component to the redux store */\nconst ConnectedFilePreview = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FilePreview);\n\nexport default ConnectedFilePreview;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport { PHOTO_FIELD_TYPE } from '../../../../constants';\nimport {\n  addErrorInputId,\n  addMediaListAction,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\nimport FilePreview from './FilePreview/FilePreview';\n\n/** props interface for the file component */\nexport interface FileProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  addMediaListActionCreator: typeof addMediaListAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass File extends React.Component<FileProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          {fieldValue ? (\n            <FilePreview\n              fieldName={fieldParentTreeName + fieldElement.name}\n              fieldValue={fieldValue}\n            />\n          ) : fieldElement.type === PHOTO_FIELD_TYPE ? (\n            <Input\n              type=\"file\"\n              accept=\"image/*\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              readOnly={isReadonly}\n            />\n          ) : (\n            <Input\n              type=\"file\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              readOnly={isReadonly}\n            />\n          )}\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param event - the onchange input event\n   */\n  private onChangeHandler = (event: any) => {\n    if (event.target.files[0]) {\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + event.target.name,\n        event.target.files[0].name\n      );\n      this.props.addMediaListActionCreator(event.target.files[0]);\n    } else {\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + event.target.name,\n        null\n      );\n    }\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  addMediaListActionCreator: addMediaListAction,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect File component to the redux store */\nconst ConnectedFile = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(File);\n\nexport default ConnectedFile;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the integer component */\nexport interface IntegerProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\nexport interface IntegerState {\n  fieldValue: string;\n  isFocused: boolean;\n}\nclass Integer extends React.Component<IntegerProps, IntegerState> {\n  constructor(props: IntegerProps) {\n    super(props);\n    this.state = { fieldValue: '', isFocused: false };\n  }\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated =\n      isRequired &&\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\n\n    const isConstraintViolated =\n      fieldValue !== '' &&\n      fieldValue !== null &&\n      fieldValue !== undefined &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel =\n      customizeLabelsWithPreviousInputs(\n        getEvaluatedExpressionSelector,\n        constraintLabel,\n        fieldParentTreeName + fieldElement.name\n      ) || '';\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      if (typeof this.props.fieldValue === 'string') {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          parseInt(this.props.fieldValue, 10)\n        );\n      }\n\n      let modifiedValue: any;\n      {\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        let calculatedValue: any = '';\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n\n        if (fieldValue && calculatedValue !== fieldValue) {\n          this.props.assignFieldValueActionCreator(\n            fieldParentTreeName + fieldElement.name,\n            calculatedValue\n          );\n        }\n        modifiedValue = calculatedValue;\n      }\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <Input\n            type=\"number\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            onBlur={this.onBlurHandler}\n            value={\n              this.state.isFocused\n                ? this.state.fieldValue || ''\n                : modifiedValue || ''\n            }\n            readOnly={isReadonly}\n          />\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (this.state.isFocused) {\n        this.setState({ ...this.state, isFocused: false });\n      }\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: true,\n    });\n  };\n\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: false,\n    });\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? parseInt(event.currentTarget.value, 10)\n        : null\n    );\n  };\n}\n/** connect the component to the store */\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n/** connect Integer component to the redux store */\nconst ConnectedInteger = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Integer);\nexport default ConnectedInteger;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, FormText, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the text component */\nexport interface NoteProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isPresentInErrorSelector: any;\n  isComponentRender: boolean;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Note extends React.Component<NoteProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const fieldHint = getHintLabelText(fieldElement, defaultLanguage);\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          {fieldElement.hint && (\n            <FormText className=\"hintText\">{fieldHint}</FormText>\n          )}\n\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Note component to the redux store */\nconst ConnectedNote = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Note);\n\nexport default ConnectedNote;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getFormSubmitStatus,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectAll Dropdown component */\nexport interface SelectAllDropDownProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectAllDropDown extends React.Component<SelectAllDropDownProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== [] &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n        this.setOptionList(resultOptions);\n      } else if (fieldElement.itemset) {\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              options.push({ label: childrenLabel, value: elem.name });\n            }\n          });\n\n          const optionsArray: any = [];\n          if (options) {\n            options.map(elem => {\n              const elemObj: any = {};\n              const name: string = 'name';\n              const label: string = 'label';\n              elemObj[name] = elem.value;\n              elemObj[label] = elem.label;\n              optionsArray.push(elemObj);\n            });\n          }\n          this.setOptionList(optionsArray);\n        }\n      } else {\n        if (fieldElement.children) {\n          fieldElement.children.map(elem => {\n            const childrenLabel: string = getFieldLabelText(\n              elem,\n              defaultLanguage\n            );\n\n            options.push({ label: childrenLabel, value: elem.name });\n          });\n          this.setOptionList(fieldElement.children);\n        }\n      }\n\n      const tmpValueArray: any = [];\n      let isNotIncluded: boolean = false;\n      if (fieldValue && fieldValue.length > 0) {\n        const optionsValueArray: any = [];\n        options.map(elem => {\n          if (elem.value) {\n            optionsValueArray.push(elem.value);\n          }\n        });\n\n        for (const row of fieldValue) {\n          if (!optionsValueArray.includes(row)) {\n            isNotIncluded = true;\n          } else {\n            tmpValueArray.push(row);\n          }\n        }\n      }\n\n      if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n        this.props.assignFieldValueActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          tmpValueArray || []\n        );\n      }\n\n      const selectedValues: any[] = [];\n      if (fieldValue && fieldValue.length > 0) {\n        options.map(elem => {\n          for (const row of fieldValue) {\n            if (elem.value === row) {\n              selectedValues.push(elem);\n            }\n          }\n        });\n      }\n\n      if (typeof this.props.fieldValue === 'string') {\n        const seperatedValues: string[] = fieldValue.split(' ');\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          seperatedValues\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <div key={fieldElement.name} className=\"selectAllDropDown\">\n            <Select\n              isMulti={true}\n              name={fieldElement.name}\n              options={options}\n              onChange={this.onChangeHandler(fieldElement.name)}\n              value={selectedValues || []}\n            />\n          </div>\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      if (this.props.optionList != null) {\n        this.props.assignOptionListActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  /** Sets the option list to the Redux Store\n   * @param {any} optionObject - the option object to be processed\n   */\n  private setOptionList = (optionObject: any) => {\n    const tempObjArray: any = [];\n    optionObject.map((elem: { name: any; label: any }) => {\n      const elemObj: any = {};\n      const name: string = 'name';\n      const label: string = 'label';\n      elemObj[name] = elem.name;\n      elemObj[label] = elem.label;\n      tempObjArray.push(elemObj);\n    });\n\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\n      this.props.assignOptionListActionCreator(\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\n        tempObjArray\n      );\n    }\n  };\n\n  /** sets the value of field element in store\n   * @param {any} values - the onchange input values\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandler = (fieldName: any) => (values: any) => {\n    const selectedValues: any = [];\n    let i = 0;\n    if (values && values.length > 0) {\n      values.map(() => {\n        if (!selectedValues.includes(values[i].value)) {\n          selectedValues.push(values[i].value);\n        }\n        i++;\n      });\n\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + fieldName,\n        selectedValues\n      );\n    } else {\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + fieldName,\n        null\n      );\n    }\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const finalRes: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n\n        let filterResult: any = [];\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n\n        let j = 0;\n        filterResult.map(() => {\n          options.map(option => {\n            if (option[nameOfKey] === filterResult[j]) {\n              finalRes.push(option);\n            }\n          });\n          j = j + 1;\n        });\n\n        i = i + 2;\n      }\n\n      options = [...Array.from(new Set(finalRes))];\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string[];\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Dropdown component to the redux store */\nconst ConnectedSelectAllDropDown = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectAllDropDown);\n\nexport default ConnectedSelectAllDropDown;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getFormSubmitStatus,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectAll Radio component */\nexport interface SelectAllRadioProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n  optionList: object;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectAllRadio extends React.Component<SelectAllRadioProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== [] &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      let options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      const childrenArray: any = [];\n      if (fieldElement.children) {\n        fieldElement.children.map(elem => {\n          const elemObj: any = {};\n          const name: string = 'name';\n          const label: string = 'label';\n          elemObj[name] = elem.name;\n          elemObj[label] = elem.label;\n          childrenArray.push(elemObj);\n        });\n      }\n\n      let values: any = [];\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        values = [];\n        options = [];\n        const tmpValueArray: any = [];\n        let isNotIncluded: boolean = false;\n\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n\n        if (fieldValue && fieldValue.length > 0) {\n          const optionsValueArray: any = [];\n          options.map(elem => {\n            if (elem.value) {\n              optionsValueArray.push(elem.value);\n            }\n          });\n\n          for (const row of fieldValue) {\n            if (!optionsValueArray.includes(row)) {\n              isNotIncluded = true;\n            } else {\n              tmpValueArray.push(row);\n            }\n          }\n        }\n\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            tmpValueArray || []\n          );\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            resultOptions\n          );\n        }\n        values = [...resultOptions];\n      } else if (fieldElement.itemset) {\n        values = [];\n        options = [];\n        const tmpValueArray: any = [];\n        const optionsArray: any = [];\n        let isNotIncluded: boolean = false;\n\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              options.push({ label: childrenLabel, value: elem.name });\n            }\n          });\n        }\n\n        if (fieldValue && fieldValue.length > 0) {\n          const optionsValueArray: any = [];\n          options.map((elem: any) => {\n            if (elem.value) {\n              optionsValueArray.push(elem.value);\n            }\n          });\n\n          for (const row of fieldValue) {\n            if (!optionsValueArray.includes(row)) {\n              isNotIncluded = true;\n            } else {\n              tmpValueArray.push(row);\n            }\n          }\n        }\n\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            tmpValueArray || []\n          );\n        }\n\n        if (options) {\n          options.map(elem => {\n            const elemObj: any = {};\n            const name: string = 'name';\n            const label: string = 'label';\n            elemObj[name] = elem.value;\n            elemObj[label] = elem.label;\n            optionsArray.push(elemObj);\n          });\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...optionsArray })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            optionsArray\n          );\n        }\n\n        values = [...optionsArray];\n      } else {\n        values = [];\n        options = [];\n        if (fieldElement.children) {\n          fieldElement.children.map(elem =>\n            options.push({ label: elem.label, value: elem.name })\n          );\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            childrenArray\n          );\n        }\n        values = [...childrenArray];\n      }\n\n      const selectedValues: any[] = [];\n      if (fieldValue && fieldValue.length > 0) {\n        options.map(elem => {\n          for (const row of fieldValue) {\n            if (elem.value === row) {\n              selectedValues.push(elem.value);\n            }\n          }\n        });\n      }\n\n      let flagInline = false;\n      if (fieldElement.control && fieldElement.control.appearance) {\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\n            flagInline = true;\n          }\n        });\n      }\n\n      if (typeof this.props.fieldValue === 'string') {\n        const seperatedValues: string[] = fieldValue.split(' ');\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          seperatedValues\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      return (\n        <div>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <Form key=\"selectAll\">\n            {values.map((elem: any, index: any) => (\n              <FormGroup key={index} check={true} inline={flagInline}>\n                <Label check={true}>\n                  <Input\n                    key={fieldElement.name + '-' + index}\n                    type=\"checkbox\"\n                    name={fieldElement.name}\n                    value={elem.name || []}\n                    onChange={this.onChangeHandlerCheckBox}\n                    readOnly={isReadonly}\n                    checked={selectedValues.includes(elem.name)}\n                  />{' '}\n                  {getFieldLabelText(elem, defaultLanguage)}\n                </Label>\n              </FormGroup>\n            ))}\n          </Form>\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </div>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n\n      if (this.props.optionList != null) {\n        this.props.assignOptionListActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {any} event - the onchange event\n   */\n\n  private onChangeHandlerCheckBox = (event: any) => {\n    const { fieldValue, fieldElement, fieldParentTreeName } = this.props;\n    const fieldName = fieldParentTreeName + fieldElement.name;\n    if (event.target.checked) {\n      if (\n        fieldValue &&\n        fieldValue.length > 0 &&\n        !fieldValue.includes(event.target.value)\n      ) {\n        this.props.assignFieldValueActionCreator(fieldName, [\n          ...fieldValue,\n          event.target.value,\n        ]);\n      } else {\n        this.props.assignFieldValueActionCreator(fieldName, [\n          event.target.value,\n        ]);\n      }\n    } else {\n      if (\n        fieldValue &&\n        fieldValue.length > 0 &&\n        fieldValue.includes(event.target.value)\n      ) {\n        const newValue = fieldValue.filter(\n          (elm: any) => elm !== event.target.value\n        );\n\n        this.props.assignFieldValueActionCreator(\n          fieldName,\n          newValue.length ? newValue : null\n        );\n      }\n    }\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const finalRes: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n\n        let filterResult: any = [];\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n\n        let j = 0;\n        filterResult.map(() => {\n          options.map(option => {\n            if (option[nameOfKey] === filterResult[j]) {\n              finalRes.push(option);\n            }\n          });\n          j = j + 1;\n        });\n\n        i = i + 2;\n      }\n\n      options = [...Array.from(new Set(finalRes))];\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string[];\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Radio component to the redux store */\nconst ConnectedSelectAllRadio = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectAllRadio);\n\nexport default ConnectedSelectAllRadio;\n","import * as React from 'react';\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport Dropdown from './Dropdown';\nimport Radio from './Radio';\n\n/** props interface for the SelectOne component */\nexport interface SelectAllProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass SelectAll extends React.Component<SelectAllProps> {\n  public render() {\n    const { fieldElement } = this.props;\n    if (shouldComponentBeMinimal(fieldElement)) {\n      return <Dropdown {...this.props} />;\n    }\n    return <Radio {...this.props} />;\n  }\n}\n\nexport default SelectAll;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getFormSubmitStatus,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneDropDownProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectOneDropDown extends React.Component<SelectOneDropDownProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n\n        this.setOptionList(resultOptions);\n      } else if (fieldElement.itemset) {\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              options.push({ label: childrenLabel, value: elem.name });\n            }\n          });\n          this.setOptionList(choices[fieldElement.itemset.trim()]);\n        }\n      } else {\n        if (fieldElement.children) {\n          fieldElement.children.map(elem => {\n            const childrenLabel: string = getFieldLabelText(\n              elem,\n              defaultLanguage\n            );\n            options.push({ label: childrenLabel, value: elem.name });\n          });\n\n          this.setOptionList(fieldElement.children);\n        }\n      }\n\n      if (fieldValue) {\n        const optionsValueArray: any = [];\n        options.map(elem => {\n          if (elem.value) {\n            optionsValueArray.push(elem.value);\n          }\n        });\n\n        if (!optionsValueArray.includes(fieldValue)) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            ''\n          );\n        }\n      }\n\n      let selectedValue: any;\n      options.map(elem => {\n        if (elem.value === fieldValue) {\n          selectedValue = elem;\n        }\n      });\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <div key={fieldElement.name} className=\"selectOneDropDown\">\n            <Select\n              multi={false}\n              name={fieldElement.name}\n              options={options}\n              value={selectedValue || ''}\n              onChange={this.onChangeHandler(fieldElement.name)}\n            />\n          </div>\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** Sets the option list to the Redux Store\n   * @param {any} optionObject - the option object to be processed\n   */\n  private setOptionList = (optionObject: any) => {\n    const tempObjArray: any = [];\n    optionObject.map((elem: { name: any; label: any }) => {\n      const elemObj: any = {};\n      const name: string = 'name';\n      const label: string = 'label';\n      elemObj[name] = elem.name;\n      elemObj[label] = elem.label;\n      tempObjArray.push(elemObj);\n    });\n\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\n      this.props.assignOptionListActionCreator(\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\n        tempObjArray\n      );\n    }\n  };\n\n  /** sets the value of field element in store\n   * @param {any} event - the onchange input event\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandler = (fieldName: any) => (event: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + fieldName,\n      event.value || ''\n    );\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n        let filterResult: any = '';\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n        options = options.filter(option => option[nameOfKey] === filterResult);\n        i = i + 2;\n      }\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne component to the redux store */\nconst ConnectedSelectOneDropDown = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectOneDropDown);\n\nexport default ConnectedSelectOneDropDown;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getFormSubmitStatus,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneRadioProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectOneRadio extends React.Component<SelectOneRadioProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        if (/search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)) {\n          const processedStringArray = fieldElement.control.appearance.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      const childrenArray: any = [];\n      if (fieldElement.children) {\n        fieldElement.children.map(elem => {\n          const elemObj: any = {};\n          const name: string = 'name';\n          const label: string = 'label';\n          elemObj[name] = elem.name;\n          elemObj[label] = elem.label;\n          childrenArray.push(elemObj);\n        });\n      }\n\n      let values: any = [];\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        values = [];\n        if (fieldValue) {\n          const optionsValueArray: any = [];\n          resultOptions.map(elem => {\n            if (elem.name) {\n              optionsValueArray.push(elem.name);\n            }\n          });\n\n          if (!optionsValueArray.includes(fieldValue)) {\n            this.props.assignFieldValueActionCreator(\n              this.props.fieldParentTreeName + fieldElement.name,\n              ''\n            );\n          }\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            resultOptions\n          );\n        }\n        values = [...resultOptions];\n      } else if (fieldElement.itemset) {\n        const choiceOptions: any = [];\n        values = [];\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              choiceOptions.push({ label: childrenLabel, name: elem.name });\n            }\n          });\n\n          if (fieldValue) {\n            const optionsValueArray: any = [];\n            choiceOptions.map((elem: any) => {\n              if (elem.name) {\n                optionsValueArray.push(elem.name);\n              }\n            });\n            if (!optionsValueArray.includes(fieldValue)) {\n              this.props.assignFieldValueActionCreator(\n                this.props.fieldParentTreeName + fieldElement.name,\n                ''\n              );\n            }\n          }\n          if (!_.isEqual(this.props.optionList, { ...choiceOptions })) {\n            this.props.assignOptionListActionCreator(\n              this.props.fieldParentTreeName + fieldElement.name,\n              choiceOptions\n            );\n          }\n          values = [...choiceOptions];\n        }\n      } else {\n        values = [];\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            childrenArray\n          );\n        }\n        values = [...childrenArray];\n      }\n\n      let flagInline = false;\n      if (fieldElement.control && fieldElement.control.appearance) {\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\n            flagInline = true;\n          }\n        });\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      return (\n        <div>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <Form key=\"selectOne\">\n            {values.map((elem: any, index: any) => (\n              <FormGroup key={index} check={true} inline={flagInline}>\n                <Label check={true}>\n                  <Input\n                    key={fieldElement.name + '-' + index}\n                    type=\"radio\"\n                    name={fieldElement.name}\n                    value={elem.name}\n                    onChange={this.onChangeHandlerRadio(fieldElement.name)}\n                    readOnly={isReadonly}\n                    checked={elem.name === fieldValue}\n                  />{' '}\n                  {getFieldLabelText(elem, defaultLanguage)}\n                </Label>\n              </FormGroup>\n            ))}\n          </Form>\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </div>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of Radio Button field element in store\n   * @param {any} event - the onchange input event\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandlerRadio = (fieldName: any) => (event: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + fieldName,\n      event.target.value || ''\n    );\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique radio button options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n        let filterResult: any = '';\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n        options = options.filter(option => option[nameOfKey] === filterResult);\n        i = i + 2;\n      }\n    }\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Radio component to the redux store */\nconst ConnectedSelectOneRadio = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectOneRadio);\n\nexport default ConnectedSelectOneRadio;\n","import * as React from 'react';\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport Dropdown from './Dropdown';\nimport Radio from './Radio';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass SelectOne extends React.Component<SelectOneProps> {\n  public render() {\n    const { fieldElement } = this.props;\n    if (shouldComponentBeMinimal(fieldElement)) {\n      return <Dropdown {...this.props} />;\n    }\n    return <Radio {...this.props} />;\n  }\n}\n\nexport default SelectOne;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the text component */\nexport interface TextProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isPresentInErrorSelector: any;\n  isComponentRender: boolean;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface TextState {\n  fieldValue: string;\n  isFocused: boolean;\n}\n\nclass Text extends React.Component<TextProps, TextState> {\n  constructor(props: TextProps) {\n    super(props);\n    this.state = { fieldValue: '', isFocused: false };\n  }\n\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        let calculatedValue: any = '';\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n\n        if (fieldValue && calculatedValue !== fieldValue) {\n          this.props.assignFieldValueActionCreator(\n            fieldParentTreeName + fieldElement.name,\n            calculatedValue\n          );\n        }\n\n        return (\n          <FormGroup>\n            <Label>\n              {modifiedFieldLabel}{' '}\n              {isRequired && (\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n              )}\n            </Label>\n            <Input\n              type=\"text\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              onBlur={this.onBlurHandler}\n              value={\n                this.state.isFocused\n                  ? this.state.fieldValue || ''\n                  : calculatedValue || ''\n              }\n              readOnly={isReadonly}\n            />\n            {isFormSubmitted && isError && (\n              <FontAwesomeIcon\n                icon=\"exclamation-circle\"\n                className=\"errorSign\"\n              />\n            )}\n            {fieldElement.hint && (\n              <Label className=\"hintText\">{hintLabel}</Label>\n            )}\n            {isFormSubmitted && isRequiredViolated && (\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n            )}\n            {isConstraintViolated && (\n              <Label className=\"constraintText\">\n                {modifiedConstraintLabel}\n              </Label>\n            )}\n          </FormGroup>\n        );\n      } else {\n        return (\n          <FormGroup>\n            <Label>\n              {modifiedFieldLabel}{' '}\n              {isRequired && (\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n              )}\n            </Label>\n            <Input\n              type=\"text\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              onBlur={this.onBlurHandler}\n              value={\n                this.state.isFocused\n                  ? this.state.fieldValue || ''\n                  : fieldValue || ''\n              }\n              readOnly={isReadonly}\n            />\n            {isFormSubmitted && isError && (\n              <FontAwesomeIcon\n                icon=\"exclamation-circle\"\n                className=\"errorSign\"\n              />\n            )}\n            {fieldElement.hint && (\n              <Label className=\"hintText\">{hintLabel}</Label>\n            )}\n            {isFormSubmitted && isRequiredViolated && (\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n            )}\n            {isConstraintViolated && (\n              <Label className=\"constraintText\">\n                {modifiedConstraintLabel}\n              </Label>\n            )}\n          </FormGroup>\n        );\n      }\n    } else {\n      if (this.state.isFocused) {\n        this.setState({ ...this.state, isFocused: false });\n      }\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: true,\n    });\n  };\n\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: false,\n    });\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value || ''\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Text component to the redux store */\nconst ConnectedText = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Text);\n\nexport default ConnectedText;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the KbTime component */\nexport interface TimeProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass KbTime extends React.Component<TimeProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <Input\n            type=\"time\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={fieldValue || ''}\n            readOnly={isReadonly}\n          />\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== '' ? event.currentTarget.value : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect KbTime component to the redux store */\nconst ConnectedTime = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(KbTime);\n\nexport default ConnectedTime;\n","import * as React from 'react';\nimport {\n  CALCULATE_FIELD_TYPE,\n  DATE_FIELD_TYPE,\n  DATE_TIME_FIELD_TYPE,\n  DECIMAL_FIELD_TYPE,\n  FILE_FIELD_TYPE,\n  INTEGER_FIELD_TYPE,\n  NOTE_FIELD_TYPE,\n  PHOTO_FIELD_TYPE,\n  SELECT_ALL_FIELD_TYPE,\n  SELECT_ONE_FIELD_TYPE,\n  TEXT_FIELD_TYPE,\n  TIME_FIELD_TYPE,\n} from '../../../constants';\nimport Calculate from '../../../containers/fields/base/Calculate';\nimport KbDate from '../../../containers/fields/base/Date';\nimport DateTime from '../../../containers/fields/base/Date Time';\nimport Decimal from '../../../containers/fields/base/Decimal';\nimport File from '../../../containers/fields/base/File';\nimport Integer from '../../../containers/fields/base/Integer';\nimport Note from '../../../containers/fields/base/Note';\nimport SelectAll from '../../../containers/fields/base/Select All';\nimport SelectOne from '../../../containers/fields/base/Select One';\nimport Text from '../../../containers/fields/base/Text';\nimport KbTime from '../../../containers/fields/base/Time';\n\n/** type of fieldParentTreeName */\nexport type FieldParentTreeName = string;\n\n/** interface for bind property */\ninterface BindProperty {\n  calculate?: string;\n  relevant?: string;\n  readonly?: string;\n  appearance?: string;\n  required?: string;\n  constraint?: string;\n  'jr:constraintMsg'?: { [key: string]: string } | string;\n}\n\n/** interface for kobo field element */\nexport interface FieldElement {\n  name: string;\n  type: string;\n  children?: any[];\n  bind?: BindProperty;\n  label?: { [key: string]: string } | string;\n  default?: any;\n  control?: any;\n  hint?: any;\n  itemset?: string;\n  choice_filter?: string;\n}\n\n/** props interface for BaseTypeEvaluator component */\nexport interface BaseTypeEvaluatorProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\nclass BaseTypeEvaluator extends React.Component<BaseTypeEvaluatorProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n    } = this.props;\n    return this.typeEvaluator(\n      choices,\n      csvList,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage\n    );\n  }\n\n  /** returns jsx components based on field types\n   * @param {any} choices - the choices of form definition\n   * @param {FieldElement} fieldElement - the field element object\n   * @param {FieldParentTreeName} fieldParentTreeName - the field parent hierchical name\n   * @return {React.ReactElement} - jsx base components\n   */\n  private typeEvaluator(\n    choices: any,\n    csvList: any,\n    fieldElement: FieldElement,\n    fieldParentTreeName: FieldParentTreeName,\n    defaultLanguage: string\n  ): React.ReactElement {\n    switch (fieldElement.type) {\n      case TEXT_FIELD_TYPE:\n        return (\n          <Text\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DATE_FIELD_TYPE:\n        return (\n          <KbDate\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case TIME_FIELD_TYPE:\n        return (\n          <KbTime\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DATE_TIME_FIELD_TYPE:\n        return (\n          <DateTime\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case INTEGER_FIELD_TYPE:\n        return (\n          <Integer\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DECIMAL_FIELD_TYPE:\n        return (\n          <Decimal\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case NOTE_FIELD_TYPE:\n        return (\n          <Note\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case CALCULATE_FIELD_TYPE:\n        return (\n          <Calculate\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case SELECT_ONE_FIELD_TYPE:\n        return (\n          <SelectOne\n            choices={choices}\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n      case SELECT_ALL_FIELD_TYPE:\n        return (\n          <SelectAll\n            choices={choices}\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n      case PHOTO_FIELD_TYPE:\n        return (\n          <File\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case FILE_FIELD_TYPE:\n        return (\n          <File\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      default:\n        return (\n          <div style={{ display: 'none' }}>\n            Other {fieldElement.type} {fieldElement.name}\n          </div>\n        );\n    }\n  }\n}\n\nexport default BaseTypeEvaluator;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Col, Row } from 'reactstrap';\nimport { Store } from 'redux';\nimport { GROUP_FIELD_TYPE, REPEAT_FIELD_TYPE } from '../../../constants';\nimport Group from '../../../containers/fields/group/Group';\nimport Repeat from '../../../containers/fields/group/Repeat';\nimport { getEvaluatedExpression } from '../../../store/ducks/formState';\nimport { shouldComponentBeRelevant } from '../../../utils/helpers';\nimport BaseTypeEvaluator, { FieldElement, FieldParentTreeName } from '../Base';\n\n/** props Interface for the GroupTypeEvaluator component */\nexport interface GroupTypeEvaluatorProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElements: FieldElement[];\n  fieldParentTreeName: string;\n  isAppearanceApplicable: boolean;\n  getEvaluatedExpressionSelector: any;\n}\n\nclass GroupTypeEvaluator extends React.Component<GroupTypeEvaluatorProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldElements,\n      fieldParentTreeName,\n      defaultLanguage,\n      isAppearanceApplicable,\n    } = this.props;\n    return (\n      <Row className={'groupTypeEvaluatorRow'}>\n        {fieldElements.map(fieldElement => {\n          const value: number = this.getAppearanceValue(\n            fieldElement,\n            fieldParentTreeName,\n            isAppearanceApplicable\n          );\n          return (\n            <Col\n              key={'group_' + fieldElement.name}\n              className={'groupTypeEvaluator'}\n              md={value}\n              hidden={value === 0 ? true : false}\n            >\n              {this.typeEvaluator(\n                choices,\n                csvList,\n                fieldElement,\n                fieldParentTreeName,\n                defaultLanguage\n              )}\n            </Col>\n          );\n        })}\n      </Row>\n    );\n  }\n\n  /** returns jsx components based on field types\n   * @param {any} choices - the form choices\n   * @param {FieldElement} fieldElement - the field element object\n   * @param {FieldParentTreeName} - the field parent hierarchical name\n   * @return {React.ReactElement} - jsx group components/ base evaluator component\n   */\n  private typeEvaluator(\n    choices: any,\n    csvList: any,\n    fieldElement: FieldElement,\n    fieldParentTreeName: FieldParentTreeName,\n    defaultLanguage: string\n  ): React.ReactElement {\n    switch (fieldElement.type) {\n      case GROUP_FIELD_TYPE:\n        return (\n          <div>\n            <Group\n              choices={choices}\n              fieldElement={fieldElement}\n              fieldParentTreeName={fieldParentTreeName}\n              defaultLanguage={defaultLanguage}\n              csvList={csvList}\n            />\n          </div>\n        );\n      case REPEAT_FIELD_TYPE:\n        return (\n          <div>\n            <Repeat\n              choices={choices}\n              fieldElement={fieldElement}\n              fieldParentTreeName={fieldParentTreeName}\n              defaultLanguage={defaultLanguage}\n              csvList={csvList}\n            />\n          </div>\n        );\n      default:\n        return (\n          <BaseTypeEvaluator\n            choices={choices}\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n    }\n  }\n\n  private getAppearanceValue = (\n    fieldElement: FieldElement,\n    fieldParentTreeName: string,\n    isAppearanceApplicable: boolean\n  ): number => {\n    const isRender: boolean = shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      this.props.getEvaluatedExpressionSelector\n    );\n\n    if (!isRender) {\n      return 0;\n    } else if (\n      isRender &&\n      isAppearanceApplicable &&\n      fieldElement.control &&\n      fieldElement.control.appearance\n    ) {\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\n        const processedStringArray = fieldElement.control.appearance.match(\n          /^w(\\d+)\\b/i\n        );\n        const processedString = processedStringArray[0].replace('w', '');\n        const result = isNaN(processedString)\n          ? 12\n          : parseInt(processedString, 10);\n        return result;\n      }\n    }\n    return 12;\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  getEvaluatedExpressionSelector: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n\n  const result = {\n    getEvaluatedExpressionSelector,\n  };\n  return result;\n};\n\n/** connect GroupTypeEvaluator component to the redux store */\nconst ConnectedGroupTypeEvaluator = connect(mapStateToProps)(\n  GroupTypeEvaluator\n);\n\nexport default ConnectedGroupTypeEvaluator;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faExclamationCircle,\n  faMinusCircle,\n  faPlusCircle,\n} from '@fortawesome/free-solid-svg-icons';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Container, Row } from 'reactstrap';\nimport { Store } from 'redux';\nimport KbAlert from '../components/Alert';\nimport DropDown from '../components/DropDown';\nimport GroupTypeEvaluator from '../components/typeEvalutors/Group';\nimport {\n  getAllFileObjects,\n  getUserInputFromStore,\n  isErrorsArrayEmpty,\n  resetStoreAction,\n  setFormSubmitStatus,\n  setUserInputObj,\n} from '../store/ducks/formState';\n\nlibrary.add(faPlusCircle, faMinusCircle, faExclamationCircle);\n\nexport interface AppProps {\n  choices: any;\n  csvList: any;\n  isNoErrors: any;\n  userInputObj: any;\n  userInputJson: any;\n  defaultLanguage: string;\n  formTitle: string;\n  fieldElements: any;\n  setUserInputAction: typeof setUserInputObj;\n  languageOptions: any;\n  setFormSubmitStatusAction: typeof setFormSubmitStatus;\n  resetStoreActionCreator: typeof resetStoreAction;\n  mediaList: any;\n  handleSubmit(userInput: any, mediaList: any): any;\n}\n\nexport interface AppState {\n  defaultLanguage: string;\n  isSubmissionError: boolean;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n  }\n\n  public componentDidMount() {\n    const { userInputJson, userInputObj } = this.props;\n    this.props.resetStoreActionCreator();\n    if (userInputJson && userInputJson !== userInputObj) {\n      this.props.setUserInputAction(userInputJson);\n    }\n    this.setState({\n      defaultLanguage: this.props.defaultLanguage,\n      isSubmissionError: false,\n    });\n  }\n\n  public handleSelect = (languageName: string) => {\n    this.setState({ defaultLanguage: languageName });\n  };\n\n  public render() {\n    const {\n      csvList,\n      fieldElements,\n      formTitle,\n      languageOptions,\n      choices,\n    } = this.props;\n    const { defaultLanguage } = this.state || this.props;\n\n    const props = {\n      choices,\n      csvList,\n      defaultLanguage,\n      fieldElements,\n      fieldParentTreeName: '',\n      isAppearanceApplicable: false,\n      languageOptions,\n    };\n\n    return (\n      <Container className=\"form-container\">\n        <Row className={'form-title formTitle'}>\n          <Col>\n            <h3 className=\"headerText\">{formTitle}</h3>\n          </Col>\n          <DropDown\n            languages={...languageOptions}\n            onChangeSelect={this.handleSelect}\n            defaultLanguage={defaultLanguage}\n          />\n        </Row>\n        {this.state && this.state.isSubmissionError && (\n          <KbAlert\n            color={'danger'}\n            isOpen={this.state.isSubmissionError}\n            handleToggle={this.toggleStateValue}\n            headerText={'Oh snap! You got an error!'}\n            bodyText={\n              'Please make sure the required fields are not missing and there are no errors'\n            }\n          />\n        )}\n        <Row className=\"formFieldBody\">\n          <Col>\n            <GroupTypeEvaluator {...props} />\n            <Row className=\"welcome-box\">\n              <Col>\n                <Button className=\"btn btn-success\" onClick={this.handleClick}>\n                  Submit\n                </Button>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  // tslint:disable-next-line: variable-name\n  private handleClick = (_event: React.MouseEvent<HTMLButtonElement>) => {\n    const { handleSubmit, isNoErrors, userInputObj, mediaList } = this.props;\n    if (isNoErrors) {\n      handleSubmit(userInputObj, mediaList);\n    } else {\n      handleSubmit('Field Violated', mediaList);\n      this.setState({ isSubmissionError: true });\n      this.props.setFormSubmitStatusAction(true);\n      window.scrollTo(0, 0);\n    }\n  };\n\n  private toggleStateValue = () => {\n    this.setState({ isSubmissionError: false });\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  isNoErrors: any;\n  userInputObj: any;\n  mediaList: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    isNoErrors: isErrorsArrayEmpty(state),\n    mediaList: getAllFileObjects(state),\n    userInputObj: getUserInputFromStore(state),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  resetStoreActionCreator: resetStoreAction,\n  setFormSubmitStatusAction: setFormSubmitStatus,\n  setUserInputAction: setUserInputObj,\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedApp = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\nexport default ConnectedApp;\n","import { createStore, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer, { FormState } from './ducks/formState';\n\n/** The initial store */\nconst store: Store & FormState = createStore(reducer, composeWithDevTools());\n\nexport default store;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nexport interface OdkFormRendererProps {\n  csvList: any;\n  defaultLanguage: string;\n  formDefinitionJson: any;\n  languageOptions: any;\n  userInputJson: any;\n  handleSubmit: (userInput: any, mediaList: any) => any;\n}\n\nclass OdkFormRenderer extends React.Component<OdkFormRendererProps> {\n  public render() {\n    const {\n      csvList,\n      defaultLanguage,\n      formDefinitionJson,\n      userInputJson,\n      languageOptions,\n      handleSubmit,\n    } = this.props;\n    const props = {\n      choices: formDefinitionJson.choices || {},\n      csvList,\n      defaultLanguage,\n      fieldElements: formDefinitionJson.children,\n      formTitle: formDefinitionJson.title,\n      handleSubmit,\n      languageOptions,\n      userInputJson,\n    };\n    return (\n      <Provider store={store}>\n        <App {...props} />\n      </Provider>\n    );\n  }\n}\n\nexport default OdkFormRenderer;\n"],"names":["actualExpression","KbAlert","render","this","props","bodyText","React","Alert","color","isOpen","toggle","handleToggle","className","headerText","DropDown","event","onChangeSelect","value","selectedValue","options","languages","map","elem","push","label","_this2","defaultLanguage","Select","multi","placeholder","onChange","onChangeHandler","REQUIRED_FIELD_MSG","currentHierarchicalName","formItemProperty","userInput","tokenizeCharacter","type","input","current","tokenizers","test","undefined","consumedChars","char","TypeError","matchQuote","pattern","tokenizePattern","kbSelected","funcName","params","_paramsTokens","tmp","Array","isArray","forEach","element","kbToday","_params","d","Date","setHours","kbRound","toFixed","parseFloat","kbRegex","RegExp","kbCountSelected","length","kbInt","parseInt","kbCoalesce","kbPosition","tmpName","split","kbSum","paramsTokens","sumValue","sumValuesOverJsn","sum","jsnObj","variableName","i","key","kbConcat","concatStr","kbSubstr","substring","outerScopedVariables","variableValue","tmpUserInput","nodeNames","parseMostClosestScopedVariable","tmpHierchicalName","parent","index","parseDot","path","getIn","parseLiterals","_tmpOutput","tokens","toLowerCase","parseFunction","_output","possibleFunctions","arrayOfParams","arrayOfOriginalTokens","tmpQueue","tmpTokens","pop","tmpVal","parser","parsedFn","parsedVal","functionFn","parseAnd","output","newOutput","parseParen","terminatingTokens","indexOf","parseDivide","parsed","ct","parseMinus","parserFn","consumedTokens","preOutput","preParsed","parseMultiply","preParseFn","Object","prototype","toString","call","isNaN","getTime","NaN","Math","ceil","parsers","j","flagLessThanOrEqual","flagGreaterThanOrEqual","leftOutput","pos","console","log","evaluater","expression","tmpFormItemProperty","tmpCurrentHierarchicalName","tokenized","tokenizerFn","token","tokenizer","getTextFromProperty","property","languageIdentifier","getFieldLabelText","fieldElement","getHintLabelText","hint","customizeLabelsWithPreviousInputs","evaluator","labelText","fieldTreeName","placesOfCustomizationsRequiredList","match","tmpPlace","customizedName","replace","matchList","getConstraintLabelText","bind","isInputRequired","isRequired","required","shouldComponentBeRelevant","fieldParentTreeName","evaluateExpression","relevant","name","shouldComponentBeReadOnly","readonly","shouldInputViolatesConstraint","constraint","getModifiedUserInputObject","userInputObj","fieldValue","treeNodes","modifiedObj","getValueFromUserInputObj","shouldComponentBeMinimal","isMinimal","control","appearance","includes","FIELD_VALUE_ASSIGNED","OPTION_LIST_ASSIGNED","MEDIA_LIST_ADDED","REMOVE_FROM_MEDIA_LIST","REMOVE_FROM_OPTION_LIST_REPEAT","RESET_STORE","ADD_ERROR_INPUT_ID","REMOVE_ERROR_INPUT_ID","EMPTY_GROUP_FIELDS","REMOVE_GROUP_FIELDS_FROM_ERRORS","SET_USER_INPUT_OBJ","SET_FORM_SUBMIT_STATUS","assignFieldValueAction","assignOptionListAction","optionList","RemoveFromOptionList","repeatIndex","addErrorInputId","removeErrorInputId","emptyGroupFields","removeGroupFieldsFromErrors","initialState","SeamlessImmutable","errors","isFormSubmitted","mediaList","reducer","state","action","modifiedUserInputObj","asMutable","deep","stateM","modifiedUserInputObjList","newState","filteredRepeatArray","hasOwnProperty","entries","keyValueOptionListobj","repeatIndexString","String","keyRepeat","getModifiedOptionListForRepeat","modifiedOptionListRepeat","newStateForRepeat","modifiedMediaList","mediaObject","newMediaState","updateIn","arr","concat","filter","elm","mUserInputObj","groupTreeName","keys","objKey","startsWith","emptyGroupedValues","mState","getFieldValue","getOptionList","getEvaluatedExpression","getEvaluatedExpressionForSelect","isPresentInError","isGroupFieldsEmpty","isEmpty","checkGroupedValuesForEmpty","isErrorsIncludeGroupFields","isPresent","fTName","isErrorsArrayEmpty","getUserInputFromStore","getFormSubmitStatus","getFileObject","fileName","getAllFileObjects","Group","choices","csvList","isComponentRender","fieldLabel","isAppearanceApplicable","FormGroup","Label","children","GroupTypeEvaluator","fieldElements","isErrorsIncludeGroupFieldsSelector","removeGroupFieldsFromErrorsActionCreator","isGroupFieldsEmptySelector","emptyGroupFieldsActionCreator","ConnectedGroup","connect","parentProps","getEvaluatedExpressionSelector","SingleRepeat","_event","_this","assignmentHandler","removeHandler","removeOptionHandler","newFieldValue","_elem","unControlFlag","onClick","handleChange","FontAwesomeIcon","icon","Component","ControlledRepeat","assignFieldValueActionCreator","removeOptionListFromActionCreator","_elm","addAnotherRepeat","ConnectedControlledRepeat","UncontrolledRepeat","noOfJrCount","res","removeFromError","_","size","assignOptionListActionCreator","iterate","slice","ConnectedUncontrolledRepeat","Repeat","Calculate","isPresentInErrorSelector","isRequiredViolated","isConstraintViolated","isReadonly","removeErrorInputIdActionCreator","addErrorInputIdActionCreator","calculatedValue","calculate","Input","readOnly","ConnectedCalculate","KbDate","currentTarget","getFormSubmitStatusSelector","modifiedFieldLabel","modifiedConstraintLabel","hintLabel","defaultValue","toISOString","isError","ConnectedDate","DateTime","modifiedDate","timeZoneOffset","getTimezoneOffset","getHours","DatePicker","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","placeholderText","ConnectedDateTime","Decimal","setState","isFocused","modifiedValue","step","onBlur","onBlurHandler","ConnectedDecimal","FilePreview","fieldName","Button","ConnectedFilePreview","fileObject","File","target","files","addMediaListActionCreator","accept","ConnectedFile","Integer","ConnectedInteger","Note","fieldHint","FormText","ConnectedNote","SelectAllDropDown","optionObject","tempObjArray","elemObj","isEqual","values","selectedValues","stringWithSearchKeyWord","resultArray","criteriaParams","splice","extractAndFilterOptions","csvName","criteriaType","filterCriterias","trim","distinctOptions","finalRes","modifiedName","nameOfKey","interConnectedValue","tempOptions","filterResult","getEvaluatedExpressionSelectorForSelect","option","from","Set","labelColumnName","valueColumnName","tmpOpt","uniqBy","resultOptions","updatedFieldElement","processedStringArray","getProcessedString","setOptionList","itemset","choice_filter","childrenLabel","optionsArray","tmpValueArray","isNotIncluded","optionsValueArray","row","seperatedValues","isMulti","ConnectedSelectAllDropDown","SelectAllRadio","checked","newValue","childrenArray","flagInline","tmpStyle","Form","check","inline","onChangeHandlerCheckBox","ConnectedSelectAllRadio","SelectAll","Dropdown","Radio","SelectOneDropDown","ConnectedSelectOneDropDown","SelectOneRadio","choiceOptions","onChangeHandlerRadio","ConnectedSelectOneRadio","SelectOne","Text","ConnectedText","KbTime","ConnectedTime","BaseTypeEvaluator","typeEvaluator","style","display","isRender","processedString","Row","getAppearanceValue","Col","md","hidden","ConnectedGroupTypeEvaluator","library","add","faPlusCircle","faMinusCircle","faExclamationCircle","App","languageName","handleSubmit","isNoErrors","isSubmissionError","setFormSubmitStatusAction","window","scrollTo","componentDidMount","userInputJson","resetStoreActionCreator","setUserInputAction","languageOptions","Container","formTitle","handleSelect","toggleStateValue","handleClick","ConnectedApp","store","createStore","composeWithDevTools","formDefinitionJson","Provider","title"],"mappings":"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"}