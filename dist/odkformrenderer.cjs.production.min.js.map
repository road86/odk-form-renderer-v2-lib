{"version":3,"file":"odkformrenderer.cjs.production.min.js","sources":["../src/utils/compiler.ts","../src/components/Alert/index.tsx","../src/components/DropDown/index.tsx","../src/constants.tsx","../src/utils/helpers.ts","../src/store/ducks/formState.ts","../src/containers/fields/group/Group/index.tsx","../src/containers/fields/group/Repeat/Single Repeat/index.tsx","../src/containers/fields/group/Repeat/Controlled Repeat/index.tsx","../src/containers/fields/group/Repeat/Uncontrolled Repeat/index.tsx","../src/containers/fields/group/Repeat/index.tsx","../src/containers/fields/base/Calculate/index.tsx","../src/containers/fields/base/Date/index.tsx","../src/containers/fields/base/Date Time/index.tsx","../src/containers/fields/base/Decimal/index.tsx","../src/containers/fields/base/File/FilePreview/FilePreview.tsx","../src/containers/fields/base/File/index.tsx","../src/containers/fields/base/Integer/index.tsx","../src/containers/fields/base/Note/index.tsx","../src/containers/fields/base/Select All/Dropdown/index.tsx","../src/containers/fields/base/Select All/Radio/index.tsx","../src/containers/fields/base/Select All/index.tsx","../src/containers/fields/base/Select One/Dropdown/index.tsx","../src/containers/fields/base/Select One/Radio/index.tsx","../src/containers/fields/base/Select One/index.tsx","../src/containers/fields/base/Text/index.tsx","../src/containers/fields/base/Time/index.tsx","../src/components/typeEvalutors/Base/index.tsx","../src/components/typeEvalutors/Group/index.tsx","../src/App/index.tsx","../src/store/index.tsx","../src/index.tsx"],"sourcesContent":["let actualExpression: string;\r\nlet currentHierarchicalName: string = '';\r\nlet formItemProperty: any = {};\r\nlet userInput: any = {};\r\n\r\n/**\r\n * tokenizeCharacter is a type of util method\r\n * @param {any} type - the type that will be returned if matches\r\n * @param {any} value - the actual value of the tokenize character\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeCharacter(type: any, value: any, input: any, current: any) {\r\n  return value === input[current] ? [1, { type, value }] : [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeParenOpen returns tokenizeReturnObject for character (\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeParenOpen(input: any, current: any) {\r\n  return tokenizeCharacter('paren', '(', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeBrakeOpen returns tokenizeReturnObject for character [\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeBrakeOpen(input: any, current: any) {\r\n  return tokenizeCharacter('brac', '[', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeBrakeClose returns tokenizeReturnObject for character ]\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeBrakeClose(input: any, current: any) {\r\n  return tokenizeCharacter('brac', ']', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeParenClose returns tokenizeReturnObject for character )\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeParenClose(input: any, current: any) {\r\n  return tokenizeCharacter('paren', ')', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeEqual returns tokenizeReturnObject for character =\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeEqual(input: any, current: any) {\r\n  return tokenizeCharacter('equal', '=', input, current);\r\n}\r\n\r\n/**\r\n * tokenizePlus returns tokenizeReturnObject for character +\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizePlus(input: any, current: any) {\r\n  return tokenizeCharacter('plus', '+', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeMinus returns tokenizeReturnObject for character -\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeMinus(input: any, current: any) {\r\n  return tokenizeCharacter('minus', '-', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeMultiply returns tokenizeReturnObject for character *\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeMultiply(input: any, current: any) {\r\n  return tokenizeCharacter('multiply', '*', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeDivide returns tokenizeReturnObject for character /\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeDivide(input: any, current: any) {\r\n  return tokenizeCharacter('divide', '/', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeLessThan returns tokenizeReturnObject for character <\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeLessThan(input: any, current: any) {\r\n  return tokenizeCharacter('lessThan', '<', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeGreaterThan returns tokenizeReturnObject for character >\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeGreaterThan(input: any, current: any) {\r\n  return tokenizeCharacter('greaterThan', '>', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeNot returns tokenizeReturnObject for character !\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeNot(input: any, current: any) {\r\n  if(input[current] == '!') {\r\n    return tokenizeCharacter('not', '!', input, current);\r\n  } else if(input[current] == 'n') {\r\n    if ( (input[current + 1] && input[current + 1] == 'o') && (input[current + 2] && input[current + 2] == 't')) {\r\n      const type = 'not';\r\n      const value = '!';\r\n      return [3, { type, value }]\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeComma returns tokenizeReturnObject for character ,\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeComma(input: any, current: any) {\r\n  return tokenizeCharacter('comma', ',', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeDot returns tokenizeReturnObject for character .\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeDot(input: any, current: any) {\r\n  return tokenizeCharacter('dot', '.', input, current);\r\n}\r\n\r\n/**\r\n * tokenizePattern is a type of util method\r\n * @param {any} type - the type that will be returned if matches\r\n * @param {any} pattern - the pattern that will be matched for tokenization\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizePattern(type: any, pattern: any, input: any, current: any) {\r\n  let char = input[current];\r\n  let consumedChars = 0;\r\n  if (pattern.test(char)) {\r\n    let value = '';\r\n    while (char && pattern.test(char)) {\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    return [consumedChars, { type, value }];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeString returns tokenizeReturnObject for strings. example: 'abc12' , \"test1\", \"afgkj dafgk\"\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeString(input: any, current: any) {\r\n  if (input[current] === '\"' || input[current] === \"'\") {\r\n    const matchQuote = input[current];\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    consumedChars += 1;\r\n    let char = input[current + consumedChars];\r\n    while (char !== matchQuote) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    return [consumedChars + 1, { type: 'string', value }];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeFunction returns tokenizeReturnObject for functions. Example: round( , substring(\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject; value contains function name if matched\r\n */\r\nfunction tokenizeFunction(input: any, current: any) {\r\n  if (/[a-z_]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (char && /[:a-z0-9_-]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    while (char && /\\s/.test(char)) {\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if(value == 'not') {\r\n      return [0, null];\r\n    }\r\n    if (char && char === '(') {\r\n      return [consumedChars, { type: 'function', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeNumber returns tokenizeReturnObject for discrete numbers. Example: 123 , 02113\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeNumber(input: any, current: any) {\r\n  if (/[0-9]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (/[0-9]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if (char !== '.') {\r\n      return [consumedChars, { type: 'number', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeDecimal returns tokenizeReturnObject for decimal numbers. Example: 12.3 , 0.2113\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeDecimal(input: any, current: any) {\r\n  if (/[0-9.]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (/[0-9]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if (char === '.') {\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n      if (/[0-9]/i.test(char)) {\r\n        while (/[0-9]/i.test(char)) {\r\n          if (char === undefined) {\r\n            throw new TypeError('unterminated string ');\r\n          }\r\n          value += char;\r\n          consumedChars += 1;\r\n          char = input[current + consumedChars];\r\n        }\r\n        return [consumedChars, { type: 'decimal', value }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeVariable returns tokenizeReturnObject for variables. Example syntax: ${Iamvariable} , #{urvariable}\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeVariable(input: any, current: any) {\r\n  if (input[current] === '#' || input[current] === '$') {\r\n    if (input[current + 1] && input[current + 1] === '{') {\r\n      let value = '';\r\n      let consumedChars = 1;\r\n      consumedChars += 1;\r\n      let char = input[current + consumedChars];\r\n      while (char !== '}') {\r\n        if (char === undefined) {\r\n          throw new TypeError('unterminated string ');\r\n        }\r\n        value += char;\r\n        consumedChars += 1;\r\n        char = input[current + consumedChars];\r\n      }\r\n      return [consumedChars + 1, { type: 'variable', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeOr returns tokenizeReturnObject for syntax or\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeOr(input: any, current: any) {\r\n  if (input[current] === 'o') {\r\n    if (input[current + 1] && input[current + 1] === 'r') {\r\n      if (\r\n        input[current + 2] === undefined ||\r\n        /[0-9\\s]/.test(input[current + 2])\r\n      ) {\r\n        return [2, { type: 'or', value: 'or' }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeIf returns tokenizeReturnObject for word if\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeIf(input: any, current: any) {\r\n  if (input[current] === 'i') {\r\n    if (input[current + 1] && input[current + 1] === 'f') {\r\n      if (\r\n        input[current + 2] === undefined ||\r\n        !/[a-z]i/.test(input[current + 2])\r\n      ) {\r\n        return [2, { type: 'if', value: 'if' }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeAnd returns tokenizeReturnObject for word and\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeAnd(input: any, current: any) {\r\n  if (input[current] === 'a') {\r\n    if (input[current + 1] && input[current + 1] === 'n') {\r\n      if (input[current + 2] && input[current + 2] === 'd') {\r\n        if (\r\n          input[current + 3] === undefined ||\r\n          /[0-9\\s]/.test(input[current + 3])\r\n        ) {\r\n          return [3, { type: 'and', value: 'and' }];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeDiv returns tokenizeReturnObject of type divide for word div\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeDiv(input: any, current: any) {\r\n  if (input[current] === 'd') {\r\n    if (input[current + 1] && input[current + 1] === 'i') {\r\n      if (input[current + 2] && input[current + 2] === 'v') {\r\n        if (\r\n          input[current + 3] === undefined ||\r\n          /[0-9\\s]/.test(input[current + 3])\r\n        ) {\r\n          return [3, { type: 'divide', value: '/' }];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeName returns tokenizeReturnObject of type name for regex [a-z_]+\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeName(input: any, current: any) {\r\n  return tokenizePattern('name', /[a-z_]/i, input, current);\r\n}\r\n\r\n/**\r\n * skipWhiteSpace removes space and iterates the position of compiler\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject that consumes characters without returning type\r\n */\r\nfunction skipWhiteSpace(input: any, current: any) {\r\n  return /\\s/.test(input[current]) ? [1, null] : [0, null];\r\n}\r\n\r\n/**\r\n * Precedence of the tokenizer methods\r\n * If new tokenizer method is created, please add inside tokenizers with correct precedence\r\n */\r\nconst tokenizers = [\r\n  skipWhiteSpace,\r\n  tokenizeParenOpen,\r\n  tokenizeParenClose,\r\n  tokenizeIf,\r\n  tokenizeOr,\r\n  tokenizeAnd,\r\n  tokenizeVariable,\r\n  tokenizeString,\r\n  tokenizeFunction,\r\n  tokenizeEqual,\r\n  tokenizePlus,\r\n  tokenizeMinus,\r\n  tokenizeMultiply,\r\n  tokenizeDivide,\r\n  tokenizeDiv,\r\n  tokenizeLessThan,\r\n  tokenizeGreaterThan,\r\n  tokenizeNot,\r\n  tokenizeBrakeOpen,\r\n  tokenizeBrakeClose,\r\n  tokenizeDot,\r\n  tokenizeComma,\r\n  tokenizeNumber,\r\n  tokenizeDecimal,\r\n  tokenizeName,\r\n];\r\n\r\n/**\r\n * tokenizer is primary method that takes the expression and convert them to appropiate tokens.\r\n * Throws syntax error if expression is not appropiate or could not be tokenized properly\r\n * @param {string} input - should be of string for valid cases\r\n * @returns array of tokens\r\n */\r\nfunction tokenizer(input: any) {\r\n  let current: number = 0;\r\n  const tokens: any = [];\r\n  while (current < input.length) {\r\n    let tokenized = false;\r\n    tokenizers.forEach(tokenizerFn => {\r\n      if (tokenized) {\r\n        return;\r\n      }\r\n      const [consumedChars, token]: any = tokenizerFn(input, current);\r\n      if (consumedChars !== 0) {\r\n        tokenized = true;\r\n        current += consumedChars;\r\n      }\r\n      if (token) {\r\n        tokens.push(token);\r\n      }\r\n    });\r\n    if (!tokenized) {\r\n      throw new TypeError(\r\n        `I dont know what this character is: ${input[current]}`\r\n      );\r\n    }\r\n  }\r\n  return tokens;\r\n}\r\n\r\n/**\r\n * kbSelected parses the function selected and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSelected(funcName: any, params: any, _paramsTokens: any) {\r\n  if (funcName === 'selected') {\r\n    let tmp = false;\r\n    if (Array.isArray(params[0])) {\r\n      params[0].forEach((element: any) => {\r\n        // tslint:disable-next-line: triple-equals\r\n        tmp = tmp || element == params[1];\r\n      });\r\n      return [true, tmp];\r\n    }\r\n    // tslint:disable-next-line: triple-equals\r\n    return [true, params[0] == params[1]];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbToday parses the function today and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbToday(funcName: any, _params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'today') {\r\n    const d = new Date();\r\n    d.setHours(0, 0, 0, 0);\r\n    return [true, d];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbRound parses the function round and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbRound(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'round') {\r\n    if (params[0] && params[1]) {\r\n      if (typeof params[0] === 'number' && typeof params[1] === 'number') {\r\n        return [true, params[0].toFixed(params[1])];\r\n      }\r\n      if (typeof params[0] === 'string' && typeof params[1] === 'number') {\r\n        return [true, parseFloat(params[0]).toFixed(params[1])];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbRegex parses the function regex and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbRegex(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'regex') {\r\n    const regex = RegExp(params[1]);\r\n    return [true, regex.test(params[0])];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbCountSelected parses the function count-selected and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbCountSelected(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'count-selected') {\r\n    if (params[0] && Array.isArray(params[0])) {\r\n      return [true, params[0].length];\r\n    }\r\n    if (params[0] && typeof params[0] !== 'object') {\r\n      return [true, 1];\r\n    }\r\n    return [true, 0];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbInt parses the function int and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbInt(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'int') {\r\n    if (typeof params[0] === 'string') {\r\n      return [true, parseInt(params[0], 10)];\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbCoalesce parses the function coalesce and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbCoalesce(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'coalesce') {\r\n    if (!params[0] && params[0] !== 0) {\r\n      return [true, params[1]];\r\n    }\r\n    return [true, params[0]];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbPosition parses the function position and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbPosition(funcName: any, _params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'position') {\r\n    if (currentHierarchicalName) {\r\n      const tmpName = currentHierarchicalName.split('/');\r\n      if (tmpName.length > 2) {\r\n        return [true, parseInt(tmpName[tmpName.length - 2], 10) + 1];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * sumValuesOverJsn is a utility method for kbSum\r\n * @param sum - initial sum value\r\n * @param jsnObj - variable name and value in json object\r\n * @param variableName - variable name\r\n * @returns the calculated sum\r\n */\r\nfunction sumValuesOverJsn(sum: any, jsnObj: any, variableName: any) {\r\n  if (Array.isArray(jsnObj)) {\r\n    let i;\r\n    for (i = 0; i < jsnObj.length; i += 1) {\r\n      sum = sumValuesOverJsn(sum, jsnObj[i], variableName);\r\n    }\r\n  } else if (typeof jsnObj === 'object') {\r\n    for (const key in jsnObj) {\r\n      if (typeof jsnObj[key] === 'object') {\r\n        sum = sumValuesOverJsn(sum, jsnObj[key], variableName);\r\n      } else if (key === variableName) {\r\n        if (typeof jsnObj[key] === 'string') {\r\n          sum += parseFloat(jsnObj[key]);\r\n        }\r\n        if (typeof jsnObj[key] === 'number') {\r\n          sum += jsnObj[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\n/**\r\n * kbSum parses the function sum and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSum(funcName: any, _params: any, paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'sum') {\r\n    let sumValue = null;\r\n    if (\r\n      paramsTokens &&\r\n      paramsTokens.length > 0 &&\r\n      paramsTokens[0] &&\r\n      paramsTokens[0].length > 0 &&\r\n      paramsTokens[0][0].type === 'variable'\r\n    ) {\r\n      sumValue = sumValuesOverJsn(0, userInput, paramsTokens[0][0].value);\r\n    }\r\n    return [true, sumValue];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbConcat parses the function concat and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbConcat(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'concat') {\r\n    if (params && params.length > 0) {\r\n      let concatStr = '';\r\n      // tslint:disable-next-line: prefer-for-of\r\n      for (let i = 0; i < params.length; i += 1) {\r\n        if (params[i] == null) {\r\n          return [false, null];\r\n        }\r\n        concatStr += params[i];\r\n      }\r\n      return [true, concatStr];\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbSubstr parses the function substr and returns functionParseReturnObject\r\n * @param {any} funcName - the function name of the token\r\n * @param {any} params - calculated value of the params tokens\r\n * @param {any} _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSubstr(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'substr') {\r\n    if (params && params.length > 0) {\r\n      if (params[0] && params[1] !== null) {\r\n        if (params[2] !== null && params[2] < params[0].length) {\r\n          const subStr = params[0].substring(params[1], params[2]);\r\n          return [true, subStr];\r\n        }\r\n        return [true, params[0].substring(params[1])];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * outerScopedVariables is a utility method that returns same variable values based on outerscope\r\n * @param {any} variableName - variable name\r\n * @param {any} variableValue - variable value upto now\r\n * @param {any} tmpUserInput - variable key-value storage\r\n * @returns parsed scoped variable value\r\n */\r\nfunction outerScopedVariables(\r\n  variableName: any,\r\n  variableValue: any,\r\n  tmpUserInput: any\r\n): any {\r\n  // tslint:disable-next-line: forin\r\n  for (const key in tmpUserInput) {\r\n    const nodeNames = key.split('/');\r\n    const variableNameFromKey = nodeNames[nodeNames.length - 1];\r\n    if (variableNameFromKey === variableName) {\r\n      return tmpUserInput[key];\r\n    }\r\n    if (typeof tmpUserInput[key] === 'object') {\r\n      if (variableValue == null) {\r\n        variableValue = outerScopedVariables(\r\n          variableName,\r\n          variableValue,\r\n          tmpUserInput[key]\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return variableValue;\r\n}\r\n\r\n/**\r\n * parseMostClosestScopedVariable returns the closest scoped parsed variable value\r\n * @param {any} variableName - the variable name\r\n * @returns the parsed variable value\r\n */\r\nfunction parseMostClosestScopedVariable(variableName: any) {\r\n  const tmpHierchicalName = currentHierarchicalName.split('/');\r\n  let i;\r\n  const tmpUserInput = userInput;\r\n  let variableValue = null;\r\n  variableValue = outerScopedVariables(\r\n    variableName,\r\n    variableValue,\r\n    tmpUserInput\r\n  );\r\n  let parent = '';\r\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\r\n    // tslint:disable-next-line: triple-equals\r\n    if (tmpHierchicalName[i] == 'repeat') {\r\n      i += 1;\r\n      const index = parseInt(tmpHierchicalName[i + 1], 10);\r\n      variableValue = outerScopedVariables(\r\n        variableName,\r\n        variableValue,\r\n        tmpUserInput[parent + tmpHierchicalName[i]][index]\r\n      );\r\n      i += 2;\r\n    } else {\r\n      // path.push(parent + tmpHierchicalName[i + 1]);\r\n      parent = parent + tmpHierchicalName[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  return variableValue;\r\n}\r\n\r\n/**\r\n * parseDot parses the dot\r\n * @returns parsed value\r\n */\r\nfunction parseDot() {\r\n  const tmpHierchicalName = currentHierarchicalName.split('/');\r\n  let i;\r\n  let tmpUserInput = userInput;\r\n  let parent = '';\r\n  const path = [];\r\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\r\n    // tslint:disable-next-line: triple-equals\r\n    if (tmpHierchicalName[i] == 'repeat') {\r\n      i += 1;\r\n      path.push(parent + tmpHierchicalName[i]);\r\n      path.push(parseInt(tmpHierchicalName[i + 1], 10));\r\n      parent = parent + tmpHierchicalName[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      // path.push(parent + tmpHierchicalName[i + 1]);\r\n      parent = parent + tmpHierchicalName[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  path.push(parent + tmpHierchicalName[tmpHierchicalName.length - 1]);\r\n  tmpUserInput = userInput.getIn(path);\r\n  return tmpUserInput;\r\n}\r\n\r\n/**\r\n * parseLiterals parse a set of tokens, starting from number, string, decimal, variable, name, dot\r\n * @param {any} _tmpOutput - the parsed value of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the position of parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseLiterals(_tmpOutput: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'number') {\r\n    return [1, parseInt(tokens[current].value, 10)];\r\n  }\r\n  if (tokens[current].type === 'string') {\r\n    return [1, tokens[current].value];\r\n  }\r\n  if (tokens[current].type === 'decimal') {\r\n    return [1, parseFloat(tokens[current].value)];\r\n  }\r\n  if (tokens[current].type === 'variable') {\r\n    return [1, parseMostClosestScopedVariable(tokens[current].value)];\r\n  }\r\n  if (tokens[current].type === 'name') {\r\n    if (tokens[current].value.toLowerCase() === 'true') {\r\n      return [1, true];\r\n    }\r\n    if (tokens[current].value.toLowerCase() === 'false') {\r\n      return [1, false];\r\n    }\r\n    if (formItemProperty && tokens[current].value in formItemProperty) {\r\n      return [1, formItemProperty[tokens[current].value]];\r\n    }\r\n    return [1, null];\r\n  }\r\n  if (tokens[current].type === 'dot') {\r\n    return [1, parseDot()];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseFuntion parses the functions present in expression\r\n * @param {any} _output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseFunction(_output: any, tokens: any, current: any) {\r\n  // precedence of functions\r\n  const possibleFunctions = [\r\n    kbSelected,\r\n    kbCountSelected,\r\n    kbToday,\r\n    kbRegex,\r\n    kbInt,\r\n    kbCoalesce,\r\n    kbPosition,\r\n    kbSum,\r\n    kbConcat,\r\n    kbSubstr,\r\n    kbRound,\r\n  ];\r\n  if (tokens[current].type === 'function') {\r\n    const funcName = tokens[current].value;\r\n    const arrayOfParams: any = [];\r\n    const arrayOfOriginalTokens: any = [];\r\n    let i = 1;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      const tmpQueue = [];\r\n      tmpQueue.push(1);\r\n      i += 1;\r\n      let tmpTokens = [];\r\n      while (tokens[current + i] && tmpQueue.length) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === ')'\r\n        ) {\r\n          tmpQueue.pop();\r\n        }\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === '('\r\n        ) {\r\n          tmpQueue.push(1);\r\n        }\r\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\r\n          tmpTokens.pop();\r\n          const tmpVal = parser(null, tmpTokens, 0);\r\n          arrayOfParams.push(tmpVal);\r\n          arrayOfOriginalTokens.push(tmpTokens);\r\n          tmpTokens = [];\r\n        }\r\n        i += 1;\r\n      }\r\n      i -= 1;\r\n\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpTokens.pop();\r\n        const tmpVal = parser(null, tmpTokens, 0);\r\n        arrayOfParams.push(tmpVal);\r\n        arrayOfOriginalTokens.push(tmpTokens);\r\n        let parsedFn = false;\r\n        let parsedVal = null;\r\n        possibleFunctions.forEach(functionFn => {\r\n          if (parsedFn) {\r\n            return;\r\n          }\r\n          [parsedFn, parsedVal] = functionFn(\r\n            funcName,\r\n            arrayOfParams,\r\n            arrayOfOriginalTokens\r\n          );\r\n        });\r\n        if (parsedFn) {\r\n          return [i + 1, parsedVal];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseIf parses the if present in expression\r\n * @param {any} _output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseIf(_output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'if') {\r\n    const arrayOfParams = [];\r\n    let i = 1;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      const tmpQueue = [];\r\n      tmpQueue.push(1);\r\n      i += 1;\r\n      let tmpTokens = [];\r\n      while (tokens[current + i] && tmpQueue.length) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === ')'\r\n        ) {\r\n          tmpQueue.pop();\r\n        }\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === '('\r\n        ) {\r\n          tmpQueue.push(1);\r\n        }\r\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\r\n          tmpTokens.pop();\r\n          const tmpVal = parser(null, tmpTokens, 0);\r\n          arrayOfParams.push(tmpVal);\r\n          tmpTokens = [];\r\n        }\r\n        i += 1;\r\n      }\r\n      i -= 1;\r\n\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpTokens.pop();\r\n        const tmpVal = parser(null, tmpTokens, 0);\r\n        arrayOfParams.push(tmpVal);\r\n        if (arrayOfParams.length % 2 === 0) {\r\n          let j;\r\n          for (j = 0; j < arrayOfParams.length; j += 2) {\r\n            if (arrayOfParams[j]) {\r\n              return [i + 1, arrayOfParams[j + 1]];\r\n            }\r\n          }\r\n        } else {\r\n          let j;\r\n          for (j = 0; j < arrayOfParams.length - 1; j += 2) {\r\n            if (arrayOfParams[j]) {\r\n              return [i + 1, arrayOfParams[j + 1]];\r\n            }\r\n          }\r\n          return [i + 1, arrayOfParams[arrayOfParams.length - 1]];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseNot parses the not present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseNot(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'not') {\r\n    let tmpTokens;\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal' && output != null) {\r\n      tmpTokens = [];\r\n      i += 1;\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      let newOutput;\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n        // tslint:disable-next-line: triple-equals\r\n        return [i, output != newOutput];\r\n      }\r\n    } else {\r\n      let parsed = false;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      let consumedTokens;\r\n      let newOutput;\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          i += consumedTokens;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [i, !newOutput];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseAnd parses the and present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseAnd(output: any, tokens: any, current: any): any {\r\n  if (tokens[current].type === 'and' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    let newOutput = null;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      let consumedChars;\r\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\r\n      i += consumedChars;\r\n    } else {\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n      }\r\n    }\r\n    if (newOutput != null) {\r\n      newOutput = output && newOutput;\r\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\r\n        let consumedChars = 0;\r\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\r\n        i += consumedChars;\r\n      }\r\n      return [i, newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseOr parses the or present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseOr(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'or' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    let newOutput = null;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      let consumedChars;\r\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\r\n      i += consumedChars;\r\n    } else {\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n      }\r\n    }\r\n    if (newOutput != null) {\r\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\r\n        let consumedChars = 0;\r\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\r\n        i += consumedChars;\r\n      }\r\n      return [i, output || newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseEqual parses the equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseEqual(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'equal' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n      // tslint:disable-next-line: triple-equals\r\n      return [i, output == newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseLessThan parses the less than or equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseLessThan(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'lessThan' && output != null) {\r\n    let flagLessThanOrEqual = false;\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal') {\r\n      i += 1;\r\n      flagLessThanOrEqual = true;\r\n    }\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n      if (flagLessThanOrEqual) {\r\n        return [i, output <= newOutput];\r\n      }\r\n      return [i, output < newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseGreaterThan parses the greater than or equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseGreaterThan(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'greaterThan' && output != null) {\r\n    let flagGreaterThanOrEqual = false;\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal') {\r\n      i += 1;\r\n      flagGreaterThanOrEqual = true;\r\n    }\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n\r\n      if (flagGreaterThanOrEqual) {\r\n        return [i, output >= newOutput];\r\n      }\r\n      return [i, output > newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseParen parses the paren present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseParen(_output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'paren' && tokens[current].value === '(') {\r\n    const tmpQueue = [];\r\n    tmpQueue.push(1);\r\n    let i = 1;\r\n    const tmpTokens = [];\r\n    while (tokens[current + i] && tmpQueue.length) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpQueue.pop();\r\n      }\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === '('\r\n      ) {\r\n        tmpQueue.push(1);\r\n      }\r\n      i += 1;\r\n    }\r\n    i -= 1;\r\n\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === ')'\r\n    ) {\r\n      tmpTokens.pop();\r\n      const tmpVal = parser(null, tmpTokens, 0);\r\n      return [i + 1, tmpVal];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseDivide parses the divide present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseDivide(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'divide') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n        }\r\n        const precedentParsers = [parseDivide, parseMultiply];\r\n        let preParsed = false;\r\n        let preOutput;\r\n        precedentParsers.forEach(preParseFn => {\r\n          if (preParsed) {\r\n            return;\r\n          }\r\n          if (tokens[current]) {\r\n            [consumedTokens, preOutput] = preParseFn(\r\n              newOutput,\r\n              tokens,\r\n              current\r\n            );\r\n            ct += consumedTokens;\r\n            if (consumedTokens !== 0) {\r\n              preParsed = true;\r\n              newOutput = preOutput;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (newOutput != null) {\r\n          output /= newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseMultiply parses the multiply present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseMultiply(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'multiply') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n        }\r\n        const precedentParsers = [parseDivide, parseMultiply];\r\n        let preParsed = false;\r\n        let preOutput;\r\n        precedentParsers.forEach(preParseFn => {\r\n          if (preParsed) {\r\n            return;\r\n          }\r\n          if (tokens[current]) {\r\n            [consumedTokens, preOutput] = preParseFn(\r\n              newOutput,\r\n              tokens,\r\n              current\r\n            );\r\n            ct += consumedTokens;\r\n            if (consumedTokens !== 0) {\r\n              preParsed = true;\r\n              newOutput = preOutput;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (newOutput != null) {\r\n          output *= newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parsePlus parses the addition present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parsePlus(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'plus') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'string',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n          const precedentParsers = [parseDivide, parseMultiply];\r\n          let preParsed = false;\r\n          let preOutput;\r\n          precedentParsers.forEach(preParseFn => {\r\n            if (preParsed) {\r\n              return;\r\n            }\r\n            if (tokens[current]) {\r\n              [consumedTokens, preOutput] = preParseFn(\r\n                newOutput,\r\n                tokens,\r\n                current\r\n              );\r\n              ct += consumedTokens;\r\n              if (consumedTokens !== 0) {\r\n                preParsed = true;\r\n                newOutput = preOutput;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (newOutput != null) {\r\n          output += newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseMinus parses the minus present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseMinus(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'minus') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [parseLiterals, parseParen, parseFunction];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n          const precedentParsers = [parseDivide, parseMultiply];\r\n          let preParsed = false;\r\n          let preOutput;\r\n          precedentParsers.forEach(preParseFn => {\r\n            if (preParsed) {\r\n              return;\r\n            }\r\n            if (tokens[current]) {\r\n              [consumedTokens, preOutput] = preParseFn(\r\n                newOutput,\r\n                tokens,\r\n                current\r\n              );\r\n              ct += consumedTokens;\r\n              if (consumedTokens !== 0) {\r\n                preParsed = true;\r\n                newOutput = preOutput;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (newOutput) {\r\n          if (output) {\r\n            if (\r\n              Object.prototype.toString.call(newOutput) === '[object Date]' &&\r\n              Object.prototype.toString.call(output) === '[object Date]'\r\n            ) {\r\n              if (!isNaN(output.getTime()) && !isNaN(newOutput.getTime())) {\r\n                output -= newOutput;\r\n                output = Math.ceil(output / (1000 * 60 * 60 * 24));\r\n              } else {\r\n                output = NaN;\r\n              }\r\n            } else if (\r\n              Object.prototype.toString.call(newOutput) === '[object Date]' ||\r\n              Object.prototype.toString.call(output) === '[object Date]'\r\n            ) {\r\n              output = NaN;\r\n            } else if (newOutput === '' || output === '') {\r\n              output = NaN;\r\n            } else {\r\n              output -= newOutput;\r\n            }\r\n          } else {\r\n            if (Object.prototype.toString.call(newOutput) === '[object Date]') {\r\n              output = NaN;\r\n            } else {\r\n              output = -newOutput;\r\n            }\r\n          }\r\n        } else {\r\n          output = NaN;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        if (output === '') {\r\n          output = NaN;\r\n        }\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n// precedence of the parser methods\r\nconst parsers = [\r\n  parseIf,\r\n  parseParen,\r\n  parseLiterals,\r\n  parseDivide,\r\n  parseMultiply,\r\n  parsePlus,\r\n  parseMinus,\r\n  parseLessThan,\r\n  parseGreaterThan,\r\n  parseEqual,\r\n  parseAnd,\r\n  parseOr,\r\n  parseNot,\r\n  parseFunction,\r\n];\r\n\r\n/**\r\n * the main parser that parses the series of tokens generated by the tokenizer.\r\n * Throws syntax error if not parsed\r\n * @param {any} leftOutput - the initial output or output of previous left side tokens\r\n * @param {any} tokens - the set or array of tokens need to be parsed\r\n * @param {any} pos - the start position of the parser\r\n * @returns parsed value of the set of tokens\r\n */\r\nfunction parser(leftOutput: any, tokens: any, pos: any) {\r\n  let current = pos;\r\n  let output = leftOutput;\r\n  while (current < tokens.length) {\r\n    let parsed = false;\r\n    parsers.forEach(parserFn => {\r\n      if (parsed) {\r\n        return;\r\n      }\r\n      const [consumedTokens, newOutput] = parserFn(output, tokens, current);\r\n      if (consumedTokens !== 0) {\r\n        parsed = true;\r\n        current += consumedTokens;\r\n      }\r\n      if (newOutput != null) {\r\n        output = newOutput;\r\n      }\r\n    });\r\n    if (!parsed) {\r\n      // throw new TypeError('syntax error');\r\n      // tslint:disable-next-line: no-console\r\n      // tslint:disable-next-line: no-console\r\n      console.log(actualExpression);\r\n      return null;\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * odk wrapper evaluator, default method that will be exported, parses expressions\r\n * @param {any} expression - expression that needs to be evaluated\r\n * @param {any} tmpUserInput - the variable key-value json, (current user input json)\r\n * @param {any} tmpFormItemProperty - the name key-value json (current option list)\r\n * @param {any} tmpCurrentHierarchicalName - the node at which the evaluater is called\r\n * @returns evaluated value\r\n */\r\nexport default function evaluater(\r\n  expression: string,\r\n  tmpUserInput: any,\r\n  tmpFormItemProperty: any,\r\n  tmpCurrentHierarchicalName: string\r\n) {\r\n  if (!tmpUserInput) {\r\n    tmpUserInput = {};\r\n  }\r\n  currentHierarchicalName = tmpCurrentHierarchicalName;\r\n  actualExpression = expression;\r\n  userInput = tmpUserInput;\r\n  formItemProperty = tmpFormItemProperty;\r\n  return parser(null, tokenizer(expression), 0);\r\n}\r\n","import * as React from 'react';\r\nimport { Alert } from 'reactstrap';\r\n\r\nexport interface KbAlertProps {\r\n  headerText: string;\r\n  bodyText: string;\r\n  handleToggle: any;\r\n  isOpen: boolean;\r\n  color: string;\r\n}\r\n\r\nclass KbAlert extends React.Component<KbAlertProps> {\r\n  public render() {\r\n    const { headerText, bodyText, handleToggle, isOpen, color } = this.props;\r\n    return (\r\n      <Alert color={color} isOpen={isOpen} toggle={handleToggle}>\r\n        <h4 className=\"alert-heading\">{headerText}</h4>\r\n        <p>{bodyText}</p>\r\n      </Alert>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KbAlert;\r\n","import * as React from 'react';\r\nimport Select from 'react-select';\r\n\r\nexport interface DropDownProps {\r\n  languages: any;\r\n  onChangeSelect: any;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass DropDown extends React.Component<DropDownProps> {\r\n  public render() {\r\n    const options: Options[] = [];\r\n    const languageOptions = [...this.props.languages];\r\n    languageOptions.map((elem: any) => {\r\n      options.push({ label: elem.label, value: elem.value });\r\n    });\r\n\r\n    let selectedValue: any;\r\n    options.map(elem => {\r\n      if (elem.value === this.props.defaultLanguage) {\r\n        selectedValue = elem;\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Select\r\n        multi={false}\r\n        options={options}\r\n        className={'col-md-2 dropDown'}\r\n        placeholder=\"Language\"\r\n        onChange={this.onChangeHandler}\r\n        value={selectedValue || ''}\r\n      />\r\n    );\r\n  }\r\n\r\n  /** pass the selected value to the parent class\r\n   * @param {any} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: any) => {\r\n    this.props.onChangeSelect(event.value);\r\n  };\r\n}\r\n\r\nexport default DropDown;\r\n","// Field Types\r\nexport const GROUP_FIELD_TYPE = 'group';\r\nexport type GROUP_FIELD_TYPE = typeof GROUP_FIELD_TYPE;\r\nexport const REPEAT_FIELD_TYPE = 'repeat';\r\nexport type REPEAT_FIELD_TYPE = typeof REPEAT_FIELD_TYPE;\r\nexport const TEXT_FIELD_TYPE = 'text';\r\nexport type TEXT_FIELD_TYPE = typeof TEXT_FIELD_TYPE;\r\nexport const DATE_FIELD_TYPE = 'date';\r\nexport type DATE_FIELD_TYPE = typeof DATE_FIELD_TYPE;\r\nexport const DATE_TIME_FIELD_TYPE = 'dateTime';\r\nexport type TIME_FIELD_TYPE = typeof TIME_FIELD_TYPE;\r\nexport const TIME_FIELD_TYPE = 'time';\r\nexport type DATE_TIME_FIELD_TYPE = typeof DATE_TIME_FIELD_TYPE;\r\nexport const INTEGER_FIELD_TYPE = 'integer';\r\nexport type INTEGER_FIELD_TYPE = typeof INTEGER_FIELD_TYPE;\r\nexport const DECIMAL_FIELD_TYPE = 'decimal';\r\nexport type DECIMAL_FIELD_TYPE = typeof DECIMAL_FIELD_TYPE;\r\nexport const PHOTO_FIELD_TYPE = 'photo';\r\nexport type PHOTO_FIELD_TYPE = typeof PHOTO_FIELD_TYPE;\r\nexport const FILE_FIELD_TYPE = 'file';\r\nexport type FILE_FIELD_TYPE = typeof FILE_FIELD_TYPE;\r\nexport const NOTE_FIELD_TYPE = 'note';\r\nexport type NOTE_FIELD_TYPE = typeof NOTE_FIELD_TYPE;\r\nexport const SELECT_ONE_FIELD_TYPE = 'select one';\r\nexport type SELECT_ONE_FIELD_TYPE = typeof SELECT_ONE_FIELD_TYPE;\r\nexport const SELECT_ALL_FIELD_TYPE = 'select all that apply';\r\nexport type SELECT_ALL_FIELD_TYPE = typeof SELECT_ALL_FIELD_TYPE;\r\nexport const CALCULATE_FIELD_TYPE = 'calculate';\r\nexport type CALCULATE_FIELD_TYPE = typeof CALCULATE_FIELD_TYPE;\r\n\r\n// Required Properties\r\nexport const REQUIRED_FIELD_MSG = 'This field is required';\r\nexport type REQUIRED_FIELD_MSG = typeof REQUIRED_FIELD_MSG;\r\nexport const REQUIRED_SYMBOL = '*';\r\nexport type REQUIRED_SYMBOL = typeof REQUIRED_SYMBOL;\r\n","import { FieldElement } from '../components/typeEvalutors/Base';\r\n\r\n/**\r\n * get the text from multilang obj based on language identifier,\r\n * @param {FieldElement} property - field multilang property or string\r\n * @return {string} - text value of the property based on language identifier, empty if not present\r\n */\r\nexport default function getTextFromProperty(\r\n  property: string | { [key: string]: string },\r\n  languageIdentifier: string\r\n): string {\r\n  if (typeof property === 'string') {\r\n    return property || '';\r\n  }\r\n  return property[languageIdentifier] || '';\r\n}\r\n\r\n/**\r\n * get the label text of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field label text\r\n */\r\nexport function getFieldLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.label) {\r\n    return getTextFromProperty(fieldElement.label, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the label hint of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field label text\r\n */\r\nexport function getHintLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.hint) {\r\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the customised label text with previous input of the fieldElement\r\n * @param {any} evaluator - the getEvaluatedExpressionSelector Function\r\n * @param {string} labelText - the current Label Text\r\n * @param {string} fieldTreeName - the field tree name\r\n * @return {string | null} - field label text or null\r\n */\r\nexport function customizeLabelsWithPreviousInputs(\r\n  evaluator: any,\r\n  labelText: string,\r\n  fieldTreeName: string\r\n): string | null {\r\n  if (labelText === null || labelText === undefined) {\r\n    return null;\r\n  }\r\n  const placesOfCustomizationsRequiredList = labelText.match(/\\[(.*?)\\]/g);\r\n\r\n  // to calculate - i.e, [${departure_date_from_bangladesh}]\r\n  if (placesOfCustomizationsRequiredList) {\r\n    placesOfCustomizationsRequiredList.forEach(tmpPlace => {\r\n      tmpPlace = tmpPlace.substring(1, tmpPlace.length - 1);\r\n      const customizedName = evaluator(tmpPlace, fieldTreeName);\r\n      const tmp = '[' + tmpPlace + ']';\r\n      if (customizedName != null && customizedName !== undefined) {\r\n        labelText = labelText.replace(tmp, customizedName);\r\n      } else {\r\n        labelText = labelText.replace(tmp, '');\r\n      }\r\n    });\r\n  } else {\r\n    // to calculate - i.e, ${departure_date_from_bangladesh}\r\n    const matchList = labelText.match(/\\${(.*[^}])[\\}?]$/g);\r\n    if (matchList) {\r\n      matchList.forEach(tmpPlace => {\r\n        const customizedName = evaluator(tmpPlace, fieldTreeName);\r\n        if (customizedName != null && customizedName !== undefined) {\r\n          labelText = labelText.replace(tmpPlace, customizedName);\r\n        } else {\r\n          labelText = labelText.replace(tmpPlace, '');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return labelText;\r\n}\r\n\r\n/**\r\n * get the hint text of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field hint text\r\n */\r\nexport function getFieldHintText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.hint) {\r\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the label text of the fieldElement constraint msg\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - constraint label text\r\n */\r\nexport function getConstraintLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.bind && fieldElement.bind['jr:constraintMsg']) {\r\n    return getTextFromProperty(\r\n      fieldElement.bind['jr:constraintMsg'],\r\n      languageIdentifier\r\n    );\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the boolean result depending on the expression\r\n * @param {string} - required string\r\n * @returns {boolean} - true if required, otherwise false\r\n */\r\nfunction requiredEvaluator(expression: string): boolean {\r\n  if (\r\n    expression.toLowerCase() === 'yes' ||\r\n    expression === '1' ||\r\n    expression.toLowerCase() === 'true'\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * get the boolean result of fieldElement string\r\n * @param fieldElement\r\n * @return {boolean} - boolean value by calculating fieldElement required properties\r\n */\r\nexport function isInputRequired(fieldElement: FieldElement): boolean {\r\n  let isRequired = false;\r\n  if (fieldElement.bind) {\r\n    if (fieldElement.bind.required) {\r\n      if (\r\n        typeof fieldElement.bind.required === 'string' &&\r\n        requiredEvaluator(fieldElement.bind.required)\r\n      ) {\r\n        isRequired = true;\r\n      }\r\n    }\r\n  }\r\n  return isRequired;\r\n}\r\n\r\n/** interface for EvaluateExpression\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {fieldTreeName} - the field Tree name\r\n * @returns {any} - evaluated value\r\n */\r\nexport type EvaluateExpression = (\r\n  expression: string,\r\n  fieldTreeName: string\r\n) => any;\r\n\r\n/** evaluates whether a component be relevant or not\r\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the relevant expression\r\n * @returns {boolean} - true if relevant; otherwise, false;\r\n */\r\nexport function shouldComponentBeRelevant(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.relevant) {\r\n    const isRelevant = evaluateExpression(\r\n      fieldElement.bind.relevant,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isRelevant) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/** evaluates whether a component be readonly or not\r\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the readonly expression\r\n * @returns {boolean} - true if readonly; otherwise, false;\r\n */\r\nexport function shouldComponentBeReadOnly(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.readonly) {\r\n    const isReadOnly = evaluateExpression(\r\n      fieldElement.bind.readonly,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isReadOnly) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** evaluates whether the input violates constraint or not\r\n * @param {FieldElement} fieldElement - the constraint expression\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the expression\r\n * @returns {boolean} - true if violates; otherwise, false;\r\n */\r\nexport function shouldInputViolatesConstraint(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.constraint) {\r\n    const isConstraintViolated = !evaluateExpression(\r\n      fieldElement.bind.constraint,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isConstraintViolated) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** returns the new user input object after assigning value of passed fieldTreeName\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @param {any} fieldValue - the value that needs to be assigned\r\n * @returns {any} - the new user input object after assignment\r\n */\r\nexport function getModifiedUserInputObject(\r\n  userInputObj: any,\r\n  fieldTreeName: string,\r\n  fieldValue: any\r\n): any {\r\n  const treeNodes = fieldTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  modifiedObj[parent + treeNodes[treeNodes.length - 1]] = fieldValue;\r\n  return userInputObj;\r\n}\r\n\r\n/** Returns the filtered option list Array For Repeat property\r\n * @param {any} userInputObj - the current option list object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @param {any} repeatIndex - the repeat index to remove\r\n * @returns {any} - the new user filredred repear array after assignment\r\n */\r\nexport function getModifiedOptionListForRepeat(\r\n  userInputObj: any,\r\n  fieldTreeName: string,\r\n  repeatIndex: number\r\n): any {\r\n  const filteredRepeatArray: any = [];\r\n  const optionListobj: any = userInputObj;\r\n\r\n  Object.entries(optionListobj).forEach(key => {\r\n    const keyNameOptionListobj: any = key[0];\r\n    const keyValueOptionListobj: any = key[1];\r\n    if (keyNameOptionListobj === fieldTreeName) {\r\n      const repeatIndexString: string = String(repeatIndex);\r\n      Object.entries(keyValueOptionListobj).map(keyRepeat => {\r\n        const keyNameRepeatObject: any = keyRepeat[0];\r\n        const keyValueRepeatValue: any = keyRepeat[1];\r\n        if (keyNameRepeatObject !== repeatIndexString) {\r\n          filteredRepeatArray.push(keyValueRepeatValue);\r\n        }\r\n      });\r\n    }\r\n  });\r\n  return filteredRepeatArray;\r\n}\r\n\r\n/** returns the value from the user input object\r\n * @param {any} userInputObj - the user input object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @returns {any} - the value, present in user input object, of the fieldTreeName\r\n */\r\nexport function getValueFromUserInputObj(\r\n  userInputObj: any,\r\n  fieldTreeName: string\r\n): any {\r\n  const treeNodes = fieldTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  return modifiedObj[parent + treeNodes[treeNodes.length - 1]];\r\n}\r\n\r\n/** evaluates whether the component is minimal or not\r\n * @param {FieldElement} fieldElement - the constraint expression\r\n * @returns {boolean} - true if minimal; otherwise, false;\r\n */\r\nexport function shouldComponentBeMinimal(fieldElement: FieldElement): boolean {\r\n  let isMinimal = false;\r\n  if (fieldElement.control && fieldElement.control.appearance) {\r\n    fieldElement.control.appearance.toString().includes('minimal')\r\n      ? (isMinimal = true)\r\n      : (isMinimal = false);\r\n  }\r\n  return isMinimal;\r\n}\r\n\r\n/** returns the new user input object after emptying the desired grouped values\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} groupTreeName - the group Tree name\r\n * @returns {any} - the new user input object after emptying the grouped values\r\n */\r\nexport function emptyGroupedValues(\r\n  userInputObj: any,\r\n  groupTreeName: string\r\n): any {\r\n  const treeNodes = groupTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  Object.keys(modifiedObj).forEach(objKey => {\r\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\r\n      modifiedObj[objKey] = null;\r\n    }\r\n  });\r\n  return userInputObj;\r\n}\r\n\r\n/** returns whether the grouped values are empty or not\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} groupTreeName - the group Tree name\r\n * @returns {any} - true if empty; otherwise, false\r\n */\r\nexport function checkGroupedValuesForEmpty(\r\n  userInputObj: any,\r\n  groupTreeName: string\r\n): any {\r\n  const treeNodes = groupTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  let isEmpty: boolean = true;\r\n  Object.keys(modifiedObj).forEach(objKey => {\r\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\r\n      if (\r\n        modifiedObj[objKey] !== null &&\r\n        modifiedObj[objKey] !== undefined &&\r\n        isEmpty\r\n      ) {\r\n        isEmpty = false;\r\n      }\r\n    }\r\n  });\r\n  return isEmpty;\r\n}\r\n","import { AnyAction, Store } from 'redux';\r\nimport SeamlessImmutable from 'seamless-immutable';\r\nimport evaluater from '../../utils/compiler';\r\nimport {\r\n  checkGroupedValuesForEmpty,\r\n  emptyGroupedValues,\r\n  getModifiedOptionListForRepeat,\r\n  getModifiedUserInputObject,\r\n  getValueFromUserInputObj,\r\n} from '../../utils/helpers';\r\n\r\n/** interface for the store state */\r\nexport interface FormState {\r\n  userInput: object;\r\n  errors: string[];\r\n  optionList: object;\r\n  isFormSubmitted: boolean;\r\n  mediaList: object;\r\n}\r\n\r\n// actions\r\n\r\n/** FIELD_VALUE_ASSIGNED action type */\r\nexport const FIELD_VALUE_ASSIGNED = 'odk/reducer/form/FIELD_VALUE_ASSIGNED';\r\n/** OPTION_LIST_ASSIGNED action type */\r\nexport const OPTION_LIST_ASSIGNED = 'odk/reducer/form/OPTION_LIST_ASSIGNED';\r\n/** MEDIA_LIST_ASSIGNED action type */\r\nexport const MEDIA_LIST_ADDED = 'odk/reducer/form/MEDIA_LIST_ADDED';\r\n/** REMOVE_FROM_MEDIA_LIST action type */\r\nexport const REMOVE_FROM_MEDIA_LIST = 'odk/reducer/form/REMOVE_FROM_MEDIA_LIST';\r\n/** REMOVE_FROM_OPTION_LIST action type */\r\nexport const REMOVE_FROM_OPTION_LIST_REPEAT =\r\n  'odk/reducer/form/REMOVE_FROM_OPTION_LIST_REPEAT';\r\n/** RESET_STORE action type */\r\nexport const RESET_STORE = 'odk/reducer/form/RESET_STORE';\r\n/** ADD_ERROR_INPUT_ID action type */\r\nexport const ADD_ERROR_INPUT_ID = 'odk/reducer/form/ADD_ERROR_INPUT_ID';\r\n/** REMOVE_ERROR_INPUT_ID action type */\r\nexport const REMOVE_ERROR_INPUT_ID = 'odk/reducer/form/REMOVE_ERROR_INPUT_ID';\r\n/** EMPTY_GROUP_FIELDS */\r\nexport const EMPTY_GROUP_FIELDS = 'odk/reducer/form/EMPTY_GROUP_FIELDS';\r\n/** REMOVE_GROUP_FIELDS_FROM_ERRORS */\r\nexport const REMOVE_GROUP_FIELDS_FROM_ERRORS =\r\n  'odk/reducer/form/REMOVE_GROUP_FIELDS_FROM_ERRORS';\r\nexport const SET_USER_INPUT_OBJ = 'odk/reducer/form/SET_USER_INPUT_OBJ';\r\nexport const SET_FORM_SUBMIT_STATUS = 'odk/reducer/form/SET_FORM_SUBMIT_STATUS';\r\n\r\n/** interface for ASSIGN_FIELD_VALUE action */\r\nexport interface AssignFieldValueAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  fieldValue: any;\r\n  type: typeof FIELD_VALUE_ASSIGNED;\r\n}\r\n\r\n/** interface for OPTION_LIST_ASSIGNED action */\r\nexport interface AssignOptionListAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  optionList: any;\r\n  type: typeof OPTION_LIST_ASSIGNED;\r\n}\r\n\r\n/** interface for MEDIA_LIST_ADDED action */\r\nexport interface AddMediaListAction extends AnyAction {\r\n  mediaObject: any;\r\n  type: typeof MEDIA_LIST_ADDED;\r\n}\r\n\r\n/** interface for REMOVE_FROM_MEDIA_LIST action */\r\nexport interface RemoveFromMediaListAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  mediaList: any;\r\n  type: typeof REMOVE_FROM_MEDIA_LIST;\r\n}\r\n\r\n/** interface for REMOVE_FROM_OPTION_LIST action */\r\nexport interface RemoveFromOptionList extends AnyAction {\r\n  fieldTreeName: string;\r\n  repeatIndex: number;\r\n  type: typeof REMOVE_FROM_OPTION_LIST_REPEAT;\r\n}\r\n\r\n/** interface for RESET_STORE action */\r\nexport interface ResetStoreAction extends AnyAction {\r\n  type: typeof RESET_STORE;\r\n}\r\n\r\n/** interface for ADD_ERROR_INPUT_ID action */\r\nexport interface AddErrorInputId extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof ADD_ERROR_INPUT_ID;\r\n}\r\n\r\n/** interface for REMOVE_ERROR_INPUT_ID action */\r\nexport interface RemoveErrorInputId extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof REMOVE_ERROR_INPUT_ID;\r\n}\r\n\r\n/** interface for EMPTY_GROUP_FIELDS action */\r\nexport interface EmptyGroupFields extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof EMPTY_GROUP_FIELDS;\r\n}\r\n\r\n/** interface for REMOVE_GROUP_FIELDS_FROM_ERRORS action */\r\nexport interface RemoveGroupFieldsFromErrors extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof REMOVE_GROUP_FIELDS_FROM_ERRORS;\r\n}\r\n\r\n/** interface for SET_USER_INPUT_OBJ action */\r\nexport interface SetUserInputObj extends AnyAction {\r\n  userInputObj: any;\r\n  type: typeof SET_USER_INPUT_OBJ;\r\n}\r\n\r\n/** interface for SET_FORM_SUBMIT_STATUS action */\r\nexport interface SetFormSubmitStatus extends AnyAction {\r\n  isFormSubmitted: boolean;\r\n  type: typeof SET_FORM_SUBMIT_STATUS;\r\n}\r\n\r\n/** Assigns the value to the proper field name\r\n * @param {string} fieldTreeName - the extended field name\r\n * @param {any} fieldValue - the value that will be assigned\r\n * @return {AssignFieldValueAction} - an action to assign value to a field in the redux store\r\n */\r\nexport const assignFieldValueAction = (\r\n  fieldTreeName: string,\r\n  fieldValue: any\r\n): AssignFieldValueAction => ({\r\n  fieldTreeName,\r\n  fieldValue,\r\n  type: FIELD_VALUE_ASSIGNED,\r\n});\r\n\r\n/** Assigns option list to the proper field name\r\n * @param {string} fieldTreeName - the extended field name\r\n * @param {any} optionList - the option list that will be assigned\r\n * @return {AssignOptionListAction} - an action to assign option List to a field in the redux store\r\n */\r\nexport const assignOptionListAction = (\r\n  fieldTreeName: string,\r\n  optionList: any\r\n): AssignOptionListAction => ({\r\n  fieldTreeName,\r\n  optionList,\r\n  type: OPTION_LIST_ASSIGNED,\r\n});\r\n\r\n/** Remove option list from Redux Store\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveFromOptionList} - an action to remove input id for errors\r\n */\r\nexport const RemoveFromOptionList = (\r\n  fieldTreeName: string,\r\n  repeatIndex: number\r\n): RemoveFromOptionList => ({\r\n  fieldTreeName,\r\n  repeatIndex,\r\n  type: REMOVE_FROM_OPTION_LIST_REPEAT,\r\n});\r\n\r\n/** Adds media object to the proper field name\r\n * @param {any} mediaObject - the media object that will be added\r\n * @return {AddMediaListAction} - an action to assign media object to a field in the redux store\r\n */\r\nexport const addMediaListAction = (mediaObject: any): AddMediaListAction => ({\r\n  mediaObject,\r\n  type: MEDIA_LIST_ADDED,\r\n});\r\n\r\n/** Remove a media item in option list from Redux Store\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveFromMediaListAction} - an action to remove media info from redux store\r\n */\r\nexport const removeFromMediaListAction = (\r\n  fieldTreeName: string,\r\n  mediaList: any\r\n): RemoveFromMediaListAction => ({\r\n  fieldTreeName,\r\n  mediaList,\r\n  type: REMOVE_FROM_MEDIA_LIST,\r\n});\r\n\r\n/** Resets the redux store state to initial state\r\n * @return {ResetStoreAction} - an action to reset the redux store state\r\n */\r\nexport const resetStoreAction = (): ResetStoreAction => ({\r\n  type: RESET_STORE,\r\n});\r\n\r\n/** add the field tree name as error id to store in redux store that violates constraints\r\n * @param fieldTreeName - the field tree name\r\n * @returns {AddErrorInputId} - an action to add input id for errors\r\n */\r\nexport const addErrorInputId = (fieldTreeName: string): AddErrorInputId => ({\r\n  fieldTreeName,\r\n  type: ADD_ERROR_INPUT_ID,\r\n});\r\n\r\n/** remove the field tree name as error id to store in redux store that violates constraints\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveErrorInputId} - an action to remove input id for errors\r\n */\r\nexport const removeErrorInputId = (\r\n  fieldTreeName: string\r\n): RemoveErrorInputId => ({\r\n  fieldTreeName,\r\n  type: REMOVE_ERROR_INPUT_ID,\r\n});\r\n\r\n/** empties the values of the fields of the group\r\n * @param fieldTreeName - the group field tree name\r\n * @returns {RemoveErrorInputId} - an action to empty the group field values\r\n */\r\nexport const emptyGroupFields = (fieldTreeName: string): EmptyGroupFields => ({\r\n  fieldTreeName,\r\n  type: EMPTY_GROUP_FIELDS,\r\n});\r\n\r\n/** removes the group field names from store errors obj\r\n * @param {string} fieldTreeName - the group field tree name\r\n * @returns {RemoveGroupFieldsFromErrors} - an action to remove group field names from errors\r\n */\r\nexport const removeGroupFieldsFromErrors = (\r\n  fieldTreeName: string\r\n): RemoveGroupFieldsFromErrors => ({\r\n  fieldTreeName,\r\n  type: REMOVE_GROUP_FIELDS_FROM_ERRORS,\r\n});\r\n\r\n/** sets the user input object to redux store\r\n * @param {any} userInputObj - the user input obj\r\n * @returns {SetUserInputObj} - an action to set user input to redux store\r\n */\r\nexport const setUserInputObj = (userInputObj: any): SetUserInputObj => ({\r\n  type: SET_USER_INPUT_OBJ,\r\n  userInputObj,\r\n});\r\n\r\n/** sets the form submit info to redux store\r\n * @param {boolean} isFormSubmitted - the form submit info variable\r\n * @returns {SetFormSubmitInfo} - an action to set form submit info to redux store\r\n */\r\nexport const setFormSubmitStatus = (\r\n  isFormSubmitted: boolean\r\n): SetFormSubmitStatus => ({\r\n  isFormSubmitted,\r\n  type: SET_FORM_SUBMIT_STATUS,\r\n});\r\n\r\n/** Create type for forms reducer actions */\r\nexport type FormActionTypes =\r\n  | AssignFieldValueAction\r\n  | AssignOptionListAction\r\n  | RemoveFromOptionList\r\n  | AddMediaListAction\r\n  | RemoveFromMediaListAction\r\n  | ResetStoreAction\r\n  | AddErrorInputId\r\n  | RemoveErrorInputId\r\n  | EmptyGroupFields\r\n  | RemoveGroupFieldsFromErrors\r\n  | SetUserInputObj\r\n  | SetFormSubmitStatus\r\n  | AnyAction;\r\n\r\n/** Create an immutable form state */\r\nexport type ImmutableFormState = SeamlessImmutable.ImmutableObject<FormState>;\r\n\r\n/** initial form state */\r\nexport const initialState: ImmutableFormState = SeamlessImmutable({\r\n  errors: [],\r\n  isFormSubmitted: false,\r\n  mediaList: {},\r\n  optionList: {},\r\n  userInput: {},\r\n});\r\n\r\n/** the form reducer function */\r\nexport default function reducer(\r\n  state: ImmutableFormState = initialState,\r\n  action: FormActionTypes\r\n): ImmutableFormState {\r\n  switch (action.type) {\r\n    case FIELD_VALUE_ASSIGNED:\r\n      const modifiedUserInputObj = getModifiedUserInputObject(\r\n        state.getIn(['userInput']).asMutable({ deep: true }),\r\n        action.fieldTreeName,\r\n        action.fieldValue\r\n      );\r\n      const stateM = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({ ...stateM, userInput: modifiedUserInputObj });\r\n\r\n    case OPTION_LIST_ASSIGNED:\r\n      const modifiedUserInputObjList = getModifiedUserInputObject(\r\n        state.getIn(['optionList']).asMutable({ deep: true }),\r\n        action.fieldTreeName,\r\n        action.optionList != null ? { ...action.optionList } : null\r\n      );\r\n      const newState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({\r\n        ...newState,\r\n        optionList: modifiedUserInputObjList,\r\n      });\r\n\r\n    case REMOVE_FROM_OPTION_LIST_REPEAT:\r\n      let filteredRepeatArray: any = [];\r\n      if (\r\n        state\r\n          .getIn(['optionList'])\r\n          .asMutable({ deep: true })\r\n          .hasOwnProperty(action.fieldTreeName)\r\n      ) {\r\n        filteredRepeatArray = [\r\n          ...getModifiedOptionListForRepeat(\r\n            state.getIn(['optionList']).asMutable({ deep: true }),\r\n            action.fieldTreeName,\r\n            action.repeatIndex\r\n          ),\r\n        ];\r\n        const modifiedOptionListRepeat = getModifiedUserInputObject(\r\n          state.getIn(['optionList']).asMutable({ deep: true }),\r\n          action.fieldTreeName,\r\n          { ...filteredRepeatArray }\r\n        );\r\n        const newStateForRepeat = state.asMutable({ deep: true });\r\n        return SeamlessImmutable({\r\n          ...newStateForRepeat,\r\n          optionList: modifiedOptionListRepeat,\r\n        });\r\n      }\r\n      return state;\r\n\r\n    case MEDIA_LIST_ADDED:\r\n      const modifiedMediaList = {\r\n        ...state.getIn(['mediaList']).asMutable({ deep: true }),\r\n        [action.mediaObject.name]: action.mediaObject,\r\n      };\r\n      const newMediaState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({\r\n        ...newMediaState,\r\n        mediaList: modifiedMediaList,\r\n      });\r\n\r\n    case REMOVE_FROM_MEDIA_LIST:\r\n      if (\r\n        state\r\n          .getIn(['mediaList'])\r\n          .asMutable({ deep: true })\r\n          .hasOwnProperty(action.fieldTreeName)\r\n      ) {\r\n        // const tempMediaState = state.asMutable({ deep: true });\r\n        // return SeamlessImmutable({\r\n        //   ...tempMediaState,\r\n        //   mediaList: modifiedMediaObject,\r\n        // });\r\n      }\r\n      return state;\r\n\r\n    case RESET_STORE:\r\n      return initialState;\r\n\r\n    case ADD_ERROR_INPUT_ID:\r\n      if (!state.errors.includes(action.fieldTreeName)) {\r\n        return state.updateIn(['errors'], arr =>\r\n          arr.concat([action.fieldTreeName])\r\n        );\r\n      }\r\n      return state;\r\n\r\n    case REMOVE_ERROR_INPUT_ID:\r\n      if (state.errors.includes(action.fieldTreeName)) {\r\n        return state.updateIn(['errors'], arr =>\r\n          arr.filter(elm => elm !== action.fieldTreeName)\r\n        );\r\n      }\r\n      return state;\r\n\r\n    case EMPTY_GROUP_FIELDS:\r\n      const mUserInputObj = emptyGroupedValues(\r\n        state.getIn(['userInput']).asMutable({ deep: true }),\r\n        action.fieldTreeName\r\n      );\r\n      const mState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({ ...mState, userInput: mUserInputObj });\r\n\r\n    case REMOVE_GROUP_FIELDS_FROM_ERRORS:\r\n      return state.updateIn(['errors'], arr =>\r\n        arr.filter(elm => !elm.startsWith(action.fieldTreeName))\r\n      );\r\n\r\n    case SET_USER_INPUT_OBJ:\r\n      return SeamlessImmutable({\r\n        ...state,\r\n        userInput: (action as any).userInputObj,\r\n      });\r\n\r\n    case SET_FORM_SUBMIT_STATUS:\r\n      return SeamlessImmutable({\r\n        ...state,\r\n        isFormSubmitted: (action as any).isFormSubmitted,\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// selectors\r\n\r\n/** get the value by their respective element tree name\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} value if the element name is found else null\r\n */\r\nexport function getFieldValue(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return getValueFromUserInputObj(\r\n    (state as any).getIn(['userInput']).asMutable({ deep: true }),\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** get option list by their respective element tree name\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} value if the element name is found else null\r\n */\r\nexport function getOptionList(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return getValueFromUserInputObj(\r\n    (state as any).getIn(['optionList']).asMutable({ deep: true }),\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** get the value of the evaluated expression\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} - the evaluated value or null if syntax error\r\n */\r\nexport function getEvaluatedExpression(\r\n  state: Partial<Store>,\r\n  expression: string,\r\n  fieldTreeName: string\r\n): any {\r\n  return evaluater(expression, (state as any).userInput, null, fieldTreeName);\r\n}\r\n\r\n/** get the value of the evaluated expression for Select One and Select All\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {any} options - the options that needs to be evaluated\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} - the evaluated value or null if syntax error\r\n */\r\nexport function getEvaluatedExpressionForSelect(\r\n  state: Partial<Store>,\r\n  expression: string,\r\n  options: any,\r\n  fieldTreeName: string\r\n): any {\r\n  return evaluater(\r\n    expression,\r\n    (state as any).userInput,\r\n    options,\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** check if the field element is present in the store\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {boolean} true if present; otherwise, false\r\n */\r\nexport function isPresentInError(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return (state as any).errors.includes(fieldTreeName);\r\n}\r\n\r\n/** check if the field elements under group are empty or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the group field\r\n * @return {boolean} true if empty; otherwise, false\r\n */\r\nexport function isGroupFieldsEmpty(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return checkGroupedValuesForEmpty((state as any).userInput, fieldTreeName);\r\n}\r\n\r\n/** check if the field elements under group are present in errors or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the group field\r\n * @return {boolean} true if present; otherwise, false\r\n */\r\nexport function isErrorsIncludeGroupFields(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  let isPresent = false;\r\n  (state as any).errors.forEach((fTName: string) => {\r\n    if (fTName.startsWith(fieldTreeName) && !isPresent) {\r\n      isPresent = true;\r\n    }\r\n  });\r\n  return isPresent;\r\n}\r\n\r\n/** check if the errors array in store empty or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} true if empty; otherwise, false\r\n */\r\nexport function isErrorsArrayEmpty(state: Partial<Store>): any {\r\n  return (state as any).errors && (state as any).errors.length ? false : true;\r\n}\r\n\r\n/** get the userInput object from store\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} the current userInputObject\r\n */\r\nexport function getUserInputFromStore(state: Partial<Store>): any {\r\n  return (state as any).getIn(['userInput']).asMutable({ deep: true });\r\n}\r\n\r\n/** get the userInput object from store\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} the current isFormSubmitted\r\n */\r\nexport function getFormSubmitStatus(state: Partial<Store>): any {\r\n  return (state as any).isFormSubmitted;\r\n}\r\n\r\n/** get the file if present in store\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fileName - the fileName\r\n * @return {any} - the file or null\r\n */\r\nexport function getFileObject(state: Partial<Store>, fileName: string): any {\r\n  const fileObject = (state as any).getIn(['mediaList', fileName]);\r\n  return fileObject ? (state as any).getIn(['mediaList', fileName]) : null;\r\n}\r\n\r\n/** get all the files\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {any} - the files or empty object\r\n */\r\nexport function getAllFileObjects(state: Partial<Store>): any {\r\n  return (state as any).getIn(['mediaList']);\r\n}\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport GroupTypeEvaluator from '../../../../components/typeEvalutors/Group';\r\nimport {\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../utils/helpers';\r\n\r\nexport interface GroupProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n}\r\n\r\nclass Group extends React.Component<GroupProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isComponentRender,\r\n    } = this.props;\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    let isAppearanceApplicable = false;\r\n    if (fieldElement.control && fieldElement.control.appearance) {\r\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n        isAppearanceApplicable = true;\r\n      }\r\n    }\r\n    if (isComponentRender) {\r\n      return (\r\n        <FormGroup>\r\n          <Label className={'groupLabel'}>{fieldLabel}</Label>\r\n          {fieldElement.children && (\r\n            <GroupTypeEvaluator\r\n              choices={choices}\r\n              fieldElements={fieldElement.children}\r\n              fieldParentTreeName={\r\n                fieldParentTreeName + 'group/' + fieldElement.name + '/'\r\n              }\r\n              defaultLanguage={defaultLanguage}\r\n              csvList={csvList}\r\n              isAppearanceApplicable={isAppearanceApplicable}\r\n            />\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (\r\n        this.props.isErrorsIncludeGroupFieldsSelector(\r\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\r\n        )\r\n      ) {\r\n        this.props.removeGroupFieldsFromErrorsActionCreator(\r\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\r\n        );\r\n      }\r\n      if (\r\n        !this.props.isGroupFieldsEmptySelector(\r\n          fieldParentTreeName + fieldElement.name\r\n        )\r\n      ) {\r\n        this.props.emptyGroupFieldsActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n};\r\n\r\n/** connect Group component to the redux store */\r\nconst ConnectedGroup = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Group);\r\n\r\nexport default ConnectedGroup;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport GroupTypeEvaluator from '../../../../../components/typeEvalutors/Group';\r\n\r\nexport interface SingleRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  defaultLanguage: string;\r\n  repeatIndex: number;\r\n  assignmentHandler: any;\r\n  removeHandler: any;\r\n  removeOptionHandler: any;\r\n  unControlFlag: boolean;\r\n}\r\n\r\nclass SingleRepeat extends React.Component<SingleRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      repeatIndex,\r\n      unControlFlag,\r\n    } = this.props;\r\n    let isAppearanceApplicable = false;\r\n    if (fieldElement.control && fieldElement.control.appearance) {\r\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n        isAppearanceApplicable = true;\r\n      }\r\n    }\r\n    return (\r\n      <div className={'groupFormFieldBody'}>\r\n        {fieldElement.children && (\r\n          <GroupTypeEvaluator\r\n            choices={choices}\r\n            fieldElements={fieldElement.children}\r\n            fieldParentTreeName={\r\n              fieldParentTreeName +\r\n              'repeat/' +\r\n              fieldElement.name +\r\n              '/' +\r\n              repeatIndex +\r\n              '/'\r\n            }\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n            isAppearanceApplicable={isAppearanceApplicable}\r\n          />\r\n        )}\r\n\r\n        {unControlFlag === false ? (\r\n          <div className={'minusIconWrapper'}>\r\n            <span onClick={this.handleChange}>\r\n              <FontAwesomeIcon icon=\"minus-circle\" className={'minusIcon'} />\r\n            </span>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private handleChange = (_event: React.MouseEvent<HTMLDivElement>) => {\r\n    const {\r\n      repeatIndex,\r\n      fieldValue,\r\n      assignmentHandler,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      removeHandler,\r\n      removeOptionHandler,\r\n    } = this.props;\r\n    let newFieldValue: any[] = [...fieldValue];\r\n    newFieldValue = newFieldValue.filter(\r\n      // tslint:disable-next-line: variable-name\r\n      (_elem, index) => index !== repeatIndex\r\n    );\r\n    assignmentHandler(fieldParentTreeName + fieldElement.name, newFieldValue);\r\n    removeHandler(fieldParentTreeName + 'repeat/' + fieldElement.name + '/');\r\n    removeOptionHandler(fieldParentTreeName + fieldElement.name, repeatIndex);\r\n  };\r\n}\r\n\r\nexport default SingleRepeat;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport {\r\n  assignFieldValueAction,\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  RemoveFromOptionList,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../../utils/helpers';\r\nimport SingleRepeat from '.././Single Repeat';\r\n\r\nexport interface ControlledRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldValue: any;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\r\n}\r\n\r\nclass ControlledRepeat extends React.Component<ControlledRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldValue,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isComponentRender,\r\n      assignFieldValueActionCreator,\r\n      removeGroupFieldsFromErrorsActionCreator,\r\n      removeOptionListFromActionCreator,\r\n    } = this.props;\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (!fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          [{}]\r\n        );\r\n      }\r\n\r\n      return (\r\n        <FormGroup className={'groupBody'}>\r\n          <Label>{fieldLabel}</Label>\r\n          {fieldValue &&\r\n            // tslint:disable-next-line: variable-name\r\n            fieldValue.map((_elm: any, index: any) => (\r\n              <div className=\"repeat-fields-body\" key={'repeat' + index}>\r\n                <SingleRepeat\r\n                  choices={choices}\r\n                  defaultLanguage={defaultLanguage}\r\n                  fieldElement={fieldElement}\r\n                  fieldParentTreeName={fieldParentTreeName}\r\n                  fieldValue={fieldValue}\r\n                  repeatIndex={index}\r\n                  assignmentHandler={assignFieldValueActionCreator}\r\n                  removeHandler={removeGroupFieldsFromErrorsActionCreator}\r\n                  removeOptionHandler={removeOptionListFromActionCreator}\r\n                  csvList={csvList}\r\n                  unControlFlag={false}\r\n                />\r\n              </div>\r\n            ))}\r\n          <div>\r\n            <span onClick={this.addAnotherRepeat}>\r\n              <FontAwesomeIcon icon=\"plus-circle\" className={'plusIcon'} />\r\n            </span>\r\n          </div>\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (\r\n        this.props.isErrorsIncludeGroupFieldsSelector(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        )\r\n      ) {\r\n        this.props.removeGroupFieldsFromErrorsActionCreator(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        );\r\n      }\r\n      if (fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private addAnotherRepeat = (_event: React.MouseEvent<HTMLDivElement>) => {\r\n    const { fieldValue, fieldParentTreeName, fieldElement } = this.props;\r\n    const newFieldValue = [...fieldValue];\r\n    newFieldValue.push({});\r\n    this.props.assignFieldValueActionCreator(\r\n      fieldParentTreeName + fieldElement.name,\r\n      newFieldValue\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n  removeOptionListFromActionCreator: RemoveFromOptionList,\r\n};\r\n\r\n/** connect Group component to the redux store */\r\nconst ConnectedControlledRepeat = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ControlledRepeat);\r\n\r\nexport default ConnectedControlledRepeat;\r\n","import _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport {\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getOptionList,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  RemoveFromOptionList,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../../utils/helpers';\r\nimport SingleRepeat from '.././Single Repeat';\r\n\r\nexport interface UncontrolledRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldValue: any;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  optionList: object;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\r\n}\r\n\r\nclass UncontrolledRepeat extends React.Component<UncontrolledRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldValue,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isComponentRender,\r\n      optionList,\r\n      assignFieldValueActionCreator,\r\n      removeGroupFieldsFromErrorsActionCreator,\r\n      removeOptionListFromActionCreator,\r\n    } = this.props;\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (!fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      let noOfJrCount: number = 0;\r\n\r\n      if (fieldElement.control) {\r\n        const jrCount: string = 'jr:count';\r\n        const res: any = fieldElement.control[jrCount];\r\n\r\n        if (/^[0-9]*$/i.test(res)) {\r\n          noOfJrCount = parseInt(res, 10);\r\n        } else {\r\n          const value: any = this.props.getEvaluatedExpressionSelector(\r\n            res,\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n          if (value) {\r\n            noOfJrCount = parseInt(value, 10);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length === 0 &&\r\n        noOfJrCount === 0 &&\r\n        this.props.isErrorsIncludeGroupFieldsSelector(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        )\r\n      ) {\r\n        this.props.removeGroupFieldsFromErrorsActionCreator(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        );\r\n      }\r\n\r\n      if (fieldValue && fieldValue.length > 0 && noOfJrCount === 0) {\r\n        this.removeFromError();\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      if (optionList && _.size(optionList) > noOfJrCount && noOfJrCount === 0) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      if (noOfJrCount > 0) {\r\n        const newFieldValue = [...fieldValue];\r\n\r\n        if (fieldValue && fieldValue.length < noOfJrCount) {\r\n          const iterate = noOfJrCount - fieldValue.length;\r\n          for (let j = 0; j < iterate; j++) {\r\n            newFieldValue.push({});\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > noOfJrCount) {\r\n          const iterate = fieldValue.length - noOfJrCount;\r\n          for (let i = 0; i < iterate; i++) {\r\n            newFieldValue.pop();\r\n          }\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            newFieldValue\r\n          );\r\n          this.removeFromError();\r\n        }\r\n\r\n        if (optionList && _.size(optionList) > noOfJrCount) {\r\n          const iterate = _.size(optionList) - noOfJrCount;\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            Array.prototype.slice.call(optionList, iterate)\r\n          );\r\n          this.removeFromError();\r\n        }\r\n\r\n        return (\r\n          <FormGroup className={'groupBodyUnControlled'}>\r\n            <Label>{fieldLabel}</Label>\r\n            {newFieldValue &&\r\n              // tslint:disable-next-line: variable-name\r\n              newFieldValue.map((_elm: any, index: any) => (\r\n                <div className=\"repeat-fields-body\" key={'repeat' + index}>\r\n                  <SingleRepeat\r\n                    choices={choices}\r\n                    defaultLanguage={defaultLanguage}\r\n                    fieldElement={fieldElement}\r\n                    fieldParentTreeName={fieldParentTreeName}\r\n                    fieldValue={fieldValue}\r\n                    repeatIndex={index}\r\n                    assignmentHandler={assignFieldValueActionCreator}\r\n                    removeHandler={removeGroupFieldsFromErrorsActionCreator}\r\n                    removeOptionHandler={removeOptionListFromActionCreator}\r\n                    csvList={csvList}\r\n                    unControlFlag={true}\r\n                  />\r\n                </div>\r\n              ))}\r\n          </FormGroup>\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      this.removeFromError();\r\n      if (fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private removeFromError() {\r\n    if (\r\n      this.props.isErrorsIncludeGroupFieldsSelector(\r\n        this.props.fieldParentTreeName +\r\n          'repeat/' +\r\n          this.props.fieldElement.name +\r\n          '/'\r\n      )\r\n    ) {\r\n      this.props.removeGroupFieldsFromErrorsActionCreator(\r\n        this.props.fieldParentTreeName +\r\n          'repeat/' +\r\n          this.props.fieldElement.name +\r\n          '/'\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n  removeOptionListFromActionCreator: RemoveFromOptionList,\r\n};\r\n\r\n/** connect Repeat component to the redux store */\r\nconst ConnectedUncontrolledRepeat = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UncontrolledRepeat);\r\n\r\nexport default ConnectedUncontrolledRepeat;\r\n","import * as React from 'react';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport ControlledRepeat from './Controlled Repeat';\r\nimport UncontrolledRepeat from './Uncontrolled Repeat';\r\n\r\n/** props interface for the Repeat component */\r\nexport interface RepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Repeat extends React.Component<RepeatProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (fieldElement.control && fieldElement.control['jr:count']) {\r\n      return <UncontrolledRepeat {...this.props} />;\r\n    }\r\n    return <ControlledRepeat {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default Repeat;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Input } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\n\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the calculate component */\r\nexport interface CalculateProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Calculate extends React.Component<CalculateProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      isPresentInErrorSelector,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      let calculatedValue: any = '';\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (calculatedValue && fieldValue !== calculatedValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          calculatedValue\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          <Input\r\n            type=\"hidden\"\r\n            name={fieldElement.name}\r\n            value={calculatedValue || ''}\r\n            readOnly={isReadonly}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Calculate component to the redux store */\r\nconst ConnectedCalculate = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Calculate);\r\n\r\nexport default ConnectedCalculate;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the KbDate component */\r\nexport interface DateProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass KbDate extends React.Component<DateProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      let defaultValue: string = '';\r\n      if (fieldValue && fieldValue !== '') {\r\n        const modifiedDate = new Date(fieldValue);\r\n        defaultValue = modifiedDate.toISOString().slice(0, 10);\r\n      }\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"date\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            value={defaultValue}\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? new Date(event.currentTarget.value)\r\n        : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect KbDate component to the redux store */\r\nconst ConnectedDate = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(KbDate);\r\n\r\nexport default ConnectedDate;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n/** props interface for the date Time component */\r\nexport interface DateTimeProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass DateTime extends React.Component<DateTimeProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      let modifiedDate: any = null;\r\n      if (fieldValue) {\r\n        modifiedDate = new Date(fieldValue);\r\n        const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\r\n        modifiedDate.setHours(modifiedDate.getHours() - timeZoneOffset);\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <br />\r\n          <DatePicker\r\n            name={fieldElement.name}\r\n            selected={fieldValue ? modifiedDate : null}\r\n            onChange={this.handleChange(fieldElement.name)}\r\n            showTimeSelect={true}\r\n            timeFormat=\"h:m aa\"\r\n            timeIntervals={15}\r\n            timeCaption=\"time\"\r\n            dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n            placeholderText=\"mm/dd/yyyy h:m aa\"\r\n            className=\"form-control\"\r\n            readOnly={isReadonly}\r\n          />\r\n          <br />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private handleChange = (name: any) => (value: any) => {\r\n    const modifiedDate: any = new Date(value);\r\n    const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\r\n    modifiedDate.setHours(modifiedDate.getHours() + timeZoneOffset);\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + name,\r\n      value !== '' ? modifiedDate : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Date Time component to the redux store */\r\nconst ConnectedDateTime = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DateTime);\r\n\r\nexport default ConnectedDateTime;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the decimal component */\r\nexport interface DecimalProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface DecimalState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\n\r\nclass Decimal extends React.Component<DecimalProps, DecimalState> {\r\n  constructor(props: DecimalProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated =\r\n      isRequired &&\r\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\r\n    const isConstraintViolated =\r\n      fieldValue !== '' &&\r\n      fieldValue !== null &&\r\n      fieldValue !== undefined &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          parseFloat(this.props.fieldValue)\r\n        );\r\n      }\r\n\r\n      let modifiedValue: any;\r\n      {\r\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (fieldValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n        modifiedValue = calculatedValue;\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"number\"\r\n            step=\"any\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            onBlur={this.onBlurHandler}\r\n            value={\r\n              this.state.isFocused\r\n                ? this.state.fieldValue || ''\r\n                : modifiedValue || ''\r\n            }\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? parseFloat(event.currentTarget.value)\r\n        : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Decimal component to the redux store */\r\nconst ConnectedDecimal = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Decimal);\r\n\r\nexport default ConnectedDecimal;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  assignFieldValueAction,\r\n  getFileObject,\r\n} from '../../../../../store/ducks/formState';\r\n\r\ninterface FilePreviewProps {\r\n  fieldName: string;\r\n  fieldValue: any;\r\n  fileObject: any;\r\n  assignFieldValueActionCreator: any;\r\n}\r\n\r\nclass FilePreview extends React.Component<FilePreviewProps> {\r\n  public render() {\r\n    const { fieldName, fieldValue, assignFieldValueActionCreator } = this.props;\r\n    const removeHandler = () => {\r\n      assignFieldValueActionCreator(fieldName, null);\r\n    };\r\n    return (\r\n      <>\r\n        <p className=\"text-muted\">\r\n          Uploaded File Name: <strong className=\"text-primary\"> {fieldValue} </strong>\r\n        </p>\r\n        <Button size=\"sm\" color=\"danger\" onClick={removeHandler}>\r\n          Remove File\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fileObject: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldName: string;\r\n  fieldValue: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldValue } = parentProps;\r\n  const result = {\r\n    fileObject: getFileObject(state, fieldValue),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n};\r\n\r\n/** connect FilePreview component to the redux store */\r\nconst ConnectedFilePreview = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FilePreview);\r\n\r\nexport default ConnectedFilePreview;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport { PHOTO_FIELD_TYPE } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  addMediaListAction,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\nimport FilePreview from './FilePreview/FilePreview';\r\n\r\n/** props interface for the file component */\r\nexport interface FileProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  addMediaListActionCreator: typeof addMediaListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass File extends React.Component<FileProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          {fieldValue ? (\r\n            <FilePreview\r\n              fieldName={fieldParentTreeName + fieldElement.name}\r\n              fieldValue={fieldValue}\r\n            />\r\n          ) : fieldElement.type === PHOTO_FIELD_TYPE ? (\r\n            <Input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              readOnly={isReadonly}\r\n            />\r\n          ) : (\r\n            <Input\r\n              type=\"file\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              readOnly={isReadonly}\r\n            />\r\n          )}\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: any) => {\r\n    if (event.target.files[0]) {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + event.target.name,\r\n        event.target.files[0].name\r\n      );\r\n      this.props.addMediaListActionCreator(event.target.files[0]);\r\n    } else {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + event.target.name,\r\n        null\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  addMediaListActionCreator: addMediaListAction,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect File component to the redux store */\r\nconst ConnectedFile = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(File);\r\n\r\nexport default ConnectedFile;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the integer component */\r\nexport interface IntegerProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\nexport interface IntegerState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\nclass Integer extends React.Component<IntegerProps, IntegerState> {\r\n  constructor(props: IntegerProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated =\r\n      isRequired &&\r\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\r\n\r\n    const isConstraintViolated =\r\n      fieldValue !== '' &&\r\n      fieldValue !== null &&\r\n      fieldValue !== undefined &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel =\r\n      customizeLabelsWithPreviousInputs(\r\n        getEvaluatedExpressionSelector,\r\n        constraintLabel,\r\n        fieldParentTreeName + fieldElement.name\r\n      ) || '';\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          parseInt(this.props.fieldValue, 10)\r\n        );\r\n      }\r\n\r\n      let modifiedValue: any;\r\n      {\r\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (fieldValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n        modifiedValue = calculatedValue;\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"number\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            onBlur={this.onBlurHandler}\r\n            value={\r\n              this.state.isFocused\r\n                ? this.state.fieldValue || ''\r\n                : modifiedValue || ''\r\n            }\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? parseInt(event.currentTarget.value, 10)\r\n        : null\r\n    );\r\n  };\r\n}\r\n/** connect the component to the store */\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n/** connect Integer component to the redux store */\r\nconst ConnectedInteger = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Integer);\r\nexport default ConnectedInteger;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, FormText, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the text component */\r\nexport interface NoteProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  isPresentInErrorSelector: any;\r\n  isComponentRender: boolean;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Note extends React.Component<NoteProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const fieldHint = getHintLabelText(fieldElement, defaultLanguage);\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      return (\r\n        <FormGroup>\r\n          <Label>{fieldLabel}</Label>\r\n          {isRequired && (\r\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\r\n          )}\r\n          {fieldElement.hint && (\r\n            <FormText className=\"hintText\">{fieldHint}</FormText>\r\n          )}\r\n\r\n          {isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Note component to the redux store */\r\nconst ConnectedNote = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Note);\r\n\r\nexport default ConnectedNote;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from 'react-select';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectAll Dropdown component */\r\nexport interface SelectAllDropDownProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectAllDropDown extends React.Component<SelectAllDropDownProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== [] &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      const options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n        this.setOptionList(resultOptions);\r\n      } else if (fieldElement.itemset) {\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n\r\n          const optionsArray: any = [];\r\n          if (options) {\r\n            options.map(elem => {\r\n              const elemObj: any = {};\r\n              const name: string = 'name';\r\n              const label: string = 'label';\r\n              elemObj[name] = elem.value;\r\n              elemObj[label] = elem.label;\r\n              optionsArray.push(elemObj);\r\n            });\r\n          }\r\n          this.setOptionList(optionsArray);\r\n        }\r\n      } else {\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem => {\r\n            const childrenLabel: string = getFieldLabelText(\r\n              elem,\r\n              defaultLanguage\r\n            );\r\n\r\n            options.push({ label: childrenLabel, value: elem.name });\r\n          });\r\n          this.setOptionList(fieldElement.children);\r\n        }\r\n      }\r\n\r\n      const tmpValueArray: any = [];\r\n      let isNotIncluded: boolean = false;\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        const optionsValueArray: any = [];\r\n        options.map(elem => {\r\n          if (elem.value) {\r\n            optionsValueArray.push(elem.value);\r\n          }\r\n        });\r\n\r\n        for (const row of fieldValue) {\r\n          if (!optionsValueArray.includes(row)) {\r\n            isNotIncluded = true;\r\n          } else {\r\n            tmpValueArray.push(row);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n        this.props.assignFieldValueActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          tmpValueArray || []\r\n        );\r\n      }\r\n\r\n      const selectedValues: any[] = [];\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        options.map(elem => {\r\n          for (const row of fieldValue) {\r\n            if (elem.value === row) {\r\n              selectedValues.push(elem);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        const seperatedValues: string[] = fieldValue.split(' ');\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          seperatedValues\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <div key={fieldElement.name} className=\"selectAllDropDown\">\r\n            <Select\r\n              isMulti={true}\r\n              name={fieldElement.name}\r\n              options={options}\r\n              onChange={this.onChangeHandler(fieldElement.name)}\r\n              value={selectedValues || []}\r\n            />\r\n          </div>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      if (this.props.optionList != null) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** Sets the option list to the Redux Store\r\n   * @param {any} optionObject - the option object to be processed\r\n   */\r\n  private setOptionList = (optionObject: any) => {\r\n    const tempObjArray: any = [];\r\n    optionObject.map((elem: { name: any; label: any }) => {\r\n      const elemObj: any = {};\r\n      const name: string = 'name';\r\n      const label: string = 'label';\r\n      elemObj[name] = elem.name;\r\n      elemObj[label] = elem.label;\r\n      tempObjArray.push(elemObj);\r\n    });\r\n\r\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\r\n      this.props.assignOptionListActionCreator(\r\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n        tempObjArray\r\n      );\r\n    }\r\n  };\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} values - the onchange input values\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandler = (fieldName: any) => (values: any) => {\r\n    const selectedValues: any = [];\r\n    let i = 0;\r\n    if (values && values.length > 0) {\r\n      values.map(() => {\r\n        if (!selectedValues.includes(values[i].value)) {\r\n          selectedValues.push(values[i].value);\r\n        }\r\n        i++;\r\n      });\r\n\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + fieldName,\r\n        selectedValues\r\n      );\r\n    } else {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + fieldName,\r\n        null\r\n      );\r\n    }\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const finalRes: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n\r\n        let filterResult: any = [];\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n\r\n        let j = 0;\r\n        filterResult.map(() => {\r\n          options.map(option => {\r\n            if (option[nameOfKey] === filterResult[j]) {\r\n              finalRes.push(option);\r\n            }\r\n          });\r\n          j = j + 1;\r\n        });\r\n\r\n        i = i + 2;\r\n      }\r\n\r\n      options = [...Array.from(new Set(finalRes))];\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string[];\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Dropdown component to the redux store */\r\nconst ConnectedSelectAllDropDown = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectAllDropDown);\r\n\r\nexport default ConnectedSelectAllDropDown;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectAll Radio component */\r\nexport interface SelectAllRadioProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n  optionList: object;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectAllRadio extends React.Component<SelectAllRadioProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== [] &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      let options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      const childrenArray: any = [];\r\n      if (fieldElement.children) {\r\n        fieldElement.children.map(elem => {\r\n          const elemObj: any = {};\r\n          const name: string = 'name';\r\n          const label: string = 'label';\r\n          elemObj[name] = elem.name;\r\n          elemObj[label] = elem.label;\r\n          childrenArray.push(elemObj);\r\n        });\r\n      }\r\n\r\n      let values: any = [];\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        values = [];\r\n        options = [];\r\n        const tmpValueArray: any = [];\r\n        let isNotIncluded: boolean = false;\r\n\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n\r\n        if (fieldValue && fieldValue.length > 0) {\r\n          const optionsValueArray: any = [];\r\n          options.map(elem => {\r\n            if (elem.value) {\r\n              optionsValueArray.push(elem.value);\r\n            }\r\n          });\r\n\r\n          for (const row of fieldValue) {\r\n            if (!optionsValueArray.includes(row)) {\r\n              isNotIncluded = true;\r\n            } else {\r\n              tmpValueArray.push(row);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            tmpValueArray || []\r\n          );\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            resultOptions\r\n          );\r\n        }\r\n        values = [...resultOptions];\r\n      } else if (fieldElement.itemset) {\r\n        values = [];\r\n        options = [];\r\n        const tmpValueArray: any = [];\r\n        const optionsArray: any = [];\r\n        let isNotIncluded: boolean = false;\r\n\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0) {\r\n          const optionsValueArray: any = [];\r\n          options.map((elem: any) => {\r\n            if (elem.value) {\r\n              optionsValueArray.push(elem.value);\r\n            }\r\n          });\r\n\r\n          for (const row of fieldValue) {\r\n            if (!optionsValueArray.includes(row)) {\r\n              isNotIncluded = true;\r\n            } else {\r\n              tmpValueArray.push(row);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            tmpValueArray || []\r\n          );\r\n        }\r\n\r\n        if (options) {\r\n          options.map(elem => {\r\n            const elemObj: any = {};\r\n            const name: string = 'name';\r\n            const label: string = 'label';\r\n            elemObj[name] = elem.value;\r\n            elemObj[label] = elem.label;\r\n            optionsArray.push(elemObj);\r\n          });\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...optionsArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            optionsArray\r\n          );\r\n        }\r\n\r\n        values = [...optionsArray];\r\n      } else {\r\n        values = [];\r\n        options = [];\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem =>\r\n            options.push({ label: elem.label, value: elem.name })\r\n          );\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            childrenArray\r\n          );\r\n        }\r\n        values = [...childrenArray];\r\n      }\r\n\r\n      const selectedValues: any[] = [];\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        options.map(elem => {\r\n          for (const row of fieldValue) {\r\n            if (elem.value === row) {\r\n              selectedValues.push(elem.value);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      let flagInline = false;\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\r\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\r\n            flagInline = true;\r\n          }\r\n        });\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        const seperatedValues: string[] = fieldValue.split(' ');\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          seperatedValues\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <div>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Form key=\"selectAll\">\r\n            {values.map((elem: any, index: any) => (\r\n              <FormGroup key={index} check={true} inline={flagInline}>\r\n                <Label check={true}>\r\n                  <Input\r\n                    key={fieldElement.name + '-' + index}\r\n                    type=\"checkbox\"\r\n                    name={fieldElement.name}\r\n                    value={elem.name || []}\r\n                    onChange={this.onChangeHandlerCheckBox}\r\n                    readOnly={isReadonly}\r\n                    checked={selectedValues.includes(elem.name)}\r\n                  />{' '}\r\n                  {getFieldLabelText(elem, defaultLanguage)}\r\n                </Label>\r\n              </FormGroup>\r\n            ))}\r\n          </Form>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n\r\n      if (this.props.optionList != null) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} event - the onchange event\r\n   */\r\n\r\n  private onChangeHandlerCheckBox = (event: any) => {\r\n    const { fieldValue, fieldElement, fieldParentTreeName } = this.props;\r\n    const fieldName = fieldParentTreeName + fieldElement.name;\r\n    if (event.target.checked) {\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length > 0 &&\r\n        !fieldValue.includes(event.target.value)\r\n      ) {\r\n        this.props.assignFieldValueActionCreator(fieldName, [\r\n          ...fieldValue,\r\n          event.target.value,\r\n        ]);\r\n      } else {\r\n        this.props.assignFieldValueActionCreator(fieldName, [\r\n          event.target.value,\r\n        ]);\r\n      }\r\n    } else {\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length > 0 &&\r\n        fieldValue.includes(event.target.value)\r\n      ) {\r\n        const newValue = fieldValue.filter(\r\n          (elm: any) => elm !== event.target.value\r\n        );\r\n\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldName,\r\n          newValue.length ? newValue : null\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const finalRes: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n\r\n        let filterResult: any = [];\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n\r\n        let j = 0;\r\n        filterResult.map(() => {\r\n          options.map(option => {\r\n            if (option[nameOfKey] === filterResult[j]) {\r\n              finalRes.push(option);\r\n            }\r\n          });\r\n          j = j + 1;\r\n        });\r\n\r\n        i = i + 2;\r\n      }\r\n\r\n      options = [...Array.from(new Set(finalRes))];\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string[];\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Radio component to the redux store */\r\nconst ConnectedSelectAllRadio = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectAllRadio);\r\n\r\nexport default ConnectedSelectAllRadio;\r\n","import * as React from 'react';\r\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport Dropdown from './Dropdown';\r\nimport Radio from './Radio';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectAllProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass SelectAll extends React.Component<SelectAllProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (shouldComponentBeMinimal(fieldElement)) {\r\n      return <Dropdown {...this.props} />;\r\n    }\r\n    return <Radio {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default SelectAll;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from 'react-select';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneDropDownProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectOneDropDown extends React.Component<SelectOneDropDownProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      const options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n\r\n        this.setOptionList(resultOptions);\r\n      } else if (fieldElement.itemset) {\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n          this.setOptionList(choices[fieldElement.itemset.trim()]);\r\n        }\r\n      } else {\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem => {\r\n            const childrenLabel: string = getFieldLabelText(\r\n              elem,\r\n              defaultLanguage\r\n            );\r\n            options.push({ label: childrenLabel, value: elem.name });\r\n          });\r\n\r\n          this.setOptionList(fieldElement.children);\r\n        }\r\n      }\r\n\r\n      if (fieldValue) {\r\n        const optionsValueArray: any = [];\r\n        options.map(elem => {\r\n          if (elem.value) {\r\n            optionsValueArray.push(elem.value);\r\n          }\r\n        });\r\n\r\n        if (!optionsValueArray.includes(fieldValue)) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            ''\r\n          );\r\n        }\r\n      }\r\n\r\n      let selectedValue: any;\r\n      options.map(elem => {\r\n        if (elem.value === fieldValue) {\r\n          selectedValue = elem;\r\n        }\r\n      });\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <div key={fieldElement.name} className=\"selectOneDropDown\">\r\n            <Select\r\n              multi={false}\r\n              name={fieldElement.name}\r\n              options={options}\r\n              value={selectedValue || ''}\r\n              onChange={this.onChangeHandler(fieldElement.name)}\r\n            />\r\n          </div>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** Sets the option list to the Redux Store\r\n   * @param {any} optionObject - the option object to be processed\r\n   */\r\n  private setOptionList = (optionObject: any) => {\r\n    const tempObjArray: any = [];\r\n    optionObject.map((elem: { name: any; label: any }) => {\r\n      const elemObj: any = {};\r\n      const name: string = 'name';\r\n      const label: string = 'label';\r\n      elemObj[name] = elem.name;\r\n      elemObj[label] = elem.label;\r\n      tempObjArray.push(elemObj);\r\n    });\r\n\r\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\r\n      this.props.assignOptionListActionCreator(\r\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n        tempObjArray\r\n      );\r\n    }\r\n  };\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} event - the onchange input event\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandler = (fieldName: any) => (event: any) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + fieldName,\r\n      event.value || ''\r\n    );\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n        let filterResult: any = '';\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n        options = options.filter(option => option[nameOfKey] === filterResult);\r\n        i = i + 2;\r\n      }\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne component to the redux store */\r\nconst ConnectedSelectOneDropDown = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectOneDropDown);\r\n\r\nexport default ConnectedSelectOneDropDown;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneRadioProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectOneRadio extends React.Component<SelectOneRadioProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        if (/search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)) {\r\n          const processedStringArray = fieldElement.control.appearance.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      const childrenArray: any = [];\r\n      if (fieldElement.children) {\r\n        fieldElement.children.map(elem => {\r\n          const elemObj: any = {};\r\n          const name: string = 'name';\r\n          const label: string = 'label';\r\n          elemObj[name] = elem.name;\r\n          elemObj[label] = elem.label;\r\n          childrenArray.push(elemObj);\r\n        });\r\n      }\r\n\r\n      let values: any = [];\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        values = [];\r\n        if (fieldValue) {\r\n          const optionsValueArray: any = [];\r\n          resultOptions.map(elem => {\r\n            if (elem.name) {\r\n              optionsValueArray.push(elem.name);\r\n            }\r\n          });\r\n\r\n          if (!optionsValueArray.includes(fieldValue)) {\r\n            this.props.assignFieldValueActionCreator(\r\n              this.props.fieldParentTreeName + fieldElement.name,\r\n              ''\r\n            );\r\n          }\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            resultOptions\r\n          );\r\n        }\r\n        values = [...resultOptions];\r\n      } else if (fieldElement.itemset) {\r\n        const choiceOptions: any = [];\r\n        values = [];\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              choiceOptions.push({ label: childrenLabel, name: elem.name });\r\n            }\r\n          });\r\n\r\n          if (fieldValue) {\r\n            const optionsValueArray: any = [];\r\n            choiceOptions.map((elem: any) => {\r\n              if (elem.name) {\r\n                optionsValueArray.push(elem.name);\r\n              }\r\n            });\r\n            if (!optionsValueArray.includes(fieldValue)) {\r\n              this.props.assignFieldValueActionCreator(\r\n                this.props.fieldParentTreeName + fieldElement.name,\r\n                ''\r\n              );\r\n            }\r\n          }\r\n          if (!_.isEqual(this.props.optionList, { ...choiceOptions })) {\r\n            this.props.assignOptionListActionCreator(\r\n              this.props.fieldParentTreeName + fieldElement.name,\r\n              choiceOptions\r\n            );\r\n          }\r\n          values = [...choiceOptions];\r\n        }\r\n      } else {\r\n        values = [];\r\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            childrenArray\r\n          );\r\n        }\r\n        values = [...childrenArray];\r\n      }\r\n\r\n      let flagInline = false;\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\r\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\r\n            flagInline = true;\r\n          }\r\n        });\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <div>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Form key=\"selectOne\">\r\n            {values.map((elem: any, index: any) => (\r\n              <FormGroup key={index} check={true} inline={flagInline}>\r\n                <Label check={true}>\r\n                  <Input\r\n                    key={fieldElement.name + '-' + index}\r\n                    type=\"radio\"\r\n                    name={fieldElement.name}\r\n                    value={elem.name}\r\n                    onChange={this.onChangeHandlerRadio(fieldElement.name)}\r\n                    readOnly={isReadonly}\r\n                    checked={elem.name === fieldValue}\r\n                  />{' '}\r\n                  {getFieldLabelText(elem, defaultLanguage)}\r\n                </Label>\r\n              </FormGroup>\r\n            ))}\r\n          </Form>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n  /** sets the value of Radio Button field element in store\r\n   * @param {any} event - the onchange input event\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandlerRadio = (fieldName: any) => (event: any) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + fieldName,\r\n      event.target.value || ''\r\n    );\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique radio button options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n        let filterResult: any = '';\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n        options = options.filter(option => option[nameOfKey] === filterResult);\r\n        i = i + 2;\r\n      }\r\n    }\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Radio component to the redux store */\r\nconst ConnectedSelectOneRadio = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectOneRadio);\r\n\r\nexport default ConnectedSelectOneRadio;\r\n","import * as React from 'react';\r\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport Dropdown from './Dropdown';\r\nimport Radio from './Radio';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass SelectOne extends React.Component<SelectOneProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (shouldComponentBeMinimal(fieldElement)) {\r\n      return <Dropdown {...this.props} />;\r\n    }\r\n    return <Radio {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default SelectOne;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the text component */\r\nexport interface TextProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isPresentInErrorSelector: any;\r\n  isComponentRender: boolean;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface TextState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\n\r\nclass Text extends React.Component<TextProps, TextState> {\r\n  constructor(props: TextProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (calculatedValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n\r\n        return (\r\n          <FormGroup>\r\n            <Label>\r\n              {modifiedFieldLabel}{' '}\r\n              {isRequired && (\r\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n              )}\r\n            </Label>\r\n            <Input\r\n              type=\"text\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              onBlur={this.onBlurHandler}\r\n              value={\r\n                this.state.isFocused\r\n                  ? this.state.fieldValue || ''\r\n                  : calculatedValue || ''\r\n              }\r\n              readOnly={isReadonly}\r\n            />\r\n            {isFormSubmitted && isError && (\r\n              <FontAwesomeIcon\r\n                icon=\"exclamation-circle\"\r\n                className=\"errorSign\"\r\n              />\r\n            )}\r\n            {fieldElement.hint && (\r\n              <Label className=\"hintText\">{hintLabel}</Label>\r\n            )}\r\n            {isFormSubmitted && isRequiredViolated && (\r\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n            )}\r\n            {isConstraintViolated && (\r\n              <Label className=\"constraintText\">\r\n                {modifiedConstraintLabel}\r\n              </Label>\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      } else {\r\n        return (\r\n          <FormGroup>\r\n            <Label>\r\n              {modifiedFieldLabel}{' '}\r\n              {isRequired && (\r\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n              )}\r\n            </Label>\r\n            <Input\r\n              type=\"text\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              onBlur={this.onBlurHandler}\r\n              value={\r\n                this.state.isFocused\r\n                  ? this.state.fieldValue || ''\r\n                  : fieldValue || ''\r\n              }\r\n              readOnly={isReadonly}\r\n            />\r\n            {isFormSubmitted && isError && (\r\n              <FontAwesomeIcon\r\n                icon=\"exclamation-circle\"\r\n                className=\"errorSign\"\r\n              />\r\n            )}\r\n            {fieldElement.hint && (\r\n              <Label className=\"hintText\">{hintLabel}</Label>\r\n            )}\r\n            {isFormSubmitted && isRequiredViolated && (\r\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n            )}\r\n            {isConstraintViolated && (\r\n              <Label className=\"constraintText\">\r\n                {modifiedConstraintLabel}\r\n              </Label>\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      }\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value || ''\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Text component to the redux store */\r\nconst ConnectedText = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Text);\r\n\r\nexport default ConnectedText;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the KbTime component */\r\nexport interface TimeProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass KbTime extends React.Component<TimeProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"time\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            value={fieldValue || ''}\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== '' ? event.currentTarget.value : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect KbTime component to the redux store */\r\nconst ConnectedTime = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(KbTime);\r\n\r\nexport default ConnectedTime;\r\n","import * as React from 'react';\r\nimport {\r\n  CALCULATE_FIELD_TYPE,\r\n  DATE_FIELD_TYPE,\r\n  DATE_TIME_FIELD_TYPE,\r\n  DECIMAL_FIELD_TYPE,\r\n  FILE_FIELD_TYPE,\r\n  INTEGER_FIELD_TYPE,\r\n  NOTE_FIELD_TYPE,\r\n  PHOTO_FIELD_TYPE,\r\n  SELECT_ALL_FIELD_TYPE,\r\n  SELECT_ONE_FIELD_TYPE,\r\n  TEXT_FIELD_TYPE,\r\n  TIME_FIELD_TYPE,\r\n} from '../../../constants';\r\nimport Calculate from '../../../containers/fields/base/Calculate';\r\nimport KbDate from '../../../containers/fields/base/Date';\r\nimport DateTime from '../../../containers/fields/base/Date Time';\r\nimport Decimal from '../../../containers/fields/base/Decimal';\r\nimport File from '../../../containers/fields/base/File';\r\nimport Integer from '../../../containers/fields/base/Integer';\r\nimport Note from '../../../containers/fields/base/Note';\r\nimport SelectAll from '../../../containers/fields/base/Select All';\r\nimport SelectOne from '../../../containers/fields/base/Select One';\r\nimport Text from '../../../containers/fields/base/Text';\r\nimport KbTime from '../../../containers/fields/base/Time';\r\n\r\n/** type of fieldParentTreeName */\r\nexport type FieldParentTreeName = string;\r\n\r\n/** interface for bind property */\r\ninterface BindProperty {\r\n  calculate?: string;\r\n  relevant?: string;\r\n  readonly?: string;\r\n  appearance?: string;\r\n  required?: string;\r\n  constraint?: string;\r\n  'jr:constraintMsg'?: { [key: string]: string } | string;\r\n}\r\n\r\n/** interface for kobo field element */\r\nexport interface FieldElement {\r\n  name: string;\r\n  type: string;\r\n  children?: any[];\r\n  bind?: BindProperty;\r\n  label?: { [key: string]: string } | string;\r\n  default?: any;\r\n  control?: any;\r\n  hint?: any;\r\n  itemset?: string;\r\n  choice_filter?: string;\r\n}\r\n\r\n/** props interface for BaseTypeEvaluator component */\r\nexport interface BaseTypeEvaluatorProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\nclass BaseTypeEvaluator extends React.Component<BaseTypeEvaluatorProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    return this.typeEvaluator(\r\n      choices,\r\n      csvList,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage\r\n    );\r\n  }\r\n\r\n  /** returns jsx components based on field types\r\n   * @param {any} choices - the choices of form definition\r\n   * @param {FieldElement} fieldElement - the field element object\r\n   * @param {FieldParentTreeName} fieldParentTreeName - the field parent hierchical name\r\n   * @return {React.ReactElement} - jsx base components\r\n   */\r\n  private typeEvaluator(\r\n    choices: any,\r\n    csvList: any,\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: FieldParentTreeName,\r\n    defaultLanguage: string\r\n  ): React.ReactElement {\r\n    switch (fieldElement.type) {\r\n      case TEXT_FIELD_TYPE:\r\n        return (\r\n          <Text\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DATE_FIELD_TYPE:\r\n        return (\r\n          <KbDate\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case TIME_FIELD_TYPE:\r\n        return (\r\n          <KbTime\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DATE_TIME_FIELD_TYPE:\r\n        return (\r\n          <DateTime\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case INTEGER_FIELD_TYPE:\r\n        return (\r\n          <Integer\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DECIMAL_FIELD_TYPE:\r\n        return (\r\n          <Decimal\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case NOTE_FIELD_TYPE:\r\n        return (\r\n          <Note\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case CALCULATE_FIELD_TYPE:\r\n        return (\r\n          <Calculate\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case SELECT_ONE_FIELD_TYPE:\r\n        return (\r\n          <SelectOne\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n      case SELECT_ALL_FIELD_TYPE:\r\n        return (\r\n          <SelectAll\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n      case PHOTO_FIELD_TYPE:\r\n        return (\r\n          <File\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case FILE_FIELD_TYPE:\r\n        return (\r\n          <File\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <div style={{ display: 'none' }}>\r\n            Other {fieldElement.type} {fieldElement.name}\r\n          </div>\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nexport default BaseTypeEvaluator;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport { GROUP_FIELD_TYPE, REPEAT_FIELD_TYPE } from '../../../constants';\r\nimport Group from '../../../containers/fields/group/Group';\r\nimport Repeat from '../../../containers/fields/group/Repeat';\r\nimport { getEvaluatedExpression } from '../../../store/ducks/formState';\r\nimport { shouldComponentBeRelevant } from '../../../utils/helpers';\r\nimport BaseTypeEvaluator, { FieldElement, FieldParentTreeName } from '../Base';\r\n\r\n/** props Interface for the GroupTypeEvaluator component */\r\nexport interface GroupTypeEvaluatorProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElements: FieldElement[];\r\n  fieldParentTreeName: string;\r\n  isAppearanceApplicable: boolean;\r\n  getEvaluatedExpressionSelector: any;\r\n}\r\n\r\nclass GroupTypeEvaluator extends React.Component<GroupTypeEvaluatorProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldElements,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isAppearanceApplicable,\r\n    } = this.props;\r\n    return (\r\n      <Row className={'groupTypeEvaluatorRow'}>\r\n        {fieldElements.map(fieldElement => {\r\n          const value: number = this.getAppearanceValue(\r\n            fieldElement,\r\n            fieldParentTreeName,\r\n            isAppearanceApplicable\r\n          );\r\n          return (\r\n            <Col\r\n              key={'group_' + fieldElement.name}\r\n              className={'groupTypeEvaluator'}\r\n              md={value}\r\n              hidden={value === 0 ? true : false}\r\n            >\r\n              {this.typeEvaluator(\r\n                choices,\r\n                csvList,\r\n                fieldElement,\r\n                fieldParentTreeName,\r\n                defaultLanguage\r\n              )}\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  /** returns jsx components based on field types\r\n   * @param {any} choices - the form choices\r\n   * @param {FieldElement} fieldElement - the field element object\r\n   * @param {FieldParentTreeName} - the field parent hierarchical name\r\n   * @return {React.ReactElement} - jsx group components/ base evaluator component\r\n   */\r\n  private typeEvaluator(\r\n    choices: any,\r\n    csvList: any,\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: FieldParentTreeName,\r\n    defaultLanguage: string\r\n  ): React.ReactElement {\r\n    switch (fieldElement.type) {\r\n      case GROUP_FIELD_TYPE:\r\n        return (\r\n          <div>\r\n            <Group\r\n              choices={choices}\r\n              fieldElement={fieldElement}\r\n              fieldParentTreeName={fieldParentTreeName}\r\n              defaultLanguage={defaultLanguage}\r\n              csvList={csvList}\r\n            />\r\n          </div>\r\n        );\r\n      case REPEAT_FIELD_TYPE:\r\n        return (\r\n          <div>\r\n            <Repeat\r\n              choices={choices}\r\n              fieldElement={fieldElement}\r\n              fieldParentTreeName={fieldParentTreeName}\r\n              defaultLanguage={defaultLanguage}\r\n              csvList={csvList}\r\n            />\r\n          </div>\r\n        );\r\n      default:\r\n        return (\r\n          <BaseTypeEvaluator\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n    }\r\n  }\r\n\r\n  private getAppearanceValue = (\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: string,\r\n    isAppearanceApplicable: boolean\r\n  ): number => {\r\n    const isRender: boolean = shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      this.props.getEvaluatedExpressionSelector\r\n    );\r\n\r\n    if (!isRender) {\r\n      return 0;\r\n    } else if (\r\n      isRender &&\r\n      isAppearanceApplicable &&\r\n      fieldElement.control &&\r\n      fieldElement.control.appearance\r\n    ) {\r\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n        const processedStringArray = fieldElement.control.appearance.match(\r\n          /^w(\\d+)\\b/i\r\n        );\r\n        const processedString = processedStringArray[0].replace('w', '');\r\n        const result = isNaN(processedString)\r\n          ? 12\r\n          : parseInt(processedString, 10);\r\n        return result;\r\n      }\r\n    }\r\n    return 12;\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  getEvaluatedExpressionSelector: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n\r\n  const result = {\r\n    getEvaluatedExpressionSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** connect GroupTypeEvaluator component to the redux store */\r\nconst ConnectedGroupTypeEvaluator = connect(mapStateToProps)(\r\n  GroupTypeEvaluator\r\n);\r\n\r\nexport default ConnectedGroupTypeEvaluator;\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n  faExclamationCircle,\r\n  faMinusCircle,\r\n  faPlusCircle,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Col, Container, Row } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport KbAlert from '../components/Alert';\r\nimport DropDown from '../components/DropDown';\r\nimport GroupTypeEvaluator from '../components/typeEvalutors/Group';\r\nimport {\r\n  getAllFileObjects,\r\n  getUserInputFromStore,\r\n  isErrorsArrayEmpty,\r\n  resetStoreAction,\r\n  setFormSubmitStatus,\r\n  setUserInputObj,\r\n} from '../store/ducks/formState';\r\n\r\nlibrary.add(faPlusCircle, faMinusCircle, faExclamationCircle);\r\n\r\nexport interface AppProps {\r\n  choices: any;\r\n  csvList: any;\r\n  isNoErrors: any;\r\n  userInputObj: any;\r\n  userInputJson: any;\r\n  defaultLanguage: string;\r\n  formTitle: string;\r\n  fieldElements: any;\r\n  setUserInputAction: typeof setUserInputObj;\r\n  languageOptions: any;\r\n  setFormSubmitStatusAction: typeof setFormSubmitStatus;\r\n  resetStoreActionCreator: typeof resetStoreAction;\r\n  mediaList: any;\r\n  handleSubmit(userInput: any, mediaList: any): any;\r\n}\r\n\r\nexport interface AppState {\r\n  defaultLanguage: string;\r\n  isSubmissionError: boolean;\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    const { userInputJson, userInputObj } = this.props;\r\n    this.props.resetStoreActionCreator();\r\n    if (userInputJson && userInputJson !== userInputObj) {\r\n      this.props.setUserInputAction(userInputJson);\r\n    }\r\n    this.setState({\r\n      defaultLanguage: this.props.defaultLanguage,\r\n      isSubmissionError: false,\r\n    });\r\n  }\r\n\r\n  public handleSelect = (languageName: string) => {\r\n    this.setState({ defaultLanguage: languageName });\r\n  };\r\n\r\n  public render() {\r\n    const {\r\n      csvList,\r\n      fieldElements,\r\n      formTitle,\r\n      languageOptions,\r\n      choices,\r\n    } = this.props;\r\n    const { defaultLanguage } = this.state || this.props;\r\n\r\n    const props = {\r\n      choices,\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElements,\r\n      fieldParentTreeName: '',\r\n      isAppearanceApplicable: false,\r\n      languageOptions,\r\n    };\r\n\r\n    return (\r\n      <Container className=\"form-container\">\r\n        <Row className={'form-title formTitle'}>\r\n          <Col>\r\n            <h3 className=\"headerText\">{formTitle}</h3>\r\n          </Col>\r\n          <DropDown\r\n            languages={...languageOptions}\r\n            onChangeSelect={this.handleSelect}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        </Row>\r\n        {this.state && this.state.isSubmissionError && (\r\n          <KbAlert\r\n            color={'danger'}\r\n            isOpen={this.state.isSubmissionError}\r\n            handleToggle={this.toggleStateValue}\r\n            headerText={'Oh snap! You got an error!'}\r\n            bodyText={\r\n              'Please make sure the required fields are not missing and there are no errors'\r\n            }\r\n          />\r\n        )}\r\n        <Row className=\"formFieldBody\">\r\n          <Col>\r\n            <GroupTypeEvaluator {...props} />\r\n            <Row className=\"welcome-box\">\r\n              <Col>\r\n                <Button className=\"btn btn-success\" onClick={this.handleClick}>\r\n                  Submit\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private handleClick = (_event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const { handleSubmit, isNoErrors, userInputObj, mediaList } = this.props;\r\n    if (isNoErrors) {\r\n      this.setState({ isSubmissionError: true });\r\n      handleSubmit(userInputObj, mediaList);\r\n    } else {\r\n      handleSubmit('Field Violated', mediaList);\r\n      this.setState({ isSubmissionError: true });\r\n      this.props.setFormSubmitStatusAction(true);\r\n      window.scrollTo(0, 0);\r\n    }\r\n  };\r\n\r\n  private toggleStateValue = () => {\r\n    this.setState({ isSubmissionError: false });\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  isNoErrors: any;\r\n  userInputObj: any;\r\n  mediaList: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\r\n  const result = {\r\n    isNoErrors: isErrorsArrayEmpty(state),\r\n    mediaList: getAllFileObjects(state),\r\n    userInputObj: getUserInputFromStore(state),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  resetStoreActionCreator: resetStoreAction,\r\n  setFormSubmitStatusAction: setFormSubmitStatus,\r\n  setUserInputAction: setUserInputObj,\r\n};\r\n\r\n/** connect Decimal component to the redux store */\r\nconst ConnectedApp = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n\r\nexport default ConnectedApp;\r\n","import { createStore, Store } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer, { FormState } from './ducks/formState';\r\n\r\n/** The initial store */\r\nconst store: Store & FormState = createStore(reducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nexport interface OdkFormRendererProps {\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  formDefinitionJson: any;\r\n  languageOptions: any;\r\n  userInputJson: any;\r\n  handleSubmit: (userInput: any, mediaList: any) => any;\r\n}\r\n\r\nclass OdkFormRenderer extends React.Component<OdkFormRendererProps> {\r\n  public render() {\r\n    const {\r\n      csvList,\r\n      defaultLanguage,\r\n      formDefinitionJson,\r\n      userInputJson,\r\n      languageOptions,\r\n      handleSubmit,\r\n    } = this.props;\r\n    const props = {\r\n      choices: formDefinitionJson.choices || {},\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElements: formDefinitionJson.children,\r\n      formTitle: formDefinitionJson.title,\r\n      handleSubmit,\r\n      languageOptions,\r\n      userInputJson,\r\n    };\r\n    return (\r\n      <Provider store={store}>\r\n        <App {...props} />\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OdkFormRenderer;\r\n"],"names":["actualExpression","KbAlert","render","this","props","bodyText","React","Alert","color","isOpen","toggle","handleToggle","className","headerText","DropDown","event","onChangeSelect","value","selectedValue","options","languages","map","elem","push","label","_this2","defaultLanguage","Select","multi","placeholder","onChange","onChangeHandler","REQUIRED_FIELD_MSG","currentHierarchicalName","formItemProperty","userInput","tokenizeCharacter","type","input","current","tokenizers","test","undefined","consumedChars","char","TypeError","matchQuote","pattern","tokenizePattern","kbSelected","funcName","params","_paramsTokens","tmp","Array","isArray","forEach","element","kbToday","_params","d","Date","setHours","kbRound","toFixed","parseFloat","kbRegex","RegExp","kbCountSelected","length","kbInt","parseInt","kbCoalesce","kbPosition","tmpName","split","kbSum","paramsTokens","sumValue","sumValuesOverJsn","sum","jsnObj","variableName","i","key","kbConcat","concatStr","kbSubstr","substring","outerScopedVariables","variableValue","tmpUserInput","nodeNames","parseMostClosestScopedVariable","tmpHierchicalName","parent","index","parseDot","path","getIn","parseLiterals","_tmpOutput","tokens","toLowerCase","parseFunction","_output","possibleFunctions","arrayOfParams","arrayOfOriginalTokens","tmpQueue","tmpTokens","pop","tmpVal","parser","parsedFn","parsedVal","functionFn","parseAnd","output","newOutput","parseParen","terminatingTokens","indexOf","parseDivide","parsed","ct","parseMinus","parserFn","consumedTokens","preOutput","preParsed","parseMultiply","preParseFn","Object","prototype","toString","call","isNaN","getTime","NaN","Math","ceil","parsers","j","flagLessThanOrEqual","flagGreaterThanOrEqual","leftOutput","pos","console","log","evaluater","expression","tmpFormItemProperty","tmpCurrentHierarchicalName","tokenized","tokenizerFn","token","tokenizer","getTextFromProperty","property","languageIdentifier","getFieldLabelText","fieldElement","getHintLabelText","hint","customizeLabelsWithPreviousInputs","evaluator","labelText","fieldTreeName","placesOfCustomizationsRequiredList","match","tmpPlace","customizedName","replace","matchList","getConstraintLabelText","bind","isInputRequired","isRequired","required","shouldComponentBeRelevant","fieldParentTreeName","evaluateExpression","relevant","name","shouldComponentBeReadOnly","readonly","shouldInputViolatesConstraint","constraint","getModifiedUserInputObject","userInputObj","fieldValue","treeNodes","modifiedObj","getValueFromUserInputObj","shouldComponentBeMinimal","isMinimal","control","appearance","includes","FIELD_VALUE_ASSIGNED","OPTION_LIST_ASSIGNED","MEDIA_LIST_ADDED","REMOVE_FROM_MEDIA_LIST","REMOVE_FROM_OPTION_LIST_REPEAT","RESET_STORE","ADD_ERROR_INPUT_ID","REMOVE_ERROR_INPUT_ID","EMPTY_GROUP_FIELDS","REMOVE_GROUP_FIELDS_FROM_ERRORS","SET_USER_INPUT_OBJ","SET_FORM_SUBMIT_STATUS","assignFieldValueAction","assignOptionListAction","optionList","RemoveFromOptionList","repeatIndex","addErrorInputId","removeErrorInputId","emptyGroupFields","removeGroupFieldsFromErrors","initialState","SeamlessImmutable","errors","isFormSubmitted","mediaList","reducer","state","action","modifiedUserInputObj","asMutable","deep","stateM","modifiedUserInputObjList","newState","filteredRepeatArray","hasOwnProperty","entries","keyValueOptionListobj","repeatIndexString","String","keyRepeat","getModifiedOptionListForRepeat","modifiedOptionListRepeat","newStateForRepeat","modifiedMediaList","mediaObject","newMediaState","updateIn","arr","concat","filter","elm","mUserInputObj","groupTreeName","keys","objKey","startsWith","emptyGroupedValues","mState","getFieldValue","getOptionList","getEvaluatedExpression","getEvaluatedExpressionForSelect","isPresentInError","isGroupFieldsEmpty","isEmpty","checkGroupedValuesForEmpty","isErrorsIncludeGroupFields","isPresent","fTName","isErrorsArrayEmpty","getUserInputFromStore","getFormSubmitStatus","getFileObject","fileName","getAllFileObjects","Group","choices","csvList","isComponentRender","fieldLabel","isAppearanceApplicable","FormGroup","Label","children","GroupTypeEvaluator","fieldElements","isErrorsIncludeGroupFieldsSelector","removeGroupFieldsFromErrorsActionCreator","isGroupFieldsEmptySelector","emptyGroupFieldsActionCreator","ConnectedGroup","connect","parentProps","getEvaluatedExpressionSelector","SingleRepeat","_event","_this","assignmentHandler","removeHandler","removeOptionHandler","newFieldValue","_elem","unControlFlag","onClick","handleChange","FontAwesomeIcon","icon","Component","ControlledRepeat","assignFieldValueActionCreator","removeOptionListFromActionCreator","_elm","addAnotherRepeat","ConnectedControlledRepeat","UncontrolledRepeat","noOfJrCount","res","removeFromError","_","size","assignOptionListActionCreator","iterate","slice","ConnectedUncontrolledRepeat","Repeat","Calculate","isPresentInErrorSelector","isRequiredViolated","isConstraintViolated","isReadonly","removeErrorInputIdActionCreator","addErrorInputIdActionCreator","calculatedValue","calculate","Input","readOnly","ConnectedCalculate","KbDate","currentTarget","getFormSubmitStatusSelector","modifiedFieldLabel","modifiedConstraintLabel","hintLabel","defaultValue","toISOString","isError","ConnectedDate","DateTime","modifiedDate","timeZoneOffset","getTimezoneOffset","getHours","DatePicker","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","placeholderText","ConnectedDateTime","Decimal","setState","isFocused","modifiedValue","step","onBlur","onBlurHandler","ConnectedDecimal","FilePreview","fieldName","Button","ConnectedFilePreview","fileObject","File","target","files","addMediaListActionCreator","accept","ConnectedFile","Integer","ConnectedInteger","Note","fieldHint","FormText","ConnectedNote","SelectAllDropDown","optionObject","tempObjArray","elemObj","isEqual","values","selectedValues","stringWithSearchKeyWord","resultArray","criteriaParams","splice","extractAndFilterOptions","csvName","criteriaType","filterCriterias","trim","distinctOptions","finalRes","modifiedName","nameOfKey","interConnectedValue","tempOptions","filterResult","getEvaluatedExpressionSelectorForSelect","option","from","Set","labelColumnName","valueColumnName","tmpOpt","uniqBy","resultOptions","updatedFieldElement","processedStringArray","getProcessedString","setOptionList","itemset","choice_filter","childrenLabel","optionsArray","tmpValueArray","isNotIncluded","optionsValueArray","row","seperatedValues","isMulti","ConnectedSelectAllDropDown","SelectAllRadio","checked","newValue","childrenArray","flagInline","tmpStyle","Form","check","inline","onChangeHandlerCheckBox","ConnectedSelectAllRadio","SelectAll","Dropdown","Radio","SelectOneDropDown","ConnectedSelectOneDropDown","SelectOneRadio","choiceOptions","onChangeHandlerRadio","ConnectedSelectOneRadio","SelectOne","Text","ConnectedText","KbTime","ConnectedTime","BaseTypeEvaluator","typeEvaluator","style","display","isRender","processedString","Row","getAppearanceValue","Col","md","hidden","ConnectedGroupTypeEvaluator","library","add","faPlusCircle","faMinusCircle","faExclamationCircle","App","languageName","handleSubmit","isNoErrors","isSubmissionError","setFormSubmitStatusAction","window","scrollTo","componentDidMount","userInputJson","resetStoreActionCreator","setUserInputAction","languageOptions","Container","formTitle","handleSelect","toggleStateValue","handleClick","ConnectedApp","store","createStore","composeWithDevTools","formDefinitionJson","Provider","title"],"mappings":"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"}