{"version":3,"file":"odkformrenderer.cjs.production.min.js","sources":["../src/utils/Theme.ts","../src/utils/compiler.ts","../src/components/Alert/index.tsx","../src/components/DropDown/index.tsx","../src/constants.tsx","../src/store/index.tsx","../src/utils/helpers.ts","../src/store/ducks/formState.ts","../src/containers/fields/group/Group/styles.ts","../src/containers/fields/group/Group/index.tsx","../src/containers/fields/group/Repeat/Single Repeat/index.tsx","../src/containers/fields/group/Repeat/Controlled Repeat/index.tsx","../src/containers/fields/group/Repeat/Uncontrolled Repeat/index.tsx","../src/containers/fields/group/Repeat/index.tsx","../src/containers/fields/base/Calculate/index.tsx","../src/containers/fields/base/Date/index.tsx","../src/containers/fields/base/Date Time/index.tsx","../src/containers/fields/base/Decimal/index.tsx","../src/containers/fields/base/File/FilePreview/FilePreview.tsx","../src/containers/fields/base/File/index.tsx","../src/containers/fields/base/Integer/index.tsx","../src/containers/fields/base/Note/index.tsx","../src/containers/fields/base/Select All/Dropdown/index.tsx","../src/containers/fields/base/Select All/Radio/index.tsx","../src/containers/fields/base/Select All/index.tsx","../src/containers/fields/base/Select One/Dropdown/index.tsx","../src/containers/fields/base/Select One/Radio/index.tsx","../src/containers/fields/base/Select One/index.tsx","../src/containers/fields/base/Text/index.tsx","../src/containers/fields/base/Time/index.tsx","../src/components/typeEvalutors/Base/index.tsx","../src/components/typeEvalutors/Group/index.tsx","../src/App/index.tsx","../src/index.tsx"],"sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#EF6B73',\r\n      dark: '#BF4A51',\r\n    },\r\n    secondary: {\r\n      main: '#D2AB16',\r\n      light: '#EBFDED',\r\n      dark: '#AD8C0F',\r\n    },\r\n    // error: {\r\n    //   main: '#f44336',\r\n    // },\r\n    // warning: {\r\n    //   main: '#ff9800',\r\n    // },\r\n    //table stripe\r\n    info: {\r\n      dark: '#F5F4F4',\r\n      main: '#EBFDED',\r\n      light: '#F9F9F9',\r\n    },\r\n    // success: {\r\n    //   main: '#4caf50',\r\n    // },\r\n    text: {\r\n      primary: '#EBFDED',\r\n      secondary: '#000000',\r\n      disabled: 'rgba(0, 0, 0, 0.38)',\r\n      hint: 'rgba(0, 0, 0, 0.38)',\r\n    },\r\n    // divider: 'rgba(0, 0, 0, 0.12)',\r\n    // background: {\r\n    //   paper: '#fff',\r\n    //   default: '#fff',\r\n    // },\r\n    // action: {\r\n    //   active: '#EEEEEE',\r\n    //   hover: '#888888',\r\n    //   hoverOpacity: 0.04,\r\n    //   selected: '#FFFFFF',\r\n    //   disabled: '#666666',\r\n    // },\r\n  },\r\n  typography: {\r\n    h1: {\r\n      fontWeight: 700,\r\n      // lineHeight: 0.35,\r\n      fontSize: 30,\r\n      // color: '#FFFFFF',\r\n    },\r\n    h2: {\r\n      fontWeight: 500,\r\n      fontSize: 20,\r\n      // lineHeight: 0.23,\r\n    },\r\n    h3: {\r\n      fontWeight: 400,\r\n      fontSize: 18,\r\n      // lineHeight: 0.21,\r\n      // color: '#FFFFFF',\r\n    },\r\n    h4: {\r\n      fontWeight: 700,\r\n      // lineHeight: 0.35,\r\n      fontSize: 26,\r\n    },\r\n    body1: {\r\n      fontFamily: 'Roboto',\r\n      fontWeight: 400,\r\n      // lineHeight: 1.18,\r\n      fontSize: 16,\r\n    },\r\n    caption: {\r\n      fontFamily: 'Roboto',\r\n      fontWeight: 600,\r\n      // lineHeight: 0.18,\r\n      fontSize: 16,\r\n    },\r\n    subtitle1: {\r\n      fontFamily: 'Roboto',\r\n      fontWeight: 400,\r\n      // lineHeight: 0.18,\r\n      fontSize: 16,\r\n    },\r\n    subtitle2: {\r\n      fontFamily: 'Roboto',\r\n      fontWeight: 500,\r\n      // lineHeight: 0.18,\r\n      fontSize: 16,\r\n    },\r\n  },\r\n  //menu\r\n  overrides: {\r\n    MuiPaper: {\r\n      root: {\r\n        color: '#222222 !important',\r\n      },\r\n    },\r\n  },\r\n});\r\n","// import moment from 'moment';\r\nimport moment from 'moment';\r\nimport store from '../store';\r\n\r\nlet actualExpression: string;\r\nlet currentHierarchicalName: string = '';\r\nlet formItemProperty: any = {};\r\nlet userInput: any = {};\r\n\r\n/**\r\n * tokenizeCharacter is a type of util method\r\n * @param {any} type - the type that will be returned if matches\r\n * @param {any} value - the actual value of the tokenize character\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeCharacter(type: any, value: any, input: any, current: any) {\r\n  return value === input[current] ? [1, { type, value }] : [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeParenOpen returns tokenizeReturnObject for character (\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeParenOpen(input: any, current: any) {\r\n  return tokenizeCharacter('paren', '(', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeBrakeOpen returns tokenizeReturnObject for character [\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeBrakeOpen(input: any, current: any) {\r\n  return tokenizeCharacter('brac', '[', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeBrakeClose returns tokenizeReturnObject for character ]\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeBrakeClose(input: any, current: any) {\r\n  return tokenizeCharacter('brac', ']', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeParenClose returns tokenizeReturnObject for character )\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeParenClose(input: any, current: any) {\r\n  return tokenizeCharacter('paren', ')', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeEqual returns tokenizeReturnObject for character =\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeEqual(input: any, current: any) {\r\n  return tokenizeCharacter('equal', '=', input, current);\r\n}\r\n\r\n/**\r\n * tokenizePlus returns tokenizeReturnObject for character +\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizePlus(input: any, current: any) {\r\n  return tokenizeCharacter('plus', '+', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeMinus returns tokenizeReturnObject for character -\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeMinus(input: any, current: any) {\r\n  return tokenizeCharacter('minus', '-', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeMultiply returns tokenizeReturnObject for character *\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeMultiply(input: any, current: any) {\r\n  return tokenizeCharacter('multiply', '*', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeDivide returns tokenizeReturnObject for character /\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeDivide(input: any, current: any) {\r\n  return tokenizeCharacter('divide', '/', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeLessThan returns tokenizeReturnObject for character <\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeLessThan(input: any, current: any) {\r\n  return tokenizeCharacter('lessThan', '<', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeGreaterThan returns tokenizeReturnObject for character >\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeGreaterThan(input: any, current: any) {\r\n  return tokenizeCharacter('greaterThan', '>', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeNot returns tokenizeReturnObject for character !\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeNot(input: any, current: any) {\r\n  if (input[current] == '!') {\r\n    return tokenizeCharacter('not', '!', input, current);\r\n  } else if (input[current] == 'n') {\r\n    if (\r\n      input[current + 1] &&\r\n      input[current + 1] == 'o' &&\r\n      (input[current + 2] && input[current + 2] == 't')\r\n    ) {\r\n      const type = 'not';\r\n      const value = '!';\r\n      return [3, { type, value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeComma returns tokenizeReturnObject for character ,\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeComma(input: any, current: any) {\r\n  return tokenizeCharacter('comma', ',', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeDot returns tokenizeReturnObject for character .\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeDot(input: any, current: any) {\r\n  return tokenizeCharacter('dot', '.', input, current);\r\n}\r\n\r\n/**\r\n * tokenizePattern is a type of util method\r\n * @param {any} type - the type that will be returned if matches\r\n * @param {any} pattern - the pattern that will be matched for tokenization\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizePattern(type: any, pattern: any, input: any, current: any) {\r\n  let char = input[current];\r\n  let consumedChars = 0;\r\n  if (pattern.test(char)) {\r\n    let value = '';\r\n    while (char && pattern.test(char)) {\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    return [consumedChars, { type, value }];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeString returns tokenizeReturnObject for strings. example: 'abc12' , \"test1\", \"afgkj dafgk\"\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeString(input: any, current: any) {\r\n  if (input[current] === '\"' || input[current] === \"'\") {\r\n    const matchQuote = input[current];\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    consumedChars += 1;\r\n    let char = input[current + consumedChars];\r\n    while (char !== matchQuote) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    return [consumedChars + 1, { type: 'string', value }];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeFunction returns tokenizeReturnObject for functions. Example: round( , substring(\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject; value contains function name if matched\r\n */\r\nfunction tokenizeFunction(input: any, current: any) {\r\n  if (/[a-z_]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (char && /[:a-z0-9_-]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    while (char && /\\s/.test(char)) {\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if (value == 'not') {\r\n      return [0, null];\r\n    }\r\n    if (char && char === '(') {\r\n      return [consumedChars, { type: 'function', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeNumber returns tokenizeReturnObject for discrete numbers. Example: 123 , 02113\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeNumber(input: any, current: any) {\r\n  if (/[0-9]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (/[0-9]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if (char !== '.') {\r\n      return [consumedChars, { type: 'number', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeDecimal returns tokenizeReturnObject for decimal numbers. Example: 12.3 , 0.2113\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeDecimal(input: any, current: any) {\r\n  if (/[0-9.]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (/[0-9]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if (char === '.') {\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n      if (/[0-9]/i.test(char)) {\r\n        while (/[0-9]/i.test(char)) {\r\n          if (char === undefined) {\r\n            throw new TypeError('unterminated string ');\r\n          }\r\n          value += char;\r\n          consumedChars += 1;\r\n          char = input[current + consumedChars];\r\n        }\r\n        return [consumedChars, { type: 'decimal', value }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeVariable returns tokenizeReturnObject for variables. Example syntax: ${Iamvariable} , #{urvariable}\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeVariable(input: any, current: any) {\r\n  if (input[current] === '#' || input[current] === '$') {\r\n    if (input[current + 1] && input[current + 1] === '{') {\r\n      let value = '';\r\n      let consumedChars = 1;\r\n      consumedChars += 1;\r\n      let char = input[current + consumedChars];\r\n      while (char !== '}') {\r\n        if (char === undefined) {\r\n          throw new TypeError('unterminated string ');\r\n        }\r\n        value += char;\r\n        consumedChars += 1;\r\n        char = input[current + consumedChars];\r\n      }\r\n      return [consumedChars + 1, { type: 'variable', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeOr returns tokenizeReturnObject for syntax or\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeOr(input: any, current: any) {\r\n  if (input[current] === 'o') {\r\n    if (input[current + 1] && input[current + 1] === 'r') {\r\n      if (\r\n        input[current + 2] === undefined ||\r\n        /[0-9\\s]/.test(input[current + 2])\r\n      ) {\r\n        return [2, { type: 'or', value: 'or' }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeIf returns tokenizeReturnObject for word if\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeIf(input: any, current: any) {\r\n  if (input[current] === 'i') {\r\n    if (input[current + 1] && input[current + 1] === 'f') {\r\n      if (\r\n        input[current + 2] === undefined ||\r\n        !/[a-z]i/.test(input[current + 2])\r\n      ) {\r\n        return [2, { type: 'if', value: 'if' }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeAnd returns tokenizeReturnObject for word and\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeAnd(input: any, current: any) {\r\n  if (input[current] === 'a') {\r\n    if (input[current + 1] && input[current + 1] === 'n') {\r\n      if (input[current + 2] && input[current + 2] === 'd') {\r\n        if (\r\n          input[current + 3] === undefined ||\r\n          /[0-9\\s]/.test(input[current + 3])\r\n        ) {\r\n          return [3, { type: 'and', value: 'and' }];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeDiv returns tokenizeReturnObject of type divide for word div\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeDiv(input: any, current: any) {\r\n  if (input[current] === 'd') {\r\n    if (input[current + 1] && input[current + 1] === 'i') {\r\n      if (input[current + 2] && input[current + 2] === 'v') {\r\n        if (\r\n          input[current + 3] === undefined ||\r\n          /[0-9\\s]/.test(input[current + 3])\r\n        ) {\r\n          return [3, { type: 'divide', value: '/' }];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeName returns tokenizeReturnObject of type name for regex [a-z_]+\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeName(input: any, current: any) {\r\n  return tokenizePattern('name', /[a-z_]/i, input, current);\r\n}\r\n\r\n/**\r\n * skipWhiteSpace removes space and iterates the position of compiler\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject that consumes characters without returning type\r\n */\r\nfunction skipWhiteSpace(input: any, current: any) {\r\n  return /\\s/.test(input[current]) ? [1, null] : [0, null];\r\n}\r\n\r\n/**\r\n * Precedence of the tokenizer methods\r\n * If new tokenizer method is created, please add inside tokenizers with correct precedence\r\n */\r\nconst tokenizers = [\r\n  skipWhiteSpace,\r\n  tokenizeParenOpen,\r\n  tokenizeParenClose,\r\n  tokenizeIf,\r\n  tokenizeOr,\r\n  tokenizeAnd,\r\n  tokenizeVariable,\r\n  tokenizeString,\r\n  tokenizeFunction,\r\n  tokenizeEqual,\r\n  tokenizePlus,\r\n  tokenizeMinus,\r\n  tokenizeMultiply,\r\n  tokenizeDivide,\r\n  tokenizeDiv,\r\n  tokenizeLessThan,\r\n  tokenizeGreaterThan,\r\n  tokenizeNot,\r\n  tokenizeBrakeOpen,\r\n  tokenizeBrakeClose,\r\n  tokenizeDot,\r\n  tokenizeComma,\r\n  tokenizeNumber,\r\n  tokenizeDecimal,\r\n  tokenizeName,\r\n];\r\n\r\n/**\r\n * tokenizer is primary method that takes the expression and convert them to appropiate tokens.\r\n * Throws syntax error if expression is not appropiate or could not be tokenized properly\r\n * @param {string} input - should be of string for valid cases\r\n * @returns array of tokens\r\n */\r\nfunction tokenizer(input: any) {\r\n  let current: number = 0;\r\n  const tokens: any = [];\r\n  while (current < input.length) {\r\n    let tokenized = false;\r\n    tokenizers.forEach(tokenizerFn => {\r\n      if (tokenized) {\r\n        return;\r\n      }\r\n      const [consumedChars, token]: any = tokenizerFn(input, current);\r\n      if (consumedChars !== 0) {\r\n        tokenized = true;\r\n        current += consumedChars;\r\n      }\r\n      if (token) {\r\n        tokens.push(token);\r\n      }\r\n    });\r\n    if (!tokenized) {\r\n      throw new TypeError(\r\n        `I dont know what this character is: ${input[current]}`\r\n      );\r\n    }\r\n  }\r\n  return tokens;\r\n}\r\n\r\n/**\r\n * kbSelected parses the function selected and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSelected(funcName: any, params: any, _paramsTokens: any) {\r\n  if (funcName === 'selected') {\r\n    let tmp = false;\r\n    if (Array.isArray(params[0])) {\r\n      params[0].forEach((element: any) => {\r\n        // tslint:disable-next-line: triple-equals\r\n        tmp = tmp || element == params[1];\r\n      });\r\n      return [true, tmp];\r\n    }\r\n    // tslint:disable-next-line: triple-equals\r\n    return [true, params[0] == params[1]];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n// tslint:disable-next-line: variable-name\r\nfunction kbChoice(funcName: any, params: any, _paramsTokens: any) {\r\n  if (funcName === 'jr:choice-name') {\r\n    const tmpHierchicalName = currentHierarchicalName.split('/');\r\n    let i;\r\n    let parent = '';\r\n    for (i = 0; i < tmpHierchicalName.length - 1; ) {\r\n      // tslint:disable-next-line: triple-equals\r\n      if (tmpHierchicalName[i] == 'repeat') {\r\n        i += 3;\r\n      } else {\r\n        // path.push(parent + tmpHierchicalName[i + 1]);\r\n        parent = parent + tmpHierchicalName[i + 1] + '/';\r\n        i += 2;\r\n      }\r\n    }\r\n    const state = store.getState();\r\n    const variableName =\r\n      parent + params[params.length - 1].replace(/[^a-zA-Z ]/g, '');\r\n    if (variableName in state.optionList) {\r\n      for (const key in state.optionList[variableName]) {\r\n        if (state.optionList[variableName][key].name === params[0]) {\r\n          return [\r\n            true,\r\n            state.optionList[variableName][key].label[state.language],\r\n          ];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n// tslint:disable-next-line: variable-name\r\nfunction kbPullData(funcName: any, params: any, _paramsTokens: any) {\r\n  if (funcName === 'pulldata') {\r\n    const state = store.getState();\r\n    const csv = state.csvList[params[0] + '.csv'];\r\n    if (params[3]) {\r\n      const item = csv.find((obj: any) => obj[params[2]] == params[3]);\r\n      console.log(csv, item);\r\n      if (item != undefined && item != null) {\r\n        return [true, item[params[1]]];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbToday parses the function today and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbToday(funcName: any, _params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'today') {\r\n    const d = new Date();\r\n    d.setHours(0, 0, 0, 0);\r\n    return [true, d];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbToday parses the function today and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbFormatDate(funcName: any, _params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'format-date') {\r\n    const format = _params.length == 2 ? _params[1].replace(\"%d\", \"DD\").replace(\"%m\", \"MM\").replace(\"%Y\", \"YYYY\"): 'MM-DD-YYYY';\r\n    const d = _params.length > 1 && _params[0] != null ? moment(_params[0]).format(format) : null ;\r\n    return [true, d];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbRound parses the function round and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbRound(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'round') {\r\n    if (params[0] && params[1]) {\r\n      if (typeof params[0] === 'number' && typeof params[1] === 'number') {\r\n        return [true, params[0].toFixed(params[1])];\r\n      }\r\n      if (typeof params[0] === 'string' && typeof params[1] === 'number') {\r\n        return [true, parseFloat(params[0]).toFixed(params[1])];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbRegex parses the function regex and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbRegex(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'regex') {\r\n    const regex = RegExp(params[1]);\r\n    return [true, regex.test(params[0])];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbCountSelected parses the function count-selected and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbCountSelected(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'count-selected') {\r\n    if (params[0] && Array.isArray(params[0])) {\r\n      return [true, params[0].length];\r\n    }\r\n    if (params[0] && typeof params[0] !== 'object') {\r\n      return [true, 1];\r\n    }\r\n    return [true, 0];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbInt parses the function int and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbInt(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'int') {\r\n    if (typeof params[0] === 'string') {\r\n      return [true, parseInt(params[0], 10)];\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbCoalesce parses the function coalesce and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbCoalesce(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'coalesce') {\r\n    if (!params[0] && params[0] !== 0) {\r\n      return [true, params[1]];\r\n    }\r\n    return [true, params[0]];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbPosition parses the function position and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbPosition(funcName: any, _params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'position') {\r\n    if (currentHierarchicalName) {\r\n      const tmpName = currentHierarchicalName.split('/');\r\n      if (tmpName.length > 2) {\r\n        return [true, parseInt(tmpName[tmpName.length - 2], 10) + 1];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * sumValuesOverJsn is a utility method for kbSum\r\n * @param sum - initial sum value\r\n * @param jsnObj - variable name and value in json object\r\n * @param variableName - variable name\r\n * @returns the calculated sum\r\n */\r\nfunction sumValuesOverJsn(sum: any, jsnObj: any, variableName: any) {\r\n  if (Array.isArray(jsnObj)) {\r\n    let i;\r\n    for (i = 0; i < jsnObj.length; i += 1) {\r\n      sum = sumValuesOverJsn(sum, jsnObj[i], variableName);\r\n    }\r\n  } else if (typeof jsnObj === 'object') {\r\n    for (const key in jsnObj) {\r\n      if (typeof jsnObj[key] === 'object') {\r\n        sum = sumValuesOverJsn(sum, jsnObj[key], variableName);\r\n      } else if (key === variableName) {\r\n        if (typeof jsnObj[key] === 'string') {\r\n          sum += parseFloat(jsnObj[key]);\r\n        }\r\n        if (typeof jsnObj[key] === 'number') {\r\n          sum += jsnObj[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\n/**\r\n * kbSum parses the function sum and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSum(funcName: any, _params: any, paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'sum') {\r\n    let sumValue = null;\r\n    if (\r\n      paramsTokens &&\r\n      paramsTokens.length > 0 &&\r\n      paramsTokens[0] &&\r\n      paramsTokens[0].length > 0 &&\r\n      paramsTokens[0][0].type === 'variable'\r\n    ) {\r\n      sumValue = sumValuesOverJsn(0, userInput, paramsTokens[0][0].value);\r\n    }\r\n    return [true, sumValue];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbConcat parses the function concat and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbConcat(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'concat') {\r\n    if (params && params.length > 0) {\r\n      let concatStr = '';\r\n      // tslint:disable-next-line: prefer-for-of\r\n      for (let i = 0; i < params.length; i += 1) {\r\n        if (params[i] == null) {\r\n          // continue;\r\n          // return [false, null];\r\n          concatStr += '';\r\n        } else {\r\n          concatStr += params[i];\r\n        }\r\n      }\r\n      return [true, concatStr];\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbSubstr parses the function substr and returns functionParseReturnObject\r\n * @param {any} funcName - the function name of the token\r\n * @param {any} params - calculated value of the params tokens\r\n * @param {any} _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSubstr(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'substr') {\r\n    if (params && params.length > 0) {\r\n      if (params[0] && params[1] !== null) {\r\n        if (params[2] !== null && params[2] < params[0].length) {\r\n          const subStr = params[0].substring(params[1], params[2]);\r\n          return [true, subStr];\r\n        }\r\n        return [true, params[0].substring(params[1])];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * outerScopedVariables is a utility method that returns same variable values based on outerscope\r\n * @param {any} variableName - variable name\r\n * @param {any} variableValue - variable value upto now\r\n * @param {any} tmpUserInput - variable key-value storage\r\n * @returns parsed scoped variable value\r\n */\r\nfunction outerScopedVariables(\r\n  variableName: any,\r\n  variableValue: any,\r\n  tmpUserInput: any\r\n): any {\r\n  // tslint:disable-next-line: forin\r\n  for (const key in tmpUserInput) {\r\n    const nodeNames = key.split('/');\r\n    const variableNameFromKey = nodeNames[nodeNames.length - 1];\r\n    if (variableNameFromKey === variableName) {\r\n      return tmpUserInput[key];\r\n    }\r\n    if (typeof tmpUserInput[key] === 'object') {\r\n      if (variableValue == null) {\r\n        variableValue = outerScopedVariables(\r\n          variableName,\r\n          variableValue,\r\n          tmpUserInput[key]\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return variableValue;\r\n}\r\n\r\n/**\r\n * parseMostClosestScopedVariable returns the closest scoped parsed variable value\r\n * @param {any} variableName - the variable name\r\n * @returns the parsed variable value\r\n */\r\nfunction parseMostClosestScopedVariable(variableName: any) {\r\n  const tmpHierchicalName = currentHierarchicalName.split('/');\r\n  let i;\r\n  const tmpUserInput = userInput;\r\n  let variableValue = null;\r\n  variableValue = outerScopedVariables(\r\n    variableName,\r\n    variableValue,\r\n    tmpUserInput\r\n  );\r\n  let parent = '';\r\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\r\n    // tslint:disable-next-line: triple-equals\r\n    if (tmpHierchicalName[i] == 'repeat') {\r\n      i += 1;\r\n      const index = parseInt(tmpHierchicalName[i + 1], 10);\r\n      variableValue = outerScopedVariables(\r\n        variableName,\r\n        variableValue,\r\n        tmpUserInput[parent + tmpHierchicalName[i]][index]\r\n      );\r\n      i += 2;\r\n    } else {\r\n      parent = parent + tmpHierchicalName[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  return variableValue;\r\n}\r\n\r\n/**\r\n * parseDot parses the dot\r\n * @returns parsed value\r\n */\r\nfunction parseDot() {\r\n  const tmpHierchicalName = currentHierarchicalName.split('/');\r\n  let i;\r\n  let tmpUserInput = userInput;\r\n  let parent = '';\r\n  const path = [];\r\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\r\n    // tslint:disable-next-line: triple-equals\r\n    if (tmpHierchicalName[i] == 'repeat') {\r\n      i += 1;\r\n      path.push(parent + tmpHierchicalName[i]);\r\n      path.push(parseInt(tmpHierchicalName[i + 1], 10));\r\n      parent = parent + tmpHierchicalName[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      // path.push(parent + tmpHierchicalName[i + 1]);\r\n      parent = parent + tmpHierchicalName[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  path.push(parent + tmpHierchicalName[tmpHierchicalName.length - 1]);\r\n  tmpUserInput = userInput.getIn(path);\r\n  return tmpUserInput;\r\n}\r\n\r\n/**\r\n * parseLiterals parse a set of tokens, starting from number, string, decimal, variable, name, dot\r\n * @param {any} _tmpOutput - the parsed value of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the position of parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseLiterals(_tmpOutput: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'number') {\r\n    return [1, parseInt(tokens[current].value, 10)];\r\n  }\r\n  if (tokens[current].type === 'string') {\r\n    return [1, tokens[current].value];\r\n  }\r\n  if (tokens[current].type === 'decimal') {\r\n    return [1, parseFloat(tokens[current].value)];\r\n  }\r\n  if (tokens[current].type === 'variable') {\r\n    return [1, parseMostClosestScopedVariable(tokens[current].value)];\r\n  }\r\n  if (tokens[current].type === 'name') {\r\n    if (tokens[current].value.toLowerCase() === 'true') {\r\n      return [1, true];\r\n    }\r\n    if (tokens[current].value.toLowerCase() === 'false') {\r\n      return [1, false];\r\n    }\r\n    if (formItemProperty && tokens[current].value in formItemProperty) {\r\n      return [1, formItemProperty[tokens[current].value]];\r\n    }\r\n    return [1, null];\r\n  }\r\n  if (tokens[current].type === 'dot') {\r\n    return [1, parseDot()];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseFuntion parses the functions present in expression\r\n * @param {any} _output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseFunction(_output: any, tokens: any, current: any) {\r\n  // precedence of functions\r\n  const possibleFunctions = [\r\n    kbSelected,\r\n    kbCountSelected,\r\n    kbChoice,\r\n    kbToday,\r\n    kbRegex,\r\n    kbInt,\r\n    kbCoalesce,\r\n    kbPosition,\r\n    kbSum,\r\n    kbConcat,\r\n    kbSubstr,\r\n    kbRound,\r\n    kbFormatDate,\r\n    kbPullData,\r\n  ];\r\n  if (tokens[current].type === 'function') {\r\n    const funcName = tokens[current].value;\r\n    const arrayOfParams: any = [];\r\n    const arrayOfOriginalTokens: any = [];\r\n    let i = 1;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      const tmpQueue = [];\r\n      tmpQueue.push(1);\r\n      i += 1;\r\n      let tmpTokens = [];\r\n      while (tokens[current + i] && tmpQueue.length) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === ')'\r\n        ) {\r\n          tmpQueue.pop();\r\n        }\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === '('\r\n        ) {\r\n          tmpQueue.push(1);\r\n        }\r\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\r\n          tmpTokens.pop();\r\n          const tmpVal = parser(null, tmpTokens, 0);\r\n          arrayOfParams.push(tmpVal);\r\n          arrayOfOriginalTokens.push(tmpTokens);\r\n          tmpTokens = [];\r\n        }\r\n        i += 1;\r\n      }\r\n      i -= 1;\r\n\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpTokens.pop();\r\n        const tmpVal = parser(null, tmpTokens, 0);\r\n        arrayOfParams.push(tmpVal);\r\n        arrayOfOriginalTokens.push(tmpTokens);\r\n        let parsedFn = false;\r\n        let parsedVal = null;\r\n        possibleFunctions.forEach(functionFn => {\r\n          if (parsedFn) {\r\n            return;\r\n          }\r\n          [parsedFn, parsedVal] = functionFn(\r\n            funcName,\r\n            arrayOfParams,\r\n            arrayOfOriginalTokens\r\n          );\r\n        });\r\n        if (parsedFn) {\r\n          return [i + 1, parsedVal];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseIf parses the if present in expression\r\n * @param {any} _output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseIf(_output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'if') {\r\n    const arrayOfParams = [];\r\n    let i = 1;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      const tmpQueue = [];\r\n      tmpQueue.push(1);\r\n      i += 1;\r\n      let tmpTokens = [];\r\n      while (tokens[current + i] && tmpQueue.length) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === ')'\r\n        ) {\r\n          tmpQueue.pop();\r\n        }\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === '('\r\n        ) {\r\n          tmpQueue.push(1);\r\n        }\r\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\r\n          tmpTokens.pop();\r\n          const tmpVal = parser(null, tmpTokens, 0);\r\n          arrayOfParams.push(tmpVal);\r\n          tmpTokens = [];\r\n        }\r\n        i += 1;\r\n      }\r\n      i -= 1;\r\n\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpTokens.pop();\r\n        const tmpVal = parser(null, tmpTokens, 0);\r\n        arrayOfParams.push(tmpVal);\r\n        if (arrayOfParams.length % 2 === 0) {\r\n          let j;\r\n          for (j = 0; j < arrayOfParams.length; j += 2) {\r\n            if (arrayOfParams[j]) {\r\n              return [i + 1, arrayOfParams[j + 1]];\r\n            }\r\n          }\r\n        } else {\r\n          let j;\r\n          for (j = 0; j < arrayOfParams.length - 1; j += 2) {\r\n            if (arrayOfParams[j]) {\r\n              return [i + 1, arrayOfParams[j + 1]];\r\n            }\r\n          }\r\n          return [i + 1, arrayOfParams[arrayOfParams.length - 1]];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseNot parses the not present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseNot(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'not') {\r\n    let tmpTokens;\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal' && output != null) {\r\n      tmpTokens = [];\r\n      i += 1;\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      let newOutput;\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n        // tslint:disable-next-line: triple-equals\r\n        return [i, output != newOutput];\r\n      }\r\n    } else {\r\n      let parsed = false;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      let consumedTokens;\r\n      let newOutput;\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          i += consumedTokens;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [i, !newOutput];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseAnd parses the and present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseAnd(output: any, tokens: any, current: any): any {\r\n  if (tokens[current].type === 'and' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    let newOutput = null;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      let consumedChars;\r\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\r\n      i += consumedChars;\r\n    } else {\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n      }\r\n    }\r\n    if (newOutput != null) {\r\n      newOutput = output && newOutput;\r\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\r\n        let consumedChars = 0;\r\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\r\n        i += consumedChars;\r\n      }\r\n      return [i, newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseOr parses the or present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseOr(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'or' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    let newOutput = null;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      let consumedChars;\r\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\r\n      i += consumedChars;\r\n    } else {\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n      }\r\n    }\r\n    if (newOutput != null || output != null) {\r\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\r\n        let consumedChars = 0;\r\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\r\n        i += consumedChars;\r\n      }\r\n      return [i, output || newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseEqual parses the equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseEqual(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'equal' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n      // tslint:disable-next-line: triple-equals\r\n      return [i, output == newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseLessThan parses the less than or equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseLessThan(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'lessThan' && output != null) {\r\n    let flagLessThanOrEqual = false;\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal') {\r\n      i += 1;\r\n      flagLessThanOrEqual = true;\r\n    }\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n      if (flagLessThanOrEqual) {\r\n        return [i, output <= newOutput];\r\n      }\r\n      return [i, output < newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseGreaterThan parses the greater than or equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseGreaterThan(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'greaterThan' && output != null) {\r\n    let flagGreaterThanOrEqual = false;\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal') {\r\n      i += 1;\r\n      flagGreaterThanOrEqual = true;\r\n    }\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n\r\n      if (flagGreaterThanOrEqual) {\r\n        return [i, output >= newOutput];\r\n      }\r\n      return [i, output > newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseParen parses the paren present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseParen(_output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'paren' && tokens[current].value === '(') {\r\n    const tmpQueue = [];\r\n    tmpQueue.push(1);\r\n    let i = 1;\r\n    const tmpTokens = [];\r\n    while (tokens[current + i] && tmpQueue.length) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpQueue.pop();\r\n      }\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === '('\r\n      ) {\r\n        tmpQueue.push(1);\r\n      }\r\n      i += 1;\r\n    }\r\n    i -= 1;\r\n\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === ')'\r\n    ) {\r\n      tmpTokens.pop();\r\n      const tmpVal = parser(null, tmpTokens, 0);\r\n      return [i + 1, tmpVal];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseDivide parses the divide present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseDivide(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'divide') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n        }\r\n        const precedentParsers = [parseDivide, parseMultiply];\r\n        let preParsed = false;\r\n        let preOutput;\r\n        precedentParsers.forEach(preParseFn => {\r\n          if (preParsed) {\r\n            return;\r\n          }\r\n          if (tokens[current]) {\r\n            [consumedTokens, preOutput] = preParseFn(\r\n              newOutput,\r\n              tokens,\r\n              current\r\n            );\r\n            ct += consumedTokens;\r\n            if (consumedTokens !== 0) {\r\n              preParsed = true;\r\n              newOutput = preOutput;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (newOutput != null) {\r\n          output /= newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseMultiply parses the multiply present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseMultiply(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'multiply') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n        }\r\n        const precedentParsers = [parseDivide, parseMultiply];\r\n        let preParsed = false;\r\n        let preOutput;\r\n        precedentParsers.forEach(preParseFn => {\r\n          if (preParsed) {\r\n            return;\r\n          }\r\n          if (tokens[current]) {\r\n            [consumedTokens, preOutput] = preParseFn(\r\n              newOutput,\r\n              tokens,\r\n              current\r\n            );\r\n            ct += consumedTokens;\r\n            if (consumedTokens !== 0) {\r\n              preParsed = true;\r\n              newOutput = preOutput;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (newOutput != null) {\r\n          output *= newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parsePlus parses the addition present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parsePlus(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'plus') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'string',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n          const precedentParsers = [parseDivide, parseMultiply];\r\n          let preParsed = false;\r\n          let preOutput;\r\n          precedentParsers.forEach(preParseFn => {\r\n            if (preParsed) {\r\n              return;\r\n            }\r\n            if (tokens[current]) {\r\n              [consumedTokens, preOutput] = preParseFn(\r\n                newOutput,\r\n                tokens,\r\n                current\r\n              );\r\n              ct += consumedTokens;\r\n              if (consumedTokens !== 0) {\r\n                preParsed = true;\r\n                newOutput = preOutput;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (newOutput != null) {\r\n          output += newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseMinus parses the minus present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseMinus(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'minus') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [parseLiterals, parseParen, parseFunction];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n          const precedentParsers = [parseDivide, parseMultiply];\r\n          let preParsed = false;\r\n          let preOutput;\r\n          precedentParsers.forEach(preParseFn => {\r\n            if (preParsed) {\r\n              return;\r\n            }\r\n            if (tokens[current]) {\r\n              [consumedTokens, preOutput] = preParseFn(\r\n                newOutput,\r\n                tokens,\r\n                current\r\n              );\r\n              ct += consumedTokens;\r\n              if (consumedTokens !== 0) {\r\n                preParsed = true;\r\n                newOutput = preOutput;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (newOutput) {\r\n          if (output) {\r\n            if (\r\n              Object.prototype.toString.call(newOutput) === '[object Date]' &&\r\n              Object.prototype.toString.call(output) === '[object Date]'\r\n            ) {\r\n              if (!isNaN(output.getTime()) && !isNaN(newOutput.getTime())) {\r\n                output -= newOutput;\r\n                output = Math.ceil(output / (1000 * 60 * 60 * 24));\r\n              } else {\r\n                output = NaN;\r\n              }\r\n            } else if (\r\n              Object.prototype.toString.call(newOutput) === '[object Date]' ||\r\n              Object.prototype.toString.call(output) === '[object Date]'\r\n            ) {\r\n              output = NaN;\r\n            } else if (newOutput === '' || output === '') {\r\n              output = NaN;\r\n            } else {\r\n              output -= newOutput;\r\n            }\r\n          } else {\r\n            if (Object.prototype.toString.call(newOutput) === '[object Date]') {\r\n              output = NaN;\r\n            } else {\r\n              output = -newOutput;\r\n            }\r\n          }\r\n        } else {\r\n          output = NaN;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        if (output === '') {\r\n          output = NaN;\r\n        }\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n// precedence of the parser methods\r\nconst parsers = [\r\n  parseIf,\r\n  parseParen,\r\n  parseLiterals,\r\n  parseDivide,\r\n  parseMultiply,\r\n  parsePlus,\r\n  parseMinus,\r\n  parseLessThan,\r\n  parseGreaterThan,\r\n  parseEqual,\r\n  parseAnd,\r\n  parseOr,\r\n  parseNot,\r\n  parseFunction,\r\n];\r\n\r\n/**\r\n * the main parser that parses the series of tokens generated by the tokenizer.\r\n * Throws syntax error if not parsed\r\n * @param {any} leftOutput - the initial output or output of previous left side tokens\r\n * @param {any} tokens - the set or array of tokens need to be parsed\r\n * @param {any} pos - the start position of the parser\r\n * @returns parsed value of the set of tokens\r\n */\r\nfunction parser(leftOutput: any, tokens: any, pos: any) {\r\n  let current = pos;\r\n  let output = leftOutput;\r\n  while (current < tokens.length) {\r\n    let parsed = false;\r\n    parsers.forEach(parserFn => {\r\n      if (parsed) {\r\n        return;\r\n      }\r\n      const [consumedTokens, newOutput] = parserFn(output, tokens, current);\r\n      if (consumedTokens !== 0) {\r\n        parsed = true;\r\n        current += consumedTokens;\r\n      }\r\n      if (newOutput != null) {\r\n        output = newOutput;\r\n      }\r\n    });\r\n    if (!parsed) {\r\n      // throw new TypeError('syntax error');\r\n      // tslint:disable-next-line: no-console\r\n      // tslint:disable-next-line: no-console\r\n      console.log(actualExpression);\r\n      return null;\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * odk wrapper evaluator, default method that will be exported, parses expressions\r\n * @param {any} expression - expression that needs to be evaluated\r\n * @param {any} tmpUserInput - the variable key-value json, (current user input json)\r\n * @param {any} tmpFormItemProperty - the name key-value json (current option list)\r\n * @param {any} tmpCurrentHierarchicalName - the node at which the evaluater is called\r\n * @returns evaluated value\r\n */\r\nexport default function evaluater(\r\n  expression: string,\r\n  tmpUserInput: any,\r\n  tmpFormItemProperty: any,\r\n  tmpCurrentHierarchicalName: string\r\n) {\r\n  if (!tmpUserInput) {\r\n    tmpUserInput = {};\r\n  }\r\n  currentHierarchicalName = tmpCurrentHierarchicalName;\r\n  actualExpression = expression;\r\n  userInput = tmpUserInput;\r\n  formItemProperty = tmpFormItemProperty;\r\n  return parser(null, tokenizer(expression), 0);\r\n}\r\n","import * as React from 'react';\r\nimport { Alert } from 'reactstrap';\r\n\r\nexport interface KbAlertProps {\r\n  headerText: string;\r\n  bodyText: string;\r\n  handleToggle: any;\r\n  isOpen: boolean;\r\n  color: string;\r\n}\r\n\r\nclass KbAlert extends React.Component<KbAlertProps> {\r\n  public render() {\r\n    const { headerText, bodyText, handleToggle, isOpen, color } = this.props;\r\n    return (\r\n      <Alert color={color} isOpen={isOpen} toggle={handleToggle}>\r\n        <h4 className=\"alert-heading\">{headerText}</h4>\r\n        <p>{bodyText}</p>\r\n      </Alert>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KbAlert;\r\n","import * as React from 'react';\r\nimport Select from 'react-select';\r\n\r\nexport interface DropDownProps {\r\n  languages: any;\r\n  onChangeSelect: any;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass DropDown extends React.Component<DropDownProps> {\r\n  public render() {\r\n    const options: Options[] = [];\r\n    const languageOptions = [...this.props.languages];\r\n    languageOptions.map((elem: any) => {\r\n      options.push({ label: elem.label, value: elem.value });\r\n    });\r\n\r\n    let selectedValue: any;\r\n    options.map(elem => {\r\n      if (elem.value === this.props.defaultLanguage) {\r\n        selectedValue = elem;\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Select\r\n        multi={false}\r\n        options={options}\r\n        className={'col-md-2 dropDown'}\r\n        placeholder=\"Language\"\r\n        onChange={this.onChangeHandler}\r\n        value={selectedValue || ''}\r\n      />\r\n    );\r\n  }\r\n\r\n  /** pass the selected value to the parent class\r\n   * @param {any} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: any) => {\r\n    this.props.onChangeSelect(event.value);\r\n  };\r\n}\r\n\r\nexport default DropDown;\r\n","// Field Types\r\nexport const GROUP_FIELD_TYPE = 'group';\r\nexport type GROUP_FIELD_TYPE = typeof GROUP_FIELD_TYPE;\r\nexport const REPEAT_FIELD_TYPE = 'repeat';\r\nexport type REPEAT_FIELD_TYPE = typeof REPEAT_FIELD_TYPE;\r\nexport const TEXT_FIELD_TYPE = 'text';\r\nexport type TEXT_FIELD_TYPE = typeof TEXT_FIELD_TYPE;\r\nexport const DATE_FIELD_TYPE = 'date';\r\nexport type DATE_FIELD_TYPE = typeof DATE_FIELD_TYPE;\r\nexport const DATE_TIME_FIELD_TYPE = 'dateTime';\r\nexport type TIME_FIELD_TYPE = typeof TIME_FIELD_TYPE;\r\nexport const TIME_FIELD_TYPE = 'time';\r\nexport type DATE_TIME_FIELD_TYPE = typeof DATE_TIME_FIELD_TYPE;\r\nexport const INTEGER_FIELD_TYPE = 'integer';\r\nexport type INTEGER_FIELD_TYPE = typeof INTEGER_FIELD_TYPE;\r\nexport const DECIMAL_FIELD_TYPE = 'decimal';\r\nexport type DECIMAL_FIELD_TYPE = typeof DECIMAL_FIELD_TYPE;\r\nexport const PHOTO_FIELD_TYPE = 'photo';\r\nexport type PHOTO_FIELD_TYPE = typeof PHOTO_FIELD_TYPE;\r\nexport const FILE_FIELD_TYPE = 'file';\r\nexport type FILE_FIELD_TYPE = typeof FILE_FIELD_TYPE;\r\nexport const NOTE_FIELD_TYPE = 'note';\r\nexport type NOTE_FIELD_TYPE = typeof NOTE_FIELD_TYPE;\r\nexport const SELECT_ONE_FIELD_TYPE = 'select one';\r\nexport type SELECT_ONE_FIELD_TYPE = typeof SELECT_ONE_FIELD_TYPE;\r\nexport const SELECT_ALL_FIELD_TYPE = 'select all that apply';\r\nexport type SELECT_ALL_FIELD_TYPE = typeof SELECT_ALL_FIELD_TYPE;\r\nexport const CALCULATE_FIELD_TYPE = 'calculate';\r\nexport type CALCULATE_FIELD_TYPE = typeof CALCULATE_FIELD_TYPE;\r\n\r\n// Required Properties\r\nexport const REQUIRED_FIELD_MSG = 'This field is required';\r\nexport type REQUIRED_FIELD_MSG = typeof REQUIRED_FIELD_MSG;\r\nexport const REQUIRED_SYMBOL = '*';\r\nexport type REQUIRED_SYMBOL = typeof REQUIRED_SYMBOL;\r\n","import { createStore, Store } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer, { FormState } from './ducks/formState';\r\n\r\n/** The initial store */\r\nconst store: Store & FormState = createStore(reducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import { FieldElement } from '../components/typeEvalutors/Base';\r\n\r\n/**\r\n * get the text from multilang obj based on language identifier,\r\n * @param {FieldElement} property - field multilang property or string\r\n * @return {string} - text value of the property based on language identifier, empty if not present\r\n */\r\nexport default function getTextFromProperty(\r\n  property: string | { [key: string]: string },\r\n  languageIdentifier: string\r\n): string {\r\n  if (typeof property === 'string') {\r\n    return property || '';\r\n  }\r\n  return property[languageIdentifier] || '';\r\n}\r\n\r\n/**\r\n * get the label text of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field label text\r\n */\r\nexport function getFieldLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.label) {\r\n    return getTextFromProperty(fieldElement.label, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the label hint of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field label text\r\n */\r\nexport function getHintLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.hint) {\r\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the customised label text with previous input of the fieldElement\r\n * @param {any} evaluator - the getEvaluatedExpressionSelector Function\r\n * @param {string} labelText - the current Label Text\r\n * @param {string} fieldTreeName - the field tree name\r\n * @return {string | null} - field label text or null\r\n */\r\nexport function customizeLabelsWithPreviousInputs(\r\n  evaluator: any,\r\n  labelText: string,\r\n  fieldTreeName: string\r\n): string | null {\r\n  if (labelText === null || labelText === undefined) {\r\n    return null;\r\n  }\r\n  const placesOfCustomizationsRequiredList = labelText.match(/\\[(.*?)\\]/g);\r\n\r\n  // to calculate - i.e, [${departure_date_from_bangladesh}]\r\n  if (placesOfCustomizationsRequiredList) {\r\n    placesOfCustomizationsRequiredList.forEach(tmpPlace => {\r\n      tmpPlace = tmpPlace.substring(1, tmpPlace.length - 1);\r\n      const customizedName = evaluator(tmpPlace, fieldTreeName);\r\n      const tmp = '[' + tmpPlace + ']';\r\n      if (customizedName != null && customizedName !== undefined) {\r\n        labelText = labelText.replace(tmp, customizedName);\r\n      } else {\r\n        labelText = labelText.replace(tmp, '');\r\n      }\r\n    });\r\n  } else {\r\n    // to calculate - i.e, ${departure_date_from_bangladesh}\r\n    const matchList = labelText.match(/\\${(.*[^}])[\\}?]$/g);\r\n    if (matchList) {\r\n      matchList.forEach(tmpPlace => {\r\n        const customizedName = evaluator(tmpPlace, fieldTreeName);\r\n        if (customizedName != null && customizedName !== undefined) {\r\n          labelText = labelText.replace(tmpPlace, customizedName);\r\n        } else {\r\n          labelText = labelText.replace(tmpPlace, '');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return labelText;\r\n}\r\n\r\n/**\r\n * get the hint text of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field hint text\r\n */\r\nexport function getFieldHintText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.hint) {\r\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the label text of the fieldElement constraint msg\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - constraint label text\r\n */\r\nexport function getConstraintLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.bind && fieldElement.bind['jr:constraintMsg']) {\r\n    return getTextFromProperty(\r\n      fieldElement.bind['jr:constraintMsg'],\r\n      languageIdentifier\r\n    );\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the boolean result depending on the expression\r\n * @param {string} - required string\r\n * @returns {boolean} - true if required, otherwise false\r\n */\r\nfunction requiredEvaluator(expression: string): boolean {\r\n  if (\r\n    expression.toLowerCase() === 'yes' ||\r\n    expression === '1' ||\r\n    expression.toLowerCase() === 'true'\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * get the boolean result of fieldElement string\r\n * @param fieldElement\r\n * @return {boolean} - boolean value by calculating fieldElement required properties\r\n */\r\nexport function isInputRequired(fieldElement: FieldElement): boolean {\r\n  let isRequired = false;\r\n  if (fieldElement.bind) {\r\n    if (fieldElement.bind.required) {\r\n      if (\r\n        typeof fieldElement.bind.required === 'string' &&\r\n        requiredEvaluator(fieldElement.bind.required)\r\n      ) {\r\n        isRequired = true;\r\n      }\r\n    }\r\n  }\r\n  return isRequired;\r\n}\r\n\r\n/** interface for EvaluateExpression\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {fieldTreeName} - the field Tree name\r\n * @returns {any} - evaluated value\r\n */\r\nexport type EvaluateExpression = (\r\n  expression: string,\r\n  fieldTreeName: string\r\n) => any;\r\n\r\n/** evaluates whether a component be relevant or not\r\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the relevant expression\r\n * @returns {boolean} - true if relevant; otherwise, false;\r\n */\r\nexport function shouldComponentBeRelevant(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.relevant) {\r\n    const isRelevant = evaluateExpression(\r\n      fieldElement.bind.relevant,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isRelevant) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/** evaluates whether a component be readonly or not\r\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the readonly expression\r\n * @returns {boolean} - true if readonly; otherwise, false;\r\n */\r\nexport function shouldComponentBeReadOnly(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.readonly) {\r\n    const isReadOnly = evaluateExpression(\r\n      fieldElement.bind.readonly,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isReadOnly) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** evaluates whether the input violates constraint or not\r\n * @param {FieldElement} fieldElement - the constraint expression\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the expression\r\n * @returns {boolean} - true if violates; otherwise, false;\r\n */\r\nexport function shouldInputViolatesConstraint(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.constraint) {\r\n    const isConstraintViolated = !evaluateExpression(\r\n      fieldElement.bind.constraint,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isConstraintViolated) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** returns the new user input object after assigning value of passed fieldTreeName\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @param {any} fieldValue - the value that needs to be assigned\r\n * @returns {any} - the new user input object after assignment\r\n */\r\nexport function getModifiedUserInputObject(\r\n  userInputObj: any,\r\n  fieldTreeName: string,\r\n  fieldValue: any\r\n): any {\r\n  const treeNodes = fieldTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  modifiedObj[parent + treeNodes[treeNodes.length - 1]] = fieldValue;\r\n  return userInputObj;\r\n}\r\n\r\n/** Returns the filtered option list Array For Repeat property\r\n * @param {any} userInputObj - the current option list object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @param {any} repeatIndex - the repeat index to remove\r\n * @returns {any} - the new user filredred repear array after assignment\r\n */\r\nexport function getModifiedOptionListForRepeat(\r\n  userInputObj: any,\r\n  fieldTreeName: string,\r\n  repeatIndex: number\r\n): any {\r\n  const filteredRepeatArray: any = [];\r\n  const optionListobj: any = userInputObj;\r\n\r\n  Object.entries(optionListobj).forEach(key => {\r\n    const keyNameOptionListobj: any = key[0];\r\n    const keyValueOptionListobj: any = key[1];\r\n    if (keyNameOptionListobj === fieldTreeName) {\r\n      const repeatIndexString: string = String(repeatIndex);\r\n      Object.entries(keyValueOptionListobj).map(keyRepeat => {\r\n        const keyNameRepeatObject: any = keyRepeat[0];\r\n        const keyValueRepeatValue: any = keyRepeat[1];\r\n        if (keyNameRepeatObject !== repeatIndexString) {\r\n          filteredRepeatArray.push(keyValueRepeatValue);\r\n        }\r\n      });\r\n    }\r\n  });\r\n  return filteredRepeatArray;\r\n}\r\n\r\n/** returns the value from the user input object\r\n * @param {any} userInputObj - the user input object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @returns {any} - the value, present in user input object, of the fieldTreeName\r\n */\r\nexport function getValueFromUserInputObj(\r\n  userInputObj: any,\r\n  fieldTreeName: string\r\n): any {\r\n  const treeNodes = fieldTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  return modifiedObj[parent + treeNodes[treeNodes.length - 1]];\r\n}\r\n\r\n/** evaluates whether the component is minimal or not\r\n * @param {FieldElement} fieldElement - the constraint expression\r\n * @returns {boolean} - true if minimal; otherwise, false;\r\n */\r\nexport function shouldComponentBeMinimal(fieldElement: FieldElement): boolean {\r\n  let isMinimal = false;\r\n  if (fieldElement.control && fieldElement.control.appearance) {\r\n    fieldElement.control.appearance.toString().includes('minimal')\r\n      ? (isMinimal = true)\r\n      : (isMinimal = false);\r\n  }\r\n  return isMinimal;\r\n}\r\n\r\n/** returns the new user input object after emptying the desired grouped values\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} groupTreeName - the group Tree name\r\n * @returns {any} - the new user input object after emptying the grouped values\r\n */\r\nexport function emptyGroupedValues(\r\n  userInputObj: any,\r\n  groupTreeName: string\r\n): any {\r\n  const treeNodes = groupTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  Object.keys(modifiedObj).forEach(objKey => {\r\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\r\n      modifiedObj[objKey] = null;\r\n    }\r\n  });\r\n  return userInputObj;\r\n}\r\n\r\n/** returns whether the grouped values are empty or not\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} groupTreeName - the group Tree name\r\n * @returns {any} - true if empty; otherwise, false\r\n */\r\nexport function checkGroupedValuesForEmpty(\r\n  userInputObj: any,\r\n  groupTreeName: string\r\n): any {\r\n  const treeNodes = groupTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  let isEmpty: boolean = true;\r\n  Object.keys(modifiedObj).forEach(objKey => {\r\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\r\n      if (\r\n        modifiedObj[objKey] !== null &&\r\n        modifiedObj[objKey] !== undefined &&\r\n        isEmpty\r\n      ) {\r\n        isEmpty = false;\r\n      }\r\n    }\r\n  });\r\n  return isEmpty;\r\n}\r\n","import { AnyAction, Store } from 'redux';\r\nimport SeamlessImmutable from 'seamless-immutable';\r\nimport evaluater from '../../utils/compiler';\r\nimport {\r\n  checkGroupedValuesForEmpty,\r\n  emptyGroupedValues,\r\n  getModifiedOptionListForRepeat,\r\n  getModifiedUserInputObject,\r\n  getValueFromUserInputObj,\r\n} from '../../utils/helpers';\r\n\r\n/** interface for the store state */\r\nexport interface FormState {\r\n  userInput: object;\r\n  errors: string[];\r\n  optionList: object;\r\n  isFormSubmitted: boolean;\r\n  mediaList: object;\r\n  language: string;\r\n}\r\n\r\n// actions\r\n\r\n/** FIELD_VALUE_ASSIGNED action type */\r\nexport const FIELD_VALUE_ASSIGNED = 'odk/reducer/form/FIELD_VALUE_ASSIGNED';\r\n/** OPTION_LIST_ASSIGNED action type */\r\nexport const OPTION_LIST_ASSIGNED = 'odk/reducer/form/OPTION_LIST_ASSIGNED';\r\n/** MEDIA_LIST_ASSIGNED action type */\r\nexport const MEDIA_LIST_ADDED = 'odk/reducer/form/MEDIA_LIST_ADDED';\r\n/** REMOVE_FROM_MEDIA_LIST action type */\r\nexport const REMOVE_FROM_MEDIA_LIST = 'odk/reducer/form/REMOVE_FROM_MEDIA_LIST';\r\n/** REMOVE_FROM_OPTION_LIST action type */\r\nexport const REMOVE_FROM_OPTION_LIST_REPEAT =\r\n  'odk/reducer/form/REMOVE_FROM_OPTION_LIST_REPEAT';\r\n/** RESET_STORE action type */\r\nexport const RESET_STORE = 'odk/reducer/form/RESET_STORE';\r\n/** ADD_ERROR_INPUT_ID action type */\r\nexport const ADD_ERROR_INPUT_ID = 'odk/reducer/form/ADD_ERROR_INPUT_ID';\r\n/** REMOVE_ERROR_INPUT_ID action type */\r\nexport const REMOVE_ERROR_INPUT_ID = 'odk/reducer/form/REMOVE_ERROR_INPUT_ID';\r\n/** EMPTY_GROUP_FIELDS */\r\nexport const EMPTY_GROUP_FIELDS = 'odk/reducer/form/EMPTY_GROUP_FIELDS';\r\n/** REMOVE_GROUP_FIELDS_FROM_ERRORS */\r\nexport const REMOVE_GROUP_FIELDS_FROM_ERRORS =\r\n  'odk/reducer/form/REMOVE_GROUP_FIELDS_FROM_ERRORS';\r\nexport const SET_USER_INPUT_OBJ = 'odk/reducer/form/SET_USER_INPUT_OBJ';\r\nexport const SET_CSV_OBJ = 'odk/reducer/form/SET_CSV_OBJ';\r\nexport const SET_FORM_SUBMIT_STATUS = 'odk/reducer/form/SET_FORM_SUBMIT_STATUS';\r\nexport const SET_LANGUAGE = 'odk/reducer/form/SET_LANGUAGE';\r\n\r\n/** interface for ASSIGN_FIELD_VALUE action */\r\nexport interface AssignFieldValueAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  fieldValue: any;\r\n  type: typeof FIELD_VALUE_ASSIGNED;\r\n}\r\n\r\n/** interface for OPTION_LIST_ASSIGNED action */\r\nexport interface AssignOptionListAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  optionList: any;\r\n  type: typeof OPTION_LIST_ASSIGNED;\r\n}\r\n\r\n/** interface for MEDIA_LIST_ADDED action */\r\nexport interface AddMediaListAction extends AnyAction {\r\n  mediaObject: any;\r\n  type: typeof MEDIA_LIST_ADDED;\r\n}\r\n\r\n/** interface for REMOVE_FROM_MEDIA_LIST action */\r\nexport interface RemoveFromMediaListAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  mediaList: any;\r\n  type: typeof REMOVE_FROM_MEDIA_LIST;\r\n}\r\n\r\n/** interface for REMOVE_FROM_OPTION_LIST action */\r\nexport interface RemoveFromOptionList extends AnyAction {\r\n  fieldTreeName: string;\r\n  repeatIndex: number;\r\n  type: typeof REMOVE_FROM_OPTION_LIST_REPEAT;\r\n}\r\n\r\n/** interface for RESET_STORE action */\r\nexport interface ResetStoreAction extends AnyAction {\r\n  type: typeof RESET_STORE;\r\n}\r\n\r\n/** interface for ADD_ERROR_INPUT_ID action */\r\nexport interface AddErrorInputId extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof ADD_ERROR_INPUT_ID;\r\n}\r\n\r\n/** interface for REMOVE_ERROR_INPUT_ID action */\r\nexport interface RemoveErrorInputId extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof REMOVE_ERROR_INPUT_ID;\r\n}\r\n\r\n/** interface for EMPTY_GROUP_FIELDS action */\r\nexport interface EmptyGroupFields extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof EMPTY_GROUP_FIELDS;\r\n}\r\n\r\n/** interface for REMOVE_GROUP_FIELDS_FROM_ERRORS action */\r\nexport interface RemoveGroupFieldsFromErrors extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof REMOVE_GROUP_FIELDS_FROM_ERRORS;\r\n}\r\n\r\n/** interface for SET_USER_INPUT_OBJ action */\r\nexport interface SetUserInputObj extends AnyAction {\r\n  userInputObj: any;\r\n  type: typeof SET_USER_INPUT_OBJ;\r\n}\r\n\r\n/** interface for SET_CSV_OBJ action */\r\nexport interface SetCSVObj extends AnyAction {\r\n  csvObj: any;\r\n  type: typeof SET_CSV_OBJ;\r\n}\r\n/** interface for SET_LANGUAGE action */\r\nexport interface SetLanguage extends AnyAction {\r\n  language: string;\r\n  type: typeof SET_LANGUAGE;\r\n}\r\n\r\n/** interface for SET_FORM_SUBMIT_STATUS action */\r\nexport interface SetFormSubmitStatus extends AnyAction {\r\n  isFormSubmitted: boolean;\r\n  type: typeof SET_FORM_SUBMIT_STATUS;\r\n}\r\n\r\n/** Assigns the value to the proper field name\r\n * @param {string} fieldTreeName - the extended field name\r\n * @param {any} fieldValue - the value that will be assigned\r\n * @return {AssignFieldValueAction} - an action to assign value to a field in the redux store\r\n */\r\nexport const assignFieldValueAction = (\r\n  fieldTreeName: string,\r\n  fieldValue: any\r\n): AssignFieldValueAction => ({\r\n  fieldTreeName,\r\n  fieldValue,\r\n  type: FIELD_VALUE_ASSIGNED,\r\n});\r\n\r\n/** Assigns option list to the proper field name\r\n * @param {string} fieldTreeName - the extended field name\r\n * @param {any} optionList - the option list that will be assigned\r\n * @return {AssignOptionListAction} - an action to assign option List to a field in the redux store\r\n */\r\nexport const assignOptionListAction = (\r\n  fieldTreeName: string,\r\n  optionList: any\r\n): AssignOptionListAction => ({\r\n  fieldTreeName,\r\n  optionList,\r\n  type: OPTION_LIST_ASSIGNED,\r\n});\r\n\r\n/** Remove option list from Redux Store\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveFromOptionList} - an action to remove input id for errors\r\n */\r\nexport const RemoveFromOptionList = (\r\n  fieldTreeName: string,\r\n  repeatIndex: number\r\n): RemoveFromOptionList => ({\r\n  fieldTreeName,\r\n  repeatIndex,\r\n  type: REMOVE_FROM_OPTION_LIST_REPEAT,\r\n});\r\n\r\n/** Adds media object to the proper field name\r\n * @param {any} mediaObject - the media object that will be added\r\n * @return {AddMediaListAction} - an action to assign media object to a field in the redux store\r\n */\r\nexport const addMediaListAction = (mediaObject: any): AddMediaListAction => ({\r\n  mediaObject,\r\n  type: MEDIA_LIST_ADDED,\r\n});\r\n\r\n/** Remove a media item in option list from Redux Store\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveFromMediaListAction} - an action to remove media info from redux store\r\n */\r\nexport const removeFromMediaListAction = (\r\n  fieldTreeName: string,\r\n  mediaList: any\r\n): RemoveFromMediaListAction => ({\r\n  fieldTreeName,\r\n  mediaList,\r\n  type: REMOVE_FROM_MEDIA_LIST,\r\n});\r\n\r\n/** Resets the redux store state to initial state\r\n * @return {ResetStoreAction} - an action to reset the redux store state\r\n */\r\nexport const resetStoreAction = (): ResetStoreAction => ({\r\n  type: RESET_STORE,\r\n});\r\n\r\n/** add the field tree name as error id to store in redux store that violates constraints\r\n * @param fieldTreeName - the field tree name\r\n * @returns {AddErrorInputId} - an action to add input id for errors\r\n */\r\nexport const addErrorInputId = (fieldTreeName: string): AddErrorInputId => ({\r\n  fieldTreeName,\r\n  type: ADD_ERROR_INPUT_ID,\r\n});\r\n\r\n/** remove the field tree name as error id to store in redux store that violates constraints\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveErrorInputId} - an action to remove input id for errors\r\n */\r\nexport const removeErrorInputId = (\r\n  fieldTreeName: string\r\n): RemoveErrorInputId => ({\r\n  fieldTreeName,\r\n  type: REMOVE_ERROR_INPUT_ID,\r\n});\r\n\r\n/** empties the values of the fields of the group\r\n * @param fieldTreeName - the group field tree name\r\n * @returns {RemoveErrorInputId} - an action to empty the group field values\r\n */\r\nexport const emptyGroupFields = (fieldTreeName: string): EmptyGroupFields => ({\r\n  fieldTreeName,\r\n  type: EMPTY_GROUP_FIELDS,\r\n});\r\n\r\n/** removes the group field names from store errors obj\r\n * @param {string} fieldTreeName - the group field tree name\r\n * @returns {RemoveGroupFieldsFromErrors} - an action to remove group field names from errors\r\n */\r\nexport const removeGroupFieldsFromErrors = (\r\n  fieldTreeName: string\r\n): RemoveGroupFieldsFromErrors => ({\r\n  fieldTreeName,\r\n  type: REMOVE_GROUP_FIELDS_FROM_ERRORS,\r\n});\r\n\r\n/** sets the user input object to redux store\r\n * @param {any} userInputObj - the user input obj\r\n * @returns {SetUserInputObj} - an action to set user input to redux store\r\n */\r\nexport const setUserInputObj = (userInputObj: any): SetUserInputObj => ({\r\n  type: SET_USER_INPUT_OBJ,\r\n  userInputObj,\r\n});\r\n\r\n/** sets the csv object to redux store\r\n * @param {any} userInputObj - the user input obj\r\n * @returns {SetUserInputObj} - an action to set user input to redux store\r\n */\r\n export const setCSVObj = (csvObj: any): SetCSVObj => ({\r\n  type: SET_CSV_OBJ,\r\n  csvObj,\r\n});\r\n\r\n/** sets the language to redux store\r\n * @param {string} language - the user input obj\r\n * @returns {SetLanguage} - an action to set user input to redux store\r\n */\r\nexport const setUserLanguage = (language: string): SetLanguage => ({\r\n  type: SET_LANGUAGE,\r\n  language,\r\n});\r\n\r\n/** sets the form submit info to redux store\r\n * @param {boolean} isFormSubmitted - the form submit info variable\r\n * @returns {SetFormSubmitInfo} - an action to set form submit info to redux store\r\n */\r\nexport const setFormSubmitStatus = (\r\n  isFormSubmitted: boolean\r\n): SetFormSubmitStatus => ({\r\n  isFormSubmitted,\r\n  type: SET_FORM_SUBMIT_STATUS,\r\n});\r\n\r\n/** Create type for forms reducer actions */\r\nexport type FormActionTypes =\r\n  | AssignFieldValueAction\r\n  | AssignOptionListAction\r\n  | RemoveFromOptionList\r\n  | AddMediaListAction\r\n  | RemoveFromMediaListAction\r\n  | ResetStoreAction\r\n  | AddErrorInputId\r\n  | RemoveErrorInputId\r\n  | EmptyGroupFields\r\n  | RemoveGroupFieldsFromErrors\r\n  | SetUserInputObj\r\n  | SetCSVObj\r\n  | SetFormSubmitStatus\r\n  | AnyAction;\r\n\r\n/** Create an immutable form state */\r\nexport type ImmutableFormState = SeamlessImmutable.ImmutableObject<FormState>;\r\n\r\n/** initial form state */\r\nexport const initialState: ImmutableFormState = SeamlessImmutable({\r\n  errors: [],\r\n  isFormSubmitted: false,\r\n  mediaList: {},\r\n  optionList: {},\r\n  userInput: {},\r\n  language: 'English',\r\n  csvList: {},\r\n});\r\n\r\n/** the form reducer function */\r\nexport default function reducer(\r\n  state: ImmutableFormState = initialState,\r\n  action: FormActionTypes\r\n): ImmutableFormState {\r\n  switch (action.type) {\r\n    case FIELD_VALUE_ASSIGNED:\r\n      const modifiedUserInputObj = getModifiedUserInputObject(\r\n        state.getIn(['userInput']).asMutable({ deep: true }),\r\n        action.fieldTreeName,\r\n        action.fieldValue\r\n      );\r\n      const stateM = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({ ...stateM, userInput: modifiedUserInputObj });\r\n\r\n    case OPTION_LIST_ASSIGNED:\r\n      const modifiedUserInputObjList = getModifiedUserInputObject(\r\n        state.getIn(['optionList']).asMutable({ deep: true }),\r\n        action.fieldTreeName,\r\n        action.optionList != null ? { ...action.optionList } : null\r\n      );\r\n      const newState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({\r\n        ...newState,\r\n        optionList: modifiedUserInputObjList,\r\n      });\r\n\r\n    case REMOVE_FROM_OPTION_LIST_REPEAT:\r\n      let filteredRepeatArray: any = [];\r\n      if (\r\n        state\r\n          .getIn(['optionList'])\r\n          .asMutable({ deep: true })\r\n          .hasOwnProperty(action.fieldTreeName)\r\n      ) {\r\n        filteredRepeatArray = [\r\n          ...getModifiedOptionListForRepeat(\r\n            state.getIn(['optionList']).asMutable({ deep: true }),\r\n            action.fieldTreeName,\r\n            action.repeatIndex\r\n          ),\r\n        ];\r\n        const modifiedOptionListRepeat = getModifiedUserInputObject(\r\n          state.getIn(['optionList']).asMutable({ deep: true }),\r\n          action.fieldTreeName,\r\n          { ...filteredRepeatArray }\r\n        );\r\n        const newStateForRepeat = state.asMutable({ deep: true });\r\n        return SeamlessImmutable({\r\n          ...newStateForRepeat,\r\n          optionList: modifiedOptionListRepeat,\r\n        });\r\n      }\r\n      return state;\r\n\r\n    case MEDIA_LIST_ADDED:\r\n      const modifiedMediaList = {\r\n        ...state.getIn(['mediaList']).asMutable({ deep: true }),\r\n        [action.mediaObject.name]: action.mediaObject,\r\n      };\r\n      const newMediaState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({\r\n        ...newMediaState,\r\n        mediaList: modifiedMediaList,\r\n      });\r\n\r\n    case REMOVE_FROM_MEDIA_LIST:\r\n      if (\r\n        state\r\n          .getIn(['mediaList'])\r\n          .asMutable({ deep: true })\r\n          .hasOwnProperty(action.fieldTreeName)\r\n      ) {\r\n        // const tempMediaState = state.asMutable({ deep: true });\r\n        // return SeamlessImmutable({\r\n        //   ...tempMediaState,\r\n        //   mediaList: modifiedMediaObject,\r\n        // });\r\n      }\r\n      return state;\r\n\r\n    case RESET_STORE:\r\n      return initialState;\r\n\r\n    case ADD_ERROR_INPUT_ID:\r\n      if (!state.errors.includes(action.fieldTreeName)) {\r\n        return state.updateIn(['errors'], arr =>\r\n          arr.concat([action.fieldTreeName])\r\n        );\r\n      }\r\n      return state;\r\n\r\n    case REMOVE_ERROR_INPUT_ID:\r\n      if (state.errors.includes(action.fieldTreeName)) {\r\n        return state.updateIn(['errors'], arr =>\r\n          arr.filter(elm => elm !== action.fieldTreeName)\r\n        );\r\n      }\r\n      return state;\r\n\r\n    case EMPTY_GROUP_FIELDS:\r\n      const mUserInputObj = emptyGroupedValues(\r\n        state.getIn(['userInput']).asMutable({ deep: true }),\r\n        action.fieldTreeName\r\n      );\r\n      const mState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({ ...mState, userInput: mUserInputObj });\r\n\r\n    case REMOVE_GROUP_FIELDS_FROM_ERRORS:\r\n      return state.updateIn(['errors'], arr =>\r\n        arr.filter(elm => !elm.startsWith(action.fieldTreeName))\r\n      );\r\n\r\n    case SET_USER_INPUT_OBJ:\r\n      return SeamlessImmutable({\r\n        ...state,\r\n        userInput: (action as any).userInputObj,\r\n      });\r\n\r\n    case SET_CSV_OBJ:\r\n      return SeamlessImmutable({\r\n        ...state,\r\n        csvList: (action as any).csvObj,\r\n      });\r\n      \r\n    case SET_FORM_SUBMIT_STATUS:\r\n      return SeamlessImmutable({\r\n        ...state,\r\n        isFormSubmitted: (action as any).isFormSubmitted,\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// selectors\r\n\r\n/** get the value by their respective element tree name\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} value if the element name is found else null\r\n */\r\nexport function getFieldValue(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return getValueFromUserInputObj(\r\n    (state as any) != undefined && (state as any).getIn(['userInput']).asMutable({ deep: true }),\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** get option list by their respective element tree name\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} value if the element name is found else null\r\n */\r\nexport function getOptionList(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return getValueFromUserInputObj(\r\n    (state as any) != undefined && (state as any).getIn(['optionList']).asMutable({ deep: true }),\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** get the value of the evaluated expression\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} - the evaluated value or null if syntax error\r\n */\r\nexport function getEvaluatedExpression(\r\n  state: Partial<Store>,\r\n  expression: string,\r\n  fieldTreeName: string\r\n): any {\r\n  return evaluater(expression, (state as any) != undefined && (state as any).userInput, null, fieldTreeName);\r\n}\r\n\r\n/** get the value of the evaluated expression for Select One and Select All\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {any} options - the options that needs to be evaluated\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} - the evaluated value or null if syntax error\r\n */\r\nexport function getEvaluatedExpressionForSelect(\r\n  state: Partial<Store>,\r\n  expression: string,\r\n  options: any,\r\n  fieldTreeName: string\r\n): any {\r\n  return evaluater(\r\n    expression,\r\n    (state as any).userInput,\r\n    options,\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** check if the field element is present in the store\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {boolean} true if present; otherwise, false\r\n */\r\nexport function isPresentInError(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return  (state as any) != undefined && (state as any).errors.includes(fieldTreeName);\r\n}\r\n\r\n/** check if the field elements under group are empty or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the group field\r\n * @return {boolean} true if empty; otherwise, false\r\n */\r\nexport function isGroupFieldsEmpty(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return checkGroupedValuesForEmpty( (state as any) != undefined && (state as any).userInput, fieldTreeName);\r\n}\r\n\r\n/** check if the field elements under group are present in errors or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the group field\r\n * @return {boolean} true if present; otherwise, false\r\n */\r\nexport function isErrorsIncludeGroupFields(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  let isPresent = false;\r\n  (state as any).errors.forEach((fTName: string) => {\r\n    if (fTName.startsWith(fieldTreeName) && !isPresent) {\r\n      isPresent = true;\r\n    }\r\n  });\r\n  return isPresent;\r\n}\r\n\r\n/** check if the errors array in store empty or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} true if empty; otherwise, false\r\n */\r\nexport function isErrorsArrayEmpty(state: Partial<Store>): any {\r\n  return (state as any) != undefined && (state as any).errors && (state as any).errors.length ? false : true;\r\n}\r\n\r\n/** get the userInput object from store\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} the current userInputObject\r\n */\r\nexport function getUserInputFromStore(state: Partial<Store>): any {\r\n  return (state as any) != undefined && (state as any).getIn(['userInput']).asMutable({ deep: true });\r\n}\r\n\r\n/** get the userInput object from store\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} the current userInputObject\r\n */\r\n export function getCSVFromStore(state: Partial<Store>): any {\r\n  return (state as any) != undefined && (state as any).getIn(['csvList']).asMutable({ deep: true });\r\n}\r\n\r\n\r\n/** get the userInput object from store\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} the current isFormSubmitted\r\n */\r\nexport function getFormSubmitStatus(state: Partial<Store>): any {\r\n  return (state as any) != undefined && (state as any).isFormSubmitted;\r\n}\r\n\r\n/** get the file if present in store\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fileName - the fileName\r\n * @return {any} - the file or null\r\n */\r\nexport function getFileObject(state: Partial<Store>, fileName: string): any {\r\n  const fileObject = (state as any).getIn(['mediaList', fileName]);\r\n  return fileObject ? (state as any).getIn(['mediaList', fileName]) : null;\r\n}\r\n\r\n/** get all the files\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {any} - the files or empty object\r\n */\r\nexport function getAllFileObjects(state: Partial<Store>): any {\r\n  return (state as any) != undefined && (state as any).getIn(['mediaList']);\r\n}\r\n","import { createStyles, Theme } from '@material-ui/core';\r\n\r\nconst GroupStyle = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '&.MuiAccordionSummary-root': {\r\n        borderTop: `5px solid ${theme.palette.primary.dark}`,\r\n        color: `${theme.palette.primary.dark} !important`,\r\n        '&:hover': {\r\n          backgroundColor: `${theme.palette.primary.dark} !important`,\r\n          color: `${theme.palette.secondary.light} !important`,\r\n        },\r\n        '&.Mui-expanded': {\r\n          backgroundColor: `${theme.palette.primary.dark} !important`,\r\n          color: `${theme.palette.secondary.light} !important`,\r\n        },\r\n      },\r\n    },\r\n    backgroundProp: {\r\n      backgroundColor: theme.palette.secondary.light,\r\n      display: 'block'\r\n    },\r\n    insideBackground: {\r\n      backgroundColor: 'white'\r\n    },\r\n    borderProp: {\r\n      boxShadow: `inset 0 0 2px ${theme.palette.primary.light}`,\r\n      backgroundColor: 'white',\r\n      marginTop: 10,\r\n      marginBottom: 5,\r\n      padding: 10,\r\n\r\n    },\r\n    toolbarIcon: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: '0 8px',\r\n      ...theme.mixins.toolbar,\r\n      '& button': {\r\n        color: '#FFF',\r\n      },\r\n    },\r\n    drawerPaperClose: {\r\n      overflowX: 'hidden',\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      width: theme.spacing(7),\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(9),\r\n      },\r\n      background: theme.palette.primary.dark,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      display: 'flex',\r\n      overflow: 'auto',\r\n      flexDirection: 'column',\r\n    },\r\n    listItem: {\r\n      width: '94%',\r\n      background: theme.palette.primary.main,\r\n      color: '#FFF',\r\n      marginTop: '2px',\r\n      marginLeft: '8px',\r\n      marginRight: '2px',\r\n      borderRadius: '3px',\r\n      '&:hover': {\r\n        background: theme.palette.primary.light,\r\n      },\r\n    },\r\n    listItemIcon: {\r\n      color: '#FFF',\r\n    },\r\n    listItemActive: {\r\n      width: '94%',\r\n      background: theme.palette.primary.light,\r\n      color: '#FFF',\r\n      marginTop: '2px',\r\n      marginLeft: '8px',\r\n      marginRight: '2px',\r\n      borderRadius: '3px',\r\n      '&:hover': {\r\n        background: theme.palette.primary.light,\r\n      },\r\n    },\r\n    nested: {\r\n      paddingLeft: theme.spacing(4),\r\n      color: '#FFF',\r\n    },\r\n    navlogo: {\r\n      width: '40%',\r\n      margin: '0 auto',\r\n      padding: 3,\r\n      backgroundColor: '#FFF',\r\n      borderRadius: 5,\r\n    },\r\n    listParent: {\r\n      color: theme.palette.common.white,\r\n      '&.MuiListItem-root': {\r\n        color: theme.palette.common.white,\r\n        '&.Mui-selected': { color: theme.palette.common.white, backgroundColor: theme.palette.primary.main },\r\n        '&:hover': {\r\n          color: theme.palette.common.white,\r\n          backgroundColor: theme.palette.primary.dark,\r\n        },\r\n      },\r\n    },\r\n    drawerClose: {\r\n      overflowX: 'hidden',\r\n      transition: theme.transitions.create('width', {\r\n        duration: theme.transitions.duration.leavingScreen,\r\n        easing: theme.transitions.easing.sharp,\r\n      }),\r\n      width: theme.spacing(7) + 1,\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(7) + 1,\r\n      },\r\n      background: theme.palette.primary.dark,\r\n    },\r\n    drawerOpen: {\r\n      '&:hover': {\r\n        overflowY: 'auto',\r\n      },\r\n      overflowY: 'hidden',\r\n      transition: theme.transitions.create('width', {\r\n        duration: theme.transitions.duration.enteringScreen,\r\n        easing: theme.transitions.easing.sharp,\r\n      }),\r\n    },\r\n  });\r\n\r\nexport default GroupStyle;\r\n","import { Accordion, AccordionDetails, AccordionSummary } from '@material-ui/core';\r\nimport { useTheme } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport GroupTypeEvaluator from '../../../../components/typeEvalutors/Group';\r\nimport {\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../utils/helpers';\r\nimport GroupStyle from './styles';\r\n\r\nexport interface GroupProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n}\r\n\r\nfunction Group(props: GroupProps) {\r\n  const {\r\n    choices,\r\n    csvList,\r\n    fieldElement,\r\n    fieldParentTreeName,\r\n    defaultLanguage,\r\n    isComponentRender,\r\n  } = props;\r\n  const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n  let isAppearanceApplicable = false;\r\n  if (fieldElement.control && fieldElement.control.appearance) {\r\n    if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n      isAppearanceApplicable = true;\r\n    }\r\n  }\r\n  const theme = useTheme();\r\n  const useStyles = makeStyles(GroupStyle(theme));\r\n  const classNames = useStyles();\r\n  if (\r\n    isComponentRender\r\n    && (fieldElement.control && fieldElement.control.bodyless\r\n      ? fieldElement.control.bodyless === false\r\n      : true)\r\n  ) {\r\n    return (\r\n      <Accordion defaultExpanded style={{ marginBottom: 10 }}>\r\n        <AccordionSummary\r\n          className={classNames.root}\r\n          expandIcon={<ExpandMoreIcon />}\r\n        >\r\n          <Typography>{fieldLabel}</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails className={classNames.backgroundProp}>\r\n          <FormGroup className={classNames.borderProp}>\r\n            {fieldElement.children && (\r\n              <GroupTypeEvaluator\r\n                choices={choices}\r\n                fieldElements={fieldElement.children}\r\n                fieldParentTreeName={`${fieldParentTreeName}group/${fieldElement.name}/`}\r\n                defaultLanguage={defaultLanguage}\r\n                csvList={csvList}\r\n                isAppearanceApplicable={isAppearanceApplicable}\r\n              />\r\n            )}\r\n          </FormGroup>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    );\r\n  }\r\n\r\n  if (\r\n    props.isErrorsIncludeGroupFieldsSelector(\r\n      `${fieldParentTreeName}group/${fieldElement.name}/`\r\n    )\r\n  ) {\r\n    props.removeGroupFieldsFromErrorsActionCreator(\r\n      `${fieldParentTreeName}group/${fieldElement.name}/`\r\n    );\r\n  }\r\n  if (\r\n    !props.isGroupFieldsEmptySelector(fieldParentTreeName + fieldElement.name)\r\n  ) {\r\n    props.emptyGroupFieldsActionCreator(\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n};\r\n\r\n/** connect Group component to the redux store */\r\nconst ConnectedGroup = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Group);\r\n\r\nexport default ConnectedGroup;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport GroupTypeEvaluator from '../../../../../components/typeEvalutors/Group';\r\n\r\nexport interface SingleRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  defaultLanguage: string;\r\n  repeatIndex: number;\r\n  assignmentHandler: any;\r\n  removeHandler: any;\r\n  removeOptionHandler: any;\r\n  unControlFlag: boolean;\r\n}\r\n\r\nclass SingleRepeat extends React.Component<SingleRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      repeatIndex,\r\n      unControlFlag,\r\n    } = this.props;\r\n    let isAppearanceApplicable = false;\r\n    if (fieldElement.control && fieldElement.control.appearance) {\r\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n        isAppearanceApplicable = true;\r\n      }\r\n    }\r\n    return (\r\n      <div className={'groupFormFieldBody'}>\r\n        {fieldElement.children && (\r\n          <GroupTypeEvaluator\r\n            choices={choices}\r\n            fieldElements={fieldElement.children}\r\n            fieldParentTreeName={\r\n              fieldParentTreeName +\r\n              'repeat/' +\r\n              fieldElement.name +\r\n              '/' +\r\n              repeatIndex +\r\n              '/'\r\n            }\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n            isAppearanceApplicable={isAppearanceApplicable}\r\n          />\r\n        )}\r\n\r\n        {unControlFlag === false ? (\r\n          <div className={'minusIconWrapper'}>\r\n            <span onClick={this.handleChange}>\r\n              <FontAwesomeIcon icon=\"minus-circle\" className={'minusIcon'} />\r\n            </span>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private handleChange = (_event: React.MouseEvent<HTMLDivElement>) => {\r\n    const {\r\n      repeatIndex,\r\n      fieldValue,\r\n      assignmentHandler,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      removeHandler,\r\n      removeOptionHandler,\r\n    } = this.props;\r\n    let newFieldValue: any[] = [...fieldValue];\r\n    newFieldValue = newFieldValue.filter(\r\n      // tslint:disable-next-line: variable-name\r\n      (_elem, index) => index !== repeatIndex\r\n    );\r\n    assignmentHandler(fieldParentTreeName + fieldElement.name, newFieldValue);\r\n    removeHandler(fieldParentTreeName + 'repeat/' + fieldElement.name + '/');\r\n    removeOptionHandler(fieldParentTreeName + fieldElement.name, repeatIndex);\r\n  };\r\n}\r\n\r\nexport default SingleRepeat;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport {\r\n  assignFieldValueAction,\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  RemoveFromOptionList,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../../utils/helpers';\r\nimport SingleRepeat from '.././Single Repeat';\r\n\r\nexport interface ControlledRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldValue: any;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\r\n}\r\n\r\nclass ControlledRepeat extends React.Component<ControlledRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldValue,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isComponentRender,\r\n      assignFieldValueActionCreator,\r\n      removeGroupFieldsFromErrorsActionCreator,\r\n      removeOptionListFromActionCreator,\r\n    } = this.props;\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (!fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          [{}]\r\n        );\r\n      }\r\n\r\n      return (\r\n        <FormGroup className={'groupBody'}>\r\n          <Label>{fieldLabel}</Label>\r\n          {fieldValue &&\r\n            // tslint:disable-next-line: variable-name\r\n            fieldValue.map((_elm: any, index: any) => (\r\n              <div className=\"repeat-fields-body\" key={'repeat' + index}>\r\n                <SingleRepeat\r\n                  choices={choices}\r\n                  defaultLanguage={defaultLanguage}\r\n                  fieldElement={fieldElement}\r\n                  fieldParentTreeName={fieldParentTreeName}\r\n                  fieldValue={fieldValue}\r\n                  repeatIndex={index}\r\n                  assignmentHandler={assignFieldValueActionCreator}\r\n                  removeHandler={removeGroupFieldsFromErrorsActionCreator}\r\n                  removeOptionHandler={removeOptionListFromActionCreator}\r\n                  csvList={csvList}\r\n                  unControlFlag={false}\r\n                />\r\n              </div>\r\n            ))}\r\n          <div>\r\n            <span onClick={this.addAnotherRepeat}>\r\n              <FontAwesomeIcon icon=\"plus-circle\" className={'plusIcon'} />\r\n            </span>\r\n          </div>\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (\r\n        this.props.isErrorsIncludeGroupFieldsSelector(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        )\r\n      ) {\r\n        this.props.removeGroupFieldsFromErrorsActionCreator(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        );\r\n      }\r\n      if (fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private addAnotherRepeat = (_event: React.MouseEvent<HTMLDivElement>) => {\r\n    const { fieldValue, fieldParentTreeName, fieldElement } = this.props;\r\n    const newFieldValue = [...fieldValue];\r\n    newFieldValue.push({});\r\n    this.props.assignFieldValueActionCreator(\r\n      fieldParentTreeName + fieldElement.name,\r\n      newFieldValue\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n  removeOptionListFromActionCreator: RemoveFromOptionList,\r\n};\r\n\r\n/** connect Group component to the redux store */\r\nconst ConnectedControlledRepeat = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ControlledRepeat);\r\n\r\nexport default ConnectedControlledRepeat;\r\n","import _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport {\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getOptionList,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  RemoveFromOptionList,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../../utils/helpers';\r\nimport SingleRepeat from '.././Single Repeat';\r\n\r\nexport interface UncontrolledRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldValue: any;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  optionList: object;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\r\n}\r\n\r\nclass UncontrolledRepeat extends React.Component<UncontrolledRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldValue,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isComponentRender,\r\n      optionList,\r\n      assignFieldValueActionCreator,\r\n      removeGroupFieldsFromErrorsActionCreator,\r\n      removeOptionListFromActionCreator,\r\n    } = this.props;\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (!fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      let noOfJrCount: number = 0;\r\n\r\n      if (fieldElement.control) {\r\n        const jrCount: string = 'jr:count';\r\n        const res: any = fieldElement.control[jrCount];\r\n\r\n        if (/^[0-9]*$/i.test(res)) {\r\n          noOfJrCount = parseInt(res, 10);\r\n        } else {\r\n          const value: any = this.props.getEvaluatedExpressionSelector(\r\n            res,\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n          if (value) {\r\n            noOfJrCount = parseInt(value, 10);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length === 0 &&\r\n        noOfJrCount === 0 &&\r\n        this.props.isErrorsIncludeGroupFieldsSelector(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        )\r\n      ) {\r\n        this.props.removeGroupFieldsFromErrorsActionCreator(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        );\r\n      }\r\n\r\n      if (fieldValue && fieldValue.length > 0 && noOfJrCount === 0) {\r\n        this.removeFromError();\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      if (optionList && _.size(optionList) > noOfJrCount && noOfJrCount === 0) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      if (noOfJrCount > 0) {\r\n        const newFieldValue = [...fieldValue];\r\n\r\n        if (fieldValue && fieldValue.length < noOfJrCount) {\r\n          const iterate = noOfJrCount - fieldValue.length;\r\n          for (let j = 0; j < iterate; j++) {\r\n            newFieldValue.push({});\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > noOfJrCount) {\r\n          const iterate = fieldValue.length - noOfJrCount;\r\n          for (let i = 0; i < iterate; i++) {\r\n            newFieldValue.pop();\r\n          }\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            newFieldValue\r\n          );\r\n          this.removeFromError();\r\n        }\r\n\r\n        if (optionList && _.size(optionList) > noOfJrCount) {\r\n          const iterate = _.size(optionList) - noOfJrCount;\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            Array.prototype.slice.call(optionList, iterate)\r\n          );\r\n          this.removeFromError();\r\n        }\r\n\r\n        return (\r\n          <FormGroup className={'groupBodyUnControlled'}>\r\n            <Label>{fieldLabel}</Label>\r\n            {newFieldValue &&\r\n              // tslint:disable-next-line: variable-name\r\n              newFieldValue.map((_elm: any, index: any) => (\r\n                <div className=\"repeat-fields-body\" key={'repeat' + index}>\r\n                  <SingleRepeat\r\n                    choices={choices}\r\n                    defaultLanguage={defaultLanguage}\r\n                    fieldElement={fieldElement}\r\n                    fieldParentTreeName={fieldParentTreeName}\r\n                    fieldValue={fieldValue}\r\n                    repeatIndex={index}\r\n                    assignmentHandler={assignFieldValueActionCreator}\r\n                    removeHandler={removeGroupFieldsFromErrorsActionCreator}\r\n                    removeOptionHandler={removeOptionListFromActionCreator}\r\n                    csvList={csvList}\r\n                    unControlFlag={true}\r\n                  />\r\n                </div>\r\n              ))}\r\n          </FormGroup>\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      this.removeFromError();\r\n      if (fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private removeFromError() {\r\n    if (\r\n      this.props.isErrorsIncludeGroupFieldsSelector(\r\n        this.props.fieldParentTreeName +\r\n          'repeat/' +\r\n          this.props.fieldElement.name +\r\n          '/'\r\n      )\r\n    ) {\r\n      this.props.removeGroupFieldsFromErrorsActionCreator(\r\n        this.props.fieldParentTreeName +\r\n          'repeat/' +\r\n          this.props.fieldElement.name +\r\n          '/'\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n  removeOptionListFromActionCreator: RemoveFromOptionList,\r\n};\r\n\r\n/** connect Repeat component to the redux store */\r\nconst ConnectedUncontrolledRepeat = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UncontrolledRepeat);\r\n\r\nexport default ConnectedUncontrolledRepeat;\r\n","import * as React from 'react';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport ControlledRepeat from './Controlled Repeat';\r\nimport UncontrolledRepeat from './Uncontrolled Repeat';\r\n\r\n/** props interface for the Repeat component */\r\nexport interface RepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Repeat extends React.Component<RepeatProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (fieldElement.control && fieldElement.control['jr:count']) {\r\n      return <UncontrolledRepeat {...this.props} />;\r\n    }\r\n    return <ControlledRepeat {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default Repeat;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Input } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\n\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the calculate component */\r\nexport interface CalculateProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Calculate extends React.Component<CalculateProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      isPresentInErrorSelector,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      \r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      let calculatedValue: any = '';\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (calculatedValue && fieldValue !== calculatedValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          calculatedValue\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          <Input\r\n            type=\"hidden\"\r\n            name={fieldElement.name}\r\n            value={calculatedValue || ''}\r\n            readOnly={isReadonly}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Calculate component to the redux store */\r\nconst ConnectedCalculate = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Calculate);\r\n\r\nexport default ConnectedCalculate;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the KbDate component */\r\nexport interface DateProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass KbDate extends React.Component<DateProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      let defaultValue: string = '';\r\n      if (fieldValue && fieldValue !== '') {\r\n        const modifiedDate = new Date(fieldValue);\r\n        defaultValue = modifiedDate.toISOString().slice(0, 10);\r\n      }\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"date\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            value={defaultValue}\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? new Date(event.currentTarget.value)\r\n        : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect KbDate component to the redux store */\r\nconst ConnectedDate = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(KbDate);\r\n\r\nexport default ConnectedDate;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n/** props interface for the date Time component */\r\nexport interface DateTimeProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass DateTime extends React.Component<DateTimeProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      let modifiedDate: any = null;\r\n      if (fieldValue) {\r\n        modifiedDate = new Date(fieldValue);\r\n        const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\r\n        modifiedDate.setHours(modifiedDate.getHours() - timeZoneOffset);\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <br />\r\n          <DatePicker\r\n            name={fieldElement.name}\r\n            selected={fieldValue ? modifiedDate : null}\r\n            onChange={this.handleChange(fieldElement.name)}\r\n            showTimeSelect={true}\r\n            timeFormat=\"h:m aa\"\r\n            timeIntervals={15}\r\n            timeCaption=\"time\"\r\n            dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n            placeholderText=\"mm/dd/yyyy h:m aa\"\r\n            className=\"form-control\"\r\n            readOnly={isReadonly}\r\n          />\r\n          <br />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private handleChange = (name: any) => (value: any) => {\r\n    const modifiedDate: any = new Date(value);\r\n    const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\r\n    modifiedDate.setHours(modifiedDate.getHours() + timeZoneOffset);\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + name,\r\n      value !== '' ? modifiedDate : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Date Time component to the redux store */\r\nconst ConnectedDateTime = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DateTime);\r\n\r\nexport default ConnectedDateTime;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the decimal component */\r\nexport interface DecimalProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface DecimalState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\n\r\nclass Decimal extends React.Component<DecimalProps, DecimalState> {\r\n  constructor(props: DecimalProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated =\r\n      isRequired &&\r\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\r\n    const isConstraintViolated =\r\n      fieldValue !== '' &&\r\n      fieldValue !== null &&\r\n      fieldValue !== undefined &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          parseFloat(this.props.fieldValue)\r\n        );\r\n      }\r\n\r\n      let modifiedValue: any;\r\n      {\r\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (fieldValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n        modifiedValue = calculatedValue;\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"number\"\r\n            step=\"any\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            onBlur={this.onBlurHandler}\r\n            value={\r\n              this.state.isFocused\r\n                ? this.state.fieldValue || ''\r\n                : modifiedValue || ''\r\n            }\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? parseFloat(event.currentTarget.value)\r\n        : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Decimal component to the redux store */\r\nconst ConnectedDecimal = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Decimal);\r\n\r\nexport default ConnectedDecimal;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  assignFieldValueAction,\r\n  getFileObject,\r\n} from '../../../../../store/ducks/formState';\r\n\r\ninterface FilePreviewProps {\r\n  fieldName: string;\r\n  fieldValue: any;\r\n  fileObject: any;\r\n  assignFieldValueActionCreator: any;\r\n}\r\n\r\nclass FilePreview extends React.Component<FilePreviewProps> {\r\n  public render() {\r\n    const { fieldName, fieldValue, assignFieldValueActionCreator } = this.props;\r\n    const removeHandler = () => {\r\n      assignFieldValueActionCreator(fieldName, null);\r\n    };\r\n    return (\r\n      <>\r\n        <p className=\"text-muted\">\r\n          Uploaded File Name: <strong className=\"text-primary\"> {fieldValue} </strong>\r\n        </p>\r\n        <Button size=\"sm\" color=\"danger\" onClick={removeHandler}>\r\n          Remove File\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fileObject: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldName: string;\r\n  fieldValue: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldValue } = parentProps;\r\n  const result = {\r\n    fileObject: getFileObject(state, fieldValue),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n};\r\n\r\n/** connect FilePreview component to the redux store */\r\nconst ConnectedFilePreview = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FilePreview);\r\n\r\nexport default ConnectedFilePreview;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport { PHOTO_FIELD_TYPE } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  addMediaListAction,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\nimport FilePreview from './FilePreview/FilePreview';\r\n\r\n/** props interface for the file component */\r\nexport interface FileProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  addMediaListActionCreator: typeof addMediaListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass File extends React.Component<FileProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          {fieldValue ? (\r\n            <FilePreview\r\n              fieldName={fieldParentTreeName + fieldElement.name}\r\n              fieldValue={fieldValue}\r\n            />\r\n          ) : fieldElement.type === PHOTO_FIELD_TYPE ? (\r\n            <Input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              readOnly={isReadonly}\r\n            />\r\n          ) : (\r\n            <Input\r\n              type=\"file\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              readOnly={isReadonly}\r\n            />\r\n          )}\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: any) => {\r\n    if (event.target.files[0]) {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + event.target.name,\r\n        event.target.files[0].name\r\n      );\r\n      this.props.addMediaListActionCreator(event.target.files[0]);\r\n    } else {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + event.target.name,\r\n        null\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  addMediaListActionCreator: addMediaListAction,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect File component to the redux store */\r\nconst ConnectedFile = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(File);\r\n\r\nexport default ConnectedFile;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the integer component */\r\nexport interface IntegerProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\nexport interface IntegerState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\nclass Integer extends React.Component<IntegerProps, IntegerState> {\r\n  constructor(props: IntegerProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated =\r\n      isRequired &&\r\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\r\n\r\n    const isConstraintViolated =\r\n      fieldValue !== '' &&\r\n      fieldValue !== null &&\r\n      fieldValue !== undefined &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel =\r\n      customizeLabelsWithPreviousInputs(\r\n        getEvaluatedExpressionSelector,\r\n        constraintLabel,\r\n        fieldParentTreeName + fieldElement.name\r\n      ) || '';\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          parseInt(this.props.fieldValue, 10)\r\n        );\r\n      }\r\n\r\n      let modifiedValue: any;\r\n      {\r\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (fieldValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n        modifiedValue = calculatedValue;\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"number\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            onBlur={this.onBlurHandler}\r\n            value={\r\n              this.state.isFocused\r\n                ? this.state.fieldValue || ''\r\n                : modifiedValue || ''\r\n            }\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? parseInt(event.currentTarget.value, 10)\r\n        : null\r\n    );\r\n  };\r\n}\r\n/** connect the component to the store */\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n/** connect Integer component to the redux store */\r\nconst ConnectedInteger = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Integer);\r\nexport default ConnectedInteger;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, FormText, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the text component */\r\nexport interface NoteProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  isPresentInErrorSelector: any;\r\n  isComponentRender: boolean;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Note extends React.Component<NoteProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const fieldHint = getHintLabelText(fieldElement, defaultLanguage);\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      return (\r\n        <FormGroup>\r\n          <Label>{fieldLabel}</Label>\r\n          {isRequired && (\r\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\r\n          )}\r\n          {fieldElement.hint && (\r\n            <FormText className=\"hintText\">{fieldHint}</FormText>\r\n          )}\r\n\r\n          {isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Note component to the redux store */\r\nconst ConnectedNote = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Note);\r\n\r\nexport default ConnectedNote;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from 'react-select';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectAll Dropdown component */\r\nexport interface SelectAllDropDownProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\n\r\nconst customStyles = {\r\n  // For the select itself (not the options)\r\n  control: (styles: any, { isDisabled }: any) => {\r\n    return {\r\n      ...styles,\r\n      backgroundColor: isDisabled ? 'white' : 'white',\r\n    }\r\n  },\r\n\r\n    // For the select itself (not the options)\r\n    container: (styles: any, { isDisabled }: any) => {\r\n      return {\r\n        ...styles,\r\n        backgroundColor: isDisabled ? 'white' : 'white',\r\n      }\r\n    },\r\n};\r\n\r\nclass SelectAllDropDown extends React.Component<SelectAllDropDownProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== [] &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      const options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n        this.setOptionList(resultOptions);\r\n      } else if (fieldElement.itemset) {\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n\r\n          const optionsArray: any = [];\r\n          if (options) {\r\n            options.map(elem => {\r\n              const elemObj: any = {};\r\n              const name: string = 'name';\r\n              const label: string = 'label';\r\n              elemObj[name] = elem.value;\r\n              elemObj[label] = elem.label;\r\n              optionsArray.push(elemObj);\r\n            });\r\n          }\r\n          this.setOptionList(optionsArray);\r\n        }\r\n      } else {\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem => {\r\n            const childrenLabel: string = getFieldLabelText(\r\n              elem,\r\n              defaultLanguage\r\n            );\r\n\r\n            options.push({ label: childrenLabel, value: elem.name });\r\n          });\r\n          this.setOptionList(fieldElement.children);\r\n        }\r\n      }\r\n\r\n      const tmpValueArray: any = [];\r\n      let isNotIncluded: boolean = false;\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        const optionsValueArray: any = [];\r\n        options.map(elem => {\r\n          if (elem.value) {\r\n            optionsValueArray.push(elem.value);\r\n          }\r\n        });\r\n\r\n        for (const row of fieldValue) {\r\n          if (!optionsValueArray.includes(row)) {\r\n            isNotIncluded = true;\r\n          } else {\r\n            tmpValueArray.push(row);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n        this.props.assignFieldValueActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          tmpValueArray || []\r\n        );\r\n      }\r\n\r\n      const selectedValues: any[] = [];\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        options.map(elem => {\r\n          for (const row of fieldValue) {\r\n            if (elem.value === row) {\r\n              selectedValues.push(elem);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        const seperatedValues: string[] = fieldValue.split(' ');\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          seperatedValues\r\n        );\r\n      }\r\n\r\n      let calculatedValue: any = '';\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (calculatedValue && fieldValue !== calculatedValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          calculatedValue\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <div key={fieldElement.name} className=\"selectAllDropDown\">\r\n            <Select\r\n              styles={customStyles}\r\n              isDisabled={isReadonly}\r\n              isMulti={true}\r\n              name={fieldElement.name}\r\n              options={options}\r\n              onChange={this.onChangeHandler(fieldElement.name)}\r\n              value={selectedValues || calculatedValue || []}\r\n            />\r\n          </div>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      if (this.props.optionList != null) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** Sets the option list to the Redux Store\r\n   * @param {any} optionObject - the option object to be processed\r\n   */\r\n  private setOptionList = (optionObject: any) => {\r\n    const tempObjArray: any = [];\r\n    optionObject.map((elem: { name: any; label: any }) => {\r\n      const elemObj: any = {};\r\n      const name: string = 'name';\r\n      const label: string = 'label';\r\n      elemObj[name] = elem.name;\r\n      elemObj[label] = elem.label;\r\n      tempObjArray.push(elemObj);\r\n    });\r\n\r\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\r\n      this.props.assignOptionListActionCreator(\r\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n        tempObjArray\r\n      );\r\n    }\r\n  };\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} values - the onchange input values\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandler = (fieldName: any) => (values: any) => {\r\n    const selectedValues: any = [];\r\n    let i = 0;\r\n    if (values && values.length > 0) {\r\n      values.map(() => {\r\n        if (!selectedValues.includes(values[i].value)) {\r\n          selectedValues.push(values[i].value);\r\n        }\r\n        i++;\r\n      });\r\n\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + fieldName,\r\n        selectedValues\r\n      );\r\n    } else {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + fieldName,\r\n        null\r\n      );\r\n    }\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const finalRes: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n\r\n        let filterResult: any = [];\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n\r\n        let j = 0;\r\n        filterResult.map(() => {\r\n          options.map(option => {\r\n            if (option[nameOfKey] === filterResult[j]) {\r\n              finalRes.push(option);\r\n            }\r\n          });\r\n          j = j + 1;\r\n        });\r\n\r\n        i = i + 2;\r\n      }\r\n\r\n      options = [...Array.from(new Set(finalRes))];\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string[];\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Dropdown component to the redux store */\r\nconst ConnectedSelectAllDropDown = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectAllDropDown);\r\n\r\nexport default ConnectedSelectAllDropDown;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectAll Radio component */\r\nexport interface SelectAllRadioProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n  optionList: object;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectAllRadio extends React.Component<SelectAllRadioProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== [] &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      let options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      const childrenArray: any = [];\r\n      if (fieldElement.children) {\r\n        fieldElement.children.map(elem => {\r\n          const elemObj: any = {};\r\n          const name: string = 'name';\r\n          const label: string = 'label';\r\n          elemObj[name] = elem.name;\r\n          elemObj[label] = elem.label;\r\n          childrenArray.push(elemObj);\r\n        });\r\n      }\r\n\r\n      let values: any = [];\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        values = [];\r\n        options = [];\r\n        const tmpValueArray: any = [];\r\n        let isNotIncluded: boolean = false;\r\n\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n\r\n        if (fieldValue && fieldValue.length > 0) {\r\n          const optionsValueArray: any = [];\r\n          options.map(elem => {\r\n            if (elem.value) {\r\n              optionsValueArray.push(elem.value);\r\n            }\r\n          });\r\n\r\n          for (const row of fieldValue) {\r\n            if (!optionsValueArray.includes(row)) {\r\n              isNotIncluded = true;\r\n            } else {\r\n              tmpValueArray.push(row);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            tmpValueArray || []\r\n          );\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            resultOptions\r\n          );\r\n        }\r\n        values = [...resultOptions];\r\n      } else if (fieldElement.itemset) {\r\n        values = [];\r\n        options = [];\r\n        const tmpValueArray: any = [];\r\n        const optionsArray: any = [];\r\n        let isNotIncluded: boolean = false;\r\n\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0) {\r\n          const optionsValueArray: any = [];\r\n          options.map((elem: any) => {\r\n            if (elem.value) {\r\n              optionsValueArray.push(elem.value);\r\n            }\r\n          });\r\n\r\n          for (const row of fieldValue) {\r\n            if (!optionsValueArray.includes(row)) {\r\n              isNotIncluded = true;\r\n            } else {\r\n              tmpValueArray.push(row);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            tmpValueArray || []\r\n          );\r\n        }\r\n\r\n        if (options) {\r\n          options.map(elem => {\r\n            const elemObj: any = {};\r\n            const name: string = 'name';\r\n            const label: string = 'label';\r\n            elemObj[name] = elem.value;\r\n            elemObj[label] = elem.label;\r\n            optionsArray.push(elemObj);\r\n          });\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...optionsArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            optionsArray\r\n          );\r\n        }\r\n\r\n        values = [...optionsArray];\r\n      } else {\r\n        values = [];\r\n        options = [];\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem =>\r\n            options.push({ label: elem.label, value: elem.name })\r\n          );\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            childrenArray\r\n          );\r\n        }\r\n        values = [...childrenArray];\r\n      }\r\n\r\n      const selectedValues: any[] = [];\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        options.map(elem => {\r\n          for (const row of fieldValue) {\r\n            if (elem.value === row) {\r\n              selectedValues.push(elem.value);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      let flagInline = false;\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\r\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\r\n            flagInline = true;\r\n          }\r\n        });\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        const seperatedValues: string[] = fieldValue.split(' ');\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          seperatedValues\r\n        );\r\n      }\r\n\r\n      let calculatedValue: any = '';\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (calculatedValue && fieldValue !== calculatedValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          calculatedValue\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <div>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Form key=\"selectAll\">\r\n            {values.map((elem: any, index: any) => (\r\n              <FormGroup key={index} check={true} inline={flagInline}>\r\n                <Label check={true}>\r\n                  <Input\r\n                    key={fieldElement.name + '-' + index}\r\n                    type=\"checkbox\"\r\n                    name={fieldElement.name}\r\n                    value={elem.name || []}\r\n                    onChange={this.onChangeHandlerCheckBox}\r\n                    readOnly={isReadonly}\r\n                    checked={selectedValues.includes(elem.name) || calculatedValue.includes(elem.name)}\r\n                  />{' '}\r\n                  {getFieldLabelText(elem, defaultLanguage)}\r\n                </Label>\r\n              </FormGroup>\r\n            ))}\r\n          </Form>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n\r\n      if (this.props.optionList != null) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} event - the onchange event\r\n   */\r\n\r\n  private onChangeHandlerCheckBox = (event: any) => {\r\n    const { fieldValue, fieldElement, fieldParentTreeName } = this.props;\r\n    const fieldName = fieldParentTreeName + fieldElement.name;\r\n    if (event.target.checked) {\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length > 0 &&\r\n        !fieldValue.includes(event.target.value)\r\n      ) {\r\n        this.props.assignFieldValueActionCreator(fieldName, [\r\n          ...fieldValue,\r\n          event.target.value,\r\n        ]);\r\n      } else {\r\n        this.props.assignFieldValueActionCreator(fieldName, [\r\n          event.target.value,\r\n        ]);\r\n      }\r\n    } else {\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length > 0 &&\r\n        fieldValue.includes(event.target.value)\r\n      ) {\r\n        const newValue = fieldValue.filter(\r\n          (elm: any) => elm !== event.target.value\r\n        );\r\n\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldName,\r\n          newValue.length ? newValue : null\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const finalRes: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n\r\n        let filterResult: any = [];\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n\r\n        let j = 0;\r\n        filterResult.map(() => {\r\n          options.map(option => {\r\n            if (option[nameOfKey] === filterResult[j]) {\r\n              finalRes.push(option);\r\n            }\r\n          });\r\n          j = j + 1;\r\n        });\r\n\r\n        i = i + 2;\r\n      }\r\n\r\n      options = [...Array.from(new Set(finalRes))];\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string[];\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Radio component to the redux store */\r\nconst ConnectedSelectAllRadio = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectAllRadio);\r\n\r\nexport default ConnectedSelectAllRadio;\r\n","import * as React from 'react';\r\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport Dropdown from './Dropdown';\r\nimport Radio from './Radio';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectAllProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass SelectAll extends React.Component<SelectAllProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (shouldComponentBeMinimal(fieldElement)) {\r\n      return <Dropdown {...this.props} />;\r\n    }\r\n    return <Radio {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default SelectAll;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from 'react-select';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneDropDownProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nconst customStyles = {\r\n  // For the select itself (not the options)\r\n  control: (styles: any, { isDisabled }: any) => {\r\n    return {\r\n      ...styles,\r\n      backgroundColor: isDisabled ? 'white' : 'white',\r\n    }\r\n    \r\n  },\r\n\r\n    // For the select itself (not the options)\r\n    container: (styles: any, { isDisabled }: any) => {\r\n      return {\r\n        ...styles,\r\n        backgroundColor: isDisabled ? 'white' : 'white',\r\n      }\r\n    },\r\n};\r\n\r\nclass SelectOneDropDown extends React.Component<SelectOneDropDownProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      const options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n\r\n        this.setOptionList(resultOptions);\r\n      } else if (fieldElement.itemset) {\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n          this.setOptionList(choices[fieldElement.itemset.trim()]);\r\n        }\r\n      } else {\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem => {\r\n            const childrenLabel: string = getFieldLabelText(\r\n              elem,\r\n              defaultLanguage\r\n            );\r\n            options.push({ label: childrenLabel, value: elem.name });\r\n          });\r\n\r\n          this.setOptionList(fieldElement.children);\r\n        }\r\n      }\r\n\r\n      if (fieldValue) {\r\n        const optionsValueArray: any = [];\r\n        options.map(elem => {\r\n          if (elem.value) {\r\n            optionsValueArray.push(elem.value);\r\n          }\r\n        });\r\n\r\n        if (!optionsValueArray.includes(fieldValue)) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            ''\r\n          );\r\n        }\r\n      }\r\n\r\n      let selectedValue: any;\r\n      options.map(elem => {\r\n        if (elem.value === fieldValue) {\r\n          selectedValue = elem;\r\n        }\r\n      });\r\n\r\n      let calculatedValue: any = '';\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (calculatedValue && fieldValue !== calculatedValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          calculatedValue\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <div key={fieldElement.name} className=\"selectOneDropDown\">\r\n            <Select\r\n              styles={customStyles}\r\n              isDisabled={isReadonly}\r\n              multi={false}\r\n              name={fieldElement.name}\r\n              options={options}\r\n              value={selectedValue || calculatedValue || ''}\r\n              onChange={this.onChangeHandler(fieldElement.name)}\r\n            />\r\n          </div>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** Sets the option list to the Redux Store\r\n   * @param {any} optionObject - the option object to be processed\r\n   */\r\n  private setOptionList = (optionObject: any) => {\r\n    const tempObjArray: any = [];\r\n    optionObject.map((elem: { name: any; label: any }) => {\r\n      const elemObj: any = {};\r\n      const name: string = 'name';\r\n      const label: string = 'label';\r\n      elemObj[name] = elem.name;\r\n      elemObj[label] = elem.label;\r\n      tempObjArray.push(elemObj);\r\n    });\r\n\r\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\r\n      this.props.assignOptionListActionCreator(\r\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n        tempObjArray\r\n      );\r\n    }\r\n  };\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} event - the onchange input event\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandler = (fieldName: any) => (event: any) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + fieldName,\r\n      event.value || ''\r\n    );\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n        let filterResult: any = '';\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n        options = options.filter(option => option[nameOfKey] === filterResult);\r\n        i = i + 2;\r\n      }\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne component to the redux store */\r\nconst ConnectedSelectOneDropDown = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectOneDropDown);\r\n\r\nexport default ConnectedSelectOneDropDown;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneRadioProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectOneRadio extends React.Component<SelectOneRadioProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        if (/search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)) {\r\n          const processedStringArray = fieldElement.control.appearance.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      const childrenArray: any = [];\r\n      if (fieldElement.children) {\r\n        fieldElement.children.map(elem => {\r\n          const elemObj: any = {};\r\n          const name: string = 'name';\r\n          const label: string = 'label';\r\n          elemObj[name] = elem.name;\r\n          elemObj[label] = elem.label;\r\n          childrenArray.push(elemObj);\r\n        });\r\n      }\r\n\r\n      let values: any = [];\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        values = [];\r\n        if (fieldValue) {\r\n          const optionsValueArray: any = [];\r\n          resultOptions.map(elem => {\r\n            if (elem.name) {\r\n              optionsValueArray.push(elem.name);\r\n            }\r\n          });\r\n\r\n          if (!optionsValueArray.includes(fieldValue)) {\r\n            this.props.assignFieldValueActionCreator(\r\n              this.props.fieldParentTreeName + fieldElement.name,\r\n              ''\r\n            );\r\n          }\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            resultOptions\r\n          );\r\n        }\r\n        values = [...resultOptions];\r\n      } else if (fieldElement.itemset) {\r\n        const choiceOptions: any = [];\r\n        values = [];\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              choiceOptions.push({ label: childrenLabel, name: elem.name });\r\n            }\r\n          });\r\n\r\n          if (fieldValue) {\r\n            const optionsValueArray: any = [];\r\n            choiceOptions.map((elem: any) => {\r\n              if (elem.name) {\r\n                optionsValueArray.push(elem.name);\r\n              }\r\n            });\r\n            if (!optionsValueArray.includes(fieldValue)) {\r\n              this.props.assignFieldValueActionCreator(\r\n                this.props.fieldParentTreeName + fieldElement.name,\r\n                ''\r\n              );\r\n            }\r\n          }\r\n          if (!_.isEqual(this.props.optionList, { ...choiceOptions })) {\r\n            this.props.assignOptionListActionCreator(\r\n              this.props.fieldParentTreeName + fieldElement.name,\r\n              choiceOptions\r\n            );\r\n          }\r\n          values = [...choiceOptions];\r\n        }\r\n      } else {\r\n        values = [];\r\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            childrenArray\r\n          );\r\n        }\r\n        values = [...childrenArray];\r\n      }\r\n\r\n      let flagInline = false;\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\r\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\r\n            flagInline = true;\r\n          }\r\n        });\r\n      }\r\n\r\n      let calculatedValue: any = '';\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (calculatedValue && fieldValue !== calculatedValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          calculatedValue\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <div>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Form key=\"selectOne\">\r\n            {values.map((elem: any, index: any) => (\r\n              <FormGroup key={index} check={true} inline={flagInline}>\r\n                <Label check={true}>\r\n                  <Input\r\n                    key={fieldElement.name + '-' + index}\r\n                    type=\"radio\"\r\n                    name={fieldElement.name}\r\n                    value={elem.name}\r\n                    onChange={this.onChangeHandlerRadio(fieldElement.name)}\r\n                    readOnly={isReadonly}\r\n                    checked={elem.name === fieldValue || elem.name === calculatedValue}\r\n                  />{' '}\r\n                  {getFieldLabelText(elem, defaultLanguage)}\r\n                </Label>\r\n              </FormGroup>\r\n            ))}\r\n          </Form>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n  /** sets the value of Radio Button field element in store\r\n   * @param {any} event - the onchange input event\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandlerRadio = (fieldName: any) => (event: any) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + fieldName,\r\n      event.target.value || ''\r\n    );\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique radio button options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n        let filterResult: any = '';\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n        options = options.filter(option => option[nameOfKey] === filterResult);\r\n        i = i + 2;\r\n      }\r\n    }\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Radio component to the redux store */\r\nconst ConnectedSelectOneRadio = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectOneRadio);\r\n\r\nexport default ConnectedSelectOneRadio;\r\n","import * as React from 'react';\r\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport Dropdown from './Dropdown';\r\nimport Radio from './Radio';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass SelectOne extends React.Component<SelectOneProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (shouldComponentBeMinimal(fieldElement)) {\r\n      return <Dropdown {...this.props} />;\r\n    }\r\n    return <Radio {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default SelectOne;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the text component */\r\nexport interface TextProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isPresentInErrorSelector: any;\r\n  isComponentRender: boolean;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface TextState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\n\r\nclass Text extends React.Component<TextProps, TextState> {\r\n  constructor(props: TextProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (calculatedValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n\r\n        return (\r\n          <FormGroup>\r\n            <Label>\r\n              {modifiedFieldLabel}{' '}\r\n              {isRequired && (\r\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n              )}\r\n            </Label>\r\n            <Input\r\n              type=\"text\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              onBlur={this.onBlurHandler}\r\n              value={\r\n                this.state.isFocused\r\n                  ? this.state.fieldValue || ''\r\n                  : calculatedValue || ''\r\n              }\r\n              readOnly={isReadonly}\r\n            />\r\n            {isFormSubmitted && isError && (\r\n              <FontAwesomeIcon\r\n                icon=\"exclamation-circle\"\r\n                className=\"errorSign\"\r\n              />\r\n            )}\r\n            {fieldElement.hint && (\r\n              <Label className=\"hintText\">{hintLabel}</Label>\r\n            )}\r\n            {isFormSubmitted && isRequiredViolated && (\r\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n            )}\r\n            {isConstraintViolated && (\r\n              <Label className=\"constraintText\">\r\n                {modifiedConstraintLabel}\r\n              </Label>\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      } else {\r\n        return (\r\n          <FormGroup>\r\n            <Label>\r\n              {modifiedFieldLabel}{' '}\r\n              {isRequired && (\r\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n              )}\r\n            </Label>\r\n            <Input\r\n              type=\"text\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              onBlur={this.onBlurHandler}\r\n              value={\r\n                this.state.isFocused\r\n                  ? this.state.fieldValue || ''\r\n                  : fieldValue || ''\r\n              }\r\n              readOnly={isReadonly}\r\n            />\r\n            {isFormSubmitted && isError && (\r\n              <FontAwesomeIcon\r\n                icon=\"exclamation-circle\"\r\n                className=\"errorSign\"\r\n              />\r\n            )}\r\n            {fieldElement.hint && (\r\n              <Label className=\"hintText\">{hintLabel}</Label>\r\n            )}\r\n            {isFormSubmitted && isRequiredViolated && (\r\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n            )}\r\n            {isConstraintViolated && (\r\n              <Label className=\"constraintText\">\r\n                {modifiedConstraintLabel}\r\n              </Label>\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      }\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value || ''\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Text component to the redux store */\r\nconst ConnectedText = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Text);\r\n\r\nexport default ConnectedText;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the KbTime component */\r\nexport interface TimeProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass KbTime extends React.Component<TimeProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      let calculatedValue: any = '';\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (calculatedValue && fieldValue !== calculatedValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          calculatedValue\r\n        );\r\n      }\r\n\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"time\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            value={fieldValue || calculatedValue || ''}\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== '' ? event.currentTarget.value : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect KbTime component to the redux store */\r\nconst ConnectedTime = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(KbTime);\r\n\r\nexport default ConnectedTime;\r\n","import * as React from 'react';\r\nimport {\r\n  CALCULATE_FIELD_TYPE,\r\n  DATE_FIELD_TYPE,\r\n  DATE_TIME_FIELD_TYPE,\r\n  DECIMAL_FIELD_TYPE,\r\n  FILE_FIELD_TYPE,\r\n  INTEGER_FIELD_TYPE,\r\n  NOTE_FIELD_TYPE,\r\n  PHOTO_FIELD_TYPE,\r\n  SELECT_ALL_FIELD_TYPE,\r\n  SELECT_ONE_FIELD_TYPE,\r\n  TEXT_FIELD_TYPE,\r\n  TIME_FIELD_TYPE,\r\n} from '../../../constants';\r\nimport Calculate from '../../../containers/fields/base/Calculate';\r\nimport KbDate from '../../../containers/fields/base/Date';\r\nimport DateTime from '../../../containers/fields/base/Date Time';\r\nimport Decimal from '../../../containers/fields/base/Decimal';\r\nimport File from '../../../containers/fields/base/File';\r\nimport Integer from '../../../containers/fields/base/Integer';\r\nimport Note from '../../../containers/fields/base/Note';\r\nimport SelectAll from '../../../containers/fields/base/Select All';\r\nimport SelectOne from '../../../containers/fields/base/Select One';\r\nimport Text from '../../../containers/fields/base/Text';\r\nimport KbTime from '../../../containers/fields/base/Time';\r\n\r\n/** type of fieldParentTreeName */\r\nexport type FieldParentTreeName = string;\r\n\r\n/** interface for bind property */\r\ninterface BindProperty {\r\n  calculate?: string;\r\n  relevant?: string;\r\n  readonly?: string;\r\n  appearance?: string;\r\n  required?: string;\r\n  constraint?: string;\r\n  'jr:constraintMsg'?: { [key: string]: string } | string;\r\n}\r\n\r\n/** interface for kobo field element */\r\nexport interface FieldElement {\r\n  name: string;\r\n  type: string;\r\n  children?: any[];\r\n  bind?: BindProperty;\r\n  label?: { [key: string]: string } | string;\r\n  default?: any;\r\n  control?: any;\r\n  hint?: any;\r\n  itemset?: string;\r\n  choice_filter?: string;\r\n}\r\n\r\n/** props interface for BaseTypeEvaluator component */\r\nexport interface BaseTypeEvaluatorProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\nclass BaseTypeEvaluator extends React.Component<BaseTypeEvaluatorProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    return this.typeEvaluator(\r\n      choices,\r\n      csvList,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage\r\n    );\r\n  }\r\n\r\n  /** returns jsx components based on field types\r\n   * @param {any} choices - the choices of form definition\r\n   * @param {FieldElement} fieldElement - the field element object\r\n   * @param {FieldParentTreeName} fieldParentTreeName - the field parent hierchical name\r\n   * @return {React.ReactElement} - jsx base components\r\n   */\r\n  private typeEvaluator(\r\n    choices: any,\r\n    csvList: any,\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: FieldParentTreeName,\r\n    defaultLanguage: string\r\n  ): React.ReactElement {\r\n    switch (fieldElement.type) {\r\n      case TEXT_FIELD_TYPE:\r\n        return (\r\n          <Text\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DATE_FIELD_TYPE:\r\n        return (\r\n          <KbDate\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case TIME_FIELD_TYPE:\r\n        return (\r\n          <KbTime\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DATE_TIME_FIELD_TYPE:\r\n        return (\r\n          <DateTime\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case INTEGER_FIELD_TYPE:\r\n        return (\r\n          <Integer\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DECIMAL_FIELD_TYPE:\r\n        return (\r\n          <Decimal\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case NOTE_FIELD_TYPE:\r\n        return (\r\n          <Note\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case CALCULATE_FIELD_TYPE:\r\n        return (\r\n          <Calculate\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case SELECT_ONE_FIELD_TYPE:\r\n        return (\r\n          <SelectOne\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n      case SELECT_ALL_FIELD_TYPE:\r\n        return (\r\n          <SelectAll\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n      case PHOTO_FIELD_TYPE:\r\n        return (\r\n          <File\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case FILE_FIELD_TYPE:\r\n        return (\r\n          <File\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <div style={{ display: 'none' }}>\r\n            Other {fieldElement.type} {fieldElement.name}\r\n          </div>\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nexport default BaseTypeEvaluator;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport { CALCULATE_FIELD_TYPE, GROUP_FIELD_TYPE, REPEAT_FIELD_TYPE } from '../../../constants';\r\nimport Group from '../../../containers/fields/group/Group';\r\nimport Repeat from '../../../containers/fields/group/Repeat';\r\nimport { getEvaluatedExpression } from '../../../store/ducks/formState';\r\nimport { shouldComponentBeRelevant } from '../../../utils/helpers';\r\nimport BaseTypeEvaluator, { FieldElement, FieldParentTreeName } from '../Base';\r\n\r\n/** props Interface for the GroupTypeEvaluator component */\r\nexport interface GroupTypeEvaluatorProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElements: FieldElement[];\r\n  fieldParentTreeName: string;\r\n  isAppearanceApplicable: boolean;\r\n  getEvaluatedExpressionSelector: any;\r\n}\r\n\r\nclass GroupTypeEvaluator extends React.Component<GroupTypeEvaluatorProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldElements,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isAppearanceApplicable,\r\n    } = this.props;\r\n    return (\r\n      <Row className=\"groupTypeEvaluatorRow\">\r\n        {fieldElements.map((fieldElement) => {\r\n          const value: number = this.getAppearanceValue(\r\n            fieldElement,\r\n            fieldParentTreeName,\r\n            isAppearanceApplicable,\r\n          );\r\n          return (\r\n            <Col\r\n              key={`group_${fieldElement.name}`}\r\n              className={ value === 0 || fieldElement.type === CALCULATE_FIELD_TYPE ? \"groupTypeEvaluator hideDiv\" : \"groupTypeEvaluator\"}\r\n              md={value}\r\n              // hidden={value === 0}\r\n            >\r\n              {this.typeEvaluator(\r\n                choices,\r\n                csvList,\r\n                fieldElement,\r\n                fieldParentTreeName,\r\n                defaultLanguage,\r\n              )}\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  /** returns jsx components based on field types\r\n   * @param {any} choices - the form choices\r\n   * @param {FieldElement} fieldElement - the field element object\r\n   * @param {FieldParentTreeName} - the field parent hierarchical name\r\n   * @return {React.ReactElement} - jsx group components/ base evaluator component\r\n   */\r\n  private typeEvaluator(\r\n    choices: any,\r\n    csvList: any,\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: FieldParentTreeName,\r\n    defaultLanguage: string,\r\n  ): React.ReactElement {\r\n    switch (fieldElement.type) {\r\n      case GROUP_FIELD_TYPE:\r\n        return (\r\n          <div>\r\n            <Group\r\n              choices={choices}\r\n              fieldElement={fieldElement}\r\n              fieldParentTreeName={fieldParentTreeName}\r\n              defaultLanguage={defaultLanguage}\r\n              csvList={csvList}\r\n            />\r\n          </div>\r\n        );\r\n      case REPEAT_FIELD_TYPE:\r\n        return (\r\n          <div>\r\n            <Repeat\r\n              choices={choices}\r\n              fieldElement={fieldElement}\r\n              fieldParentTreeName={fieldParentTreeName}\r\n              defaultLanguage={defaultLanguage}\r\n              csvList={csvList}\r\n            />\r\n          </div>\r\n        );\r\n      default:\r\n        return (\r\n          <BaseTypeEvaluator\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n    }\r\n  }\r\n\r\n  private getAppearanceValue = (\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: string,\r\n    isAppearanceApplicable: boolean,\r\n  ): number => {\r\n    const isRender: boolean = shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      this.props.getEvaluatedExpressionSelector,\r\n    );\r\n\r\n    if (!isRender) {\r\n      return 0;\r\n    } if (\r\n      isRender\r\n      && isAppearanceApplicable\r\n      && fieldElement.control\r\n      && fieldElement.control.appearance\r\n    ) {\r\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n        const processedStringArray = fieldElement.control.appearance.match(\r\n          /^w(\\d+)\\b/i,\r\n        );\r\n        const processedString = processedStringArray[0].replace('w', '');\r\n        const result = isNaN(processedString)\r\n          ? 12\r\n          : parseInt(processedString, 10);\r\n        return result;\r\n      }\r\n    }\r\n    return 12;\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  getEvaluatedExpressionSelector: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n\r\n  const result = {\r\n    getEvaluatedExpressionSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** connect GroupTypeEvaluator component to the redux store */\r\nconst ConnectedGroupTypeEvaluator = connect(mapStateToProps)(\r\n  GroupTypeEvaluator,\r\n);\r\n\r\nexport default ConnectedGroupTypeEvaluator;\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n  faExclamationCircle,\r\n  faMinusCircle,\r\n  faPlusCircle,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Col, Container, Row } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport KbAlert from '../components/Alert';\r\nimport DropDown from '../components/DropDown';\r\nimport GroupTypeEvaluator from '../components/typeEvalutors/Group';\r\nimport {\r\n  getAllFileObjects,\r\n  getCSVFromStore,\r\n  getUserInputFromStore,\r\n  isErrorsArrayEmpty,\r\n  resetStoreAction,\r\n  setCSVObj,\r\n  setFormSubmitStatus,\r\n  setUserInputObj,\r\n  setUserLanguage,\r\n} from '../store/ducks/formState';\r\n\r\nlibrary.add(faPlusCircle, faMinusCircle, faExclamationCircle);\r\n\r\nexport interface AppProps {\r\n  choices: any;\r\n  csvList: any;\r\n  csvObj: any;\r\n  isNoErrors: any;\r\n  userInputObj: any;\r\n  userInputJson: any;\r\n  defaultLanguage: string;\r\n  formTitle: string;\r\n  fieldElements: any;\r\n  setUserInputAction: typeof setUserInputObj;\r\n  setCSVAction: typeof setCSVObj;\r\n  setUserLanguageAction: typeof setUserLanguage;\r\n  languageOptions: any;\r\n  setFormSubmitStatusAction: typeof setFormSubmitStatus;\r\n  resetStoreActionCreator: typeof resetStoreAction;\r\n  mediaList: any;\r\n  handleSubmit(userInput: any, mediaList: any): any;\r\n}\r\n\r\nexport interface AppState {\r\n  defaultLanguage: string;\r\n  isSubmissionError: boolean;\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    const { userInputJson, userInputObj, csvList, csvObj } = this.props;\r\n    this.props.resetStoreActionCreator();\r\n    if (userInputJson && userInputJson !== userInputObj) {\r\n      this.props.setUserInputAction(userInputJson);\r\n    }\r\n    if (csvList && csvList !== csvObj) {\r\n      this.props.setCSVAction(csvList);\r\n    }\r\n    this.props.setUserLanguageAction(this.props.defaultLanguage);\r\n    this.setState({\r\n      defaultLanguage: this.props.defaultLanguage,\r\n      isSubmissionError: false,\r\n    });\r\n  }\r\n\r\n  public handleSelect = (languageName: string) => {\r\n    this.setState({ defaultLanguage: languageName });\r\n    this.props.setUserLanguageAction(this.props.defaultLanguage);\r\n  };\r\n\r\n  public render() {\r\n    const {\r\n      csvList,\r\n      fieldElements,\r\n      formTitle,\r\n      languageOptions,\r\n      choices,\r\n    } = this.props;\r\n    const { defaultLanguage } = this.state || this.props;\r\n\r\n    const props = {\r\n      choices,\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElements,\r\n      fieldParentTreeName: '',\r\n      isAppearanceApplicable: false,\r\n      languageOptions,\r\n    };\r\n\r\n    return (\r\n      <Container className=\"form-container\">\r\n        <Row className={'form-title formTitle'}>\r\n          <Col>\r\n            <h3 className=\"headerText\">{formTitle}</h3>\r\n          </Col>\r\n          <DropDown\r\n            languages={...languageOptions}\r\n            onChangeSelect={this.handleSelect}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        </Row>\r\n        {this.state && this.state.isSubmissionError && (\r\n          <KbAlert\r\n            color={'danger'}\r\n            isOpen={this.state.isSubmissionError}\r\n            handleToggle={this.toggleStateValue}\r\n            headerText={'Oh snap! You got an error!'}\r\n            bodyText={\r\n              'Please make sure the required fields are not missing and there are no errors'\r\n            }\r\n          />\r\n        )}\r\n        <Row>\r\n          <Col style={{ padding: 0}}>\r\n            <GroupTypeEvaluator {...props} />\r\n            <Row className=\"welcome-box\" style={{ padding: 10 }}>\r\n              <Col>\r\n                <Button className=\"btn btn-success\" onClick={this.handleClick}>\r\n                  Submit\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private handleClick = (_event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const { handleSubmit, isNoErrors, userInputObj, mediaList } = this.props;\r\n    if (isNoErrors) {\r\n      this.setState({ isSubmissionError: false });\r\n      handleSubmit(userInputObj, mediaList);\r\n    } else {\r\n      handleSubmit('Field Violated', mediaList);\r\n      this.setState({ isSubmissionError: true });\r\n      this.props.setFormSubmitStatusAction(true);\r\n      window.scrollTo(0, 0);\r\n    }\r\n  };\r\n\r\n  private toggleStateValue = () => {\r\n    this.setState({ isSubmissionError: false });\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  isNoErrors: any;\r\n  userInputObj: any;\r\n  mediaList: any;\r\n  csvObj: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\r\n  const result = {\r\n    isNoErrors: isErrorsArrayEmpty(state),\r\n    mediaList: getAllFileObjects(state),\r\n    userInputObj: getUserInputFromStore(state),\r\n    csvObj: getCSVFromStore(state),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  resetStoreActionCreator: resetStoreAction,\r\n  setFormSubmitStatusAction: setFormSubmitStatus,\r\n  setUserInputAction: setUserInputObj,\r\n  setUserLanguageAction: setUserLanguage,\r\n  setCSVAction: setCSVObj,\r\n};\r\n\r\n/** connect Decimal component to the redux store */\r\nconst ConnectedApp = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n\r\nexport default ConnectedApp;\r\n","import { MuiThemeProvider } from '@material-ui/core';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { theme } from './utils/Theme';\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nexport interface OdkFormRendererProps {\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  formDefinitionJson: any;\r\n  languageOptions: any;\r\n  userInputJson: any;\r\n  handleSubmit: (userInput: any, mediaList: any) => any;\r\n}\r\n\r\nclass OdkFormRenderer extends React.Component<OdkFormRendererProps> {\r\n  public render() {\r\n    const {\r\n      csvList,\r\n      defaultLanguage,\r\n      formDefinitionJson,\r\n      userInputJson,\r\n      languageOptions,\r\n      handleSubmit,\r\n    } = this.props;\r\n    const props = {\r\n      choices: formDefinitionJson.choices || {},\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElements: formDefinitionJson.children,\r\n      formTitle: formDefinitionJson.title,\r\n      handleSubmit,\r\n      languageOptions,\r\n      userInputJson,\r\n    };\r\n    return (\r\n      <Provider store={store}>\r\n        <MuiThemeProvider theme={theme}>\r\n        <App {...props} />\r\n      </MuiThemeProvider>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OdkFormRenderer;\r\n"],"names":["actualExpression","theme","createMuiTheme","palette","primary","main","dark","secondary","light","info","text","disabled","hint","typography","h1","fontWeight","fontSize","h2","h3","h4","body1","fontFamily","caption","subtitle1","subtitle2","overrides","MuiPaper","root","color","KbAlert","render","this","props","bodyText","React","Alert","isOpen","toggle","handleToggle","className","headerText","DropDown","event","onChangeSelect","value","selectedValue","options","languages","map","elem","push","label","_this2","defaultLanguage","Select","multi","placeholder","onChange","onChangeHandler","REQUIRED_FIELD_MSG","store","createStore","reducer","composeWithDevTools","currentHierarchicalName","formItemProperty","userInput","tokenizeCharacter","type","input","current","tokenizers","test","undefined","consumedChars","char","TypeError","matchQuote","pattern","tokenizePattern","kbSelected","funcName","params","_paramsTokens","tmp","Array","isArray","forEach","element","kbChoice","i","tmpHierchicalName","split","parent","length","state","getState","variableName","replace","optionList","key","name","language","kbPullData","csv","csvList","item","find","obj","console","log","kbToday","_params","d","Date","setHours","kbFormatDate","format","moment","kbRound","toFixed","parseFloat","kbRegex","RegExp","kbCountSelected","kbInt","parseInt","kbCoalesce","kbPosition","tmpName","kbSum","paramsTokens","sumValue","sumValuesOverJsn","sum","jsnObj","kbConcat","concatStr","kbSubstr","substring","outerScopedVariables","variableValue","tmpUserInput","nodeNames","parseMostClosestScopedVariable","index","parseDot","path","getIn","parseLiterals","_tmpOutput","tokens","toLowerCase","parseFunction","_output","possibleFunctions","arrayOfParams","arrayOfOriginalTokens","tmpQueue","tmpTokens","pop","tmpVal","parser","parsedFn","parsedVal","functionFn","parseAnd","output","newOutput","parseParen","terminatingTokens","indexOf","parseDivide","parsed","ct","parseMinus","parserFn","consumedTokens","preOutput","preParsed","parseMultiply","preParseFn","Object","prototype","toString","call","isNaN","getTime","NaN","Math","ceil","parsers","j","flagLessThanOrEqual","flagGreaterThanOrEqual","leftOutput","pos","evaluater","expression","tmpFormItemProperty","tmpCurrentHierarchicalName","tokenized","tokenizerFn","token","tokenizer","getTextFromProperty","property","languageIdentifier","getFieldLabelText","fieldElement","getHintLabelText","customizeLabelsWithPreviousInputs","evaluator","labelText","fieldTreeName","placesOfCustomizationsRequiredList","match","tmpPlace","customizedName","matchList","getConstraintLabelText","bind","isInputRequired","isRequired","required","shouldComponentBeRelevant","fieldParentTreeName","evaluateExpression","relevant","shouldComponentBeReadOnly","readonly","shouldInputViolatesConstraint","constraint","getModifiedUserInputObject","userInputObj","fieldValue","treeNodes","modifiedObj","getValueFromUserInputObj","shouldComponentBeMinimal","isMinimal","control","appearance","includes","FIELD_VALUE_ASSIGNED","OPTION_LIST_ASSIGNED","MEDIA_LIST_ADDED","REMOVE_FROM_MEDIA_LIST","REMOVE_FROM_OPTION_LIST_REPEAT","RESET_STORE","ADD_ERROR_INPUT_ID","REMOVE_ERROR_INPUT_ID","EMPTY_GROUP_FIELDS","REMOVE_GROUP_FIELDS_FROM_ERRORS","SET_USER_INPUT_OBJ","SET_CSV_OBJ","SET_FORM_SUBMIT_STATUS","assignFieldValueAction","assignOptionListAction","RemoveFromOptionList","repeatIndex","addErrorInputId","removeErrorInputId","emptyGroupFields","removeGroupFieldsFromErrors","initialState","SeamlessImmutable","errors","isFormSubmitted","mediaList","action","modifiedUserInputObj","asMutable","deep","stateM","modifiedUserInputObjList","newState","filteredRepeatArray","hasOwnProperty","entries","keyValueOptionListobj","repeatIndexString","String","keyRepeat","getModifiedOptionListForRepeat","modifiedOptionListRepeat","newStateForRepeat","modifiedMediaList","mediaObject","newMediaState","updateIn","arr","concat","filter","elm","mUserInputObj","groupTreeName","keys","objKey","startsWith","emptyGroupedValues","mState","csvObj","getFieldValue","getOptionList","getEvaluatedExpression","getEvaluatedExpressionForSelect","isPresentInError","isGroupFieldsEmpty","isEmpty","checkGroupedValuesForEmpty","isErrorsIncludeGroupFields","isPresent","fTName","isErrorsArrayEmpty","getUserInputFromStore","getCSVFromStore","getFormSubmitStatus","getFileObject","fileName","getAllFileObjects","GroupStyle","createStyles","borderTop","backgroundColor","backgroundProp","display","insideBackground","borderProp","boxShadow","marginTop","marginBottom","padding","toolbarIcon","alignItems","justifyContent","mixins","toolbar","drawerPaperClose","overflowX","transition","transitions","create","easing","sharp","duration","leavingScreen","width","spacing","breakpoints","up","background","paper","overflow","flexDirection","listItem","marginLeft","marginRight","borderRadius","listItemIcon","listItemActive","nested","paddingLeft","navlogo","margin","listParent","common","white","drawerClose","drawerOpen","overflowY","enteringScreen","Group","choices","isComponentRender","fieldLabel","isAppearanceApplicable","useTheme","classNames","makeStyles","useStyles","bodyless","isErrorsIncludeGroupFieldsSelector","removeGroupFieldsFromErrorsActionCreator","isGroupFieldsEmptySelector","emptyGroupFieldsActionCreator","Accordion","defaultExpanded","style","AccordionSummary","expandIcon","ExpandMoreIcon","Typography","AccordionDetails","FormGroup","children","GroupTypeEvaluator","fieldElements","ConnectedGroup","connect","parentProps","getEvaluatedExpressionSelector","SingleRepeat","_event","_this","assignmentHandler","removeHandler","removeOptionHandler","newFieldValue","_elem","unControlFlag","onClick","handleChange","FontAwesomeIcon","icon","Component","ControlledRepeat","assignFieldValueActionCreator","removeOptionListFromActionCreator","Label","_elm","addAnotherRepeat","ConnectedControlledRepeat","UncontrolledRepeat","noOfJrCount","res","removeFromError","_","size","assignOptionListActionCreator","iterate","slice","ConnectedUncontrolledRepeat","Repeat","Calculate","isPresentInErrorSelector","isRequiredViolated","isConstraintViolated","isReadonly","removeErrorInputIdActionCreator","addErrorInputIdActionCreator","calculatedValue","calculate","Input","readOnly","ConnectedCalculate","KbDate","currentTarget","getFormSubmitStatusSelector","modifiedFieldLabel","modifiedConstraintLabel","hintLabel","defaultValue","toISOString","isError","ConnectedDate","DateTime","modifiedDate","timeZoneOffset","getTimezoneOffset","getHours","DatePicker","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","placeholderText","ConnectedDateTime","Decimal","setState","isFocused","modifiedValue","step","onBlur","onBlurHandler","ConnectedDecimal","FilePreview","fieldName","Button","ConnectedFilePreview","fileObject","File","target","files","addMediaListActionCreator","accept","ConnectedFile","Integer","ConnectedInteger","Note","fieldHint","FormText","ConnectedNote","customStyles","styles","container","SelectAllDropDown","optionObject","tempObjArray","elemObj","isEqual","values","selectedValues","stringWithSearchKeyWord","resultArray","criteriaParams","splice","extractAndFilterOptions","csvName","criteriaType","filterCriterias","trim","distinctOptions","finalRes","modifiedName","nameOfKey","interConnectedValue","tempOptions","filterResult","getEvaluatedExpressionSelectorForSelect","option","from","Set","labelColumnName","valueColumnName","tmpOpt","uniqBy","resultOptions","updatedFieldElement","processedStringArray","getProcessedString","setOptionList","itemset","choice_filter","childrenLabel","optionsArray","tmpValueArray","isNotIncluded","optionsValueArray","row","seperatedValues","isDisabled","isMulti","ConnectedSelectAllDropDown","SelectAllRadio","checked","newValue","childrenArray","flagInline","tmpStyle","Form","check","inline","onChangeHandlerCheckBox","ConnectedSelectAllRadio","SelectAll","Dropdown","Radio","SelectOneDropDown","ConnectedSelectOneDropDown","SelectOneRadio","choiceOptions","onChangeHandlerRadio","ConnectedSelectOneRadio","SelectOne","Text","ConnectedText","KbTime","ConnectedTime","BaseTypeEvaluator","typeEvaluator","isRender","processedString","Row","getAppearanceValue","Col","md","ConnectedGroupTypeEvaluator","library","add","faPlusCircle","faMinusCircle","faExclamationCircle","App","languageName","setUserLanguageAction","handleSubmit","isNoErrors","isSubmissionError","setFormSubmitStatusAction","window","scrollTo","componentDidMount","userInputJson","resetStoreActionCreator","setUserInputAction","setCSVAction","languageOptions","Container","formTitle","handleSelect","toggleStateValue","handleClick","ConnectedApp","formDefinitionJson","Provider","MuiThemeProvider","title"],"mappings":"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"}