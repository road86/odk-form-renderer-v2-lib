{"version":3,"file":"odkformrenderer.cjs.production.min.js","sources":["../src/utils/Theme.ts","../src/utils/compiler.ts","../src/components/Alert/index.tsx","../src/components/DropDown/index.tsx","../src/constants.tsx","../src/store/index.tsx","../src/utils/helpers.ts","../src/store/ducks/formState.ts","../src/containers/fields/group/Group/styles.ts","../src/containers/fields/group/Group/index.tsx","../src/containers/fields/group/Repeat/Single Repeat/index.tsx","../src/containers/fields/group/Repeat/Controlled Repeat/index.tsx","../src/containers/fields/group/Repeat/Uncontrolled Repeat/index.tsx","../src/containers/fields/group/Repeat/index.tsx","../src/containers/fields/base/Calculate/index.tsx","../src/containers/fields/base/Date/index.tsx","../src/containers/fields/base/Date Time/index.tsx","../src/containers/fields/base/Decimal/index.tsx","../src/containers/fields/base/File/FilePreview/FilePreview.tsx","../src/containers/fields/base/File/index.tsx","../src/containers/fields/base/GPS/index.tsx","../src/containers/fields/base/Audio/AudioPreview/index.tsx","../src/containers/fields/base/Audio/index.tsx","../src/containers/fields/base/Integer/index.tsx","../src/containers/fields/base/Note/index.tsx","../src/containers/fields/base/Select All/Dropdown/index.tsx","../src/containers/fields/base/Select All/Radio/index.tsx","../src/containers/fields/base/Select All/index.tsx","../src/containers/fields/base/Select One/Dropdown/index.tsx","../src/containers/fields/base/Select One/Radio/index.tsx","../src/containers/fields/base/Select One/index.tsx","../src/containers/fields/base/Text/index.tsx","../src/containers/fields/base/Time/index.tsx","../src/components/typeEvalutors/Base/index.tsx","../src/components/typeEvalutors/Group/index.tsx","../src/App/index.tsx","../src/index.tsx"],"sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#EF6B73',\n      dark: '#649a6a',\n    },\n    secondary: {\n      main: '#D2AB16',\n      light: '#EBFDED',\n      dark: '#AD8C0F',\n    },\n    // error: {\n    //   main: '#f44336',\n    // },\n    // warning: {\n    //   main: '#ff9800',\n    // },\n    //table stripe\n    info: {\n      dark: '#F5F4F4',\n      main: '#EBFDED',\n      light: '#F9F9F9',\n    },\n    // success: {\n    //   main: '#4caf50',\n    // },\n    text: {\n      primary: '#EBFDED',\n      secondary: '#000000',\n      disabled: 'rgba(0, 0, 0, 0.38)',\n      hint: 'rgba(0, 0, 0, 0.38)',\n    },\n    // divider: 'rgba(0, 0, 0, 0.12)',\n    // background: {\n    //   paper: '#fff',\n    //   default: '#fff',\n    // },\n    // action: {\n    //   active: '#EEEEEE',\n    //   hover: '#888888',\n    //   hoverOpacity: 0.04,\n    //   selected: '#FFFFFF',\n    //   disabled: '#666666',\n    // },\n  },\n  typography: {\n    h1: {\n      fontWeight: 700,\n      // lineHeight: 0.35,\n      fontSize: 30,\n      // color: '#FFFFFF',\n    },\n    h2: {\n      fontWeight: 500,\n      fontSize: 20,\n      // lineHeight: 0.23,\n    },\n    h3: {\n      fontWeight: 400,\n      fontSize: 18,\n      // lineHeight: 0.21,\n      // color: '#FFFFFF',\n    },\n    h4: {\n      fontWeight: 700,\n      // lineHeight: 0.35,\n      fontSize: 26,\n    },\n    body1: {\n      fontFamily: 'Roboto',\n      fontWeight: 400,\n      // lineHeight: 1.18,\n      fontSize: 16,\n    },\n    caption: {\n      fontFamily: 'Roboto',\n      fontWeight: 600,\n      // lineHeight: 0.18,\n      fontSize: 16,\n    },\n    subtitle1: {\n      fontFamily: 'Roboto',\n      fontWeight: 400,\n      // lineHeight: 0.18,\n      fontSize: 16,\n    },\n    subtitle2: {\n      fontFamily: 'Roboto',\n      fontWeight: 500,\n      // lineHeight: 0.18,\n      fontSize: 16,\n    },\n  },\n  //menu\n  overrides: {\n    MuiPaper: {\n      root: {\n        color: '#222222 !important',\n      },\n    },\n  },\n});\n","// import moment from 'moment';\nimport moment from 'moment';\nimport store from '../store';\n\nlet actualExpression: string;\nlet currentHierarchicalName: string = '';\nlet formItemProperty: any = {};\nlet userInput: any = {};\n\n/**\n * tokenizeCharacter is a type of util method\n * @param {any} type - the type that will be returned if matches\n * @param {any} value - the actual value of the tokenize character\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeCharacter(type: any, value: any, input: any, current: any) {\n  return value === input[current] ? [1, { type, value }] : [0, null];\n}\n\n/**\n * tokenizeParenOpen returns tokenizeReturnObject for character (\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeParenOpen(input: any, current: any) {\n  return tokenizeCharacter('paren', '(', input, current);\n}\n\n/**\n * tokenizeBrakeOpen returns tokenizeReturnObject for character [\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeBrakeOpen(input: any, current: any) {\n  return tokenizeCharacter('brac', '[', input, current);\n}\n\n/**\n * tokenizeBrakeClose returns tokenizeReturnObject for character ]\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeBrakeClose(input: any, current: any) {\n  return tokenizeCharacter('brac', ']', input, current);\n}\n\n/**\n * tokenizeParenClose returns tokenizeReturnObject for character )\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeParenClose(input: any, current: any) {\n  return tokenizeCharacter('paren', ')', input, current);\n}\n\n/**\n * tokenizeEqual returns tokenizeReturnObject for character =\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeEqual(input: any, current: any) {\n  return tokenizeCharacter('equal', '=', input, current);\n}\n\n/**\n * tokenizePlus returns tokenizeReturnObject for character +\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizePlus(input: any, current: any) {\n  return tokenizeCharacter('plus', '+', input, current);\n}\n\n/**\n * tokenizeMinus returns tokenizeReturnObject for character -\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeMinus(input: any, current: any) {\n  return tokenizeCharacter('minus', '-', input, current);\n}\n\n/**\n * tokenizeMultiply returns tokenizeReturnObject for character *\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeMultiply(input: any, current: any) {\n  return tokenizeCharacter('multiply', '*', input, current);\n}\n\n/**\n * tokenizeDivide returns tokenizeReturnObject for character /\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeDivide(input: any, current: any) {\n  return tokenizeCharacter('divide', '/', input, current);\n}\n\n/**\n * tokenizeLessThan returns tokenizeReturnObject for character <\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeLessThan(input: any, current: any) {\n  return tokenizeCharacter('lessThan', '<', input, current);\n}\n\n/**\n * tokenizeGreaterThan returns tokenizeReturnObject for character >\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeGreaterThan(input: any, current: any) {\n  return tokenizeCharacter('greaterThan', '>', input, current);\n}\n\n/**\n * tokenizeNot returns tokenizeReturnObject for character !\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeNot(input: any, current: any) {\n  if (input[current] == '!') {\n    return tokenizeCharacter('not', '!', input, current);\n  } else if (input[current] == 'n') {\n    if (\n      input[current + 1] &&\n      input[current + 1] == 'o' &&\n      (input[current + 2] && input[current + 2] == 't')\n    ) {\n      const type = 'not';\n      const value = '!';\n      return [3, { type, value }];\n    }\n  }\n  return [0, null];\n}\n\n/**\n * tokenizeComma returns tokenizeReturnObject for character ,\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeComma(input: any, current: any) {\n  return tokenizeCharacter('comma', ',', input, current);\n}\n\n/**\n * tokenizeDot returns tokenizeReturnObject for character .\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeDot(input: any, current: any) {\n  return tokenizeCharacter('dot', '.', input, current);\n}\n\n/**\n * tokenizePattern is a type of util method\n * @param {any} type - the type that will be returned if matches\n * @param {any} pattern - the pattern that will be matched for tokenization\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizePattern(type: any, pattern: any, input: any, current: any) {\n  let char = input[current];\n  let consumedChars = 0;\n  if (pattern.test(char)) {\n    let value = '';\n    while (char && pattern.test(char)) {\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    return [consumedChars, { type, value }];\n  }\n  return [0, null];\n}\n\n/**\n * tokenizeString returns tokenizeReturnObject for strings. example: 'abc12' , \"test1\", \"afgkj dafgk\"\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns - tokenizeReturnObject\n */\nfunction tokenizeString(input: any, current: any) {\n  if (input[current] === '\"' || input[current] === \"'\") {\n    const matchQuote = input[current];\n    let value = '';\n    let consumedChars = 0;\n    consumedChars += 1;\n    let char = input[current + consumedChars];\n    while (char !== matchQuote) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    return [consumedChars + 1, { type: 'string', value }];\n  }\n  return [0, null];\n}\n\n/**\n * tokenizeFunction returns tokenizeReturnObject for functions. Example: round( , substring(\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns tokenizeReturnObject; value contains function name if matched\n */\nfunction tokenizeFunction(input: any, current: any) {\n  if (/[a-z_]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (char && /[:a-z0-9_-]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    while (char && /\\s/.test(char)) {\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (value == 'not') {\n      return [0, null];\n    }\n    if (char && char === '(') {\n      return [consumedChars, { type: 'function', value }];\n    }\n  }\n  return [0, null];\n}\n\n/**\n * tokenizeNumber returns tokenizeReturnObject for discrete numbers. Example: 123 , 02113\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns tokenizeReturnObject\n */\nfunction tokenizeNumber(input: any, current: any) {\n  if (/[0-9]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (/[0-9]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char !== '.') {\n      return [consumedChars, { type: 'number', value }];\n    }\n  }\n  return [0, null];\n}\n\n/**\n * tokenizeDecimal returns tokenizeReturnObject for decimal numbers. Example: 12.3 , 0.2113\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns tokenizeReturnObject\n */\nfunction tokenizeDecimal(input: any, current: any) {\n  if (/[0-9.]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (/[0-9]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char === '.') {\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n      if (/[0-9]/i.test(char)) {\n        while (/[0-9]/i.test(char)) {\n          if (char === undefined) {\n            throw new TypeError('unterminated string ');\n          }\n          value += char;\n          consumedChars += 1;\n          char = input[current + consumedChars];\n        }\n        return [consumedChars, { type: 'decimal', value }];\n      }\n    }\n  }\n  return [0, null];\n}\n\n/**\n * tokenizeVariable returns tokenizeReturnObject for variables. Example syntax: ${Iamvariable} , #{urvariable}\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns tokenizeReturnObject\n */\nfunction tokenizeVariable(input: any, current: any) {\n  if (input[current] === '#' || input[current] === '$') {\n    if (input[current + 1] && input[current + 1] === '{') {\n      let value = '';\n      let consumedChars = 1;\n      consumedChars += 1;\n      let char = input[current + consumedChars];\n      while (char !== '}') {\n        if (char === undefined) {\n          throw new TypeError('unterminated string ');\n        }\n        value += char;\n        consumedChars += 1;\n        char = input[current + consumedChars];\n      }\n      return [consumedChars + 1, { type: 'variable', value }];\n    }\n  }\n  return [0, null];\n}\n\n/**\n * tokenizeOr returns tokenizeReturnObject for syntax or\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns tokenizeReturnObject\n */\nfunction tokenizeOr(input: any, current: any) {\n  if (input[current] === 'o') {\n    if (input[current + 1] && input[current + 1] === 'r') {\n      if (\n        input[current + 2] === undefined ||\n        /[0-9\\s]/.test(input[current + 2])\n      ) {\n        return [2, { type: 'or', value: 'or' }];\n      }\n    }\n  }\n  return [0, null];\n}\n\n/**\n * tokenizeIf returns tokenizeReturnObject for word if\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns tokenizeReturnObject\n */\nfunction tokenizeIf(input: any, current: any) {\n  if (input[current] === 'i') {\n    if (input[current + 1] && input[current + 1] === 'f') {\n      if (\n        input[current + 2] === undefined ||\n        !/[a-z]i/.test(input[current + 2])\n      ) {\n        return [2, { type: 'if', value: 'if' }];\n      }\n    }\n  }\n  return [0, null];\n}\n\n/**\n * tokenizeAnd returns tokenizeReturnObject for word and\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns tokenizeReturnObject\n */\nfunction tokenizeAnd(input: any, current: any) {\n  if (input[current] === 'a') {\n    if (input[current + 1] && input[current + 1] === 'n') {\n      if (input[current + 2] && input[current + 2] === 'd') {\n        if (\n          input[current + 3] === undefined ||\n          /[0-9\\s]/.test(input[current + 3])\n        ) {\n          return [3, { type: 'and', value: 'and' }];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\n/**\n * tokenizeDiv returns tokenizeReturnObject of type divide for word div\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns tokenizeReturnObject\n */\nfunction tokenizeDiv(input: any, current: any) {\n  if (input[current] === 'd') {\n    if (input[current + 1] && input[current + 1] === 'i') {\n      if (input[current + 2] && input[current + 2] === 'v') {\n        if (\n          input[current + 3] === undefined ||\n          /[0-9\\s]/.test(input[current + 3])\n        ) {\n          return [3, { type: 'divide', value: '/' }];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\n/**\n * tokenizeName returns tokenizeReturnObject of type name for regex [a-z_]+\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns tokenizeReturnObject\n */\nfunction tokenizeName(input: any, current: any) {\n  return tokenizePattern('name', /[a-z_]/i, input, current);\n}\n\n/**\n * skipWhiteSpace removes space and iterates the position of compiler\n * @param {any} input - the input expression, valid cases involve only string type\n * @param {any} current - the position of the compiler at the input expression\n * @returns tokenizeReturnObject that consumes characters without returning type\n */\nfunction skipWhiteSpace(input: any, current: any) {\n  return /\\s/.test(input[current]) ? [1, null] : [0, null];\n}\n\n/**\n * Precedence of the tokenizer methods\n * If new tokenizer method is created, please add inside tokenizers with correct precedence\n */\nconst tokenizers = [\n  skipWhiteSpace,\n  tokenizeParenOpen,\n  tokenizeParenClose,\n  tokenizeIf,\n  tokenizeOr,\n  tokenizeAnd,\n  tokenizeVariable,\n  tokenizeString,\n  tokenizeFunction,\n  tokenizeEqual,\n  tokenizePlus,\n  tokenizeMinus,\n  tokenizeMultiply,\n  tokenizeDivide,\n  tokenizeDiv,\n  tokenizeLessThan,\n  tokenizeGreaterThan,\n  tokenizeNot,\n  tokenizeBrakeOpen,\n  tokenizeBrakeClose,\n  tokenizeDot,\n  tokenizeComma,\n  tokenizeNumber,\n  tokenizeDecimal,\n  tokenizeName,\n];\n\n/**\n * tokenizer is primary method that takes the expression and convert them to appropiate tokens.\n * Throws syntax error if expression is not appropiate or could not be tokenized properly\n * @param {string} input - should be of string for valid cases\n * @returns array of tokens\n */\nfunction tokenizer(input: any) {\n  let current: number = 0;\n  const tokens: any = [];\n  while (current < input.length) {\n    let tokenized = false;\n    tokenizers.forEach(tokenizerFn => {\n      if (tokenized) {\n        return;\n      }\n      const [consumedChars, token]: any = tokenizerFn(input, current);\n      if (consumedChars !== 0) {\n        tokenized = true;\n        current += consumedChars;\n      }\n      if (token) {\n        tokens.push(token);\n      }\n    });\n    if (!tokenized) {\n      throw new TypeError(\n        `I dont know what this character is: ${input[current]}`\n      );\n    }\n  }\n  return tokens;\n}\n\n/**\n * kbSelected parses the function selected and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbSelected(funcName: any, params: any, _paramsTokens: any, _output: any, _current: any) {\n  if (funcName === 'selected') {\n    let tmp = false;\n    if (Array.isArray(params[0])) {\n      params[0].forEach((element: any) => {\n        // tslint:disable-next-line: triple-equals\n        tmp = tmp || element == params[1];\n      });\n      return [true, tmp];\n    }\n    // tslint:disable-next-line: triple-equals\n    return [true, params[0] == params[1]];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbChoice(funcName: any, params: any, _paramsTokens: any, _output: any, _current: any) {\n  if (funcName === 'jr:choice-name') {\n    const tmpHierchicalName = currentHierarchicalName.split('/');\n    let i;\n    let parent = '';\n    for (i = 0; i < tmpHierchicalName.length - 1;) {\n      // tslint:disable-next-line: triple-equals\n      if (tmpHierchicalName[i] == 'repeat') {\n        i += 3;\n      } else {\n        // path.push(parent + tmpHierchicalName[i + 1]);\n        parent = parent + tmpHierchicalName[i + 1] + '/';\n        i += 2;\n      }\n    }\n    const state = store.getState();\n    const variableName =\n      parent + params[params.length - 1].replace(/[^a-zA-Z ]/g, '');\n    if (variableName in state.optionList) {\n      for (const key in state.optionList[variableName]) {\n        if (state.optionList[variableName][key].name === params[0]) {\n          return [\n            true,\n            state.optionList[variableName][key].label[state.language],\n          ];\n        }\n      }\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbPullData(funcName: any, params: any, _paramsTokens: any, _output: any, _current: any) {\n  if (funcName === 'pulldata') {\n    const state = store.getState();\n    const csv = state.csvList[params[0] + '.csv'];\n    if (params[3]) {\n      const item = csv.find((obj: any) => obj[params[2]] == params[3]);\n      if (item != undefined && item != null) {\n        return [true, item[params[1]]];\n      }\n    }\n  }\n  return [false, null];\n}\n\n/**\n * kbToday parses the function today and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbToday(funcName: any, _params: any, _paramsTokens: any, _output: any, _current: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'today') {\n    const d = new Date();\n    d.setHours(0, 0, 0, 0);\n    return [true, d];\n  }\n  return [false, null];\n}\n\n/**\n * kbNow parses the function now and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbNow(funcName: any, _params: any, _paramsTokens: any, _output: any, _current: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'now') {\n    const d = moment().format();\n    return [true, d];\n  }\n  return [false, null];\n}\n\n/**\n * kbToday parses the function today and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbDecimalDateTime(funcName: any, _params: any, _paramsTokens: any, _output: any, _current: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'decimal-date-time') {\n    if (_params[0]) {\n      const time_dif = (new Date(_params[0])).getTime() - (new Date(\"01/01/1970\")).getTime();\n      const day_diff = Math.round(Math.abs((time_dif) / (1000 * 3600 * 24)));\n      return [true, day_diff];\n    }\n  }\n  return [false, null];\n}\n\n/**\n * kbToday parses the function today and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbDate(funcName: any, _params: any, _paramsTokens: any, _output: any, _current: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'date') {\n    if (_params[0]) {\n      const date = (new Date(\"01/01/1970\")).getTime() + _params[0] * 24 * 60 * 60 * 1000;\n      return [true, new Date(date)];\n    }\n  }\n  return [false, null];\n}\n\n\n/**\n * kbFormatDate formats the given date and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbFormatDate(funcName: any, _params: any, _paramsTokens: any, _output: any, _current: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'format-date') {\n    if (_params.length == 2) {\n      let format = 'MM-DD-YYYY';\n      let date = null;\n      if (_params[1].includes('%a')) {\n        const day = _params[1].replace(\"%a\", \"ddd\");\n        date = _params[0] != null ? moment(_params[0]).format(`${day}`) : null;\n      } else if (_params[1].includes('d')) {\n        format = _params[1].replace(\"%d\", \"DD\").replace(\"%m\", \"MM\").replace(\"%Y\", \"YYYY\").replace(\"%y\", \"YY\");\n        date = _params[0] != null ? moment(_params[0]).format(format) : null;\n      } else if (_params[1].includes('b')) {\n        const month = _params[1].replace(\"%b\", \"MMM\");\n        date = _params[0] != null ? moment(_params[0]).format(`${month}`) : null;\n      }\n      return [true, date];\n    }\n  }\n  return [false, null];\n}\n\n/**\n * kbRound parses the function round and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbRound(funcName: any, params: any, _paramsTokens: any, _output: any, _current: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'round') {\n    if (params[0] && params[1]) {\n      if (typeof params[0] === 'number' && typeof params[1] === 'number') {\n        return [true, params[0].toFixed(params[1])];\n      }\n      if (typeof params[0] === 'string' && typeof params[1] === 'number') {\n        return [true, parseFloat(params[0]).toFixed(params[1])];\n      }\n    }\n  }\n  return [false, null];\n}\n\n/**\n * kbRegex parses the function regex and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbRegex(funcName: any, params: any, _paramsTokens: any, _output: any, _current: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'regex') {\n    const regex = RegExp(params[1]);\n    return [true, regex.test(params[0])];\n  }\n  return [false, null];\n}\n\n/**\n * kbCountSelected parses the function count-selected and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbCountSelected(funcName: any, params: any, _paramsTokens: any, _output: any, _current: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'count-selected') {\n    if (params[0] && Array.isArray(params[0])) {\n      return [true, params[0].length];\n    }\n    if (params[0] && typeof params[0] !== 'object') {\n      return [true, 1];\n    }\n    return [true, 0];\n  }\n  return [false, null];\n}\n\n/**\n * kbInt parses the function int and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbInt(funcName: any, params: any, _paramsTokens: any, _output: any, _current: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'int') {\n    if (typeof params[0] === 'string') {\n      return [true, parseInt(params[0], 10)];\n    }\n  }\n  return [false, null];\n}\n\n/**\n * kbCoalesce parses the function coalesce and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbCoalesce(funcName: any, params: any, _paramsTokens: any, _output: any, _current: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'coalesce') {\n    if (!params[0] && params[0] !== 0) {\n      return [true, params[1]];\n    }\n    return [true, params[0]];\n  }\n  return [false, null];\n}\n\n/**\n * kbPosition parses the function position and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbPosition(funcName: any, _params: any, _paramsTokens: any, _output: any, _current: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'position') {\n    if (currentHierarchicalName) {\n      const tmpName = currentHierarchicalName.split('/');\n      if (tmpName.length > 2) {\n        return [true, parseInt(tmpName[tmpName.length - 2], 10) + 1];\n      }\n    }\n  }\n  return [false, null];\n}\n\n/**\n * sumValuesOverJsn is a utility method for kbSum\n * @param sum - initial sum value\n * @param jsnObj - variable name and value in json object\n * @param variableName - variable name\n * @returns the calculated sum\n */\nfunction sumValuesOverJsn(sum: any, jsnObj: any, variableName: any) {\n  if (Array.isArray(jsnObj)) {\n    let i;\n    for (i = 0; i < jsnObj.length; i += 1) {\n      sum = sumValuesOverJsn(sum, jsnObj[i], variableName);\n    }\n  } else if (typeof jsnObj === 'object') {\n    for (const key in jsnObj) {\n      if (typeof jsnObj[key] === 'object') {\n        sum = sumValuesOverJsn(sum, jsnObj[key], variableName);\n      } else if (key === variableName) {\n        if (typeof jsnObj[key] === 'string') {\n          sum += parseFloat(jsnObj[key]);\n        }\n        if (typeof jsnObj[key] === 'number') {\n          sum += jsnObj[key];\n        }\n      }\n    }\n  }\n  return sum;\n}\n\n/**\n * kbSum parses the function sum and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbSum(funcName: any, _params: any, paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'sum') {\n    let sumValue = null;\n    if (\n      paramsTokens &&\n      paramsTokens.length > 0 &&\n      paramsTokens[0] &&\n      paramsTokens[0].length > 0 &&\n      paramsTokens[0][0].type === 'variable'\n    ) {\n      sumValue = sumValuesOverJsn(0, userInput, paramsTokens[0][0].value);\n    }\n    return [true, sumValue];\n  }\n  return [false, null];\n}\n\n/**\n * kbConcat parses the function concat and returns functionParseReturnObject\n * @param funcName - the function name of the token\n * @param params - calculated value of the params tokens\n * @param _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbConcat(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'concat') {\n    if (params && params.length > 0) {\n      let concatStr = '';\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < params.length; i += 1) {\n        if (params[i] == null) {\n          // continue;\n          // return [false, null];\n          concatStr += '';\n        } else {\n          concatStr += params[i];\n        }\n      }\n      return [true, concatStr];\n    }\n  }\n  return [false, null];\n}\n\n/**\n * kbSubstr parses the function substr and returns functionParseReturnObject\n * @param {any} funcName - the function name of the token\n * @param {any} params - calculated value of the params tokens\n * @param {any} _paramsTokens - orginal param tokens\n * @returns functionParseReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction kbSubstr(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'substr') {\n    if (params && params.length > 0) {\n      if (params[0] && params[1] !== null) {\n        if (params[2] !== null && params[2] < params[0].length) {\n          const subStr = params[0].substring(params[1], params[2]);\n          return [true, subStr];\n        }\n        return [true, params[0].substring(params[1])];\n      }\n    }\n  }\n  return [false, null];\n}\n\n/**\n * outerScopedVariables is a utility method that returns same variable values based on outerscope\n * @param {any} variableName - variable name\n * @param {any} variableValue - variable value upto now\n * @param {any} tmpUserInput - variable key-value storage\n * @returns parsed scoped variable value\n */\nfunction outerScopedVariables(\n  variableName: any,\n  variableValue: any,\n  tmpUserInput: any\n): any {\n  // tslint:disable-next-line: forin\n  for (const key in tmpUserInput) {\n    const nodeNames = key.split('/');\n    const variableNameFromKey = nodeNames[nodeNames.length - 1];\n    if (variableNameFromKey === variableName) {\n      return tmpUserInput[key];\n    }\n    if (typeof tmpUserInput[key] === 'object') {\n      if (variableValue == null) {\n        variableValue = outerScopedVariables(\n          variableName,\n          variableValue,\n          tmpUserInput[key]\n        );\n      }\n    }\n  }\n  return variableValue;\n}\n\n/**\n * parseMostClosestScopedVariable returns the closest scoped parsed variable value\n * @param {any} variableName - the variable name\n * @returns the parsed variable value\n */\nfunction parseMostClosestScopedVariable(variableName: any) {\n  const tmpHierchicalName = currentHierarchicalName.split('/');\n  let i;\n  const tmpUserInput = userInput;\n  let variableValue = null;\n  variableValue = outerScopedVariables(\n    variableName,\n    variableValue,\n    tmpUserInput\n  );\n  let parent = '';\n  for (i = 0; i < tmpHierchicalName.length - 1;) {\n    // tslint:disable-next-line: triple-equals\n    if (tmpHierchicalName[i] == 'repeat') {\n      i += 1;\n      const index = parseInt(tmpHierchicalName[i + 1], 10);\n      variableValue = outerScopedVariables(\n        variableName,\n        variableValue,\n        tmpUserInput[parent + tmpHierchicalName[i]][index]\n      );\n      i += 2;\n    } else {\n      parent = parent + tmpHierchicalName[i + 1] + '/';\n      i += 2;\n    }\n  }\n  return variableValue;\n}\n\n/**\n * parseDot parses the dot\n * @returns parsed value\n */\nfunction parseDot() {\n  const tmpHierchicalName = currentHierarchicalName.split('/');\n  let i;\n  let tmpUserInput = userInput;\n  let parent = '';\n  const path = [];\n  for (i = 0; i < tmpHierchicalName.length - 1;) {\n    // tslint:disable-next-line: triple-equals\n    if (tmpHierchicalName[i] == 'repeat') {\n      i += 1;\n      path.push(parent + tmpHierchicalName[i]);\n      path.push(parseInt(tmpHierchicalName[i + 1], 10));\n      parent = parent + tmpHierchicalName[i] + '/';\n      i += 2;\n    } else {\n      // path.push(parent + tmpHierchicalName[i + 1]);\n      parent = parent + tmpHierchicalName[i + 1] + '/';\n      i += 2;\n    }\n  }\n  path.push(parent + tmpHierchicalName[tmpHierchicalName.length - 1]);\n  tmpUserInput = userInput.getIn(path);\n  return tmpUserInput;\n}\n\n/**\n * parseLiterals parse a set of tokens, starting from number, string, decimal, variable, name, dot\n * @param {any} _tmpOutput - the parsed value of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the position of parser\n * @returns parserReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction parseLiterals(_tmpOutput: any, tokens: any, current: any) {\n  if (tokens[current].type === 'number') {\n    return [1, parseInt(tokens[current].value, 10)];\n  }\n  if (tokens[current].type === 'string') {\n    return [1, tokens[current].value];\n  }\n  if (tokens[current].type === 'decimal') {\n    return [1, parseFloat(tokens[current].value)];\n  }\n  if (tokens[current].type === 'variable') {\n    return [1, parseMostClosestScopedVariable(tokens[current].value)];\n  }\n  if (tokens[current].type === 'name') {\n    if (tokens[current].value.toLowerCase() === 'true') {\n      return [1, true];\n    }\n    if (tokens[current].value.toLowerCase() === 'false') {\n      return [1, false];\n    }\n    if (formItemProperty && tokens[current].value in formItemProperty) {\n      return [1, formItemProperty[tokens[current].value]];\n    }\n    return [1, null];\n  }\n  if (tokens[current].type === 'dot') {\n    return [1, parseDot()];\n  }\n  return [0, null];\n}\n\n/**\n * parseFuntion parses the functions present in expression\n * @param {any} _output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction parseFunction(_output: any, tokens: any, current: any) {\n  // precedence of functions\n  const possibleFunctions = [\n    kbSelected,\n    kbCountSelected,\n    kbChoice,\n    kbToday,\n    kbNow,\n    kbRegex,\n    kbInt,\n    kbCoalesce,\n    kbPosition,\n    kbSum,\n    kbConcat,\n    kbSubstr,\n    kbRound,\n    kbFormatDate,\n    kbPullData,\n    kbDecimalDateTime,\n    kbDate\n  ];\n  if (tokens[current].type === 'function') {\n    const funcName = tokens[current].value;\n    const arrayOfParams: any = [];\n    const arrayOfOriginalTokens: any = [];\n    let i = 1;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      const tmpQueue = [];\n      tmpQueue.push(1);\n      i += 1;\n      let tmpTokens = [];\n      while (tokens[current + i] && tmpQueue.length) {\n        tmpTokens.push(tokens[current + i]);\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === ')'\n        ) {\n          tmpQueue.pop();\n        }\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === '('\n        ) {\n          tmpQueue.push(1);\n        }\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\n          tmpTokens.pop();\n          const tmpVal = parser(null, tmpTokens, 0);\n          arrayOfParams.push(tmpVal);\n          arrayOfOriginalTokens.push(tmpTokens);\n          tmpTokens = [];\n        }\n        i += 1;\n      }\n      i -= 1;\n\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpTokens.pop();\n        const tmpVal = parser(null, tmpTokens, 0);\n        arrayOfParams.push(tmpVal);\n        arrayOfOriginalTokens.push(tmpTokens);\n        let parsedFn = false;\n        let parsedVal = null;\n        possibleFunctions.forEach(functionFn => {\n          if (parsedFn) {\n            return;\n          }\n          [parsedFn, parsedVal] = functionFn(\n            funcName,\n            arrayOfParams,\n            arrayOfOriginalTokens,\n            _output,\n            current\n          );\n        });\n        if (parsedFn) {\n          return [i + 1, parsedVal];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parseIf parses the if present in expression\n * @param {any} _output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction parseIf(_output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'if') {\n    const arrayOfParams = [];\n    let i = 1;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      const tmpQueue = [];\n      tmpQueue.push(1);\n      i += 1;\n      let tmpTokens = [];\n      while (tokens[current + i] && tmpQueue.length) {\n        tmpTokens.push(tokens[current + i]);\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === ')'\n        ) {\n          tmpQueue.pop();\n        }\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === '('\n        ) {\n          tmpQueue.push(1);\n        }\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\n          tmpTokens.pop();\n          const tmpVal = parser(null, tmpTokens, 0);\n          arrayOfParams.push(tmpVal);\n          tmpTokens = [];\n        }\n        i += 1;\n      }\n      i -= 1;\n\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpTokens.pop();\n        const tmpVal = parser(null, tmpTokens, 0);\n        arrayOfParams.push(tmpVal);\n        if (arrayOfParams.length % 2 === 0) {\n          let j;\n          for (j = 0; j < arrayOfParams.length; j += 2) {\n            if (arrayOfParams[j]) {\n              return [i + 1, arrayOfParams[j + 1]];\n            }\n          }\n        } else {\n          let j;\n          for (j = 0; j < arrayOfParams.length - 1; j += 2) {\n            if (arrayOfParams[j]) {\n              return [i + 1, arrayOfParams[j + 1]];\n            }\n          }\n          return [i + 1, arrayOfParams[arrayOfParams.length - 1]];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parseNot parses the not present in expression\n * @param {any} output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\nfunction parseNot(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'not') {\n    let tmpTokens;\n    let i = 1;\n    if (tokens[current + i].type === 'equal' && output != null) {\n      tmpTokens = [];\n      i += 1;\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      let newOutput;\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n        // tslint:disable-next-line: triple-equals\n        return [i, output != newOutput];\n      }\n    } else {\n      let parsed = false;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      let consumedTokens;\n      let newOutput;\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          i += consumedTokens;\n        }\n      });\n      if (parsed) {\n        return [i, !newOutput];\n      }\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parseAnd parses the and present in expression\n * @param {any} output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\nfunction parseAnd(output: any, tokens: any, current: any): any {\n  if (tokens[current].type === 'and' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    let newOutput = null;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      let consumedChars;\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\n      i += consumedChars;\n    } else {\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n      }\n    }\n    if (newOutput != null) {\n      newOutput = output && newOutput;\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\n        let consumedChars = 0;\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\n        i += consumedChars;\n      }\n      return [i, newOutput];\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parseOr parses the or present in expression\n * @param {any} output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\nfunction parseOr(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'or' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    let newOutput = null;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      let consumedChars;\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\n      i += consumedChars;\n    } else {\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n      }\n    }\n    if (newOutput != null || output != null) {\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\n        let consumedChars = 0;\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\n        i += consumedChars;\n      }\n      return [i, output || newOutput];\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parseEqual parses the equal present in expression\n * @param {any} output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\nfunction parseEqual(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'equal' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n      // tslint:disable-next-line: triple-equals\n      return [i, output == newOutput];\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parseLessThan parses the less than or equal present in expression\n * @param {any} output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\nfunction parseLessThan(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'lessThan' && output != null) {\n    let flagLessThanOrEqual = false;\n    const tmpTokens = [];\n    let i = 1;\n    if (tokens[current + i].type === 'equal') {\n      i += 1;\n      flagLessThanOrEqual = true;\n    }\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n      if (flagLessThanOrEqual) {\n        if (typeof newOutput.getMonth === 'function') {\n          return [i, moment(output).startOf('day').isSameOrBefore(moment(newOutput).startOf('day'))];\n        }\n        return [i, output <= newOutput];\n      }\n      if (typeof newOutput.getMonth === 'function') {\n        return [i, moment(output).startOf('day').isBefore(moment(newOutput).startOf('day'))];\n      }\n      return [i, output < newOutput];\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parseGreaterThan parses the greater than or equal present in expression\n * @param {any} output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\nfunction parseGreaterThan(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'greaterThan' && output != null) {\n    let flagGreaterThanOrEqual = false;\n    const tmpTokens = [];\n    let i = 1;\n    if (tokens[current + i].type === 'equal') {\n      i += 1;\n      flagGreaterThanOrEqual = true;\n    }\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n\n      if (flagGreaterThanOrEqual) {\n        return [i, output >= newOutput];\n      }\n      return [i, output > newOutput];\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parseParen parses the paren present in expression\n * @param {any} output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\n// tslint:disable-next-line: variable-name\nfunction parseParen(_output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'paren' && tokens[current].value === '(') {\n    const tmpQueue = [];\n    tmpQueue.push(1);\n    let i = 1;\n    const tmpTokens = [];\n    while (tokens[current + i] && tmpQueue.length) {\n      tmpTokens.push(tokens[current + i]);\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpQueue.pop();\n      }\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === '('\n      ) {\n        tmpQueue.push(1);\n      }\n      i += 1;\n    }\n    i -= 1;\n\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === ')'\n    ) {\n      tmpTokens.pop();\n      const tmpVal = parser(null, tmpTokens, 0);\n      return [i + 1, tmpVal];\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parseDivide parses the divide present in expression\n * @param {any} output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\nfunction parseDivide(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'divide') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n        }\n        const precedentParsers = [parseDivide, parseMultiply];\n        let preParsed = false;\n        let preOutput;\n        precedentParsers.forEach(preParseFn => {\n          if (preParsed) {\n            return;\n          }\n          if (tokens[current]) {\n            [consumedTokens, preOutput] = preParseFn(\n              newOutput,\n              tokens,\n              current\n            );\n            ct += consumedTokens;\n            if (consumedTokens !== 0) {\n              preParsed = true;\n              newOutput = preOutput;\n            }\n          }\n        });\n\n        if (newOutput != null) {\n          output /= newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parseMultiply parses the multiply present in expression\n * @param {any} output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\nfunction parseMultiply(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'multiply') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n        }\n        const precedentParsers = [parseDivide, parseMultiply];\n        let preParsed = false;\n        let preOutput;\n        precedentParsers.forEach(preParseFn => {\n          if (preParsed) {\n            return;\n          }\n          if (tokens[current]) {\n            [consumedTokens, preOutput] = preParseFn(\n              newOutput,\n              tokens,\n              current\n            );\n            ct += consumedTokens;\n            if (consumedTokens !== 0) {\n              preParsed = true;\n              newOutput = preOutput;\n            }\n          }\n        });\n\n        if (newOutput != null) {\n          output *= newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parsePlus parses the addition present in expression\n * @param {any} output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\nfunction parsePlus(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'plus') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'string',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n          const precedentParsers = [parseDivide, parseMultiply];\n          let preParsed = false;\n          let preOutput;\n          precedentParsers.forEach(preParseFn => {\n            if (preParsed) {\n              return;\n            }\n            if (tokens[current]) {\n              [consumedTokens, preOutput] = preParseFn(\n                newOutput,\n                tokens,\n                current\n              );\n              ct += consumedTokens;\n              if (consumedTokens !== 0) {\n                preParsed = true;\n                newOutput = preOutput;\n              }\n            }\n          });\n        }\n        if (newOutput != null) {\n          output += newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\n/**\n * parseMinus parses the minus present in expression\n * @param {any} output - the parsed output of previous tokens\n * @param {any} tokens - the array of tokens\n * @param {any} current - the current position of the parser\n * @returns parserReturnObject\n */\nfunction parseMinus(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'minus') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [parseLiterals, parseParen, parseFunction];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n          const precedentParsers = [parseDivide, parseMultiply];\n          let preParsed = false;\n          let preOutput;\n          precedentParsers.forEach(preParseFn => {\n            if (preParsed) {\n              return;\n            }\n            if (tokens[current]) {\n              [consumedTokens, preOutput] = preParseFn(\n                newOutput,\n                tokens,\n                current\n              );\n              ct += consumedTokens;\n              if (consumedTokens !== 0) {\n                preParsed = true;\n                newOutput = preOutput;\n              }\n            }\n          });\n        }\n        if (newOutput) {\n          if (output) {\n            if (\n              Object.prototype.toString.call(newOutput) === '[object Date]' &&\n              Object.prototype.toString.call(output) === '[object Date]'\n            ) {\n              if (!isNaN(output.getTime()) && !isNaN(newOutput.getTime())) {\n                output -= newOutput;\n                output = Math.ceil(output / (1000 * 60 * 60 * 24));\n              } else {\n                output = NaN;\n              }\n            } else if (\n              Object.prototype.toString.call(newOutput) === '[object Date]' ||\n              Object.prototype.toString.call(output) === '[object Date]'\n            ) {\n              output = NaN;\n            } else if (newOutput === '' || output === '') {\n              output = NaN;\n            } else {\n              output -= newOutput;\n            }\n          } else {\n            if (Object.prototype.toString.call(newOutput) === '[object Date]') {\n              output = NaN;\n            } else {\n              output = -newOutput;\n            }\n          }\n        } else {\n          output = NaN;\n        }\n      });\n      if (parsed) {\n        if (output === '') {\n          output = NaN;\n        }\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\n// precedence of the parser methods\nconst parsers = [\n  parseIf,\n  parseParen,\n  parseLiterals,\n  parseDivide,\n  parseMultiply,\n  parsePlus,\n  parseMinus,\n  parseLessThan,\n  parseGreaterThan,\n  parseEqual,\n  parseAnd,\n  parseOr,\n  parseNot,\n  parseFunction,\n];\n\n/**\n * the main parser that parses the series of tokens generated by the tokenizer.\n * Throws syntax error if not parsed\n * @param {any} leftOutput - the initial output or output of previous left side tokens\n * @param {any} tokens - the set or array of tokens need to be parsed\n * @param {any} pos - the start position of the parser\n * @returns parsed value of the set of tokens\n */\nfunction parser(leftOutput: any, tokens: any, pos: any) {\n  let current = pos;\n  let output = leftOutput;\n  while (current < tokens.length) {\n    let parsed = false;\n    parsers.forEach(parserFn => {\n      if (parsed) {\n        return;\n      }\n      const [consumedTokens, newOutput] = parserFn(output, tokens, current);\n      if (consumedTokens !== 0) {\n        parsed = true;\n        current += consumedTokens;\n      }\n      if (newOutput != null) {\n        output = newOutput;\n      }\n    });\n    if (!parsed) {\n      // throw new TypeError('syntax error');\n      // tslint:disable-next-line: no-console\n      console.log('syntax error');\n      // tslint:disable-next-line: no-console\n      console.log(actualExpression);\n      return null;\n    }\n  }\n  return output;\n}\n\n/**\n * odk wrapper evaluator, default method that will be exported, parses expressions\n * @param {any} expression - expression that needs to be evaluated\n * @param {any} tmpUserInput - the variable key-value json, (current user input json)\n * @param {any} tmpFormItemProperty - the name key-value json (current option list)\n * @param {any} tmpCurrentHierarchicalName - the node at which the evaluater is called\n * @returns evaluated value\n */\nexport default function evaluater(\n  expression: string,\n  tmpUserInput: any,\n  tmpFormItemProperty: any,\n  tmpCurrentHierarchicalName: string\n) {\n  if (!tmpUserInput) {\n    tmpUserInput = {};\n  }\n  currentHierarchicalName = tmpCurrentHierarchicalName;\n  actualExpression = expression;\n  userInput = tmpUserInput;\n  formItemProperty = tmpFormItemProperty;\n  return parser(null, tokenizer(expression), 0);\n}\n","import * as React from 'react';\nimport { Alert } from 'reactstrap';\n\nexport interface KbAlertProps {\n  headerText: string;\n  bodyText: string;\n  handleToggle: any;\n  isOpen: boolean;\n  color: string;\n}\n\nclass KbAlert extends React.Component<KbAlertProps> {\n  public render() {\n    const { headerText, bodyText, handleToggle, isOpen, color } = this.props;\n    return (\n      <Alert color={color} isOpen={isOpen} toggle={handleToggle}>\n        <h4 className=\"alert-heading\">{headerText}</h4>\n        <p>{bodyText}</p>\n      </Alert>\n    );\n  }\n}\n\nexport default KbAlert;\n","import * as React from 'react';\nimport Select from 'react-select';\n\nexport interface DropDownProps {\n  languages: any;\n  onChangeSelect: any;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass DropDown extends React.Component<DropDownProps> {\n  public render() {\n    const options: Options[] = [];\n    const languageOptions = [...this.props.languages];\n    languageOptions.map((elem: any) => {\n      options.push({ label: elem.label, value: elem.value });\n    });\n\n    let selectedValue: any;\n    options.map(elem => {\n      if (elem.value === this.props.defaultLanguage) {\n        selectedValue = elem;\n      }\n    });\n\n    return (\n      <Select\n        multi={false}\n        options={options}\n        className={'col-md-2 dropDown'}\n        placeholder=\"Language\"\n        onChange={this.onChangeHandler}\n        value={selectedValue || ''}\n      />\n    );\n  }\n\n  /** pass the selected value to the parent class\n   * @param {any} event - the onchange input event\n   */\n  private onChangeHandler = (event: any) => {\n    this.props.onChangeSelect(event.value);\n  };\n}\n\nexport default DropDown;\n","// Field Types\nexport const GROUP_FIELD_TYPE = 'group';\nexport type GROUP_FIELD_TYPE = typeof GROUP_FIELD_TYPE;\nexport const REPEAT_FIELD_TYPE = 'repeat';\nexport type REPEAT_FIELD_TYPE = typeof REPEAT_FIELD_TYPE;\nexport const TEXT_FIELD_TYPE = 'text';\nexport type TEXT_FIELD_TYPE = typeof TEXT_FIELD_TYPE;\nexport const DATE_FIELD_TYPE = 'date';\nexport type DATE_FIELD_TYPE = typeof DATE_FIELD_TYPE;\nexport const DATE_TIME_FIELD_TYPE = 'dateTime';\nexport type TIME_FIELD_TYPE = typeof TIME_FIELD_TYPE;\nexport const TIME_FIELD_TYPE = 'time';\nexport type DATE_TIME_FIELD_TYPE = typeof DATE_TIME_FIELD_TYPE;\nexport const INTEGER_FIELD_TYPE = 'integer';\nexport type INTEGER_FIELD_TYPE = typeof INTEGER_FIELD_TYPE;\nexport const DECIMAL_FIELD_TYPE = 'decimal';\nexport type DECIMAL_FIELD_TYPE = typeof DECIMAL_FIELD_TYPE;\nexport const PHOTO_FIELD_TYPE = 'photo';\nexport type PHOTO_FIELD_TYPE = typeof PHOTO_FIELD_TYPE;\nexport const FILE_FIELD_TYPE = 'file';\nexport type FILE_FIELD_TYPE = typeof FILE_FIELD_TYPE;\nexport const NOTE_FIELD_TYPE = 'note';\nexport type NOTE_FIELD_TYPE = typeof NOTE_FIELD_TYPE;\nexport const SELECT_ONE_FIELD_TYPE = 'select one';\nexport type SELECT_ONE_FIELD_TYPE = typeof SELECT_ONE_FIELD_TYPE;\nexport const SELECT_ALL_FIELD_TYPE = 'select all that apply';\nexport type SELECT_ALL_FIELD_TYPE = typeof SELECT_ALL_FIELD_TYPE;\nexport const CALCULATE_FIELD_TYPE = 'calculate';\nexport type CALCULATE_FIELD_TYPE = typeof CALCULATE_FIELD_TYPE;\nexport const GPS_FIELD_TYPE = 'gps';\nexport type GPS_FIELD_TYPE = typeof GPS_FIELD_TYPE;\nexport const AUDIO_FIELD_TYPE = 'audio';\nexport type AUDIO_FIELD_TYPE = typeof GPS_FIELD_TYPE;\n\n// Required Properties\nexport const REQUIRED_FIELD_MSG = 'This field is required';\nexport type REQUIRED_FIELD_MSG = typeof REQUIRED_FIELD_MSG;\nexport const REQUIRED_SYMBOL = '*';\nexport type REQUIRED_SYMBOL = typeof REQUIRED_SYMBOL;\n","import { createStore, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer, { FormState } from './ducks/formState';\n\n/** The initial store */\nconst store: Store & FormState = createStore(reducer, composeWithDevTools());\n\nexport default store;\n","import { FieldElement } from '../components/typeEvalutors/Base';\n\n/**\n * get the text from multilang obj based on language identifier,\n * @param {FieldElement} property - field multilang property or string\n * @return {string} - text value of the property based on language identifier, empty if not present\n */\nexport default function getTextFromProperty(\n  property: string | { [key: string]: string },\n  languageIdentifier: string\n): string {\n  if (typeof property === 'string') {\n    return property || '';\n  }\n  return property[languageIdentifier] || '';\n}\n\n/**\n * get the label text of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field label text\n */\nexport function getFieldLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.label) {\n    return getTextFromProperty(fieldElement.label, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the label hint of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field label text\n */\nexport function getHintLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.hint) {\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the customised label text with previous input of the fieldElement\n * @param {any} evaluator - the getEvaluatedExpressionSelector Function\n * @param {string} labelText - the current Label Text\n * @param {string} fieldTreeName - the field tree name\n * @return {string | null} - field label text or null\n */\nexport function customizeLabelsWithPreviousInputs(\n  evaluator: any,\n  labelText: string,\n  fieldTreeName: string\n): string | null {\n  if (labelText === null || labelText === undefined) {\n    return null;\n  }\n  const placesOfCustomizationsRequiredList = labelText.match(/\\[(.*?)\\]/g);\n\n  // to calculate - i.e, [${departure_date_from_bangladesh}]\n  if (placesOfCustomizationsRequiredList) {\n    placesOfCustomizationsRequiredList.forEach(tmpPlace => {\n      tmpPlace = tmpPlace.substring(1, tmpPlace.length - 1);\n      const customizedName = evaluator(tmpPlace, fieldTreeName);\n      const tmp = '[' + tmpPlace + ']';\n      if (customizedName != null && customizedName !== undefined) {\n        labelText = labelText.replace(tmp, customizedName);\n      } else {\n        labelText = labelText.replace(tmp, '');\n      }\n    });\n  } else {\n    // to calculate - i.e, ${departure_date_from_bangladesh}\n    const matchList = labelText.match(/\\${(.*[^}])[\\}?]$/g);\n    if (matchList) {\n      matchList.forEach(tmpPlace => {\n        const customizedName = evaluator(tmpPlace, fieldTreeName);\n        if (customizedName != null && customizedName !== undefined) {\n          labelText = labelText.replace(tmpPlace, customizedName);\n        } else {\n          labelText = labelText.replace(tmpPlace, '');\n        }\n      });\n    }\n  }\n\n  return labelText;\n}\n\n/**\n * get the hint text of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field hint text\n */\nexport function getFieldHintText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.hint) {\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the label text of the fieldElement constraint msg\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - constraint label text\n */\nexport function getConstraintLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.bind && fieldElement.bind['jr:constraintMsg']) {\n    return getTextFromProperty(\n      fieldElement.bind['jr:constraintMsg'],\n      languageIdentifier\n    );\n  }\n  return '';\n}\n\n/**\n * get the boolean result depending on the expression\n * @param {string} - required string\n * @returns {boolean} - true if required, otherwise false\n */\nfunction requiredEvaluator(expression: string): boolean {\n  if (\n    expression.toLowerCase() === 'yes' ||\n    expression === '1' ||\n    expression.toLowerCase() === 'true'\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * get the boolean result of fieldElement string\n * @param fieldElement\n * @return {boolean} - boolean value by calculating fieldElement required properties\n */\nexport function isInputRequired(fieldElement: FieldElement): boolean {\n  let isRequired = false;\n  if (fieldElement.bind) {\n    if (fieldElement.bind.required) {\n      if (\n        typeof fieldElement.bind.required === 'string' &&\n        requiredEvaluator(fieldElement.bind.required)\n      ) {\n        isRequired = true;\n      }\n    }\n  }\n  return isRequired;\n}\n\n/** interface for EvaluateExpression\n * @param {string} expression - the expression that needs to be evaluated\n * @param {fieldTreeName} - the field Tree name\n * @returns {any} - evaluated value\n */\nexport type EvaluateExpression = (\n  expression: string,\n  fieldTreeName: string\n) => any;\n\n/** evaluates whether a component be relevant or not\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the relevant expression\n * @returns {boolean} - true if relevant; otherwise, false;\n */\nexport function shouldComponentBeRelevant(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.relevant) {\n    const isRelevant = evaluateExpression(\n      fieldElement.bind.relevant,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isRelevant) {\n      return true;\n    }\n    return false;\n  }\n  return true;\n}\n\n/** evaluates whether a component be readonly or not\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the readonly expression\n * @returns {boolean} - true if readonly; otherwise, false;\n */\nexport function shouldComponentBeReadOnly(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.readonly) {\n    const isReadOnly = evaluateExpression(\n      fieldElement.bind.readonly,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isReadOnly) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/** evaluates whether the input violates constraint or not\n * @param {FieldElement} fieldElement - the constraint expression\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the expression\n * @returns {boolean} - true if violates; otherwise, false;\n */\nexport function shouldInputViolatesConstraint(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.constraint) {\n    const isConstraintViolated = !evaluateExpression(\n      fieldElement.bind.constraint,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isConstraintViolated) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/** returns the new user input object after assigning value of passed fieldTreeName\n * @param {any} userInputObj - the current user input object\n * @param {string} fieldTreeName - the field Tree name\n * @param {any} fieldValue - the value that needs to be assigned\n * @returns {any} - the new user input object after assignment\n */\nexport function getModifiedUserInputObject(\n  userInputObj: any,\n  fieldTreeName: string,\n  fieldValue: any\n): any {\n  const treeNodes = fieldTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  modifiedObj[parent + treeNodes[treeNodes.length - 1]] = fieldValue;\n  return userInputObj;\n}\n\n/** Returns the filtered option list Array For Repeat property\n * @param {any} userInputObj - the current option list object\n * @param {string} fieldTreeName - the field Tree name\n * @param {any} repeatIndex - the repeat index to remove\n * @returns {any} - the new user filredred repear array after assignment\n */\nexport function getModifiedOptionListForRepeat(\n  userInputObj: any,\n  fieldTreeName: string,\n  repeatIndex: number\n): any {\n  const filteredRepeatArray: any = [];\n  const optionListobj: any = userInputObj;\n\n  Object.entries(optionListobj).forEach(key => {\n    const keyNameOptionListobj: any = key[0];\n    const keyValueOptionListobj: any = key[1];\n    if (keyNameOptionListobj === fieldTreeName) {\n      const repeatIndexString: string = String(repeatIndex);\n      Object.entries(keyValueOptionListobj).map(keyRepeat => {\n        const keyNameRepeatObject: any = keyRepeat[0];\n        const keyValueRepeatValue: any = keyRepeat[1];\n        if (keyNameRepeatObject !== repeatIndexString) {\n          filteredRepeatArray.push(keyValueRepeatValue);\n        }\n      });\n    }\n  });\n  return filteredRepeatArray;\n}\n\n/** returns the value from the user input object\n * @param {any} userInputObj - the user input object\n * @param {string} fieldTreeName - the field Tree name\n * @returns {any} - the value, present in user input object, of the fieldTreeName\n */\nexport function getValueFromUserInputObj(\n  userInputObj: any,\n  fieldTreeName: string\n): any {\n  const treeNodes = fieldTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  return modifiedObj[parent + treeNodes[treeNodes.length - 1]];\n}\n\n/** evaluates whether the component is minimal or not\n * @param {FieldElement} fieldElement - the constraint expression\n * @returns {boolean} - true if minimal; otherwise, false;\n */\nexport function shouldComponentBeMinimal(fieldElement: FieldElement): boolean {\n  let isMinimal = false;\n  if (fieldElement.control && fieldElement.control.appearance) {\n    fieldElement.control.appearance.toString().includes('minimal')\n      ? (isMinimal = true)\n      : (isMinimal = false);\n  }\n  return isMinimal;\n}\n\n/** returns the new user input object after emptying the desired grouped values\n * @param {any} userInputObj - the current user input object\n * @param {string} groupTreeName - the group Tree name\n * @returns {any} - the new user input object after emptying the grouped values\n */\nexport function emptyGroupedValues(\n  userInputObj: any,\n  groupTreeName: string\n): any {\n  const treeNodes = groupTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  Object.keys(modifiedObj).forEach(objKey => {\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\n      modifiedObj[objKey] = null;\n    }\n  });\n  return userInputObj;\n}\n\n/** returns whether the grouped values are empty or not\n * @param {any} userInputObj - the current user input object\n * @param {string} groupTreeName - the group Tree name\n * @returns {any} - true if empty; otherwise, false\n */\nexport function checkGroupedValuesForEmpty(\n  userInputObj: any,\n  groupTreeName: string\n): any {\n  const treeNodes = groupTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  let isEmpty: boolean = true;\n  Object.keys(modifiedObj).forEach(objKey => {\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\n      if (\n        modifiedObj[objKey] !== null &&\n        modifiedObj[objKey] !== undefined &&\n        isEmpty\n      ) {\n        isEmpty = false;\n      }\n    }\n  });\n  return isEmpty;\n}\n","import { AnyAction, Store } from 'redux';\nimport SeamlessImmutable from 'seamless-immutable';\nimport evaluater from '../../utils/compiler';\nimport {\n  checkGroupedValuesForEmpty,\n  emptyGroupedValues,\n  getModifiedOptionListForRepeat,\n  getModifiedUserInputObject,\n  getValueFromUserInputObj,\n} from '../../utils/helpers';\n\n/** interface for the store state */\nexport interface FormState {\n  userInput: object;\n  errors: string[];\n  optionList: object;\n  isFormSubmitted: boolean;\n  mediaList: object;\n  language: string;\n}\n\n// actions\n\n/** COLOR SET action type */\nexport const SET_COLOR = 'odk/reducer/form/SET_COLOR';\n/** FIELD_VALUE_ASSIGNED action type */\nexport const FIELD_VALUE_ASSIGNED = 'odk/reducer/form/FIELD_VALUE_ASSIGNED';\n/** OPTION_LIST_ASSIGNED action type */\nexport const OPTION_LIST_ASSIGNED = 'odk/reducer/form/OPTION_LIST_ASSIGNED';\n/** MEDIA_LIST_ASSIGNED action type */\nexport const MEDIA_LIST_ADDED = 'odk/reducer/form/MEDIA_LIST_ADDED';\n/** REMOVE_FROM_MEDIA_LIST action type */\nexport const REMOVE_FROM_MEDIA_LIST = 'odk/reducer/form/REMOVE_FROM_MEDIA_LIST';\n/** REMOVE_FROM_OPTION_LIST action type */\nexport const REMOVE_FROM_OPTION_LIST_REPEAT =\n  'odk/reducer/form/REMOVE_FROM_OPTION_LIST_REPEAT';\n/** RESET_STORE action type */\nexport const RESET_STORE = 'odk/reducer/form/RESET_STORE';\n/** ADD_ERROR_INPUT_ID action type */\nexport const ADD_ERROR_INPUT_ID = 'odk/reducer/form/ADD_ERROR_INPUT_ID';\n/** REMOVE_ERROR_INPUT_ID action type */\nexport const REMOVE_ERROR_INPUT_ID = 'odk/reducer/form/REMOVE_ERROR_INPUT_ID';\n/** EMPTY_GROUP_FIELDS */\nexport const EMPTY_GROUP_FIELDS = 'odk/reducer/form/EMPTY_GROUP_FIELDS';\n/** REMOVE_GROUP_FIELDS_FROM_ERRORS */\nexport const REMOVE_GROUP_FIELDS_FROM_ERRORS =\n  'odk/reducer/form/REMOVE_GROUP_FIELDS_FROM_ERRORS';\nexport const SET_USER_INPUT_OBJ = 'odk/reducer/form/SET_USER_INPUT_OBJ';\nexport const SET_CSV_OBJ = 'odk/reducer/form/SET_CSV_OBJ';\nexport const SET_FORM_SUBMIT_STATUS = 'odk/reducer/form/SET_FORM_SUBMIT_STATUS';\nexport const SET_LANGUAGE = 'odk/reducer/form/SET_LANGUAGE';\n\nexport interface SetColorAction extends AnyAction {\n  color: any;\n  type: typeof SET_COLOR;\n}\n\n/** interface for ASSIGN_FIELD_VALUE action */\nexport interface AssignFieldValueAction extends AnyAction {\n  fieldTreeName: string;\n  fieldValue: any;\n  type: typeof FIELD_VALUE_ASSIGNED;\n}\n\n/** interface for OPTION_LIST_ASSIGNED action */\nexport interface AssignOptionListAction extends AnyAction {\n  fieldTreeName: string;\n  optionList: any;\n  type: typeof OPTION_LIST_ASSIGNED;\n}\n\n/** interface for MEDIA_LIST_ADDED action */\nexport interface AddMediaListAction extends AnyAction {\n  mediaObject: any;\n  type: typeof MEDIA_LIST_ADDED;\n}\n\n/** interface for REMOVE_FROM_MEDIA_LIST action */\nexport interface RemoveFromMediaListAction extends AnyAction {\n  fieldTreeName: string;\n  mediaList: any;\n  type: typeof REMOVE_FROM_MEDIA_LIST;\n}\n\n/** interface for REMOVE_FROM_OPTION_LIST action */\nexport interface RemoveFromOptionList extends AnyAction {\n  fieldTreeName: string;\n  repeatIndex: number;\n  type: typeof REMOVE_FROM_OPTION_LIST_REPEAT;\n}\n\n/** interface for RESET_STORE action */\nexport interface ResetStoreAction extends AnyAction {\n  type: typeof RESET_STORE;\n}\n\n/** interface for ADD_ERROR_INPUT_ID action */\nexport interface AddErrorInputId extends AnyAction {\n  fieldTreeName: string;\n  type: typeof ADD_ERROR_INPUT_ID;\n}\n\n/** interface for REMOVE_ERROR_INPUT_ID action */\nexport interface RemoveErrorInputId extends AnyAction {\n  fieldTreeName: string;\n  type: typeof REMOVE_ERROR_INPUT_ID;\n}\n\n/** interface for EMPTY_GROUP_FIELDS action */\nexport interface EmptyGroupFields extends AnyAction {\n  fieldTreeName: string;\n  type: typeof EMPTY_GROUP_FIELDS;\n}\n\n/** interface for REMOVE_GROUP_FIELDS_FROM_ERRORS action */\nexport interface RemoveGroupFieldsFromErrors extends AnyAction {\n  fieldTreeName: string;\n  type: typeof REMOVE_GROUP_FIELDS_FROM_ERRORS;\n}\n\n/** interface for SET_USER_INPUT_OBJ action */\nexport interface SetUserInputObj extends AnyAction {\n  userInputObj: any;\n  type: typeof SET_USER_INPUT_OBJ;\n}\n\n/** interface for SET_CSV_OBJ action */\nexport interface SetCSVObj extends AnyAction {\n  csvObj: any;\n  type: typeof SET_CSV_OBJ;\n}\n/** interface for SET_LANGUAGE action */\nexport interface SetLanguage extends AnyAction {\n  language: string;\n  type: typeof SET_LANGUAGE;\n}\n\n/** interface for SET_FORM_SUBMIT_STATUS action */\nexport interface SetFormSubmitStatus extends AnyAction {\n  isFormSubmitted: boolean;\n  type: typeof SET_FORM_SUBMIT_STATUS;\n}\n\n/** SET COLOR\n * @param {string} color - color code\n */\n export const setColorAction = (color: any): SetColorAction => ({\n  color,\n  type: SET_COLOR,\n});\n\n\n/** Assigns the value to the proper field name\n * @param {string} fieldTreeName - the extended field name\n * @param {any} fieldValue - the value that will be assigned\n * @return {AssignFieldValueAction} - an action to assign value to a field in the redux store\n */\nexport const assignFieldValueAction = (\n  fieldTreeName: string,\n  fieldValue: any\n): AssignFieldValueAction => ({\n  fieldTreeName,\n  fieldValue,\n  type: FIELD_VALUE_ASSIGNED,\n});\n\n/** Assigns option list to the proper field name\n * @param {string} fieldTreeName - the extended field name\n * @param {any} optionList - the option list that will be assigned\n * @return {AssignOptionListAction} - an action to assign option List to a field in the redux store\n */\nexport const assignOptionListAction = (\n  fieldTreeName: string,\n  optionList: any\n): AssignOptionListAction => ({\n  fieldTreeName,\n  optionList,\n  type: OPTION_LIST_ASSIGNED,\n});\n\n/** Remove option list from Redux Store\n * @param fieldTreeName - the field tree name\n * @returns {RemoveFromOptionList} - an action to remove input id for errors\n */\nexport const RemoveFromOptionList = (\n  fieldTreeName: string,\n  repeatIndex: number\n): RemoveFromOptionList => ({\n  fieldTreeName,\n  repeatIndex,\n  type: REMOVE_FROM_OPTION_LIST_REPEAT,\n});\n\n/** Adds media object to the proper field name\n * @param {any} mediaObject - the media object that will be added\n * @return {AddMediaListAction} - an action to assign media object to a field in the redux store\n */\nexport const addMediaListAction = (mediaObject: any): AddMediaListAction => ({\n  mediaObject,\n  type: MEDIA_LIST_ADDED,\n});\n\n/** Remove a media item in option list from Redux Store\n * @param fieldTreeName - the field tree name\n * @returns {RemoveFromMediaListAction} - an action to remove media info from redux store\n */\nexport const removeFromMediaListAction = (\n  fieldTreeName: string,\n  mediaList: any\n): RemoveFromMediaListAction => ({\n  fieldTreeName,\n  mediaList,\n  type: REMOVE_FROM_MEDIA_LIST,\n});\n\n/** Resets the redux store state to initial state\n * @return {ResetStoreAction} - an action to reset the redux store state\n */\nexport const resetStoreAction = (): ResetStoreAction => ({\n  type: RESET_STORE,\n});\n\n/** add the field tree name as error id to store in redux store that violates constraints\n * @param fieldTreeName - the field tree name\n * @returns {AddErrorInputId} - an action to add input id for errors\n */\nexport const addErrorInputId = (fieldTreeName: string): AddErrorInputId => ({\n  fieldTreeName,\n  type: ADD_ERROR_INPUT_ID,\n});\n\n/** remove the field tree name as error id to store in redux store that violates constraints\n * @param fieldTreeName - the field tree name\n * @returns {RemoveErrorInputId} - an action to remove input id for errors\n */\nexport const removeErrorInputId = (\n  fieldTreeName: string\n): RemoveErrorInputId => ({\n  fieldTreeName,\n  type: REMOVE_ERROR_INPUT_ID,\n});\n\n/** empties the values of the fields of the group\n * @param fieldTreeName - the group field tree name\n * @returns {RemoveErrorInputId} - an action to empty the group field values\n */\nexport const emptyGroupFields = (fieldTreeName: string): EmptyGroupFields => ({\n  fieldTreeName,\n  type: EMPTY_GROUP_FIELDS,\n});\n\n/** removes the group field names from store errors obj\n * @param {string} fieldTreeName - the group field tree name\n * @returns {RemoveGroupFieldsFromErrors} - an action to remove group field names from errors\n */\nexport const removeGroupFieldsFromErrors = (\n  fieldTreeName: string\n): RemoveGroupFieldsFromErrors => ({\n  fieldTreeName,\n  type: REMOVE_GROUP_FIELDS_FROM_ERRORS,\n});\n\n/** sets the user input object to redux store\n * @param {any} userInputObj - the user input obj\n * @returns {SetUserInputObj} - an action to set user input to redux store\n */\nexport const setUserInputObj = (userInputObj: any): SetUserInputObj => ({\n  type: SET_USER_INPUT_OBJ,\n  userInputObj,\n});\n\n/** sets the csv object to redux store\n * @param {any} userInputObj - the user input obj\n * @returns {SetUserInputObj} - an action to set user input to redux store\n */\n export const setCSVObj = (csvObj: any): SetCSVObj => ({\n  type: SET_CSV_OBJ,\n  csvObj,\n});\n\n/** sets the language to redux store\n * @param {string} language - the user input obj\n * @returns {SetLanguage} - an action to set user input to redux store\n */\nexport const setUserLanguage = (language: string): SetLanguage => ({\n  type: SET_LANGUAGE,\n  language,\n});\n\n/** sets the form submit info to redux store\n * @param {boolean} isFormSubmitted - the form submit info variable\n * @returns {SetFormSubmitInfo} - an action to set form submit info to redux store\n */\nexport const setFormSubmitStatus = (\n  isFormSubmitted: boolean\n): SetFormSubmitStatus => ({\n  isFormSubmitted,\n  type: SET_FORM_SUBMIT_STATUS,\n});\n\n/** Create type for forms reducer actions */\nexport type FormActionTypes =\n  | AssignFieldValueAction\n  | AssignOptionListAction\n  | RemoveFromOptionList\n  | AddMediaListAction\n  | RemoveFromMediaListAction\n  | ResetStoreAction\n  | AddErrorInputId\n  | RemoveErrorInputId\n  | EmptyGroupFields\n  | RemoveGroupFieldsFromErrors\n  | SetUserInputObj\n  | SetCSVObj\n  | SetFormSubmitStatus\n  | SetColorAction\n  | AnyAction;\n\n/** Create an immutable form state */\nexport type ImmutableFormState = SeamlessImmutable.ImmutableObject<FormState>;\n\n/** initial form state */\nexport const initialState: ImmutableFormState = SeamlessImmutable({\n  errors: [],\n  isFormSubmitted: false,\n  mediaList: {},\n  optionList: {},\n  userInput: {},\n  language: 'English',\n  csvList: {},\n  color: '',\n});\n\n/** the form reducer function */\nexport default function reducer(\n  state: ImmutableFormState = initialState,\n  action: FormActionTypes\n): ImmutableFormState {\n  switch (action.type) {\n    case SET_COLOR:\n      const colorState = state.asMutable({ deep: true });\n      return SeamlessImmutable({ ...colorState, color: action.color });\n\n    case FIELD_VALUE_ASSIGNED:\n      const modifiedUserInputObj = getModifiedUserInputObject(\n        state.getIn(['userInput']).asMutable({ deep: true }),\n        action.fieldTreeName,\n        action.fieldValue\n      );\n      const stateM = state.asMutable({ deep: true });\n      return SeamlessImmutable({ ...stateM, userInput: modifiedUserInputObj });\n\n    case OPTION_LIST_ASSIGNED:\n      const modifiedUserInputObjList = getModifiedUserInputObject(\n        state.getIn(['optionList']).asMutable({ deep: true }),\n        action.fieldTreeName,\n        action.optionList != null ? { ...action.optionList } : null\n      );\n      const newState = state.asMutable({ deep: true });\n      return SeamlessImmutable({\n        ...newState,\n        optionList: modifiedUserInputObjList,\n      });\n\n    case REMOVE_FROM_OPTION_LIST_REPEAT:\n      let filteredRepeatArray: any = [];\n      if (\n        state\n          .getIn(['optionList'])\n          .asMutable({ deep: true })\n          .hasOwnProperty(action.fieldTreeName)\n      ) {\n        filteredRepeatArray = [\n          ...getModifiedOptionListForRepeat(\n            state.getIn(['optionList']).asMutable({ deep: true }),\n            action.fieldTreeName,\n            action.repeatIndex\n          ),\n        ];\n        const modifiedOptionListRepeat = getModifiedUserInputObject(\n          state.getIn(['optionList']).asMutable({ deep: true }),\n          action.fieldTreeName,\n          { ...filteredRepeatArray }\n        );\n        const newStateForRepeat = state.asMutable({ deep: true });\n        return SeamlessImmutable({\n          ...newStateForRepeat,\n          optionList: modifiedOptionListRepeat,\n        });\n      }\n      return state;\n\n    case MEDIA_LIST_ADDED:\n      const modifiedMediaList = {\n        ...state.getIn(['mediaList']).asMutable({ deep: true }),\n        [action.mediaObject.name]: action.mediaObject,\n      };\n      const newMediaState = state.asMutable({ deep: true });\n      return SeamlessImmutable({\n        ...newMediaState,\n        mediaList: modifiedMediaList,\n      });\n\n    case REMOVE_FROM_MEDIA_LIST:\n      if (\n        state\n          .getIn(['mediaList'])\n          .asMutable({ deep: true })\n          .hasOwnProperty(action.fieldTreeName)\n      ) {\n        // const tempMediaState = state.asMutable({ deep: true });\n        // return SeamlessImmutable({\n        //   ...tempMediaState,\n        //   mediaList: modifiedMediaObject,\n        // });\n      }\n      return state;\n\n    case RESET_STORE:\n      return initialState;\n\n    case ADD_ERROR_INPUT_ID:\n      if (!state.errors.includes(action.fieldTreeName)) {\n        return state.updateIn(['errors'], arr =>\n          arr.concat([action.fieldTreeName])\n        );\n      }\n      return state;\n\n    case REMOVE_ERROR_INPUT_ID:\n      if (state.errors.includes(action.fieldTreeName)) {\n        return state.updateIn(['errors'], arr =>\n          arr.filter(elm => elm !== action.fieldTreeName)\n        );\n      }\n      return state;\n\n    case EMPTY_GROUP_FIELDS:\n      const mUserInputObj = emptyGroupedValues(\n        state.getIn(['userInput']).asMutable({ deep: true }),\n        action.fieldTreeName\n      );\n      const mState = state.asMutable({ deep: true });\n      return SeamlessImmutable({ ...mState, userInput: mUserInputObj });\n\n    case REMOVE_GROUP_FIELDS_FROM_ERRORS:\n      return state.updateIn(['errors'], arr =>\n        arr.filter(elm => !elm.startsWith(action.fieldTreeName))\n      );\n\n    case SET_USER_INPUT_OBJ:\n      return SeamlessImmutable({\n        ...state,\n        userInput: (action as any).userInputObj,\n      });\n\n    case SET_CSV_OBJ:\n      return SeamlessImmutable({\n        ...state,\n        csvList: (action as any).csvObj,\n      });\n      \n    case SET_FORM_SUBMIT_STATUS:\n      return SeamlessImmutable({\n        ...state,\n        isFormSubmitted: (action as any).isFormSubmitted,\n      });\n\n    default:\n      return state;\n  }\n}\n\n// selectors\n\nexport function getThemeColor(state: Partial<Store>): any {\n  return (state as any) != undefined && (state as any).getIn(['color']);\n}\n\n/** get the value by their respective element tree name\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} value if the element name is found else null\n */\nexport function getFieldValue(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return getValueFromUserInputObj(\n    (state as any) != undefined && (state as any).getIn(['userInput']).asMutable({ deep: true }),\n    fieldTreeName\n  );\n}\n\n/** get option list by their respective element tree name\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} value if the element name is found else null\n */\nexport function getOptionList(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return getValueFromUserInputObj(\n    (state as any) != undefined && (state as any).getIn(['optionList']).asMutable({ deep: true }),\n    fieldTreeName\n  );\n}\n\n/** get the value of the evaluated expression\n * @param {Partial<Store>} state - the redux store\n * @param {string} expression - the expression that needs to be evaluated\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} - the evaluated value or null if syntax error\n */\nexport function getEvaluatedExpression(\n  state: Partial<Store>,\n  expression: string,\n  fieldTreeName: string\n): any {\n  return evaluater(expression, (state as any) != undefined && (state as any).userInput, null, fieldTreeName);\n}\n\n/** get the value of the evaluated expression for Select One and Select All\n * @param {Partial<Store>} state - the redux store\n * @param {string} expression - the expression that needs to be evaluated\n * @param {any} options - the options that needs to be evaluated\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} - the evaluated value or null if syntax error\n */\nexport function getEvaluatedExpressionForSelect(\n  state: Partial<Store>,\n  expression: string,\n  options: any,\n  fieldTreeName: string\n): any {\n  return evaluater(\n    expression,\n    (state as any).userInput,\n    options,\n    fieldTreeName\n  );\n}\n\n/** check if the field element is present in the store\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {boolean} true if present; otherwise, false\n */\nexport function isPresentInError(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return  (state as any) != undefined && (state as any).errors.includes(fieldTreeName);\n}\n\n/** check if the field elements under group are empty or not\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the group field\n * @return {boolean} true if empty; otherwise, false\n */\nexport function isGroupFieldsEmpty(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return checkGroupedValuesForEmpty( (state as any) != undefined && (state as any).userInput, fieldTreeName);\n}\n\n/** check if the field elements under group are present in errors or not\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the group field\n * @return {boolean} true if present; otherwise, false\n */\nexport function isErrorsIncludeGroupFields(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  let isPresent = false;\n  (state as any).errors.forEach((fTName: string) => {\n    if (fTName.startsWith(fieldTreeName) && !isPresent) {\n      isPresent = true;\n    }\n  });\n  return isPresent;\n}\n\n/** check if the errors array in store empty or not\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} true if empty; otherwise, false\n */\nexport function isErrorsArrayEmpty(state: Partial<Store>): any {\n  return (state as any) != undefined && (state as any).errors && (state as any).errors.length ? false : true;\n}\n\n/** get the userInput object from store\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} the current userInputObject\n */\nexport function getUserInputFromStore(state: Partial<Store>): any {\n  return (state as any) != undefined && (state as any).getIn(['userInput']).asMutable({ deep: true });\n}\n\n/** get the userInput object from store\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} the current userInputObject\n */\n export function getCSVFromStore(state: Partial<Store>): any {\n  return (state as any) != undefined && (state as any).getIn(['csvList']).asMutable({ deep: true });\n}\n\n\n/** get the userInput object from store\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} the current isFormSubmitted\n */\nexport function getFormSubmitStatus(state: Partial<Store>): any {\n  return (state as any) != undefined && (state as any).isFormSubmitted;\n}\n\n/** get the file if present in store\n * @param {Partial<Store>} state - the redux store\n * @param {string} fileName - the fileName\n * @return {any} - the file or null\n */\nexport function getFileObject(state: Partial<Store>, fileName: string): any {\n  const fileObject = (state as any).getIn(['mediaList', fileName]);\n  return fileObject ? (state as any).getIn(['mediaList', fileName]) : null;\n}\n\n/** get all the files\n * @param {Partial<Store>} state - the redux store\n * @return {any} - the files or empty object\n */\nexport function getAllFileObjects(state: Partial<Store>): any {\n  return (state as any) != undefined && (state as any).getIn(['mediaList']);\n}\n","import { createStyles, Theme } from '@material-ui/core';\n\nconst GroupStyle = (theme: Theme, customColor: any) =>{ \n  return createStyles({\n    root: {\n      '&.MuiAccordionSummary-root': {\n        borderTop: `5px solid ${customColor || theme.palette.primary.dark}`,\n        color: `${customColor || theme.palette.primary.dark} !important`,\n        '&:hover': {\n          backgroundColor: `${customColor || theme.palette.primary.dark} !important`,\n          color: `${theme.palette.secondary.light} !important`,\n        },\n        '&.Mui-expanded': {\n          backgroundColor: `${customColor || theme.palette.primary.dark} !important`,\n          color: `${theme.palette.secondary.light} !important`,\n        },\n      },\n    },\n    backgroundProp: {\n      backgroundColor: theme.palette.secondary.light,\n      display: 'block'\n    },\n    insideBackground: {\n      backgroundColor: 'white'\n    },\n    borderProp: {\n      boxShadow: `inset 0 0 2px ${theme.palette.primary.light}`,\n      backgroundColor: 'white',\n      marginTop: 10,\n      marginBottom: 5,\n      padding: 10,\n\n    },\n    toolbarIcon: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      padding: '0 8px',\n      ...theme.mixins.toolbar,\n      '& button': {\n        color: '#FFF',\n      },\n    },\n    drawerPaperClose: {\n      overflowX: 'hidden',\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      width: theme.spacing(7),\n      [theme.breakpoints.up('sm')]: {\n        width: theme.spacing(9),\n      },\n      background: customColor || theme.palette.primary.dark,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      display: 'flex',\n      overflow: 'auto',\n      flexDirection: 'column',\n    },\n    listItem: {\n      width: '94%',\n      background: theme.palette.primary.main,\n      color: '#FFF',\n      marginTop: '2px',\n      marginLeft: '8px',\n      marginRight: '2px',\n      borderRadius: '3px',\n      '&:hover': {\n        background: theme.palette.primary.light,\n      },\n    },\n    listItemIcon: {\n      color: '#FFF',\n    },\n    listItemActive: {\n      width: '94%',\n      background: theme.palette.primary.light,\n      color: '#FFF',\n      marginTop: '2px',\n      marginLeft: '8px',\n      marginRight: '2px',\n      borderRadius: '3px',\n      '&:hover': {\n        background: theme.palette.primary.light,\n      },\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n      color: '#FFF',\n    },\n    navlogo: {\n      width: '40%',\n      margin: '0 auto',\n      padding: 3,\n      backgroundColor: '#FFF',\n      borderRadius: 5,\n    },\n    listParent: {\n      color: theme.palette.common.white,\n      '&.MuiListItem-root': {\n        color: theme.palette.common.white,\n        '&.Mui-selected': { color: theme.palette.common.white, backgroundColor: theme.palette.primary.main },\n        '&:hover': {\n          color: theme.palette.common.white,\n          backgroundColor: customColor || theme.palette.primary.dark,\n        },\n      },\n    },\n    drawerClose: {\n      overflowX: 'hidden',\n      transition: theme.transitions.create('width', {\n        duration: theme.transitions.duration.leavingScreen,\n        easing: theme.transitions.easing.sharp,\n      }),\n      width: theme.spacing(7) + 1,\n      [theme.breakpoints.up('sm')]: {\n        width: theme.spacing(7) + 1,\n      },\n      background: customColor || theme.palette.primary.dark,\n    },\n    drawerOpen: {\n      '&:hover': {\n        overflowY: 'auto',\n      },\n      overflowY: 'hidden',\n      transition: theme.transitions.create('width', {\n        duration: theme.transitions.duration.enteringScreen,\n        easing: theme.transitions.easing.sharp,\n      }),\n    },\n  });\n\n}\n\nexport default GroupStyle;\n","import { Accordion, AccordionDetails, AccordionSummary } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/styles';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport GroupTypeEvaluator from '../../../../components/typeEvalutors/Group';\nimport {\n  emptyGroupFields,\n  getEvaluatedExpression,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  removeGroupFieldsFromErrors,\n  getThemeColor,\n} from '../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../utils/helpers';\nimport GroupStyle from './styles';\n\nexport interface GroupProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n  themeColor?: string;\n}\n\nfunction Group(props: GroupProps) {\n  const {\n    choices,\n    csvList,\n    fieldElement,\n    fieldParentTreeName,\n    defaultLanguage,\n    isComponentRender,\n    themeColor,\n  } = props;\n  const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n  let isAppearanceApplicable = false;\n  if (fieldElement.control && fieldElement.control.appearance) {\n    if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\n      isAppearanceApplicable = true;\n    }\n  }\n  const theme = useTheme();\n  const useStyles = makeStyles(GroupStyle(theme, themeColor));\n  const classNames = useStyles();\n  if (\n    isComponentRender\n    && (fieldElement.control && fieldElement.control.bodyless\n      ? fieldElement.control.bodyless === false\n      : true)\n  ) {\n    return (\n      <Accordion defaultExpanded style={{ marginBottom: 10 }}>\n        <AccordionSummary\n          className={classNames.root}\n          expandIcon={<ExpandMoreIcon />}\n        >\n          <Typography>{fieldLabel}</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classNames.backgroundProp}>\n          <FormGroup className={classNames.borderProp}>\n            {fieldElement.children && (\n              <GroupTypeEvaluator\n                choices={choices}\n                fieldElements={fieldElement.children}\n                fieldParentTreeName={`${fieldParentTreeName}group/${fieldElement.name}/`}\n                defaultLanguage={defaultLanguage}\n                csvList={csvList}\n                isAppearanceApplicable={isAppearanceApplicable}\n              />\n            )}\n          </FormGroup>\n        </AccordionDetails>\n      </Accordion>\n    );\n  }\n\n  if (\n    props.isErrorsIncludeGroupFieldsSelector(\n      `${fieldParentTreeName}group/${fieldElement.name}/`\n    )\n  ) {\n    props.removeGroupFieldsFromErrorsActionCreator(\n      `${fieldParentTreeName}group/${fieldElement.name}/`\n    );\n  }\n  if (\n    !props.isGroupFieldsEmptySelector(fieldParentTreeName + fieldElement.name)\n  ) {\n    props.emptyGroupFieldsActionCreator(\n      fieldParentTreeName + fieldElement.name\n    );\n  }\n  return null;\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    themeColor: getThemeColor(state),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n};\n\n/** connect Group component to the redux store */\nconst ConnectedGroup = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Group);\n\nexport default ConnectedGroup;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport GroupTypeEvaluator from '../../../../../components/typeEvalutors/Group';\n\nexport interface SingleRepeatProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  defaultLanguage: string;\n  repeatIndex: number;\n  assignmentHandler: any;\n  removeHandler: any;\n  removeOptionHandler: any;\n  unControlFlag: boolean;\n}\n\nclass SingleRepeat extends React.Component<SingleRepeatProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      defaultLanguage,\n      fieldElement,\n      fieldParentTreeName,\n      repeatIndex,\n      unControlFlag,\n    } = this.props;\n    let isAppearanceApplicable = false;\n    if (fieldElement.control && fieldElement.control.appearance) {\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\n        isAppearanceApplicable = true;\n      }\n    }\n    return (\n      <div className={'groupFormFieldBody'}>\n        {fieldElement.children && (\n          <GroupTypeEvaluator\n            choices={choices}\n            fieldElements={fieldElement.children}\n            fieldParentTreeName={\n              fieldParentTreeName +\n              'repeat/' +\n              fieldElement.name +\n              '/' +\n              repeatIndex +\n              '/'\n            }\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n            isAppearanceApplicable={isAppearanceApplicable}\n          />\n        )}\n\n        {unControlFlag === false ? (\n          <div className={'minusIconWrapper'}>\n            <span onClick={this.handleChange}>\n              <FontAwesomeIcon icon=\"minus-circle\" className={'minusIcon'} />\n            </span>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  // tslint:disable-next-line: variable-name\n  private handleChange = (_event: React.MouseEvent<HTMLDivElement>) => {\n    const {\n      repeatIndex,\n      fieldValue,\n      assignmentHandler,\n      fieldElement,\n      fieldParentTreeName,\n      removeHandler,\n      removeOptionHandler,\n    } = this.props;\n    let newFieldValue: any[] = [...fieldValue];\n    newFieldValue = newFieldValue.filter(\n      // tslint:disable-next-line: variable-name\n      (_elem, index) => index !== repeatIndex\n    );\n    assignmentHandler(fieldParentTreeName + fieldElement.name, newFieldValue);\n    removeHandler(fieldParentTreeName + 'repeat/' + fieldElement.name + '/');\n    removeOptionHandler(fieldParentTreeName + fieldElement.name, repeatIndex);\n  };\n}\n\nexport default SingleRepeat;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport {\n  assignFieldValueAction,\n  emptyGroupFields,\n  getEvaluatedExpression,\n  getFieldValue,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  RemoveFromOptionList,\n  removeGroupFieldsFromErrors,\n} from '../../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../../utils/helpers';\nimport SingleRepeat from '.././Single Repeat';\n\nexport interface ControlledRepeatProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldValue: any;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\n}\n\nclass ControlledRepeat extends React.Component<ControlledRepeatProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldValue,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n      assignFieldValueActionCreator,\n      removeGroupFieldsFromErrorsActionCreator,\n      removeOptionListFromActionCreator,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (!fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          [{}]\n        );\n      }\n\n      return (\n        <FormGroup className={'groupBody'}>\n          <Label>{fieldLabel}</Label>\n          {fieldValue &&\n            // tslint:disable-next-line: variable-name\n            fieldValue.map((_elm: any, index: any) => (\n              <div className=\"repeat-fields-body\" key={'repeat' + index}>\n                <SingleRepeat\n                  choices={choices}\n                  defaultLanguage={defaultLanguage}\n                  fieldElement={fieldElement}\n                  fieldParentTreeName={fieldParentTreeName}\n                  fieldValue={fieldValue}\n                  repeatIndex={index}\n                  assignmentHandler={assignFieldValueActionCreator}\n                  removeHandler={removeGroupFieldsFromErrorsActionCreator}\n                  removeOptionHandler={removeOptionListFromActionCreator}\n                  csvList={csvList}\n                  unControlFlag={false}\n                />\n              </div>\n            ))}\n          <div>\n            <span onClick={this.addAnotherRepeat}>\n              <FontAwesomeIcon icon=\"plus-circle\" className={'plusIcon'} />\n            </span>\n          </div>\n        </FormGroup>\n      );\n    } else {\n      if (\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        );\n      }\n      if (fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  // tslint:disable-next-line: variable-name\n  private addAnotherRepeat = (_event: React.MouseEvent<HTMLDivElement>) => {\n    const { fieldValue, fieldParentTreeName, fieldElement } = this.props;\n    const newFieldValue = [...fieldValue];\n    newFieldValue.push({});\n    this.props.assignFieldValueActionCreator(\n      fieldParentTreeName + fieldElement.name,\n      newFieldValue\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n  removeOptionListFromActionCreator: RemoveFromOptionList,\n};\n\n/** connect Group component to the redux store */\nconst ConnectedControlledRepeat = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ControlledRepeat);\n\nexport default ConnectedControlledRepeat;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport {\n  assignFieldValueAction,\n  assignOptionListAction,\n  emptyGroupFields,\n  getEvaluatedExpression,\n  getFieldValue,\n  getOptionList,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  RemoveFromOptionList,\n  removeGroupFieldsFromErrors,\n} from '../../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../../utils/helpers';\nimport SingleRepeat from '.././Single Repeat';\n\nexport interface UncontrolledRepeatProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldValue: any;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  optionList: object;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\n}\n\nclass UncontrolledRepeat extends React.Component<UncontrolledRepeatProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldValue,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n      optionList,\n      assignFieldValueActionCreator,\n      removeGroupFieldsFromErrorsActionCreator,\n      removeOptionListFromActionCreator,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (!fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          []\n        );\n      }\n\n      let noOfJrCount: number = 0;\n\n      if (fieldElement.control) {\n        const jrCount: string = 'jr:count';\n        const res: any = fieldElement.control[jrCount];\n\n        if (/^[0-9]*$/i.test(res)) {\n          noOfJrCount = parseInt(res, 10);\n        } else {\n          const value: any = this.props.getEvaluatedExpressionSelector(\n            res,\n            fieldParentTreeName + fieldElement.name\n          );\n          if (value) {\n            noOfJrCount = parseInt(value, 10);\n          }\n        }\n      }\n\n      if (\n        fieldValue &&\n        fieldValue.length === 0 &&\n        noOfJrCount === 0 &&\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        );\n      }\n\n      if (fieldValue && fieldValue.length > 0 && noOfJrCount === 0) {\n        this.removeFromError();\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          []\n        );\n      }\n\n      if (optionList && _.size(optionList) > noOfJrCount && noOfJrCount === 0) {\n        this.props.assignOptionListActionCreator(\n          this.props.fieldParentTreeName + this.props.fieldElement.name,\n          []\n        );\n      }\n\n      if (noOfJrCount > 0) {\n        const newFieldValue = [...fieldValue];\n\n        if (fieldValue && fieldValue.length < noOfJrCount) {\n          const iterate = noOfJrCount - fieldValue.length;\n          for (let j = 0; j < iterate; j++) {\n            newFieldValue.push({});\n          }\n        }\n\n        if (fieldValue && fieldValue.length > noOfJrCount) {\n          const iterate = fieldValue.length - noOfJrCount;\n          for (let i = 0; i < iterate; i++) {\n            newFieldValue.pop();\n          }\n          this.props.assignFieldValueActionCreator(\n            fieldParentTreeName + fieldElement.name,\n            newFieldValue\n          );\n          this.removeFromError();\n        }\n\n        if (optionList && _.size(optionList) > noOfJrCount) {\n          const iterate = _.size(optionList) - noOfJrCount;\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            Array.prototype.slice.call(optionList, iterate)\n          );\n          this.removeFromError();\n        }\n\n        return (\n          <FormGroup className={'groupBodyUnControlled'}>\n            <Label>{fieldLabel}</Label>\n            {newFieldValue &&\n              // tslint:disable-next-line: variable-name\n              newFieldValue.map((_elm: any, index: any) => (\n                <div className=\"repeat-fields-body\" key={'repeat' + index}>\n                  <SingleRepeat\n                    choices={choices}\n                    defaultLanguage={defaultLanguage}\n                    fieldElement={fieldElement}\n                    fieldParentTreeName={fieldParentTreeName}\n                    fieldValue={fieldValue}\n                    repeatIndex={index}\n                    assignmentHandler={assignFieldValueActionCreator}\n                    removeHandler={removeGroupFieldsFromErrorsActionCreator}\n                    removeOptionHandler={removeOptionListFromActionCreator}\n                    csvList={csvList}\n                    unControlFlag={true}\n                  />\n                </div>\n              ))}\n          </FormGroup>\n        );\n      } else {\n        return null;\n      }\n    } else {\n      this.removeFromError();\n      if (fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  private removeFromError() {\n    if (\n      this.props.isErrorsIncludeGroupFieldsSelector(\n        this.props.fieldParentTreeName +\n          'repeat/' +\n          this.props.fieldElement.name +\n          '/'\n      )\n    ) {\n      this.props.removeGroupFieldsFromErrorsActionCreator(\n        this.props.fieldParentTreeName +\n          'repeat/' +\n          this.props.fieldElement.name +\n          '/'\n      );\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n  removeOptionListFromActionCreator: RemoveFromOptionList,\n};\n\n/** connect Repeat component to the redux store */\nconst ConnectedUncontrolledRepeat = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UncontrolledRepeat);\n\nexport default ConnectedUncontrolledRepeat;\n","import * as React from 'react';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport ControlledRepeat from './Controlled Repeat';\nimport UncontrolledRepeat from './Uncontrolled Repeat';\n\n/** props interface for the Repeat component */\nexport interface RepeatProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass Repeat extends React.Component<RepeatProps> {\n  public render() {\n    const { fieldElement } = this.props;\n    if (fieldElement.control && fieldElement.control['jr:count']) {\n      return <UncontrolledRepeat {...this.props} />;\n    }\n    return <ControlledRepeat {...this.props} />;\n  }\n}\n\nexport default Repeat;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Input } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\n\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the calculate component */\nexport interface CalculateProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Calculate extends React.Component<CalculateProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      \n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      let calculatedValue: any = '';\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (calculatedValue && fieldValue !== calculatedValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          calculatedValue\n        );\n      }\n\n      return (\n        <div>\n          <Input\n            type=\"hidden\"\n            name={fieldElement.name}\n            value={calculatedValue || ''}\n            readOnly={isReadonly}\n          />\n        </div>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Calculate component to the redux store */\nconst ConnectedCalculate = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Calculate);\n\nexport default ConnectedCalculate;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport {FormGroup, Label} from 'reactstrap';\nimport DatePicker from 'react-datepicker';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the KbDate component */\nexport interface DateProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass KbDate extends React.Component<DateProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let defaultValue: any = null;\n      if (fieldValue && fieldValue !== '') {\n        defaultValue = new Date(fieldValue);\n      }\n\n\n      let calculatedValue: any = null;\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if ((fieldValue === undefined || fieldValue == '') && calculatedValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          calculatedValue\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <DatePicker\n            className=\"react-custom-datepicker\"\n            dateFormat=\"dd/MM/yyyy\"\n            name={fieldElement.name}\n            selected={defaultValue}\n            onChange={(e: any) => this.onChangeHandler(e)}\n            readOnly={isReadonly}\n            placeholderText=\"dd/mm/yyyy\"\n            popperPlacement=\"top\"\n            popperModifiers={[\n              {\n                name: \"offset\",\n                options: {\n                  offset: [5, 10],\n                },\n              },\n              {\n                name: \"preventOverflow\",\n                options: {\n                  rootBoundary: \"viewport\",\n                  tether: false,\n                  altAxis: true,\n                },\n              },\n            ] as any}\n          />\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + this.props.fieldElement.name,\n      event !== ''\n        ? new Date(event)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect KbDate component to the redux store */\nconst ConnectedDate = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(KbDate);\n\nexport default ConnectedDate;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport DatePicker from 'react-datepicker';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\n/** props interface for the date Time component */\nexport interface DateTimeProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass DateTime extends React.Component<DateTimeProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      let modifiedDate: any = null;\n      if (fieldValue) {\n        modifiedDate = new Date(fieldValue);\n        const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\n        modifiedDate.setHours(modifiedDate.getHours() - timeZoneOffset);\n      }\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <br />\n          <DatePicker\n            name={fieldElement.name}\n            selected={fieldValue ? modifiedDate : null}\n            onChange={this.handleChange(fieldElement.name)}\n            showTimeSelect={true}\n            timeFormat=\"h:m aa\"\n            timeIntervals={15}\n            timeCaption=\"time\"\n            dateFormat=\"MM/dd/yyyy h:mm aa\"\n            placeholderText=\"mm/dd/yyyy h:m aa\"\n            className=\"form-control\"\n            readOnly={isReadonly}\n          />\n          <br />\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  private handleChange = (name: any) => (value: any) => {\n    const modifiedDate: any = new Date(value);\n    const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\n    modifiedDate.setHours(modifiedDate.getHours() + timeZoneOffset);\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + name,\n      value !== '' ? modifiedDate : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Date Time component to the redux store */\nconst ConnectedDateTime = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DateTime);\n\nexport default ConnectedDateTime;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the decimal component */\nexport interface DecimalProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface DecimalState {\n  fieldValue: string;\n  isFocused: boolean;\n}\n\nclass Decimal extends React.Component<DecimalProps, DecimalState> {\n  constructor(props: DecimalProps) {\n    super(props);\n    this.state = { fieldValue: '', isFocused: false };\n  }\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated =\n      isRequired &&\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\n    let  isConstraintViolated = false;\n    try {\n       isConstraintViolated =\n        fieldValue !== '' &&\n        fieldValue !== null &&\n        fieldValue !== undefined &&\n        shouldInputViolatesConstraint(\n          fieldElement,\n          fieldParentTreeName,\n          getEvaluatedExpressionSelector\n        );\n    } catch(ex) {\n      console.log('got the constraint violation error');\n      isConstraintViolated = true;\n    }\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (typeof this.props.fieldValue === 'string') {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          parseFloat(this.props.fieldValue)\n        );\n      }\n\n      let modifiedValue: any;\n      {\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        let calculatedValue: any = '';\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n\n        if (fieldValue && calculatedValue !== fieldValue) {\n          this.props.assignFieldValueActionCreator(\n            fieldParentTreeName + fieldElement.name,\n            calculatedValue\n          );\n        }\n        modifiedValue = calculatedValue;\n      }\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <Input\n            type=\"number\"\n            step=\"any\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            onBlur={this.onBlurHandler}\n            value={\n              this.state.isFocused\n                ? this.state.fieldValue || ''\n                : modifiedValue || ''\n            }\n            readOnly={isReadonly}\n          />\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (this.state.isFocused) {\n        this.setState({ ...this.state, isFocused: false });\n      }\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: true,\n    });\n  };\n\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: false,\n    });\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? parseFloat(event.currentTarget.value)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedDecimal = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Decimal);\n\nexport default ConnectedDecimal;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  assignFieldValueAction,\n  getFileObject,\n} from '../../../../../store/ducks/formState';\n\ninterface FilePreviewProps {\n  fieldName: string;\n  fieldValue: any;\n  fileObject: any;\n  assignFieldValueActionCreator: any;\n}\n\nclass FilePreview extends React.Component<FilePreviewProps> {\n  public render() {\n    const { fieldName, fieldValue, assignFieldValueActionCreator } = this.props;\n    const removeHandler = () => {\n      assignFieldValueActionCreator(fieldName, null);\n    };\n    return (\n      <>\n        <p className=\"text-muted\">\n          Uploaded File Name: <strong className=\"text-primary\"> {fieldValue} </strong>\n        </p>\n        <Button size=\"sm\" color=\"danger\" onClick={removeHandler}>\n          Remove File\n        </Button>\n      </>\n    );\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fileObject: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldName: string;\n  fieldValue: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldValue } = parentProps;\n  const result = {\n    fileObject: getFileObject(state, fieldValue),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n};\n\n/** connect FilePreview component to the redux store */\nconst ConnectedFilePreview = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FilePreview);\n\nexport default ConnectedFilePreview;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport { PHOTO_FIELD_TYPE } from '../../../../constants';\nimport {\n  addErrorInputId,\n  addMediaListAction,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\nimport FilePreview from './FilePreview/FilePreview';\n\n/** props interface for the file component */\nexport interface FileProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  addMediaListActionCreator: typeof addMediaListAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass File extends React.Component<FileProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          {fieldValue ? (\n            <FilePreview\n              fieldName={fieldParentTreeName + fieldElement.name}\n              fieldValue={fieldValue}\n            />\n          ) : fieldElement.type === PHOTO_FIELD_TYPE ? (\n            <Input\n              type=\"file\"\n              accept=\"image/*\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              readOnly={isReadonly}\n            />\n          ) : (\n            <Input\n              type=\"file\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              readOnly={isReadonly}\n            />\n          )}\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param event - the onchange input event\n   */\n  private onChangeHandler = (event: any) => {\n    if (event.target.files[0]) {\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + event.target.name,\n        event.target.files[0].name\n      );\n      this.props.addMediaListActionCreator(event.target.files[0]);\n    } else {\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + event.target.name,\n        null\n      );\n    }\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  addMediaListActionCreator: addMediaListAction,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect File component to the redux store */\nconst ConnectedFile = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(File);\n\nexport default ConnectedFile;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n    FieldElement,\n    FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n    addErrorInputId,\n    assignFieldValueAction,\n    getEvaluatedExpression,\n    getFieldValue,\n    getFormSubmitStatus,\n    isPresentInError,\n    removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n    customizeLabelsWithPreviousInputs,\n    getConstraintLabelText,\n    getFieldLabelText,\n    getHintLabelText,\n    isInputRequired,\n    shouldComponentBeRelevant,\n    shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the text component */\nexport interface GPSProps {\n    fieldElement: FieldElement;\n    fieldParentTreeName: FieldParentTreeName;\n    fieldValue: string;\n    assignFieldValueActionCreator: typeof assignFieldValueAction;\n    getEvaluatedExpressionSelector: any;\n    getFormSubmitStatusSelector: boolean;\n    isPresentInErrorSelector: any;\n    isComponentRender: boolean;\n    addErrorInputIdActionCreator: typeof addErrorInputId;\n    removeErrorInputIdActionCreator: typeof removeErrorInputId;\n    defaultLanguage: string;\n}\n\nexport interface GPSState {\n    fieldValue: string;\n    isFocused: boolean;\n}\n\nclass Text extends React.Component<GPSProps, GPSState> {\n    constructor(props: GPSProps) {\n        super(props);\n        this.state = { fieldValue: '', isFocused: false };\n    }\n\n    componentDidMount() {\n        this.geoLocation();\n    }\n\n    geoLocation = () => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.showPosition, this.showError);\n            console.log(\"geolocation ache: \", navigator.geolocation);\n        } else {\n            console.log(\"Geolocation is not supported by this browser.\");\n        }\n    }\n\n    showPosition = (position: any) => {\n        console.log('----- lat lan ---------');\n        this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            `${position.coords.latitude}, ${position.coords.longitude}`\n        );\n        console.log(position.coords);\n    }\n\n    showError = (error: any) => {\n        switch (error.code) {\n            case error.PERMISSION_DENIED:\n                console.log(\"User denied the request for Geolocation.\");\n                break;\n            case error.POSITION_UNAVAILABLE:\n                console.log(\"Location information is unavailable.\");\n                break;\n            case error.TIMEOUT:\n                console.log(\"The request to get user location timed out.\");\n                break;\n            case error.UNKNOWN_ERROR:\n                console.log(\"An unknown error occurred.\");\n                break;\n        }\n    }\n\n    public render() {\n        const {\n            fieldElement,\n            fieldParentTreeName,\n            fieldValue,\n            isComponentRender,\n            getEvaluatedExpressionSelector,\n            getFormSubmitStatusSelector,\n            isPresentInErrorSelector,\n            defaultLanguage,\n        } = this.props;\n        const isRequired = isInputRequired(fieldElement);\n        const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n        const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n        const isConstraintViolated =\n            fieldValue &&\n            fieldValue !== '' &&\n            shouldInputViolatesConstraint(\n                fieldElement,\n                fieldParentTreeName,\n                getEvaluatedExpressionSelector\n            );\n        const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n        const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n            getEvaluatedExpressionSelector,\n            fieldLabel,\n            fieldParentTreeName + fieldElement.name\n        );\n\n        const constraintLabel = getConstraintLabelText(\n            fieldElement,\n            defaultLanguage\n        );\n        const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n            getEvaluatedExpressionSelector,\n            constraintLabel,\n            fieldParentTreeName + fieldElement.name\n        );\n\n        const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n        if (isComponentRender) {\n            if (fieldValue == null && 'default' in fieldElement) {\n                this.props.assignFieldValueActionCreator(\n                    fieldParentTreeName + fieldElement.name,\n                    fieldElement.default\n                );\n            }\n\n            if (\n                (isRequiredViolated || isConstraintViolated) &&\n                !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n            ) {\n                this.props.addErrorInputIdActionCreator(\n                    fieldParentTreeName + fieldElement.name\n                );\n            } else if (\n                !isRequiredViolated &&\n                !isConstraintViolated &&\n                isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n            ) {\n                this.props.removeErrorInputIdActionCreator(\n                    fieldParentTreeName + fieldElement.name\n                );\n            }\n\n            const isError = isPresentInErrorSelector(\n                fieldParentTreeName + fieldElement.name\n            );\n\n            return (\n                <FormGroup>\n                    <Label>\n                        {modifiedFieldLabel}{' '}\n                        {isRequired && (\n                            <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n                        )}\n                    </Label>\n                    <Input\n                        type=\"text\"\n                        name={fieldElement.name}\n                        onBlur={this.onBlurHandler}\n                        value={\n                            this.state.isFocused\n                                ? this.state.fieldValue || ''\n                                : fieldValue || ''\n                        }\n                        readOnly={true}\n                    />\n                    {isFormSubmitted && isError && (\n                        <FontAwesomeIcon\n                            icon=\"exclamation-circle\"\n                            className=\"errorSign\"\n                        />\n                    )}\n                    {fieldElement.hint && (\n                        <Label className=\"hintText\">{hintLabel}</Label>\n                    )}\n                    {isFormSubmitted && isRequiredViolated && (\n                        <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n                    )}\n                    {isConstraintViolated && (\n                        <Label className=\"constraintText\">\n                            {modifiedConstraintLabel}\n                        </Label>\n                    )}\n                </FormGroup>\n            );\n\n        } else {\n            if (this.state.isFocused) {\n                this.setState({ ...this.state, isFocused: false });\n            }\n            if (fieldValue != null) {\n                this.props.assignFieldValueActionCreator(\n                    fieldParentTreeName + fieldElement.name,\n                    null\n                );\n                if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n                    this.props.removeErrorInputIdActionCreator(\n                        fieldParentTreeName + fieldElement.name\n                    );\n                }\n            }\n            return null;\n        }\n    }\n\n    /** sets the value of field element in store\n     * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n     */\n    // private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    //     this.geoLocation();\n    //     this.setState({\n    //         ...this.state,\n    //         fieldValue: event.currentTarget.value || '',\n    //         isFocused: true,\n    //     });\n    // };\n\n    private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\n        this.setState({\n            ...this.state,\n            fieldValue: event.currentTarget.value || '',\n            isFocused: false,\n        });\n        this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + event.currentTarget.name,\n            event.currentTarget.value || ''\n        );\n    };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n    fieldValue: string;\n    getEvaluatedExpressionSelector: any;\n    getFormSubmitStatusSelector: any;\n    isComponentRender: boolean;\n    isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n    fieldElement: FieldElement;\n    fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n    state: Partial<Store>,\n    parentProps: ParentProps\n): DispatchedStateProps => {\n    const { fieldElement, fieldParentTreeName } = parentProps;\n    const getEvaluatedExpressionSelector = (\n        expression: string,\n        fieldTreeName: string\n    ) => getEvaluatedExpression(state, expression, fieldTreeName);\n    const isPresentInErrorSelector = (fieldTreeName: string) =>\n        isPresentInError(state, fieldTreeName);\n    const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n    const result = {\n        fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n        getEvaluatedExpressionSelector,\n        getFormSubmitStatusSelector,\n        isComponentRender: shouldComponentBeRelevant(\n            fieldElement,\n            fieldParentTreeName,\n            getEvaluatedExpressionSelector\n        ),\n        isPresentInErrorSelector,\n    };\n    return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n    addErrorInputIdActionCreator: addErrorInputId,\n    assignFieldValueActionCreator: assignFieldValueAction,\n    removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Text component to the redux store */\nconst ConnectedText = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Text);\n\nexport default ConnectedText;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n    assignFieldValueAction,\n    getFileObject,\n} from '../../../../../store/ducks/formState';\n\ninterface AudioPreviewProps {\n    fieldName: string;\n    fieldValue: any;\n    fileObject: any;\n    assignFieldValueActionCreator: any;\n}\n\nclass AudioPreview extends React.Component<AudioPreviewProps> {\n    public render() {\n        const { fieldName, fieldValue, assignFieldValueActionCreator } = this.props;\n        console.log('value of audio file: ', fieldValue);\n        const removeHandler = () => {\n            assignFieldValueActionCreator(fieldName, null);\n        };\n        return (\n            <>\n                <p className=\"text-muted\">\n                    Uploaded Audio File Name: <strong className=\"text-primary\"> {fieldValue} </strong>\n                </p>\n                {/* <audio id=\"sound\" controls src={URL.createObjectURL(fieldValue)}></audio> */}\n                <br></br>\n                <Button size=\"sm\" color=\"danger\" onClick={removeHandler}>\n                    Remove Audio File\n                </Button>\n            </>\n        );\n    }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n    fileObject: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n    fieldName: string;\n    fieldValue: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n    state: Partial<Store>,\n    parentProps: ParentProps\n): DispatchedStateProps => {\n    const { fieldValue } = parentProps;\n    const result = {\n        fileObject: getFileObject(state, fieldValue),\n    };\n    return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n    assignFieldValueActionCreator: assignFieldValueAction,\n};\n\n/** connect AudioPreview component to the redux store */\nconst ConnectedAudioPreview = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AudioPreview);\n\nexport default ConnectedAudioPreview;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n    FieldElement,\n    FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n    addErrorInputId,\n    addMediaListAction,\n    assignFieldValueAction,\n    getEvaluatedExpression,\n    getFieldValue,\n    getFormSubmitStatus,\n    isPresentInError,\n    removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n    customizeLabelsWithPreviousInputs,\n    getConstraintLabelText,\n    getFieldLabelText,\n    getHintLabelText,\n    isInputRequired,\n    shouldComponentBeReadOnly,\n    shouldComponentBeRelevant,\n    shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\nimport AudioPreview from './AudioPreview';\n\n/** props interface for the file component */\nexport interface FileProps {\n    fieldElement: FieldElement;\n    fieldParentTreeName: FieldParentTreeName;\n    fieldValue: any;\n    assignFieldValueActionCreator: typeof assignFieldValueAction;\n    addMediaListActionCreator: typeof addMediaListAction;\n    getEvaluatedExpressionSelector: any;\n    getFormSubmitStatusSelector: boolean;\n    isComponentRender: boolean;\n    isPresentInErrorSelector: any;\n    addErrorInputIdActionCreator: typeof addErrorInputId;\n    removeErrorInputIdActionCreator: typeof removeErrorInputId;\n    defaultLanguage: string;\n}\n\nclass Audio extends React.Component<FileProps> {\n    public render() {\n        const {\n            fieldElement,\n            fieldParentTreeName,\n            fieldValue,\n            isComponentRender,\n            getEvaluatedExpressionSelector,\n            getFormSubmitStatusSelector,\n            isPresentInErrorSelector,\n            defaultLanguage,\n        } = this.props;\n        const isRequired = isInputRequired(fieldElement);\n        const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n        const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n        const isConstraintViolated =\n            fieldValue &&\n            fieldValue !== '' &&\n            shouldInputViolatesConstraint(\n                fieldElement,\n                fieldParentTreeName,\n                getEvaluatedExpressionSelector\n            );\n        const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n        const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n            getEvaluatedExpressionSelector,\n            fieldLabel,\n            fieldParentTreeName + fieldElement.name\n        );\n        const constraintLabel = getConstraintLabelText(\n            fieldElement,\n            defaultLanguage\n        );\n        const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n            getEvaluatedExpressionSelector,\n            constraintLabel,\n            fieldParentTreeName + fieldElement.name\n        );\n\n        const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n        if (isComponentRender) {\n            if (fieldValue == null && 'default' in fieldElement) {\n                this.props.assignFieldValueActionCreator(\n                    fieldParentTreeName + fieldElement.name,\n                    fieldElement.default\n                );\n            }\n            const isReadonly = shouldComponentBeReadOnly(\n                fieldElement,\n                fieldParentTreeName,\n                getEvaluatedExpressionSelector\n            );\n            if (\n                (isRequiredViolated || isConstraintViolated) &&\n                !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n            ) {\n                this.props.addErrorInputIdActionCreator(\n                    fieldParentTreeName + fieldElement.name\n                );\n            } else if (\n                !isRequiredViolated &&\n                !isConstraintViolated &&\n                isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n            ) {\n                this.props.removeErrorInputIdActionCreator(\n                    fieldParentTreeName + fieldElement.name\n                );\n            }\n\n            const isError = isPresentInErrorSelector(\n                fieldParentTreeName + fieldElement.name\n            );\n\n            return (\n                <FormGroup>\n                    <Label>\n                        {modifiedFieldLabel}{' '}\n                        {isRequired && (\n                            <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n                        )}\n                    </Label>\n                    {fieldValue ? (\n                        <AudioPreview\n                            fieldName={fieldParentTreeName + fieldElement.name}\n                            fieldValue={fieldValue}\n                        />\n                    ) : (\n                        <Input\n                            type=\"file\"\n                            name={fieldElement.name}\n                            onChange={this.onChangeHandler}\n                            readOnly={isReadonly}\n                        />\n                    )}\n                    {isFormSubmitted && isError && (\n                        <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n                    )}\n                    {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n                    {isFormSubmitted && isRequiredViolated && (\n                        <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n                    )}\n                    {isConstraintViolated && (\n                        <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n                    )}\n                </FormGroup>\n            );\n        } else {\n            if (fieldValue != null) {\n                this.props.assignFieldValueActionCreator(\n                    fieldParentTreeName + fieldElement.name,\n                    null\n                );\n                if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n                    this.props.removeErrorInputIdActionCreator(\n                        fieldParentTreeName + fieldElement.name\n                    );\n                }\n            }\n            return null;\n        }\n    }\n\n    /** sets the value of field element in store\n     * @param event - the onchange input event\n     */\n    private onChangeHandler = (event: any) => {\n        if (event.target.files[0]) {\n            this.props.assignFieldValueActionCreator(\n                this.props.fieldParentTreeName + event.target.name,\n                event.target.files[0].name\n            );\n            this.props.addMediaListActionCreator(event.target.files[0]);\n        } else {\n            this.props.assignFieldValueActionCreator(\n                this.props.fieldParentTreeName + event.target.name,\n                null\n            );\n        }\n    };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n    fieldValue: any;\n    getEvaluatedExpressionSelector: any;\n    getFormSubmitStatusSelector: any;\n    isComponentRender: boolean;\n    isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n    fieldElement: FieldElement;\n    fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n    state: Partial<Store>,\n    parentProps: ParentProps\n): DispatchedStateProps => {\n    const { fieldElement, fieldParentTreeName } = parentProps;\n    const getEvaluatedExpressionSelector = (\n        expression: string,\n        fieldTreeName: string\n    ) => getEvaluatedExpression(state, expression, fieldTreeName);\n    const isPresentInErrorSelector = (fieldTreeName: string) =>\n        isPresentInError(state, fieldTreeName);\n    const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n    const result = {\n        fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n        getEvaluatedExpressionSelector,\n        getFormSubmitStatusSelector,\n        isComponentRender: shouldComponentBeRelevant(\n            fieldElement,\n            fieldParentTreeName,\n            getEvaluatedExpressionSelector\n        ),\n        isPresentInErrorSelector,\n    };\n    return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n    addErrorInputIdActionCreator: addErrorInputId,\n    addMediaListActionCreator: addMediaListAction,\n    assignFieldValueActionCreator: assignFieldValueAction,\n    removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect File component to the redux store */\nconst ConnectedAudio = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Audio);\n\nexport default ConnectedAudio;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the integer component */\nexport interface IntegerProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\nexport interface IntegerState {\n  fieldValue: string;\n  isFocused: boolean;\n}\nclass Integer extends React.Component<IntegerProps, IntegerState> {\n  constructor(props: IntegerProps) {\n    super(props);\n    this.state = { fieldValue: '', isFocused: false };\n  }\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated =\n      isRequired &&\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\n\n    let isConstraintViolated = false\n    try {\n      isConstraintViolated =\n      fieldValue !== '' &&\n      fieldValue !== null &&\n      fieldValue !== undefined &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    } catch (err) {\n      console.log('constraint violation in integer component');\n      isConstraintViolated = true;\n    }\n\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel =\n      customizeLabelsWithPreviousInputs(\n        getEvaluatedExpressionSelector,\n        constraintLabel,\n        fieldParentTreeName + fieldElement.name\n      ) || '';\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      if (typeof this.props.fieldValue === 'string') {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          parseInt(this.props.fieldValue, 10)\n        );\n      }\n\n      let modifiedValue: any;\n      {\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        let calculatedValue: any = '';\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n\n        if (fieldValue && calculatedValue !== fieldValue) {\n          this.props.assignFieldValueActionCreator(\n            fieldParentTreeName + fieldElement.name,\n            calculatedValue\n          );\n        }\n        modifiedValue = calculatedValue;\n      }\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <Input\n            type=\"number\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            onBlur={this.onBlurHandler}\n            value={\n              this.state.isFocused\n                ? this.state.fieldValue || ''\n                : modifiedValue || ''\n            }\n            readOnly={isReadonly}\n          />\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (this.state.isFocused) {\n        this.setState({ ...this.state, isFocused: false });\n      }\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: true,\n    });\n  };\n\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: false,\n    });\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? parseInt(event.currentTarget.value, 10)\n        : null\n    );\n  };\n}\n/** connect the component to the store */\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n/** connect Integer component to the redux store */\nconst ConnectedInteger = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Integer);\nexport default ConnectedInteger;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, FormText, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the text component */\nexport interface NoteProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isPresentInErrorSelector: any;\n  isComponentRender: boolean;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Note extends React.Component<NoteProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const fieldHint = getHintLabelText(fieldElement, defaultLanguage);\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          {fieldElement.hint && (\n            <FormText className=\"hintText\">{fieldHint}</FormText>\n          )}\n\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Note component to the redux store */\nconst ConnectedNote = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Note);\n\nexport default ConnectedNote;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getFormSubmitStatus,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectAll Dropdown component */\nexport interface SelectAllDropDownProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\n\nconst customStyles = {\n  // For the select itself (not the options)\n  control: (styles: any, { isDisabled }: any) => {\n    return {\n      ...styles,\n      backgroundColor: isDisabled ? 'white' : 'white',\n    }\n  },\n\n    // For the select itself (not the options)\n    container: (styles: any, { isDisabled }: any) => {\n      return {\n        ...styles,\n        backgroundColor: isDisabled ? 'white' : 'white',\n      }\n    },\n};\n\nclass SelectAllDropDown extends React.Component<SelectAllDropDownProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== [] &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n        this.setOptionList(resultOptions);\n      } else if (fieldElement.itemset) {\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              options.push({ label: childrenLabel, value: elem.name });\n            }\n          });\n\n          const optionsArray: any = [];\n          if (options) {\n            options.map(elem => {\n              const elemObj: any = {};\n              const name: string = 'name';\n              const label: string = 'label';\n              elemObj[name] = elem.value;\n              elemObj[label] = elem.label;\n              optionsArray.push(elemObj);\n            });\n          }\n          this.setOptionList(optionsArray);\n        }\n      } else {\n        if (fieldElement.children) {\n          fieldElement.children.map(elem => {\n            const childrenLabel: string = getFieldLabelText(\n              elem,\n              defaultLanguage\n            );\n\n            options.push({ label: childrenLabel, value: elem.name });\n          });\n          this.setOptionList(fieldElement.children);\n        }\n      }\n\n      const tmpValueArray: any = [];\n      let isNotIncluded: boolean = false;\n      if (fieldValue && fieldValue.length > 0) {\n        const optionsValueArray: any = [];\n        options.map(elem => {\n          if (elem.value) {\n            optionsValueArray.push(elem.value);\n          }\n        });\n\n        for (const row of fieldValue) {\n          if (!optionsValueArray.includes(row)) {\n            isNotIncluded = true;\n          } else {\n            tmpValueArray.push(row);\n          }\n        }\n      }\n\n      if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n        this.props.assignFieldValueActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          tmpValueArray || []\n        );\n      }\n\n      const selectedValues: any[] = [];\n      if (fieldValue && fieldValue.length > 0) {\n        options.map(elem => {\n          for (const row of fieldValue) {\n            if (elem.value === row) {\n              selectedValues.push(elem);\n            }\n          }\n        });\n      }\n\n      if (typeof this.props.fieldValue === 'string') {\n        const seperatedValues: string[] = fieldValue.split(' ');\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          seperatedValues\n        );\n      }\n\n      let calculatedValue: any = '';\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (calculatedValue && fieldValue !== calculatedValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          calculatedValue\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <div key={fieldElement.name} className=\"selectAllDropDown\">\n            <Select\n              styles={customStyles}\n              isDisabled={isReadonly}\n              isMulti={true}\n              name={fieldElement.name}\n              options={options}\n              onChange={this.onChangeHandler(fieldElement.name)}\n              value={selectedValues || calculatedValue || []}\n            />\n          </div>\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      if (this.props.optionList != null) {\n        this.props.assignOptionListActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  /** Sets the option list to the Redux Store\n   * @param {any} optionObject - the option object to be processed\n   */\n  private setOptionList = (optionObject: any) => {\n    const tempObjArray: any = [];\n    optionObject.map((elem: { name: any; label: any }) => {\n      const elemObj: any = {};\n      const name: string = 'name';\n      const label: string = 'label';\n      elemObj[name] = elem.name;\n      elemObj[label] = elem.label;\n      tempObjArray.push(elemObj);\n    });\n\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\n      this.props.assignOptionListActionCreator(\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\n        tempObjArray\n      );\n    }\n  };\n\n  /** sets the value of field element in store\n   * @param {any} values - the onchange input values\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandler = (fieldName: any) => (values: any) => {\n    const selectedValues: any = [];\n    let i = 0;\n    if (values && values.length > 0) {\n      values.map(() => {\n        if (!selectedValues.includes(values[i].value)) {\n          selectedValues.push(values[i].value);\n        }\n        i++;\n      });\n\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + fieldName,\n        selectedValues\n      );\n    } else {\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + fieldName,\n        null\n      );\n    }\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const finalRes: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n\n        let filterResult: any = [];\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n\n        let j = 0;\n        \n        if(filterResult === null) filterResult = [];\n        if( !Array.isArray(filterResult) ) filterResult = [filterResult];\n\n        console.log(\"hello chocolate cookies\");\n        filterResult.map(() => {\n          options.map(option => {\n            if (option[nameOfKey] == filterResult[j]) {\n              finalRes.push(option);\n            }\n          });\n          j = j + 1;\n        });\n\n        i = i + 2;\n      }\n\n      options = [...Array.from(new Set(finalRes))];\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string[];\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Dropdown component to the redux store */\nconst ConnectedSelectAllDropDown = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectAllDropDown);\n\nexport default ConnectedSelectAllDropDown;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getFormSubmitStatus,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectAll Radio component */\nexport interface SelectAllRadioProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n  optionList: object;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectAllRadio extends React.Component<SelectAllRadioProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== [] &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      let options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      const childrenArray: any = [];\n      if (fieldElement.children) {\n        fieldElement.children.map(elem => {\n          const elemObj: any = {};\n          const name: string = 'name';\n          const label: string = 'label';\n          elemObj[name] = elem.name;\n          elemObj[label] = elem.label;\n          childrenArray.push(elemObj);\n        });\n      }\n\n      let values: any = [];\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        values = [];\n        options = [];\n        const tmpValueArray: any = [];\n        let isNotIncluded: boolean = false;\n\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n\n        if (fieldValue && fieldValue.length > 0) {\n          const optionsValueArray: any = [];\n          options.map(elem => {\n            if (elem.value) {\n              optionsValueArray.push(elem.value);\n            }\n          });\n\n          for (const row of fieldValue) {\n            if (!optionsValueArray.includes(row)) {\n              isNotIncluded = true;\n            } else {\n              tmpValueArray.push(row);\n            }\n          }\n        }\n\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            tmpValueArray || []\n          );\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            resultOptions\n          );\n        }\n        values = [...resultOptions];\n      } else if (fieldElement.itemset) {\n        values = [];\n        options = [];\n        const tmpValueArray: any = [];\n        const optionsArray: any = [];\n        let isNotIncluded: boolean = false;\n\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              options.push({ label: childrenLabel, value: elem.name });\n            }\n          });\n        }\n\n        if (fieldValue && fieldValue.length > 0) {\n          const optionsValueArray: any = [];\n          options.map((elem: any) => {\n            if (elem.value) {\n              optionsValueArray.push(elem.value);\n            }\n          });\n\n          for (const row of fieldValue) {\n            if (!optionsValueArray.includes(row)) {\n              isNotIncluded = true;\n            } else {\n              tmpValueArray.push(row);\n            }\n          }\n        }\n\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            tmpValueArray || []\n          );\n        }\n\n        if (options) {\n          options.map(elem => {\n            const elemObj: any = {};\n            const name: string = 'name';\n            const label: string = 'label';\n            elemObj[name] = elem.value;\n            elemObj[label] = elem.label;\n            optionsArray.push(elemObj);\n          });\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...optionsArray })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            optionsArray\n          );\n        }\n\n        values = [...optionsArray];\n      } else {\n        values = [];\n        options = [];\n        if (fieldElement.children) {\n          fieldElement.children.map(elem =>\n            options.push({ label: elem.label, value: elem.name })\n          );\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            childrenArray\n          );\n        }\n        values = [...childrenArray];\n      }\n\n      const selectedValues: any[] = [];\n      if (fieldValue && fieldValue.length > 0) {\n        options.map(elem => {\n          for (const row of fieldValue) {\n            if (elem.value === row) {\n              selectedValues.push(elem.value);\n            }\n          }\n        });\n      }\n\n      let flagInline = false;\n      if (fieldElement.control && fieldElement.control.appearance) {\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\n            flagInline = true;\n          }\n        });\n      }\n\n      if (typeof this.props.fieldValue === 'string') {\n        const seperatedValues: string[] = fieldValue.split(' ');\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          seperatedValues\n        );\n      }\n\n      let calculatedValue: any = '';\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (calculatedValue && fieldValue !== calculatedValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          calculatedValue\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      return (\n        <div>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <Form key=\"selectAll\">\n            {values.map((elem: any, index: any) => (\n              <FormGroup key={index} check={true} inline={flagInline}>\n                <Label check={true}>\n                  <Input\n                    key={fieldElement.name + '-' + index}\n                    type=\"checkbox\"\n                    name={fieldElement.name}\n                    value={elem.name || []}\n                    onChange={this.onChangeHandlerCheckBox}\n                    readOnly={isReadonly}\n                    checked={selectedValues.includes(elem.name) || calculatedValue.includes(elem.name)}\n                  />{' '}\n                  {getFieldLabelText(elem, defaultLanguage)}\n                </Label>\n              </FormGroup>\n            ))}\n          </Form>\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </div>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n\n      if (this.props.optionList != null) {\n        this.props.assignOptionListActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {any} event - the onchange event\n   */\n\n  private onChangeHandlerCheckBox = (event: any) => {\n    const { fieldValue, fieldElement, fieldParentTreeName } = this.props;\n    const fieldName = fieldParentTreeName + fieldElement.name;\n    if (event.target.checked) {\n      if (\n        fieldValue &&\n        fieldValue.length > 0 &&\n        !fieldValue.includes(event.target.value)\n      ) {\n        this.props.assignFieldValueActionCreator(fieldName, [\n          ...fieldValue,\n          event.target.value,\n        ]);\n      } else {\n        this.props.assignFieldValueActionCreator(fieldName, [\n          event.target.value,\n        ]);\n      }\n    } else {\n      if (\n        fieldValue &&\n        fieldValue.length > 0 &&\n        fieldValue.includes(event.target.value)\n      ) {\n        const newValue = fieldValue.filter(\n          (elm: any) => elm !== event.target.value\n        );\n\n        this.props.assignFieldValueActionCreator(\n          fieldName,\n          newValue.length ? newValue : null\n        );\n      }\n    }\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const finalRes: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n\n        let filterResult: any = [];\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n\n        let j = 0;\n\n        if(filterResult === null) filterResult = [];\n        if( !Array.isArray(filterResult) ) filterResult = [filterResult];\n        \n        filterResult.map(() => {\n          options.map(option => {\n            if (option[nameOfKey] === filterResult[j]) {\n              finalRes.push(option);\n            }\n          });\n          j = j + 1;\n        });\n\n        i = i + 2;\n      }\n\n      options = [...Array.from(new Set(finalRes))];\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string[];\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Radio component to the redux store */\nconst ConnectedSelectAllRadio = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectAllRadio);\n\nexport default ConnectedSelectAllRadio;\n","import * as React from 'react';\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport Dropdown from './Dropdown';\nimport Radio from './Radio';\n\n/** props interface for the SelectOne component */\nexport interface SelectAllProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass SelectAll extends React.Component<SelectAllProps> {\n  public render() {\n    const { fieldElement } = this.props;\n    if (shouldComponentBeMinimal(fieldElement)) {\n      return <Dropdown {...this.props} />;\n    }\n    return <Radio {...this.props} />;\n  }\n}\n\nexport default SelectAll;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getFormSubmitStatus,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n\n/** props interface for the SelectOne component */\nexport interface SelectOneDropDownProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nconst customStyles = {\n  // For the select itself (not the options)\n  control: (styles: any, { isDisabled }: any) => {\n    return {\n      ...styles,\n      backgroundColor: isDisabled ? 'white' : 'white',\n    }\n    \n  },\n\n    // For the select itself (not the options)\n    container: (styles: any, { isDisabled }: any) => {\n      return {\n        ...styles,\n        backgroundColor: isDisabled ? 'white' : 'white',\n      }\n    },\n};\n\nclass SelectOneDropDown extends React.Component<SelectOneDropDownProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n\n        this.setOptionList(resultOptions);\n      } else if (fieldElement.itemset) {\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              options.push({ label: childrenLabel, value: elem.name });\n            }\n          });\n          this.setOptionList(choices[fieldElement.itemset.trim()]);\n        }\n      } else {\n        if (fieldElement.children) {\n          fieldElement.children.map(elem => {\n            const childrenLabel: string = getFieldLabelText(\n              elem,\n              defaultLanguage\n            );\n            options.push({ label: childrenLabel, value: elem.name });\n          });\n\n          this.setOptionList(fieldElement.children);\n        }\n      }\n\n      if (fieldValue) {\n        const optionsValueArray: any = [];\n        options.map(elem => {\n          if (elem.value) {\n            optionsValueArray.push(elem.value);\n          }\n        });\n\n        if (!optionsValueArray.includes(fieldValue)) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            ''\n          );\n        }\n      }\n\n      let selectedValue: any;\n      options.map(elem => {\n        if (elem.value === fieldValue) {\n          selectedValue = elem;\n        }\n      });\n\n      let calculatedValue: any = '';\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (calculatedValue && fieldValue !== calculatedValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          calculatedValue\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <div key={fieldElement.name} className=\"selectOneDropDown\">\n            <Select\n              styles={customStyles}\n              isDisabled={isReadonly}\n              multi={false}\n              name={fieldElement.name}\n              options={options}\n              value={selectedValue || calculatedValue || ''}\n              onChange={this.onChangeHandler(fieldElement.name)}\n            />\n          </div>\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** Sets the option list to the Redux Store\n   * @param {any} optionObject - the option object to be processed\n   */\n  private setOptionList = (optionObject: any) => {\n    const tempObjArray: any = [];\n    optionObject.map((elem: { name: any; label: any }) => {\n      const elemObj: any = {};\n      const name: string = 'name';\n      const label: string = 'label';\n      elemObj[name] = elem.name;\n      elemObj[label] = elem.label;\n      tempObjArray.push(elemObj);\n    });\n\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\n      this.props.assignOptionListActionCreator(\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\n        tempObjArray\n      );\n    }\n  };\n\n  /** sets the value of field element in store\n   * @param {any} event - the onchange input event\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandler = (fieldName: any) => (event: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + fieldName,\n      event.value || ''\n    );\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n        let filterResult: any = '';\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n        options = options.filter(option => option[nameOfKey] === filterResult);\n        i = i + 2;\n      }\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne component to the redux store */\nconst ConnectedSelectOneDropDown = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectOneDropDown);\n\nexport default ConnectedSelectOneDropDown;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getFormSubmitStatus,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneRadioProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectOneRadio extends React.Component<SelectOneRadioProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        if (/search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)) {\n          const processedStringArray = fieldElement.control.appearance.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      const childrenArray: any = [];\n      if (fieldElement.children) {\n        fieldElement.children.map(elem => {\n          const elemObj: any = {};\n          const name: string = 'name';\n          const label: string = 'label';\n          elemObj[name] = elem.name;\n          elemObj[label] = elem.label;\n          childrenArray.push(elemObj);\n        });\n      }\n\n      let values: any = [];\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        values = [];\n        if (fieldValue) {\n          const optionsValueArray: any = [];\n          resultOptions.map(elem => {\n            if (elem.name) {\n              optionsValueArray.push(elem.name);\n            }\n          });\n\n          if (!optionsValueArray.includes(fieldValue)) {\n            this.props.assignFieldValueActionCreator(\n              this.props.fieldParentTreeName + fieldElement.name,\n              ''\n            );\n          }\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            resultOptions\n          );\n        }\n        values = [...resultOptions];\n      } else if (fieldElement.itemset) {\n        const choiceOptions: any = [];\n        values = [];\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              choiceOptions.push({ label: childrenLabel, name: elem.name });\n            }\n          });\n\n          if (fieldValue) {\n            const optionsValueArray: any = [];\n            choiceOptions.map((elem: any) => {\n              if (elem.name) {\n                optionsValueArray.push(elem.name);\n              }\n            });\n            if (!optionsValueArray.includes(fieldValue)) {\n              this.props.assignFieldValueActionCreator(\n                this.props.fieldParentTreeName + fieldElement.name,\n                ''\n              );\n            }\n          }\n          if (!_.isEqual(this.props.optionList, { ...choiceOptions })) {\n            this.props.assignOptionListActionCreator(\n              this.props.fieldParentTreeName + fieldElement.name,\n              choiceOptions\n            );\n          }\n          values = [...choiceOptions];\n        }\n      } else {\n        values = [];\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            childrenArray\n          );\n        }\n        values = [...childrenArray];\n      }\n\n      let flagInline = false;\n      if (fieldElement.control && fieldElement.control.appearance) {\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\n            flagInline = true;\n          }\n        });\n      }\n\n      let calculatedValue: any = '';\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (calculatedValue && fieldValue !== calculatedValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          calculatedValue\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      return (\n        <div>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <Form key=\"selectOne\">\n            {values.map((elem: any, index: any) => (\n              <FormGroup key={index} check={true} inline={flagInline}>\n                <Label check={true}>\n                  <Input\n                    key={fieldElement.name + '-' + index}\n                    type=\"radio\"\n                    name={fieldElement.name}\n                    value={elem.name}\n                    onChange={this.onChangeHandlerRadio(fieldElement.name)}\n                    disabled={isReadonly}\n                    checked={elem.name === fieldValue || elem.name === calculatedValue}\n                  />{' '}\n                  {getFieldLabelText(elem, defaultLanguage)}\n                </Label>\n              </FormGroup>\n            ))}\n          </Form>\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </div>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of Radio Button field element in store\n   * @param {any} event - the onchange input event\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandlerRadio = (fieldName: any) => (event: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + fieldName,\n      event.target.value || ''\n    );\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique radio button options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n        let filterResult: any = '';\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n        options = options.filter(option => option[nameOfKey] === filterResult);\n        i = i + 2;\n      }\n    }\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Radio component to the redux store */\nconst ConnectedSelectOneRadio = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectOneRadio);\n\nexport default ConnectedSelectOneRadio;\n","import * as React from 'react';\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport Dropdown from './Dropdown';\nimport Radio from './Radio';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass SelectOne extends React.Component<SelectOneProps> {\n  public render() {\n    const { fieldElement } = this.props;\n    if (shouldComponentBeMinimal(fieldElement)) {\n      return <Dropdown {...this.props} />;\n    }\n    return <Radio {...this.props} />;\n  }\n}\n\nexport default SelectOne;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the text component */\nexport interface TextProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isPresentInErrorSelector: any;\n  isComponentRender: boolean;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface TextState {\n  fieldValue: string;\n  isFocused: boolean;\n}\n\nclass Text extends React.Component<TextProps, TextState> {\n  constructor(props: TextProps) {\n    super(props);\n    this.state = { fieldValue: '', isFocused: false };\n  }\n\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        let calculatedValue: any = '';\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n\n        if (calculatedValue && calculatedValue !== fieldValue) {\n          this.props.assignFieldValueActionCreator(\n            fieldParentTreeName + fieldElement.name,\n            calculatedValue\n          );\n        }\n\n        return (\n          <FormGroup>\n            <Label>\n              {modifiedFieldLabel}{' '}\n              {isRequired && (\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n              )}\n            </Label>\n            <Input\n              type=\"text\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              onBlur={this.onBlurHandler}\n              value={\n                this.state.isFocused\n                  ? this.state.fieldValue || ''\n                  : calculatedValue || ''\n              }\n              readOnly={isReadonly}\n            />\n            {isFormSubmitted && isError && (\n              <FontAwesomeIcon\n                icon=\"exclamation-circle\"\n                className=\"errorSign\"\n              />\n            )}\n            {fieldElement.hint && (\n              <Label className=\"hintText\">{hintLabel}</Label>\n            )}\n            {isFormSubmitted && isRequiredViolated && (\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n            )}\n            {isConstraintViolated && (\n              <Label className=\"constraintText\">\n                {modifiedConstraintLabel}\n              </Label>\n            )}\n          </FormGroup>\n        );\n      } else {\n        return (\n          <FormGroup>\n            <Label>\n              {modifiedFieldLabel}{' '}\n              {isRequired && (\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n              )}\n            </Label>\n            <Input\n              type=\"text\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              onBlur={this.onBlurHandler}\n              value={\n                this.state.isFocused\n                  ? this.state.fieldValue || ''\n                  : fieldValue || ''\n              }\n              readOnly={isReadonly}\n            />\n            {isFormSubmitted && isError && (\n              <FontAwesomeIcon\n                icon=\"exclamation-circle\"\n                className=\"errorSign\"\n              />\n            )}\n            {fieldElement.hint && (\n              <Label className=\"hintText\">{hintLabel}</Label>\n            )}\n            {isFormSubmitted && isRequiredViolated && (\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n            )}\n            {isConstraintViolated && (\n              <Label className=\"constraintText\">\n                {modifiedConstraintLabel}\n              </Label>\n            )}\n          </FormGroup>\n        );\n      }\n    } else {\n      if (this.state.isFocused) {\n        this.setState({ ...this.state, isFocused: false });\n      }\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: true,\n    });\n  };\n\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: false,\n    });\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value || ''\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Text component to the redux store */\nconst ConnectedText = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Text);\n\nexport default ConnectedText;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  getFormSubmitStatus,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the KbTime component */\nexport interface TimeProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: boolean;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass KbTime extends React.Component<TimeProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      getFormSubmitStatusSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      const isError = isPresentInErrorSelector(\n        fieldParentTreeName + fieldElement.name\n      );\n\n      let calculatedValue: any = '';\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if ((fieldValue === undefined || fieldValue == '') && calculatedValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          calculatedValue\n        );\n      }\n\n      console.log('time field value: ', fieldValue, calculatedValue);\n      const formatTime = (d: any) => {\n        if (d === undefined) return '';\n        return moment(d).format('HH:mm');\n      }\n\n      return (\n        <FormGroup>\n          <Label>\n            {modifiedFieldLabel}{' '}\n            {isRequired && (\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\n            )}\n          </Label>\n          <Input\n            type=\"time\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={formatTime(fieldValue) || formatTime(calculatedValue) || ''}\n            readOnly={isReadonly}\n          />\n          {isFormSubmitted && isError && (\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\n          )}\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isFormSubmitted && isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    console.log('time event: ', event.currentTarget.value);\n\n    if (event.currentTarget.value != '') {\n      const hour = event.currentTarget.value.split(':')[0];\n      const minutes = event.currentTarget.value.split(':')[1];\n\n      const time = moment(this.props.fieldValue).toDate();\n      time.setHours(parseInt(hour));\n      time.setMinutes(parseInt(minutes));\n\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + event.currentTarget.name,\n        moment(time).format(),\n      );\n    }\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  getFormSubmitStatusSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getFormSubmitStatusSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect KbTime component to the redux store */\nconst ConnectedTime = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(KbTime);\n\nexport default ConnectedTime;\n","import * as React from 'react';\nimport {\n  AUDIO_FIELD_TYPE,\n  CALCULATE_FIELD_TYPE,\n  DATE_FIELD_TYPE,\n  DATE_TIME_FIELD_TYPE,\n  DECIMAL_FIELD_TYPE,\n  FILE_FIELD_TYPE,\n  GPS_FIELD_TYPE,\n  INTEGER_FIELD_TYPE,\n  NOTE_FIELD_TYPE,\n  PHOTO_FIELD_TYPE,\n  SELECT_ALL_FIELD_TYPE,\n  SELECT_ONE_FIELD_TYPE,\n  TEXT_FIELD_TYPE,\n  TIME_FIELD_TYPE,\n} from '../../../constants';\nimport Calculate from '../../../containers/fields/base/Calculate';\nimport KbDate from '../../../containers/fields/base/Date';\nimport DateTime from '../../../containers/fields/base/Date Time';\nimport Decimal from '../../../containers/fields/base/Decimal';\nimport File from '../../../containers/fields/base/File';\nimport GPS from '../../../containers/fields/base/GPS';\nimport Audio from '../../../containers/fields/base/Audio';\nimport Integer from '../../../containers/fields/base/Integer';\nimport Note from '../../../containers/fields/base/Note';\nimport SelectAll from '../../../containers/fields/base/Select All';\nimport SelectOne from '../../../containers/fields/base/Select One';\nimport Text from '../../../containers/fields/base/Text';\nimport KbTime from '../../../containers/fields/base/Time';\n\n/** type of fieldParentTreeName */\nexport type FieldParentTreeName = string;\n\n/** interface for bind property */\ninterface BindProperty {\n  calculate?: string;\n  relevant?: string;\n  readonly?: string;\n  appearance?: string;\n  required?: string;\n  constraint?: string;\n  'jr:constraintMsg'?: { [key: string]: string } | string;\n}\n\n/** interface for kobo field element */\nexport interface FieldElement {\n  name: string;\n  type: string;\n  children?: any[];\n  bind?: BindProperty;\n  label?: { [key: string]: string } | string;\n  default?: any;\n  control?: any;\n  hint?: any;\n  itemset?: string;\n  choice_filter?: string;\n}\n\n/** props interface for BaseTypeEvaluator component */\nexport interface BaseTypeEvaluatorProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\nclass BaseTypeEvaluator extends React.Component<BaseTypeEvaluatorProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n    } = this.props;\n    return this.typeEvaluator(\n      choices,\n      csvList,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage\n    );\n  }\n\n  /** returns jsx components based on field types\n   * @param {any} choices - the choices of form definition\n   * @param {FieldElement} fieldElement - the field element object\n   * @param {FieldParentTreeName} fieldParentTreeName - the field parent hierchical name\n   * @return {React.ReactElement} - jsx base components\n   */\n  private typeEvaluator(\n    choices: any,\n    csvList: any,\n    fieldElement: FieldElement,\n    fieldParentTreeName: FieldParentTreeName,\n    defaultLanguage: string\n  ): React.ReactElement {\n    switch (fieldElement.type) {\n      case TEXT_FIELD_TYPE:\n        return (\n          <Text\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DATE_FIELD_TYPE:\n        return (\n          <KbDate\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case TIME_FIELD_TYPE:\n        return (\n          <KbTime\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DATE_TIME_FIELD_TYPE:\n        return (\n          <DateTime\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case INTEGER_FIELD_TYPE:\n        return (\n          <Integer\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DECIMAL_FIELD_TYPE:\n        return (\n          <Decimal\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case NOTE_FIELD_TYPE:\n        return (\n          <Note\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case CALCULATE_FIELD_TYPE:\n        return (\n          <Calculate\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case SELECT_ONE_FIELD_TYPE:\n        return (\n          <SelectOne\n            choices={choices}\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n      case SELECT_ALL_FIELD_TYPE:\n        return (\n          <SelectAll\n            choices={choices}\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n      case PHOTO_FIELD_TYPE:\n        return (\n          <File\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case FILE_FIELD_TYPE:\n        return (\n          <File\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case GPS_FIELD_TYPE:\n        return (\n          <GPS\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case AUDIO_FIELD_TYPE:\n        return (\n          <Audio\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      default:\n        return (\n          <div style={{ display: 'none' }}>\n            Other {fieldElement.type} {fieldElement.name}\n          </div>\n        );\n    }\n  }\n}\n\nexport default BaseTypeEvaluator;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Col, Row } from 'reactstrap';\nimport { Store } from 'redux';\nimport { CALCULATE_FIELD_TYPE, GROUP_FIELD_TYPE, REPEAT_FIELD_TYPE } from '../../../constants';\nimport Group from '../../../containers/fields/group/Group';\nimport Repeat from '../../../containers/fields/group/Repeat';\nimport { getEvaluatedExpression } from '../../../store/ducks/formState';\nimport { shouldComponentBeRelevant } from '../../../utils/helpers';\nimport BaseTypeEvaluator, { FieldElement, FieldParentTreeName } from '../Base';\n\n/** props Interface for the GroupTypeEvaluator component */\nexport interface GroupTypeEvaluatorProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElements: FieldElement[];\n  fieldParentTreeName: string;\n  isAppearanceApplicable: boolean;\n  getEvaluatedExpressionSelector: any;\n}\n\nclass GroupTypeEvaluator extends React.Component<GroupTypeEvaluatorProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldElements,\n      fieldParentTreeName,\n      defaultLanguage,\n      isAppearanceApplicable,\n    } = this.props;\n    return (\n      <Row className=\"groupTypeEvaluatorRow\">\n        {fieldElements.map((fieldElement) => {\n          const value: number = this.getAppearanceValue(\n            fieldElement,\n            fieldParentTreeName,\n            isAppearanceApplicable,\n          );\n          return (\n            <Col\n              key={`group_${fieldElement.name}`}\n              className={ value === 0 || fieldElement.type === CALCULATE_FIELD_TYPE ? \"groupTypeEvaluator hideDiv\" : \"groupTypeEvaluator\"}\n              md={value}\n              // hidden={value === 0}\n            >\n              {this.typeEvaluator(\n                choices,\n                csvList,\n                fieldElement,\n                fieldParentTreeName,\n                defaultLanguage,\n              )}\n            </Col>\n          );\n        })}\n      </Row>\n    );\n  }\n\n  /** returns jsx components based on field types\n   * @param {any} choices - the form choices\n   * @param {FieldElement} fieldElement - the field element object\n   * @param {FieldParentTreeName} - the field parent hierarchical name\n   * @return {React.ReactElement} - jsx group components/ base evaluator component\n   */\n  private typeEvaluator(\n    choices: any,\n    csvList: any,\n    fieldElement: FieldElement,\n    fieldParentTreeName: FieldParentTreeName,\n    defaultLanguage: string,\n  ): React.ReactElement {\n    switch (fieldElement.type) {\n      case GROUP_FIELD_TYPE:\n        return (\n          <div>\n            <Group\n              choices={choices}\n              fieldElement={fieldElement}\n              fieldParentTreeName={fieldParentTreeName}\n              defaultLanguage={defaultLanguage}\n              csvList={csvList}\n            />\n          </div>\n        );\n      case REPEAT_FIELD_TYPE:\n        return (\n          <div>\n            <Repeat\n              choices={choices}\n              fieldElement={fieldElement}\n              fieldParentTreeName={fieldParentTreeName}\n              defaultLanguage={defaultLanguage}\n              csvList={csvList}\n            />\n          </div>\n        );\n      default:\n        return (\n          <BaseTypeEvaluator\n            choices={choices}\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n    }\n  }\n\n  private getAppearanceValue = (\n    fieldElement: FieldElement,\n    fieldParentTreeName: string,\n    isAppearanceApplicable: boolean,\n  ): number => {\n    const isRender: boolean = shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      this.props.getEvaluatedExpressionSelector,\n    );\n\n    if (!isRender) {\n      return 0;\n    } if (\n      isRender\n      && isAppearanceApplicable\n      && fieldElement.control\n      && fieldElement.control.appearance\n    ) {\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\n        const processedStringArray = fieldElement.control.appearance.match(\n          /^w(\\d+)\\b/i,\n        );\n        const processedString = processedStringArray[0].replace('w', '');\n        const result = isNaN(processedString)\n          ? 12\n          : parseInt(processedString, 10);\n        return result;\n      }\n    }\n    return 12;\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  getEvaluatedExpressionSelector: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string,\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n\n  const result = {\n    getEvaluatedExpressionSelector,\n  };\n  return result;\n};\n\n/** connect GroupTypeEvaluator component to the redux store */\nconst ConnectedGroupTypeEvaluator = connect(mapStateToProps)(\n  GroupTypeEvaluator,\n);\n\nexport default ConnectedGroupTypeEvaluator;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faExclamationCircle,\n  faMinusCircle,\n  faPlusCircle,\n} from '@fortawesome/free-solid-svg-icons';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Container, Row } from 'reactstrap';\nimport { Store } from 'redux';\nimport KbAlert from '../components/Alert';\nimport DropDown from '../components/DropDown';\nimport GroupTypeEvaluator from '../components/typeEvalutors/Group';\nimport {\n  getAllFileObjects,\n  getCSVFromStore,\n  getUserInputFromStore,\n  isErrorsArrayEmpty,\n  resetStoreAction,\n  setCSVObj,\n  setFormSubmitStatus,\n  setUserInputObj,\n  setUserLanguage,\n  setColorAction,\n  assignFieldValueAction,\n} from '../store/ducks/formState';\n\nlibrary.add(faPlusCircle, faMinusCircle, faExclamationCircle);\n\nexport interface AppProps {\n  choices: any;\n  csvList: any;\n  csvObj: any;\n  isNoErrors: any;\n  userInputObj: any;\n  userInputJson: any;\n  defaultLanguage: string;\n  formTitle: string;\n  fieldElements: any;\n  setUserInputAction: typeof setUserInputObj;\n  setCSVAction: typeof setCSVObj;\n  setThemeColor: typeof setColorAction;\n  setUserLanguageAction: typeof setUserLanguage;\n  languageOptions: any;\n  setFormSubmitStatusAction: typeof setFormSubmitStatus;\n  resetStoreActionCreator: typeof resetStoreAction;\n  mediaList: any;\n  handleSubmit(userInput: any, mediaList: any): any;\n  themeColor: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n}\n\nexport interface AppState {\n  defaultLanguage: string;\n  isSubmissionError: boolean;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n  }\n\n  public componentDidMount() {\n    const { userInputJson, userInputObj, csvList, csvObj } = this.props;\n    /** assigning the start date by default */\n    const _start = userInputJson.start;\n    this.props.assignFieldValueActionCreator('start', _start ? _start : new Date());\n\n    this.props.resetStoreActionCreator();\n    this.props.setThemeColor(this.props.themeColor);\n    if (userInputJson && userInputJson !== userInputObj) {\n      this.props.setUserInputAction(userInputJson);\n    }\n    if (csvList && csvList !== csvObj) {\n      this.props.setCSVAction(csvList);\n    }\n\n    this.props.setUserLanguageAction(this.props.defaultLanguage);\n    this.setState({\n      defaultLanguage: this.props.defaultLanguage,\n      isSubmissionError: false,\n    });\n  }\n\n  public componentWillUnmount() {\n    /** assigning the end date by default */\n    const _end: any = this.props.userInputJson.end;\n    this.props.assignFieldValueActionCreator('end', _end ? _end : new Date());\n  }\n\n  public handleSelect = (languageName: string) => {\n    this.setState({ defaultLanguage: languageName });\n    this.props.setUserLanguageAction(this.props.defaultLanguage);\n  };\n\n  public render() {\n    const {\n      csvList,\n      fieldElements,\n      formTitle,\n      languageOptions,\n      choices,\n      themeColor,\n    } = this.props;\n    const { defaultLanguage } = this.state || this.props;\n\n    const props = {\n      choices,\n      csvList,\n      defaultLanguage,\n      fieldElements,\n      fieldParentTreeName: '',\n      isAppearanceApplicable: false,\n      languageOptions,\n    };\n\n    return (\n      <Container className=\"form-container\">\n        <Row className=\"formTitle\" style={{ borderBottom: `3px solid ${themeColor}`, borderTop: `3px solid ${themeColor}` }}>\n          <Col>\n            <h3 className=\"headerText\" style={{ color: `${themeColor || '#649a6a'} ` }}>{formTitle}</h3>\n          </Col>\n          <DropDown\n            languages={...languageOptions}\n            onChangeSelect={this.handleSelect}\n            defaultLanguage={defaultLanguage}\n          />\n        </Row>\n        {this.state && this.state.isSubmissionError && (\n          <KbAlert\n            color={'danger'}\n            isOpen={this.state.isSubmissionError}\n            handleToggle={this.toggleStateValue}\n            headerText={'Oh snap! You got an error!'}\n            bodyText={\n              'Please make sure the required fields are not missing and there are no errors'\n            }\n          />\n        )}\n        <Row>\n          <Col style={{ padding: 0 }}>\n            <GroupTypeEvaluator {...props} />\n            <Row className=\"welcome-box\" style={{ padding: 10 }}>\n              <Col>\n                <Button className=\"btn btn-success\" onClick={this.handleClick}>\n                  Submit\n                </Button>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  // tslint:disable-next-line: variable-name\n  private handleClick = (_event: React.MouseEvent<HTMLButtonElement>) => {\n    const { handleSubmit, isNoErrors, userInputObj, mediaList } = this.props;\n    if (isNoErrors) {\n      this.setState({ isSubmissionError: false });\n      handleSubmit(userInputObj, mediaList);\n    } else {\n      handleSubmit('Field Violated', mediaList);\n      this.setState({ isSubmissionError: true });\n      this.props.setFormSubmitStatusAction(true);\n      window.scrollTo(0, 0);\n    }\n  };\n\n  private toggleStateValue = () => {\n    this.setState({ isSubmissionError: false });\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  isNoErrors: any;\n  userInputObj: any;\n  mediaList: any;\n  csvObj: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    isNoErrors: isErrorsArrayEmpty(state),\n    mediaList: getAllFileObjects(state),\n    userInputObj: getUserInputFromStore(state),\n    csvObj: getCSVFromStore(state),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  resetStoreActionCreator: resetStoreAction,\n  setFormSubmitStatusAction: setFormSubmitStatus,\n  setUserInputAction: setUserInputObj,\n  setUserLanguageAction: setUserLanguage,\n  setCSVAction: setCSVObj,\n  setThemeColor: setColorAction,\n  assignFieldValueActionCreator: assignFieldValueAction,\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedApp = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\nexport default ConnectedApp;\n","import { MuiThemeProvider } from '@material-ui/core';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { theme } from './utils/Theme';\nimport App from './App';\nimport store from './store';\n\nexport interface OdkFormRendererProps {\n  csvList: any;\n  defaultLanguage: string;\n  formDefinitionJson: any;\n  languageOptions: any;\n  userInputJson: any;\n  handleSubmit: (userInput: any, mediaList: any) => any;\n}\n\nclass OdkFormRenderer extends React.Component<OdkFormRendererProps> {\n  public render() {\n    const {\n      csvList,\n      defaultLanguage,\n      formDefinitionJson,\n      userInputJson,\n      languageOptions,\n      handleSubmit,\n    } = this.props;\n    const props = {\n      choices: formDefinitionJson.choices || {},\n      csvList,\n      defaultLanguage,\n      fieldElements: formDefinitionJson.children,\n      formTitle: formDefinitionJson.title,\n      handleSubmit,\n      languageOptions,\n      userInputJson,\n      themeColor: formDefinitionJson.theme_color,\n    };\n    return (\n      <Provider store={store}>\n        <MuiThemeProvider theme={theme}>\n          <App {...props} />\n        </MuiThemeProvider>\n      </Provider>\n    );\n  }\n}\n\nexport default OdkFormRenderer;\n"],"names":["actualExpression","theme","createMuiTheme","palette","primary","main","dark","secondary","light","info","text","disabled","hint","typography","h1","fontWeight","fontSize","h2","h3","h4","body1","fontFamily","caption","subtitle1","subtitle2","overrides","MuiPaper","root","color","KbAlert","render","this","props","bodyText","React","Alert","isOpen","toggle","handleToggle","className","headerText","DropDown","event","onChangeSelect","value","selectedValue","options","languages","map","elem","push","label","_this2","defaultLanguage","Select","multi","placeholder","onChange","onChangeHandler","REQUIRED_FIELD_MSG","store","createStore","reducer","composeWithDevTools","currentHierarchicalName","formItemProperty","userInput","tokenizeCharacter","type","input","current","tokenizers","test","undefined","consumedChars","char","TypeError","matchQuote","pattern","tokenizePattern","kbSelected","funcName","params","_paramsTokens","_output","_current","tmp","Array","isArray","forEach","element","kbChoice","i","tmpHierchicalName","split","parent","length","state","getState","variableName","replace","optionList","key","name","language","kbPullData","item","csvList","find","obj","kbToday","_params","d","Date","setHours","kbNow","moment","format","kbDecimalDateTime","time_dif","getTime","Math","round","abs","kbDate","date","kbFormatDate","includes","day","month","kbRound","toFixed","parseFloat","kbRegex","RegExp","kbCountSelected","kbInt","parseInt","kbCoalesce","kbPosition","tmpName","kbSum","paramsTokens","sumValue","sumValuesOverJsn","sum","jsnObj","kbConcat","concatStr","kbSubstr","substring","outerScopedVariables","variableValue","tmpUserInput","nodeNames","parseMostClosestScopedVariable","index","parseDot","path","getIn","parseLiterals","_tmpOutput","tokens","toLowerCase","parseFunction","possibleFunctions","arrayOfParams","arrayOfOriginalTokens","tmpQueue","tmpTokens","pop","tmpVal","parser","parsedFn","parsedVal","functionFn","parseAnd","output","newOutput","parseParen","terminatingTokens","indexOf","parseDivide","parsed","ct","parseMinus","parserFn","consumedTokens","preOutput","preParsed","parseMultiply","preParseFn","Object","prototype","toString","call","isNaN","NaN","ceil","parsers","j","flagLessThanOrEqual","getMonth","startOf","isSameOrBefore","isBefore","flagGreaterThanOrEqual","leftOutput","pos","console","log","evaluater","expression","tmpFormItemProperty","tmpCurrentHierarchicalName","tokenized","tokenizerFn","token","tokenizer","getTextFromProperty","property","languageIdentifier","getFieldLabelText","fieldElement","getHintLabelText","customizeLabelsWithPreviousInputs","evaluator","labelText","fieldTreeName","placesOfCustomizationsRequiredList","match","tmpPlace","customizedName","matchList","getConstraintLabelText","bind","isInputRequired","isRequired","required","shouldComponentBeRelevant","fieldParentTreeName","evaluateExpression","relevant","shouldComponentBeReadOnly","readonly","shouldInputViolatesConstraint","constraint","getModifiedUserInputObject","userInputObj","fieldValue","treeNodes","modifiedObj","getValueFromUserInputObj","shouldComponentBeMinimal","isMinimal","control","appearance","SET_COLOR","FIELD_VALUE_ASSIGNED","OPTION_LIST_ASSIGNED","MEDIA_LIST_ADDED","REMOVE_FROM_MEDIA_LIST","REMOVE_FROM_OPTION_LIST_REPEAT","RESET_STORE","ADD_ERROR_INPUT_ID","REMOVE_ERROR_INPUT_ID","EMPTY_GROUP_FIELDS","REMOVE_GROUP_FIELDS_FROM_ERRORS","SET_USER_INPUT_OBJ","SET_CSV_OBJ","SET_FORM_SUBMIT_STATUS","assignFieldValueAction","assignOptionListAction","RemoveFromOptionList","repeatIndex","addMediaListAction","mediaObject","addErrorInputId","removeErrorInputId","emptyGroupFields","removeGroupFieldsFromErrors","initialState","SeamlessImmutable","errors","isFormSubmitted","mediaList","action","colorState","asMutable","deep","modifiedUserInputObj","stateM","modifiedUserInputObjList","newState","filteredRepeatArray","hasOwnProperty","entries","keyValueOptionListobj","repeatIndexString","String","keyRepeat","getModifiedOptionListForRepeat","modifiedOptionListRepeat","newStateForRepeat","modifiedMediaList","newMediaState","updateIn","arr","concat","filter","elm","mUserInputObj","groupTreeName","keys","objKey","startsWith","emptyGroupedValues","mState","csvObj","getThemeColor","getFieldValue","getOptionList","getEvaluatedExpression","getEvaluatedExpressionForSelect","isPresentInError","isGroupFieldsEmpty","isEmpty","checkGroupedValuesForEmpty","isErrorsIncludeGroupFields","isPresent","fTName","isErrorsArrayEmpty","getUserInputFromStore","getCSVFromStore","getFormSubmitStatus","getFileObject","fileName","getAllFileObjects","GroupStyle","customColor","createStyles","borderTop","backgroundColor","backgroundProp","display","insideBackground","borderProp","boxShadow","marginTop","marginBottom","padding","toolbarIcon","alignItems","justifyContent","mixins","toolbar","drawerPaperClose","overflowX","transition","transitions","create","easing","sharp","duration","leavingScreen","width","spacing","breakpoints","up","background","paper","overflow","flexDirection","listItem","marginLeft","marginRight","borderRadius","listItemIcon","listItemActive","nested","paddingLeft","navlogo","margin","listParent","common","white","drawerClose","drawerOpen","overflowY","enteringScreen","Group","choices","isComponentRender","themeColor","fieldLabel","isAppearanceApplicable","useTheme","classNames","makeStyles","useStyles","bodyless","isErrorsIncludeGroupFieldsSelector","removeGroupFieldsFromErrorsActionCreator","isGroupFieldsEmptySelector","emptyGroupFieldsActionCreator","Accordion","defaultExpanded","style","AccordionSummary","expandIcon","ExpandMoreIcon","Typography","AccordionDetails","FormGroup","children","GroupTypeEvaluator","fieldElements","ConnectedGroup","connect","parentProps","getEvaluatedExpressionSelector","SingleRepeat","_event","_this","assignmentHandler","removeHandler","removeOptionHandler","newFieldValue","_elem","unControlFlag","onClick","handleChange","FontAwesomeIcon","icon","Component","ControlledRepeat","assignFieldValueActionCreator","removeOptionListFromActionCreator","Label","_elm","addAnotherRepeat","ConnectedControlledRepeat","UncontrolledRepeat","noOfJrCount","res","removeFromError","_","size","assignOptionListActionCreator","iterate","slice","ConnectedUncontrolledRepeat","Repeat","Calculate","isPresentInErrorSelector","isRequiredViolated","isConstraintViolated","isReadonly","removeErrorInputIdActionCreator","addErrorInputIdActionCreator","calculatedValue","calculate","Input","readOnly","ConnectedCalculate","KbDate","getFormSubmitStatusSelector","modifiedFieldLabel","modifiedConstraintLabel","hintLabel","defaultValue","isError","DatePicker","dateFormat","selected","e","placeholderText","popperPlacement","popperModifiers","offset","rootBoundary","tether","altAxis","ConnectedDate","DateTime","modifiedDate","timeZoneOffset","getTimezoneOffset","getHours","showTimeSelect","timeFormat","timeIntervals","timeCaption","ConnectedDateTime","Decimal","setState","currentTarget","isFocused","ex","modifiedValue","step","onBlur","onBlurHandler","ConnectedDecimal","FilePreview","fieldName","Button","ConnectedFilePreview","fileObject","File","target","files","addMediaListActionCreator","accept","ConnectedFile","Text","navigator","geolocation","getCurrentPosition","showPosition","showError","position","coords","latitude","longitude","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","componentDidMount","geoLocation","ConnectedText","AudioPreview","ConnectedAudioPreview","Audio","ConnectedAudio","Integer","err","ConnectedInteger","Note","fieldHint","FormText","ConnectedNote","customStyles","styles","container","SelectAllDropDown","optionObject","tempObjArray","elemObj","isEqual","values","selectedValues","stringWithSearchKeyWord","resultArray","criteriaParams","splice","extractAndFilterOptions","csvName","criteriaType","filterCriterias","trim","distinctOptions","finalRes","modifiedName","nameOfKey","interConnectedValue","tempOptions","filterResult","getEvaluatedExpressionSelectorForSelect","option","from","Set","labelColumnName","valueColumnName","tmpOpt","uniqBy","resultOptions","updatedFieldElement","processedStringArray","getProcessedString","setOptionList","itemset","choice_filter","childrenLabel","optionsArray","tmpValueArray","isNotIncluded","optionsValueArray","row","seperatedValues","isDisabled","isMulti","ConnectedSelectAllDropDown","SelectAllRadio","checked","newValue","childrenArray","flagInline","tmpStyle","Form","check","inline","onChangeHandlerCheckBox","ConnectedSelectAllRadio","SelectAll","Dropdown","Radio","SelectOneDropDown","ConnectedSelectOneDropDown","SelectOneRadio","choiceOptions","onChangeHandlerRadio","ConnectedSelectOneRadio","SelectOne","KbTime","hour","minutes","time","toDate","setMinutes","formatTime","ConnectedTime","BaseTypeEvaluator","typeEvaluator","GPS","isRender","processedString","Row","getAppearanceValue","Col","md","ConnectedGroupTypeEvaluator","library","add","faPlusCircle","faMinusCircle","faExclamationCircle","App","languageName","setUserLanguageAction","handleSubmit","isNoErrors","isSubmissionError","setFormSubmitStatusAction","window","scrollTo","userInputJson","start","resetStoreActionCreator","setThemeColor","setUserInputAction","setCSVAction","componentWillUnmount","end","languageOptions","Container","borderBottom","formTitle","handleSelect","toggleStateValue","handleClick","ConnectedApp","formDefinitionJson","Provider","MuiThemeProvider","title","theme_color"],"mappings":"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"}