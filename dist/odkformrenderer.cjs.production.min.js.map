{"version":3,"file":"odkformrenderer.cjs.production.min.js","sources":["../src/utils/compiler.ts","../src/components/Alert/index.tsx","../src/components/DropDown/index.tsx","../src/constants.tsx","../src/utils/helpers.ts","../src/store/ducks/formState.ts","../src/containers/fields/group/Group/index.tsx","../src/containers/fields/group/Repeat/Single Repeat/index.tsx","../src/containers/fields/group/Repeat/Controlled Repeat/index.tsx","../src/containers/fields/group/Repeat/Uncontrolled Repeat/index.tsx","../src/containers/fields/group/Repeat/index.tsx","../src/containers/fields/base/Calculate/index.tsx","../src/containers/fields/base/Date/index.tsx","../src/containers/fields/base/Date Time/index.tsx","../src/containers/fields/base/Decimal/index.tsx","../src/containers/fields/base/Integer/index.tsx","../src/containers/fields/base/Note/index.tsx","../src/containers/fields/base/Photo/index.tsx","../src/containers/fields/base/Select All/Dropdown/index.tsx","../src/containers/fields/base/Select All/Radio/index.tsx","../src/containers/fields/base/Select All/index.tsx","../src/containers/fields/base/Select One/Dropdown/index.tsx","../src/containers/fields/base/Select One/Radio/index.tsx","../src/containers/fields/base/Select One/index.tsx","../src/containers/fields/base/Text/index.tsx","../src/containers/fields/base/Time/index.tsx","../src/components/typeEvalutors/Base/index.tsx","../src/components/typeEvalutors/Group/index.tsx","../src/App/index.tsx","../src/store/index.tsx","../src/index.tsx"],"sourcesContent":["let actualExpression: string;\nlet currentHierarchicalName: string = '';\nlet formItemProperty: any = {};\nlet userInput: any = {};\n\nfunction tokenizeCharacter(type: any, value: any, input: any, current: any) {\n  return value === input[current] ? [1, { type, value }] : [0, null];\n}\n\nfunction tokenizeParenOpen(input: any, current: any) {\n  return tokenizeCharacter('paren', '(', input, current);\n}\n\nfunction tokenizeBrakeOpen(input: any, current: any) {\n  return tokenizeCharacter('brac', '[', input, current);\n}\n\nfunction tokenizeBrakeClose(input: any, current: any) {\n  return tokenizeCharacter('brac', ']', input, current);\n}\n\nfunction tokenizeParenClose(input: any, current: any) {\n  return tokenizeCharacter('paren', ')', input, current);\n}\n\nfunction tokenizeEqual(input: any, current: any) {\n  return tokenizeCharacter('equal', '=', input, current);\n}\n\nfunction tokenizePlus(input: any, current: any) {\n  return tokenizeCharacter('plus', '+', input, current);\n}\n\nfunction tokenizeMinus(input: any, current: any) {\n  return tokenizeCharacter('minus', '-', input, current);\n}\n\nfunction tokenizeMultiply(input: any, current: any) {\n  return tokenizeCharacter('multiply', '*', input, current);\n}\n\nfunction tokenizeDivide(input: any, current: any) {\n  return tokenizeCharacter('divide', '/', input, current);\n}\n\nfunction tokenizeLessThan(input: any, current: any) {\n  return tokenizeCharacter('lessThan', '<', input, current);\n}\n\nfunction tokenizeGreaterThan(input: any, current: any) {\n  return tokenizeCharacter('greaterThan', '>', input, current);\n}\n\nfunction tokenizeNot(input: any, current: any) {\n  return tokenizeCharacter('not', '!', input, current);\n}\n\nfunction tokenizeComma(input: any, current: any) {\n  return tokenizeCharacter('comma', ',', input, current);\n}\n\nfunction tokenizeDot(input: any, current: any) {\n  return tokenizeCharacter('dot', '.', input, current);\n}\n\nfunction tokenizePattern(type: any, pattern: any, input: any, current: any) {\n  let char = input[current];\n  let consumedChars = 0;\n  if (pattern.test(char)) {\n    let value = '';\n    while (char && pattern.test(char)) {\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    return [consumedChars, { type, value }];\n  }\n  return [0, null];\n}\n\nfunction tokenizeString(input: any, current: any) {\n  if (input[current] === '\"' || input[current] === \"'\") {\n    const matchQuote = input[current];\n    let value = '';\n    let consumedChars = 0;\n    consumedChars += 1;\n    let char = input[current + consumedChars];\n    while (char !== matchQuote) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    return [consumedChars + 1, { type: 'string', value }];\n  }\n  return [0, null];\n}\n\nfunction tokenizeFunction(input: any, current: any) {\n  if (/[a-z_]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (char && /[:a-z0-9_-]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    while (char && /\\s/.test(char)) {\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char && char === '(') {\n      return [consumedChars, { type: 'function', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeNumber(input: any, current: any) {\n  if (/[0-9]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (/[0-9]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char !== '.') {\n      return [consumedChars, { type: 'number', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeDecimal(input: any, current: any) {\n  if (/[0-9.]/i.test(input[current])) {\n    let value = '';\n    let consumedChars = 0;\n    // consumedChars ++;\n    let char = input[current + consumedChars];\n    while (/[0-9]/i.test(char)) {\n      if (char === undefined) {\n        throw new TypeError('unterminated string ');\n      }\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n    }\n    if (char === '.') {\n      value += char;\n      consumedChars += 1;\n      char = input[current + consumedChars];\n      if (/[0-9]/i.test(char)) {\n        while (/[0-9]/i.test(char)) {\n          if (char === undefined) {\n            throw new TypeError('unterminated string ');\n          }\n          value += char;\n          consumedChars += 1;\n          char = input[current + consumedChars];\n        }\n        return [consumedChars, { type: 'decimal', value }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeVariable(input: any, current: any) {\n  if (input[current] === '#' || input[current] === '$') {\n    if (input[current + 1] && input[current + 1] === '{') {\n      let value = '';\n      let consumedChars = 1;\n      consumedChars += 1;\n      let char = input[current + consumedChars];\n      while (char !== '}') {\n        if (char === undefined) {\n          throw new TypeError('unterminated string ');\n        }\n        value += char;\n        consumedChars += 1;\n        char = input[current + consumedChars];\n      }\n      return [consumedChars + 1, { type: 'variable', value }];\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeOr(input: any, current: any) {\n  if (input[current] === 'o') {\n    if (input[current + 1] && input[current + 1] === 'r') {\n      if (\n        input[current + 2] === undefined ||\n        /[0-9\\s]/.test(input[current + 2])\n      ) {\n        return [2, { type: 'or', value: 'or' }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeIf(input: any, current: any) {\n  if (input[current] === 'i') {\n    if (input[current + 1] && input[current + 1] === 'f') {\n      if (\n        input[current + 2] === undefined ||\n        !/[a-z]i/.test(input[current + 2])\n      ) {\n        return [2, { type: 'if', value: 'if' }];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeAnd(input: any, current: any) {\n  if (input[current] === 'a') {\n    if (input[current + 1] && input[current + 1] === 'n') {\n      if (input[current + 2] && input[current + 2] === 'd') {\n        if (\n          input[current + 3] === undefined ||\n          /[0-9\\s]/.test(input[current + 3])\n        ) {\n          return [3, { type: 'and', value: 'and' }];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeDiv(input: any, current: any) {\n  if (input[current] === 'd') {\n    if (input[current + 1] && input[current + 1] === 'i') {\n      if (input[current + 2] && input[current + 2] === 'v') {\n        if (\n          input[current + 3] === undefined ||\n          /[0-9\\s]/.test(input[current + 3])\n        ) {\n          return [3, { type: 'divide', value: '/' }];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction tokenizeName(input: any, current: any) {\n  return tokenizePattern('name', /[a-z]/i, input, current);\n}\n\nfunction skipWhiteSpace(input: any, current: any) {\n  return /\\s/.test(input[current]) ? [1, null] : [0, null];\n}\n\nconst tokenizers = [\n  skipWhiteSpace,\n  tokenizeParenOpen,\n  tokenizeParenClose,\n  tokenizeIf,\n  tokenizeOr,\n  tokenizeAnd,\n  tokenizeVariable,\n  tokenizeString,\n  tokenizeFunction,\n  tokenizeEqual,\n  tokenizePlus,\n  tokenizeMinus,\n  tokenizeMultiply,\n  tokenizeDivide,\n  tokenizeDiv,\n  tokenizeLessThan,\n  tokenizeGreaterThan,\n  tokenizeNot,\n  tokenizeBrakeOpen,\n  tokenizeBrakeClose,\n  tokenizeDot,\n  tokenizeComma,\n  tokenizeNumber,\n  tokenizeDecimal,\n  tokenizeName,\n];\n\nfunction tokenizer(input: any) {\n  let current: number = 0;\n  const tokens: any = [];\n  while (current < input.length) {\n    let tokenized = false;\n    tokenizers.forEach(tokenizerFn => {\n      if (tokenized) {\n        return;\n      }\n      const [consumedChars, token]: any = tokenizerFn(input, current);\n      if (consumedChars !== 0) {\n        tokenized = true;\n        current += consumedChars;\n      }\n      if (token) {\n        tokens.push(token);\n      }\n    });\n    if (!tokenized) {\n      throw new TypeError(\n        `I dont know what this character is: ${input[current]}`\n      );\n    }\n  }\n  return tokens;\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSelected(funcName: any, params: any, _paramsTokens: any) {\n  if (funcName === 'selected') {\n    let tmp = false;\n    if (Array.isArray(params[0])) {\n      params[0].forEach((element: any) => {\n        // tslint:disable-next-line: triple-equals\n        tmp = tmp || element == params[1];\n      });\n      return [true, tmp];\n    }\n    // tslint:disable-next-line: triple-equals\n    return [true, params[0] == params[1]];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbToday(funcName: any, _params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'today') {\n    const d = new Date();\n    d.setHours(0, 0, 0, 0);\n    return [true, d];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbRound(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'round') {\n    if (params[0] && params[1]) {\n      if (typeof params[0] === 'number' && typeof params[1] === 'number') {\n        return [true, params[0].toFixed(params[1])];\n      }\n      if (typeof params[0] === 'string' && typeof params[1] === 'number') {\n        return [true, parseFloat(params[0]).toFixed(params[1])];\n      }\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbRegex(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'regex') {\n    const regex = RegExp(params[1]);\n    return [true, regex.test(params[0])];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbCountSelected(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'count-selected') {\n    if (params[0] && Array.isArray(params[0])) {\n      return [true, params[0].length];\n    }\n    if (params[0] && typeof params[0] !== 'object') {\n      return [true, 1];\n    }\n    return [true, 0];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbInt(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'int') {\n    if (typeof params[0] === 'string') {\n      return [true, parseInt(params[0], 10)];\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbCoalesce(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'coalesce') {\n    if (!params[0] && params[0] !== 0) {\n      return [true, params[1]];\n    }\n    return [true, params[0]];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbPosition(funcName: any, _params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'position') {\n    if (currentHierarchicalName) {\n      const tmpName = currentHierarchicalName.split('/');\n      if (tmpName.length > 2) {\n        return [true, parseInt(tmpName[tmpName.length - 2], 10) + 1];\n      }\n    }\n  }\n  return [false, null];\n}\n\nfunction sumValuesOverJsn(sum: any, jsnObj: any, variableName: any) {\n  if (Array.isArray(jsnObj)) {\n    let i;\n    for (i = 0; i < jsnObj.length; i += 1) {\n      sum = sumValuesOverJsn(sum, jsnObj[i], variableName);\n    }\n  } else if (typeof jsnObj === 'object') {\n    for (const key in jsnObj) {\n      if (typeof jsnObj[key] === 'object') {\n        sum = sumValuesOverJsn(sum, jsnObj[key], variableName);\n      } else if (key === variableName) {\n        if (typeof jsnObj[key] === 'string') {\n          sum += parseFloat(jsnObj[key]);\n        }\n        if (typeof jsnObj[key] === 'number') {\n          sum += jsnObj[key];\n        }\n      }\n    }\n  }\n  return sum;\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSum(funcName: any, _params: any, paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'sum') {\n    let sumValue = null;\n    if (\n      paramsTokens &&\n      paramsTokens.length > 0 &&\n      paramsTokens[0] &&\n      paramsTokens[0].length > 0 &&\n      paramsTokens[0][0].type === 'variable'\n    ) {\n      sumValue = sumValuesOverJsn(0, userInput, paramsTokens[0][0].value);\n    }\n    return [true, sumValue];\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbConcat(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'concat') {\n    if (params && params.length > 0) {\n      let concatStr = '';\n      // tslint:disable-next-line: prefer-for-of\n      for (let i = 0; i < params.length; i += 1) {\n        if (params[i] == null) {\n          return [false, null];\n        }\n        concatStr += params[i];\n      }\n      return [true, concatStr];\n    }\n  }\n  return [false, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction kbSubstr(funcName: any, params: any, _paramsTokens: any) {\n  // tslint:disable-next-line: triple-equals\n  if (funcName == 'substr') {\n    if (params && params.length > 0) {\n      if (params[0] && params[1] !== null) {\n        if (params[2] !== null && params[2] < params[0].length) {\n          const subStr = params[0].substring(params[1], params[2]);\n          return [true, subStr];\n        }\n        return [true, params[0].substring(params[1])];\n      }\n    }\n  }\n  return [false, null];\n}\n\nfunction outerScopedVariables(\n  variableName: any,\n  variableValue: any,\n  tmpUserInput: any\n): any {\n  // tslint:disable-next-line: forin\n  for (const key in tmpUserInput) {\n    const nodeNames = key.split('/');\n    const variableNameFromKey = nodeNames[nodeNames.length - 1];\n    if (variableNameFromKey === variableName) {\n      return tmpUserInput[key];\n    }\n    if (typeof tmpUserInput[key] === 'object') {\n      if (variableValue == null) {\n        variableValue = outerScopedVariables(\n          variableName,\n          variableValue,\n          tmpUserInput[key]\n        );\n      }\n    }\n  }\n  return variableValue;\n}\n\nfunction parseMostClosestScopedVariable(variableName: any) {\n  const tmpHierchicalName = currentHierarchicalName.split('/');\n  let i;\n  const tmpUserInput = userInput;\n  let variableValue = null;\n  variableValue = outerScopedVariables(\n    variableName,\n    variableValue,\n    tmpUserInput\n  );\n  let parent = '';\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\n    // tslint:disable-next-line: triple-equals\n    if (tmpHierchicalName[i] == 'repeat') {\n      i += 1;\n      const index = parseInt(tmpHierchicalName[i + 1], 10);\n      variableValue = outerScopedVariables(\n        variableName,\n        variableValue,\n        tmpUserInput[parent + tmpHierchicalName[i]][index]\n      );\n      i += 2;\n    } else {\n      // path.push(parent + tmpHierchicalName[i + 1]);\n      parent = parent + tmpHierchicalName[i + 1] + '/';\n      i += 2;\n    }\n  }\n  return variableValue;\n}\n\nfunction parseDot() {\n  const tmpHierchicalName = currentHierarchicalName.split('/');\n  let i;\n  let tmpUserInput = userInput;\n  let parent = '';\n  const path = [];\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\n    // tslint:disable-next-line: triple-equals\n    if (tmpHierchicalName[i] == 'repeat') {\n      i += 1;\n      path.push(parent + tmpHierchicalName[i]);\n      path.push(parseInt(tmpHierchicalName[i + 1], 10));\n      parent = parent + tmpHierchicalName[i] + '/';\n      i += 2;\n    } else {\n      // path.push(parent + tmpHierchicalName[i + 1]);\n      parent = parent + tmpHierchicalName[i + 1] + '/';\n      i += 2;\n    }\n  }\n  path.push(parent + tmpHierchicalName[tmpHierchicalName.length - 1]);\n  tmpUserInput = userInput.getIn(path);\n  return tmpUserInput;\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseLiterals(_tmpOutput: any, tokens: any, current: any) {\n  if (tokens[current].type === 'number') {\n    return [1, parseInt(tokens[current].value, 10)];\n  }\n  if (tokens[current].type === 'string') {\n    return [1, tokens[current].value];\n  }\n  if (tokens[current].type === 'decimal') {\n    return [1, parseFloat(tokens[current].value)];\n  }\n  if (tokens[current].type === 'variable') {\n    return [1, parseMostClosestScopedVariable(tokens[current].value)];\n  }\n  if (tokens[current].type === 'name') {\n    if (tokens[current].value.toLowerCase() === 'true') {\n      return [1, true];\n    }\n    if (tokens[current].value.toLowerCase() === 'false') {\n      return [1, false];\n    }\n    if (tokens[current].value in formItemProperty) {\n      return [1, formItemProperty[tokens[current].value]];\n    }\n    return [1, null];\n  }\n  if (tokens[current].type === 'dot') {\n    return [1, parseDot()];\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseFunction(_output: any, tokens: any, current: any) {\n  const possibleFunctions = [\n    kbSelected,\n    kbCountSelected,\n    kbToday,\n    kbRegex,\n    kbInt,\n    kbCoalesce,\n    kbPosition,\n    kbSum,\n    kbConcat,\n    kbSubstr,\n    kbRound,\n  ];\n  if (tokens[current].type === 'function') {\n    const funcName = tokens[current].value;\n    const arrayOfParams: any = [];\n    const arrayOfOriginalTokens: any = [];\n    let i = 1;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      const tmpQueue = [];\n      tmpQueue.push(1);\n      i += 1;\n      let tmpTokens = [];\n      while (tokens[current + i] && tmpQueue.length) {\n        tmpTokens.push(tokens[current + i]);\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === ')'\n        ) {\n          tmpQueue.pop();\n        }\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === '('\n        ) {\n          tmpQueue.push(1);\n        }\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\n          tmpTokens.pop();\n          const tmpVal = parser(null, tmpTokens, 0);\n          arrayOfParams.push(tmpVal);\n          arrayOfOriginalTokens.push(tmpTokens);\n          tmpTokens = [];\n        }\n        i += 1;\n      }\n      i -= 1;\n\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpTokens.pop();\n        const tmpVal = parser(null, tmpTokens, 0);\n        arrayOfParams.push(tmpVal);\n        arrayOfOriginalTokens.push(tmpTokens);\n        let parsedFn = false;\n        let parsedVal = null;\n        possibleFunctions.forEach(functionFn => {\n          if (parsedFn) {\n            return;\n          }\n          [parsedFn, parsedVal] = functionFn(\n            funcName,\n            arrayOfParams,\n            arrayOfOriginalTokens\n          );\n        });\n        if (parsedFn) {\n          return [i + 1, parsedVal];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseIf(_output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'if') {\n    const arrayOfParams = [];\n    let i = 1;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      const tmpQueue = [];\n      tmpQueue.push(1);\n      i += 1;\n      let tmpTokens = [];\n      while (tokens[current + i] && tmpQueue.length) {\n        tmpTokens.push(tokens[current + i]);\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === ')'\n        ) {\n          tmpQueue.pop();\n        }\n        if (\n          tokens[current + i].type === 'paren' &&\n          tokens[current + i].value === '('\n        ) {\n          tmpQueue.push(1);\n        }\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\n          tmpTokens.pop();\n          const tmpVal = parser(null, tmpTokens, 0);\n          arrayOfParams.push(tmpVal);\n          tmpTokens = [];\n        }\n        i += 1;\n      }\n      i -= 1;\n\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpTokens.pop();\n        const tmpVal = parser(null, tmpTokens, 0);\n        arrayOfParams.push(tmpVal);\n        if (arrayOfParams.length % 2 === 0) {\n          let j;\n          for (j = 0; j < arrayOfParams.length; j += 2) {\n            if (arrayOfParams[j]) {\n              return [i + 1, arrayOfParams[j + 1]];\n            }\n          }\n        } else {\n          let j;\n          for (j = 0; j < arrayOfParams.length - 1; j += 2) {\n            if (arrayOfParams[j]) {\n              return [i + 1, arrayOfParams[j + 1]];\n            }\n          }\n          return [i + 1, arrayOfParams[arrayOfParams.length - 1]];\n        }\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseNot(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'not') {\n    let tmpTokens;\n    let i = 1;\n    if (tokens[current + i].type === 'equal' && output != null) {\n      tmpTokens = [];\n      i += 1;\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      let newOutput;\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n        // tslint:disable-next-line: triple-equals\n        return [i, output != newOutput];\n      }\n    } else {\n      let parsed = false;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      let consumedTokens;\n      let newOutput;\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          i += consumedTokens;\n        }\n      });\n      if (parsed) {\n        return [i, !newOutput];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseAnd(output: any, tokens: any, current: any): any {\n  if (tokens[current].type === 'and' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    let newOutput = null;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      let consumedChars;\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\n      i += consumedChars;\n    } else {\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n      }\n    }\n    if (newOutput != null) {\n      newOutput = output && newOutput;\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\n        let consumedChars = 0;\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\n        i += consumedChars;\n      }\n      return [i, newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseOr(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'or' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    let newOutput = null;\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === '('\n    ) {\n      let consumedChars;\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\n      i += consumedChars;\n    } else {\n      const terminatingTokens = ['and', 'or'];\n      while (\n        tokens[current + i] &&\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\n      ) {\n        tmpTokens.push(tokens[current + i]);\n        i += 1;\n      }\n      if (tmpTokens.length) {\n        newOutput = parser(null, tmpTokens, 0);\n      }\n    }\n    if (newOutput != null) {\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\n        let consumedChars = 0;\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\n        i += consumedChars;\n      }\n      return [i, output || newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseEqual(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'equal' && output != null) {\n    const tmpTokens = [];\n    let i = 1;\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n      // tslint:disable-next-line: triple-equals\n      return [i, output == newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseLessThan(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'lessThan' && output != null) {\n    let flagLessThanOrEqual = false;\n    const tmpTokens = [];\n    let i = 1;\n    if (tokens[current + i].type === 'equal') {\n      i += 1;\n      flagLessThanOrEqual = true;\n    }\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n      if (flagLessThanOrEqual) {\n        return [i, output <= newOutput];\n      }\n      return [i, output < newOutput];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseGreaterThan(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'greaterThan' && output != null) {\n    let flagGreaterThanOrEqual = false;\n    const tmpTokens = [];\n    let i = 1;\n    if (tokens[current + i].type === 'equal') {\n      i += 1;\n      flagGreaterThanOrEqual = true;\n    }\n    const terminatingTokens = ['and', 'or'];\n    while (\n      tokens[current + i] &&\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\n    ) {\n      tmpTokens.push(tokens[current + i]);\n      i += 1;\n    }\n    let newOutput;\n    if (tmpTokens.length) {\n      newOutput = parser(null, tmpTokens, 0);\n\n      if (flagGreaterThanOrEqual) {\n        return [i, output >= newOutput];\n      }\n      return [i, output > newOutput];\n    }\n  }\n  return [0, null];\n}\n\n// tslint:disable-next-line: variable-name\nfunction parseParen(_output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'paren' && tokens[current].value === '(') {\n    const tmpQueue = [];\n    tmpQueue.push(1);\n    let i = 1;\n    const tmpTokens = [];\n    while (tokens[current + i] && tmpQueue.length) {\n      tmpTokens.push(tokens[current + i]);\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === ')'\n      ) {\n        tmpQueue.pop();\n      }\n      if (\n        tokens[current + i].type === 'paren' &&\n        tokens[current + i].value === '('\n      ) {\n        tmpQueue.push(1);\n      }\n      i += 1;\n    }\n    i -= 1;\n\n    if (\n      tokens[current + i].type === 'paren' &&\n      tokens[current + i].value === ')'\n    ) {\n      tmpTokens.pop();\n      const tmpVal = parser(null, tmpTokens, 0);\n      return [i + 1, tmpVal];\n    }\n  }\n  return [0, null];\n}\n\nfunction parseDivide(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'divide') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n        }\n        const precedentParsers = [parseDivide, parseMultiply];\n        let preParsed = false;\n        let preOutput;\n        precedentParsers.forEach(preParseFn => {\n          if (preParsed) {\n            return;\n          }\n          if (tokens[current]) {\n            [consumedTokens, preOutput] = preParseFn(\n              newOutput,\n              tokens,\n              current\n            );\n            ct += consumedTokens;\n            if (consumedTokens !== 0) {\n              preParsed = true;\n              newOutput = preOutput;\n            }\n          }\n        });\n\n        if (newOutput != null) {\n          output /= newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseMultiply(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'multiply') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n        }\n        const precedentParsers = [parseDivide, parseMultiply];\n        let preParsed = false;\n        let preOutput;\n        precedentParsers.forEach(preParseFn => {\n          if (preParsed) {\n            return;\n          }\n          if (tokens[current]) {\n            [consumedTokens, preOutput] = preParseFn(\n              newOutput,\n              tokens,\n              current\n            );\n            ct += consumedTokens;\n            if (consumedTokens !== 0) {\n              preParsed = true;\n              newOutput = preOutput;\n            }\n          }\n        });\n\n        if (newOutput != null) {\n          output *= newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parsePlus(output: any, tokens: any, current: any) {\n  if (output != null && tokens[current].type === 'plus') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'string',\n      'minus',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [\n        parseLiterals,\n        parseMinus,\n        parseParen,\n        parseFunction,\n      ];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let consumedTokens;\n        let newOutput: any;\n        if (parserFn === parseMinus) {\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\n        } else {\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        }\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n          const precedentParsers = [parseDivide, parseMultiply];\n          let preParsed = false;\n          let preOutput;\n          precedentParsers.forEach(preParseFn => {\n            if (preParsed) {\n              return;\n            }\n            if (tokens[current]) {\n              [consumedTokens, preOutput] = preParseFn(\n                newOutput,\n                tokens,\n                current\n              );\n              ct += consumedTokens;\n              if (consumedTokens !== 0) {\n                preParsed = true;\n                newOutput = preOutput;\n              }\n            }\n          });\n        }\n        if (newOutput != null) {\n          output += newOutput;\n        }\n      });\n      if (parsed) {\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nfunction parseMinus(output: any, tokens: any, current: any) {\n  if (tokens[current].type === 'minus') {\n    const possibleTokens = [\n      'number',\n      'decimal',\n      'paren',\n      'variable',\n      'function',\n    ];\n    if (\n      current < tokens.length &&\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\n    ) {\n      let parsed = false;\n      let ct: any = null;\n      const possibleParsers = [parseLiterals, parseParen, parseFunction];\n      possibleParsers.forEach(parserFn => {\n        if (parsed) {\n          return;\n        }\n        let [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\n        if (consumedTokens !== 0) {\n          parsed = true;\n          consumedTokens += 1;\n          current += consumedTokens;\n          ct = consumedTokens;\n          const precedentParsers = [parseDivide, parseMultiply];\n          let preParsed = false;\n          let preOutput;\n          precedentParsers.forEach(preParseFn => {\n            if (preParsed) {\n              return;\n            }\n            if (tokens[current]) {\n              [consumedTokens, preOutput] = preParseFn(\n                newOutput,\n                tokens,\n                current\n              );\n              ct += consumedTokens;\n              if (consumedTokens !== 0) {\n                preParsed = true;\n                newOutput = preOutput;\n              }\n            }\n          });\n        }\n        if (newOutput) {\n          if (output) {\n            if (\n              Object.prototype.toString.call(newOutput) === '[object Date]' &&\n              Object.prototype.toString.call(output) === '[object Date]'\n            ) {\n              if (!isNaN(output.getTime()) && !isNaN(newOutput.getTime())) {\n                output -= newOutput;\n                output = Math.ceil(output / (1000 * 60 * 60 * 24));\n              } else {\n                output = NaN;\n              }\n            } else if (\n              Object.prototype.toString.call(newOutput) === '[object Date]' ||\n              Object.prototype.toString.call(output) === '[object Date]'\n            ) {\n              output = NaN;\n            } else if (newOutput === '' || output === '') {\n              output = NaN;\n            } else {\n              output -= newOutput;\n            }\n          } else {\n            if (Object.prototype.toString.call(newOutput) === '[object Date]') {\n              output = NaN;\n            } else {\n              output = -newOutput;\n            }\n          }\n        } else {\n          output = NaN;\n        }\n      });\n      if (parsed) {\n        if (output === '') {\n          output = NaN;\n        }\n        return [ct, output];\n      }\n    }\n  }\n  return [0, null];\n}\n\nconst parsers = [\n  parseIf,\n  parseParen,\n  parseLiterals,\n  parseDivide,\n  parseMultiply,\n  parsePlus,\n  parseMinus,\n  parseLessThan,\n  parseGreaterThan,\n  parseEqual,\n  parseAnd,\n  parseOr,\n  parseNot,\n  parseFunction,\n];\n\nfunction parser(leftOutput: any, tokens: any, pos: any) {\n  let current = pos;\n  let output = leftOutput;\n  while (current < tokens.length) {\n    let parsed = false;\n    parsers.forEach(parserFn => {\n      if (parsed) {\n        return;\n      }\n      const [consumedTokens, newOutput] = parserFn(output, tokens, current);\n      if (consumedTokens !== 0) {\n        parsed = true;\n        current += consumedTokens;\n      }\n      if (newOutput != null) {\n        output = newOutput;\n      }\n    });\n    if (!parsed) {\n      // throw new TypeError('syntax error');\n      // tslint:disable-next-line: no-console\n      console.log('syntax error');\n      // tslint:disable-next-line: no-console\n      console.log(actualExpression);\n      return null;\n    }\n  }\n  return output;\n}\n\nexport default function evaluater(\n  expression: string,\n  tmpUserInput: any,\n  tmpFormItemProperty: any,\n  tmpCurrentHierarchicalName: string\n) {\n  if (!tmpUserInput) {\n    tmpUserInput = {};\n  }\n  currentHierarchicalName = tmpCurrentHierarchicalName;\n  actualExpression = expression;\n  userInput = tmpUserInput;\n  formItemProperty = tmpFormItemProperty;\n  return parser(null, tokenizer(expression), 0);\n}\n","import * as React from 'react';\nimport { Alert } from 'reactstrap';\n\nexport interface KbAlertProps {\n  headerText: string;\n  bodyText: string;\n  handleToggle: any;\n  isOpen: boolean;\n  color: string;\n}\n\nclass KbAlert extends React.Component<KbAlertProps> {\n  public render() {\n    const { headerText, bodyText, handleToggle, isOpen, color } = this.props;\n    return (\n      <Alert color={color} isOpen={isOpen} toggle={handleToggle}>\n        <h4 className=\"alert-heading\">{headerText}</h4>\n        <p>{bodyText}</p>\n      </Alert>\n    );\n  }\n}\n\nexport default KbAlert;\n","import * as React from 'react';\nimport Select from 'react-select';\n\nexport interface DropDownProps {\n  languages: any;\n  onChangeSelect: any;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass DropDown extends React.Component<DropDownProps> {\n  public render() {\n    const options: Options[] = [];\n    const languageOptions = [...this.props.languages];\n    languageOptions.map((elem: any) => {\n      options.push({ label: elem.label, value: elem.value });\n    });\n\n    let selectedValue: any;\n    options.map(elem => {\n      if (elem.value === this.props.defaultLanguage) {\n        selectedValue = elem;\n      }\n    });\n\n    return (\n      <Select\n        multi={false}\n        options={options}\n        className={'col-md-2 dropDown'}\n        placeholder=\"Language\"\n        onChange={this.onChangeHandler}\n        value={selectedValue || ''}\n      />\n    );\n  }\n\n  /** pass the selected value to the parent class\n   * @param {any} event - the onchange input event\n   */\n  private onChangeHandler = (event: any) => {\n    this.props.onChangeSelect(event.value);\n  };\n}\n\nexport default DropDown;\n","// Field Types\nexport const GROUP_FIELD_TYPE = 'group';\nexport type GROUP_FIELD_TYPE = typeof GROUP_FIELD_TYPE;\nexport const REPEAT_FIELD_TYPE = 'repeat';\nexport type REPEAT_FIELD_TYPE = typeof REPEAT_FIELD_TYPE;\nexport const TEXT_FIELD_TYPE = 'text';\nexport type TEXT_FIELD_TYPE = typeof TEXT_FIELD_TYPE;\nexport const DATE_FIELD_TYPE = 'date';\nexport type DATE_FIELD_TYPE = typeof DATE_FIELD_TYPE;\nexport const DATE_TIME_FIELD_TYPE = 'dateTime';\nexport type TIME_FIELD_TYPE = typeof TIME_FIELD_TYPE;\nexport const TIME_FIELD_TYPE = 'time';\nexport type DATE_TIME_FIELD_TYPE = typeof DATE_TIME_FIELD_TYPE;\nexport const INTEGER_FIELD_TYPE = 'integer';\nexport type INTEGER_FIELD_TYPE = typeof INTEGER_FIELD_TYPE;\nexport const DECIMAL_FIELD_TYPE = 'decimal';\nexport type DECIMAL_FIELD_TYPE = typeof DECIMAL_FIELD_TYPE;\nexport const PHOTO_FIELD_TYPE = 'photo';\nexport type PHOTO_FIELD_TYPE = typeof PHOTO_FIELD_TYPE;\nexport const NOTE_FIELD_TYPE = 'note';\nexport type NOTE_FIELD_TYPE = typeof NOTE_FIELD_TYPE;\nexport const SELECT_ONE_FIELD_TYPE = 'select one';\nexport type SELECT_ONE_FIELD_TYPE = typeof SELECT_ONE_FIELD_TYPE;\nexport const SELECT_ALL_FIELD_TYPE = 'select all that apply';\nexport type SELECT_ALL_FIELD_TYPE = typeof SELECT_ALL_FIELD_TYPE;\nexport const CALCULATE_FIELD_TYPE = 'calculate';\nexport type CALCULATE_FIELD_TYPE = typeof CALCULATE_FIELD_TYPE;\n\n// Required Properties\nexport const REQUIRED_FIELD_MSG = 'This field is required';\nexport type REQUIRED_FIELD_MSG = typeof REQUIRED_FIELD_MSG;\nexport const REQUIRED_SYMBOL = '*';\nexport type REQUIRED_SYMBOL = typeof REQUIRED_SYMBOL;\n","import { FieldElement } from '../components/typeEvalutors/Base';\n\n/**\n * get the text from multilang obj based on language identifier,\n * @param {FieldElement} property - field multilang property or string\n * @return {string} - text value of the property based on language identifier, empty if not present\n */\nexport default function getTextFromProperty(\n  property: string | { [key: string]: string },\n  languageIdentifier: string\n): string {\n  if (typeof property === 'string') {\n    return property || '';\n  }\n  return property[languageIdentifier] || '';\n}\n\n/**\n * get the label text of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field label text\n */\nexport function getFieldLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.label) {\n    return getTextFromProperty(fieldElement.label, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the label hint of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field label text\n */\nexport function getHintLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.hint) {\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the customised label text with previous input of the fieldElement\n * @param {any} evaluator - the getEvaluatedExpressionSelector Function\n * @param {string} labelText - the current Label Text\n * @param {string} fieldTreeName - the field tree name\n * @return {string | null} - field label text or null\n */\nexport function customizeLabelsWithPreviousInputs(\n  evaluator: any,\n  labelText: string,\n  fieldTreeName: string\n): string | null {\n  if (labelText === null || labelText === undefined) {\n    return null;\n  }\n  const placesOfCustomizationsRequiredList = labelText.match(/\\[(.*?)\\]/g);\n\n  if (placesOfCustomizationsRequiredList) {\n    placesOfCustomizationsRequiredList.forEach(tmpPlace => {\n      tmpPlace = tmpPlace.substring(1, tmpPlace.length - 1);\n      const customizedName = evaluator(tmpPlace, fieldTreeName);\n      const tmp = '[' + tmpPlace + ']';\n      if (customizedName != null && customizedName !== undefined) {\n        labelText = labelText.replace(tmp, customizedName);\n      } else {\n        labelText = labelText.replace(tmp, '');\n      }\n    });\n  }\n\n  return labelText;\n}\n\n/**\n * get the hint text of the fieldElement\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - field hint text\n */\nexport function getFieldHintText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.hint) {\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\n  }\n  return '';\n}\n\n/**\n * get the label text of the fieldElement constraint msg\n * @param {FieldElement} fieldElement - the fieldElement Object\n * @return {string} - constraint label text\n */\nexport function getConstraintLabelText(\n  fieldElement: FieldElement,\n  languageIdentifier: string\n) {\n  if (fieldElement.bind && fieldElement.bind['jr:constraintMsg']) {\n    return getTextFromProperty(\n      fieldElement.bind['jr:constraintMsg'],\n      languageIdentifier\n    );\n  }\n  return '';\n}\n\n/**\n * get the boolean result depending on the expression\n * @param {string} - required string\n * @returns {boolean} - true if required, otherwise false\n */\nfunction requiredEvaluator(expression: string): boolean {\n  if (\n    expression.toLowerCase() === 'yes' ||\n    expression === '1' ||\n    expression.toLowerCase() === 'true'\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * get the boolean result of fieldElement string\n * @param fieldElement\n * @return {boolean} - boolean value by calculating fieldElement required properties\n */\nexport function isInputRequired(fieldElement: FieldElement): boolean {\n  let isRequired = false;\n  if (fieldElement.bind) {\n    if (fieldElement.bind.required) {\n      if (\n        typeof fieldElement.bind.required === 'string' &&\n        requiredEvaluator(fieldElement.bind.required)\n      ) {\n        isRequired = true;\n      }\n    }\n  }\n  return isRequired;\n}\n\n/** interface for EvaluateExpression\n * @param {string} expression - the expression that needs to be evaluated\n * @param {fieldTreeName} - the field Tree name\n * @returns {any} - evaluated value\n */\nexport type EvaluateExpression = (\n  expression: string,\n  fieldTreeName: string\n) => any;\n\n/** evaluates whether a component be relevant or not\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the relevant expression\n * @returns {boolean} - true if relevant; otherwise, false;\n */\nexport function shouldComponentBeRelevant(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.relevant) {\n    const isRelevant = evaluateExpression(\n      fieldElement.bind.relevant,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isRelevant) {\n      return true;\n    }\n    return false;\n  }\n  return true;\n}\n\n/** evaluates whether a component be readonly or not\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the readonly expression\n * @returns {boolean} - true if readonly; otherwise, false;\n */\nexport function shouldComponentBeReadOnly(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.readonly) {\n    const isReadOnly = evaluateExpression(\n      fieldElement.bind.readonly,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isReadOnly) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/** evaluates whether the input violates constraint or not\n * @param {FieldElement} fieldElement - the constraint expression\n * @param {string} fieldParentTreeName- the field Parent Tree name\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the expression\n * @returns {boolean} - true if violates; otherwise, false;\n */\nexport function shouldInputViolatesConstraint(\n  fieldElement: FieldElement,\n  fieldParentTreeName: string,\n  evaluateExpression: EvaluateExpression\n): boolean {\n  if (fieldElement && fieldElement.bind && fieldElement.bind.constraint) {\n    const isConstraintViolated = !evaluateExpression(\n      fieldElement.bind.constraint,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isConstraintViolated) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/** returns the new user input object after assigning value of passed fieldTreeName\n * @param {any} userInputObj - the current user input object\n * @param {string} fieldTreeName - the field Tree name\n * @param {any} fieldValue - the value that needs to be assigned\n * @returns {any} - the new user input object after assignment\n */\nexport function getModifiedUserInputObject(\n  userInputObj: any,\n  fieldTreeName: string,\n  fieldValue: any\n): any {\n  const treeNodes = fieldTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  modifiedObj[parent + treeNodes[treeNodes.length - 1]] = fieldValue;\n  return userInputObj;\n}\n\n/** Returns the filtered option list Array For Repeat property\n * @param {any} userInputObj - the current option list object\n * @param {string} fieldTreeName - the field Tree name\n * @param {any} repeatIndex - the repeat index to remove\n * @returns {any} - the new user filredred repear array after assignment\n */\nexport function getModifiedOptionListForRepeat(\n  userInputObj: any,\n  fieldTreeName: string,\n  repeatIndex: number\n): any {\n  const filteredRepeatArray: any = [];\n  const optionListobj: any = userInputObj;\n\n  Object.entries(optionListobj).forEach(key => {\n    const keyNameOptionListobj: any = key[0];\n    const keyValueOptionListobj: any = key[1];\n    if (keyNameOptionListobj === fieldTreeName) {\n      const repeatIndexString: string = String(repeatIndex);\n      Object.entries(keyValueOptionListobj).map(keyRepeat => {\n        const keyNameRepeatObject: any = keyRepeat[0];\n        const keyValueRepeatValue: any = keyRepeat[1];\n        if (keyNameRepeatObject !== repeatIndexString) {\n          filteredRepeatArray.push(keyValueRepeatValue);\n        }\n      });\n    }\n  });\n  return filteredRepeatArray;\n}\n\n/** returns the value from the user input object\n * @param {any} userInputObj - the user input object\n * @param {string} fieldTreeName - the field Tree name\n * @returns {any} - the value, present in user input object, of the fieldTreeName\n */\nexport function getValueFromUserInputObj(\n  userInputObj: any,\n  fieldTreeName: string\n): any {\n  const treeNodes = fieldTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  return modifiedObj[parent + treeNodes[treeNodes.length - 1]];\n}\n\n/** evaluates whether the component is minimal or not\n * @param {FieldElement} fieldElement - the constraint expression\n * @returns {boolean} - true if minimal; otherwise, false;\n */\nexport function shouldComponentBeMinimal(fieldElement: FieldElement): boolean {\n  let isMinimal = false;\n  if (fieldElement.control && fieldElement.control.appearance) {\n    fieldElement.control.appearance.toString().includes('minimal')\n      ? (isMinimal = true)\n      : (isMinimal = false);\n  }\n  return isMinimal;\n}\n\n/** returns the new user input object after emptying the desired grouped values\n * @param {any} userInputObj - the current user input object\n * @param {string} groupTreeName - the group Tree name\n * @returns {any} - the new user input object after emptying the grouped values\n */\nexport function emptyGroupedValues(\n  userInputObj: any,\n  groupTreeName: string\n): any {\n  const treeNodes = groupTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  Object.keys(modifiedObj).forEach(objKey => {\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\n      modifiedObj[objKey] = null;\n    }\n  });\n  return userInputObj;\n}\n\n/** returns whether the grouped values are empty or not\n * @param {any} userInputObj - the current user input object\n * @param {string} groupTreeName - the group Tree name\n * @returns {any} - true if empty; otherwise, false\n */\nexport function checkGroupedValuesForEmpty(\n  userInputObj: any,\n  groupTreeName: string\n): any {\n  const treeNodes = groupTreeName.split('/');\n  let i;\n  let parent = '';\n  let modifiedObj = userInputObj;\n  for (i = 0; i < treeNodes.length - 1; ) {\n    if (treeNodes[i] === 'repeat') {\n      i += 1;\n      if (parent + treeNodes[i] in modifiedObj) {\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\n      } else {\n        modifiedObj[parent + treeNodes[i]] = [];\n      }\n      const index = parseInt(treeNodes[i + 1], 10);\n      if (modifiedObj[index]) {\n        modifiedObj = modifiedObj[index];\n      } else {\n        modifiedObj[index] = {};\n        modifiedObj = modifiedObj[index];\n      }\n      parent = parent + treeNodes[i] + '/';\n      i += 2;\n    } else {\n      parent = parent + treeNodes[i + 1] + '/';\n      i += 2;\n    }\n  }\n  let isEmpty: boolean = true;\n  Object.keys(modifiedObj).forEach(objKey => {\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\n      if (\n        modifiedObj[objKey] !== null &&\n        modifiedObj[objKey] !== undefined &&\n        isEmpty\n      ) {\n        isEmpty = false;\n      }\n    }\n  });\n  return isEmpty;\n}\n","import { AnyAction, Store } from 'redux';\nimport SeamlessImmutable from 'seamless-immutable';\nimport evaluater from '../../utils/compiler';\nimport {\n  checkGroupedValuesForEmpty,\n  emptyGroupedValues,\n  getModifiedOptionListForRepeat,\n  getModifiedUserInputObject,\n  getValueFromUserInputObj,\n} from '../../utils/helpers';\n\n/** interface for the store state */\nexport interface FormState {\n  userInput: object;\n  errors: string[];\n  optionList: object;\n}\n\n// actions\n\n/** FIELD_VALUE_ASSIGNED action type */\nexport const FIELD_VALUE_ASSIGNED = 'odk/reducer/form/FIELD_VALUE_ASSIGNED';\n/** OPTION_LIST_ASSIGNED action type */\nexport const OPTION_LIST_ASSIGNED = 'odk/reducer/form/OPTION_LIST_ASSIGNED';\n/** REMOVE_FROM_OPTION_LIST action type */\nexport const REMOVE_FROM_OPTION_LIST_REPEAT =\n  'odk/reducer/form/REMOVE_FROM_OPTION_LIST_REPEAT';\n/** RESET_STORE action type */\nexport const RESET_STORE = 'odk/reducer/form/RESET_STORE';\n/** ADD_ERROR_INPUT_ID action type */\nexport const ADD_ERROR_INPUT_ID = 'odk/reducer/form/ADD_ERROR_INPUT_ID';\n/** REMOVE_ERROR_INPUT_ID action type */\nexport const REMOVE_ERROR_INPUT_ID = 'odk/reducer/form/REMOVE_ERROR_INPUT_ID';\n/** EMPTY_GROUP_FIELDS */\nexport const EMPTY_GROUP_FIELDS = 'odk/reducer/form/EMPTY_GROUP_FIELDS';\n/** REMOVE_GROUP_FIELDS_FROM_ERRORS */\nexport const REMOVE_GROUP_FIELDS_FROM_ERRORS =\n  'odk/reducer/form/REMOVE_GROUP_FIELDS_FROM_ERRORS';\nexport const SET_USER_INPUT_OBJ = 'odk/reducer/form/SET_USER_INPUT_OBJ';\n\n/** interface for ASSIGN_FIELD_VALUE action */\nexport interface AssignFieldValueAction extends AnyAction {\n  fieldTreeName: string;\n  fieldValue: any;\n  type: typeof FIELD_VALUE_ASSIGNED;\n}\n\n/** interface for OPTION_LIST_ASSIGNED action */\nexport interface AssignOptionListAction extends AnyAction {\n  fieldTreeName: string;\n  optionList: any;\n  type: typeof OPTION_LIST_ASSIGNED;\n}\n\n/** interface for REMOVE_FROM_OPTION_LIST action */\nexport interface RemoveFromOptionList extends AnyAction {\n  fieldTreeName: string;\n  repeatIndex: number;\n  type: typeof REMOVE_FROM_OPTION_LIST_REPEAT;\n}\n\n/** interface for RESET_STORE action */\nexport interface ResetStoreAction extends AnyAction {\n  type: typeof RESET_STORE;\n}\n\n/** interface for ADD_ERROR_INPUT_ID action */\nexport interface AddErrorInputId extends AnyAction {\n  fieldTreeName: string;\n  type: typeof ADD_ERROR_INPUT_ID;\n}\n\n/** interface for REMOVE_ERROR_INPUT_ID action */\nexport interface RemoveErrorInputId extends AnyAction {\n  fieldTreeName: string;\n  type: typeof REMOVE_ERROR_INPUT_ID;\n}\n\n/** interface for EMPTY_GROUP_FIELDS action */\nexport interface EmptyGroupFields extends AnyAction {\n  fieldTreeName: string;\n  type: typeof EMPTY_GROUP_FIELDS;\n}\n\n/** interface for REMOVE_GROUP_FIELDS_FROM_ERRORS action */\nexport interface RemoveGroupFieldsFromErrors extends AnyAction {\n  fieldTreeName: string;\n  type: typeof REMOVE_GROUP_FIELDS_FROM_ERRORS;\n}\n\n/** interface for SET_USER_INPUT_OBJ action */\nexport interface SetUserInputObj extends AnyAction {\n  userInputObj: any;\n  type: typeof SET_USER_INPUT_OBJ;\n}\n\n/** Assigns the value to the proper field name\n * @param {string} fieldTreeName - the extended field name\n * @param {any} fieldValue - the value that will be assigned\n * @return {AssignFieldValueAction} - an action to assign value to a field in the redux store\n */\nexport const assignFieldValueAction = (\n  fieldTreeName: string,\n  fieldValue: any\n): AssignFieldValueAction => ({\n  fieldTreeName,\n  fieldValue,\n  type: FIELD_VALUE_ASSIGNED,\n});\n\n/** Assigns option list to the proper field name\n * @param {string} fieldTreeName - the extended field name\n * @param {any} fieldValue - the option list that will be assigned\n * @return {AssignOptionListAction} - an action to assign option List to a field in the redux store\n */\nexport const assignOptionListAction = (\n  fieldTreeName: string,\n  optionList: any\n): AssignOptionListAction => ({\n  fieldTreeName,\n  optionList,\n  type: OPTION_LIST_ASSIGNED,\n});\n\n/** Remove option list from Redux Store\n * @param fieldTreeName - the field tree name\n * @returns {RemoveFromOptionList} - an action to remove input id for errors\n */\nexport const RemoveFromOptionList = (\n  fieldTreeName: string,\n  repeatIndex: number\n): RemoveFromOptionList => ({\n  fieldTreeName,\n  repeatIndex,\n  type: REMOVE_FROM_OPTION_LIST_REPEAT,\n});\n\n/** Resets the redux store state to initial state\n * @return {ResetStoreAction} - an action to reset the redux store state\n */\nexport const resetStoreAction = (): ResetStoreAction => ({\n  type: RESET_STORE,\n});\n\n/** add the field tree name as error id to store in redux store that violates constraints\n * @param fieldTreeName - the field tree name\n * @returns {AddErrorInputId} - an action to add input id for errors\n */\nexport const addErrorInputId = (fieldTreeName: string): AddErrorInputId => ({\n  fieldTreeName,\n  type: ADD_ERROR_INPUT_ID,\n});\n\n/** remove the field tree name as error id to store in redux store that violates constraints\n * @param fieldTreeName - the field tree name\n * @returns {RemoveErrorInputId} - an action to remove input id for errors\n */\nexport const removeErrorInputId = (\n  fieldTreeName: string\n): RemoveErrorInputId => ({\n  fieldTreeName,\n  type: REMOVE_ERROR_INPUT_ID,\n});\n\n/** empties the values of the fields of the group\n * @param fieldTreeName - the group field tree name\n * @returns {RemoveErrorInputId} - an action to empty the group field values\n */\nexport const emptyGroupFields = (fieldTreeName: string): EmptyGroupFields => ({\n  fieldTreeName,\n  type: EMPTY_GROUP_FIELDS,\n});\n\n/** removes the group field names from store errors obj\n * @param {string} fieldTreeName - the group field tree name\n * @returns {RemoveGroupFieldsFromErrors} - an action to remove group field names from errors\n */\nexport const removeGroupFieldsFromErrors = (\n  fieldTreeName: string\n): RemoveGroupFieldsFromErrors => ({\n  fieldTreeName,\n  type: REMOVE_GROUP_FIELDS_FROM_ERRORS,\n});\n\n/** sets the user input object to redux store\n * @param {any} userInputObj - the user input obj\n * @returns {SetUserInputObj} - an action to set user input to redux store\n */\nexport const setUserInputObj = (userInputObj: any): SetUserInputObj => ({\n  type: SET_USER_INPUT_OBJ,\n  userInputObj,\n});\n\n/** Create type for forms reducer actions */\nexport type FormActionTypes =\n  | AssignFieldValueAction\n  | AssignOptionListAction\n  | RemoveFromOptionList\n  | ResetStoreAction\n  | AddErrorInputId\n  | RemoveErrorInputId\n  | EmptyGroupFields\n  | RemoveGroupFieldsFromErrors\n  | SetUserInputObj\n  | AnyAction;\n\n/** Create an immutable form state */\nexport type ImmutableFormState = SeamlessImmutable.ImmutableObject<FormState>;\n\n/** initial form state */\nexport const initialState: ImmutableFormState = SeamlessImmutable({\n  errors: [],\n  optionList: {},\n  userInput: {},\n});\n\n/** the form reducer function */\nexport default function reducer(\n  state: ImmutableFormState = initialState,\n  action: FormActionTypes\n): ImmutableFormState {\n  switch (action.type) {\n    case FIELD_VALUE_ASSIGNED:\n      const modifiedUserInputObj = getModifiedUserInputObject(\n        state.getIn(['userInput']).asMutable({ deep: true }),\n        action.fieldTreeName,\n        action.fieldValue\n      );\n      const stateM = state.asMutable({ deep: true });\n      return SeamlessImmutable({ ...stateM, userInput: modifiedUserInputObj });\n    case OPTION_LIST_ASSIGNED:\n      const modifiedUserInputObjList = getModifiedUserInputObject(\n        state.getIn(['optionList']).asMutable({ deep: true }),\n        action.fieldTreeName,\n        action.optionList != null ? { ...action.optionList } : null\n      );\n      const newState = state.asMutable({ deep: true });\n      return SeamlessImmutable({\n        ...newState,\n        optionList: modifiedUserInputObjList,\n      });\n    case REMOVE_FROM_OPTION_LIST_REPEAT:\n      let filteredRepeatArray: any = [];\n      if (\n        state\n          .getIn(['optionList'])\n          .asMutable({ deep: true })\n          .hasOwnProperty(action.fieldTreeName)\n      ) {\n        filteredRepeatArray = [\n          ...getModifiedOptionListForRepeat(\n            state.getIn(['optionList']).asMutable({ deep: true }),\n            action.fieldTreeName,\n            action.repeatIndex\n          ),\n        ];\n        const modifiedOptionListRepeat = getModifiedUserInputObject(\n          state.getIn(['optionList']).asMutable({ deep: true }),\n          action.fieldTreeName,\n          { ...filteredRepeatArray }\n        );\n        const newStateForRepeat = state.asMutable({ deep: true });\n        return SeamlessImmutable({\n          ...newStateForRepeat,\n          optionList: modifiedOptionListRepeat,\n        });\n      }\n      return state;\n    case RESET_STORE:\n      return initialState;\n    case ADD_ERROR_INPUT_ID:\n      if (!state.errors.includes(action.fieldTreeName)) {\n        return state.updateIn(['errors'], arr =>\n          arr.concat([action.fieldTreeName])\n        );\n      }\n      return state;\n    case REMOVE_ERROR_INPUT_ID:\n      if (state.errors.includes(action.fieldTreeName)) {\n        return state.updateIn(['errors'], arr =>\n          arr.filter(elm => elm !== action.fieldTreeName)\n        );\n      }\n      return state;\n    case EMPTY_GROUP_FIELDS:\n      const mUserInputObj = emptyGroupedValues(\n        state.getIn(['userInput']).asMutable({ deep: true }),\n        action.fieldTreeName\n      );\n      const mState = state.asMutable({ deep: true });\n      return SeamlessImmutable({ ...mState, userInput: mUserInputObj });\n    case REMOVE_GROUP_FIELDS_FROM_ERRORS:\n      return state.updateIn(['errors'], arr =>\n        arr.filter(elm => !elm.startsWith(action.fieldTreeName))\n      );\n    case SET_USER_INPUT_OBJ:\n      return SeamlessImmutable({\n        ...state,\n        userInput: (action as any).userInputObj,\n      });\n    default:\n      return state;\n  }\n}\n\n// selectors\n\n/** get the value by their respective element tree name\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} value if the element name is found else null\n */\nexport function getFieldValue(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return getValueFromUserInputObj(\n    (state as any).getIn(['userInput']).asMutable({ deep: true }),\n    fieldTreeName\n  );\n}\n\n/** get option list by their respective element tree name\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} value if the element name is found else null\n */\nexport function getOptionList(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return getValueFromUserInputObj(\n    (state as any).getIn(['optionList']).asMutable({ deep: true }),\n    fieldTreeName\n  );\n}\n\n/** get the value of the evaluated expression\n * @param {Partial<Store>} state - the redux store\n * @param {string} expression - the expression that needs to be evaluated\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} - the evaluated value or null if syntax error\n */\nexport function getEvaluatedExpression(\n  state: Partial<Store>,\n  expression: string,\n  fieldTreeName: string\n): any {\n  return evaluater(expression, (state as any).userInput, null, fieldTreeName);\n}\n\n/** get the value of the evaluated expression for Select One and Select All\n * @param {Partial<Store>} state - the redux store\n * @param {string} expression - the expression that needs to be evaluated\n * @param {any} options - the options that needs to be evaluated\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {any | null} - the evaluated value or null if syntax error\n */\nexport function getEvaluatedExpressionForSelect(\n  state: Partial<Store>,\n  expression: string,\n  options: any,\n  fieldTreeName: string\n): any {\n  return evaluater(\n    expression,\n    (state as any).userInput,\n    options,\n    fieldTreeName\n  );\n}\n\n/** check if the field element is present in the store\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the field\n * @return {boolean} true if present; otherwise, false\n */\nexport function isPresentInError(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return (state as any).errors.includes(fieldTreeName);\n}\n\n/** check if the field elements under group are empty or not\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the group field\n * @return {boolean} true if empty; otherwise, false\n */\nexport function isGroupFieldsEmpty(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  return checkGroupedValuesForEmpty((state as any).userInput, fieldTreeName);\n}\n\n/** check if the field elements under group are present in errors or not\n * @param {Partial<Store>} state - the redux store\n * @param {string} fieldTreeName - the hierchical tree name of the group field\n * @return {boolean} true if present; otherwise, false\n */\nexport function isErrorsIncludeGroupFields(\n  state: Partial<Store>,\n  fieldTreeName: string\n): any {\n  let isPresent = false;\n  (state as any).errors.forEach((fTName: string) => {\n    if (fTName.startsWith(fieldTreeName) && !isPresent) {\n      isPresent = true;\n    }\n  });\n  return isPresent;\n}\n\n/** check if the errors array in store empty or not\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} true if empty; otherwise, false\n */\nexport function isErrorsArrayEmpty(state: Partial<Store>): any {\n  return (state as any).errors && (state as any).errors.length ? false : true;\n}\n\n/** get the userInput object from store\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} the current userInputObject\n */\nexport function getUserInputFromStore(state: Partial<Store>): any {\n  return (state as any).getIn(['userInput']).asMutable({ deep: true });\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport GroupTypeEvaluator from '../../../../components/typeEvalutors/Group';\nimport {\n  emptyGroupFields,\n  getEvaluatedExpression,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  removeGroupFieldsFromErrors,\n} from '../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../utils/helpers';\n\nexport interface GroupProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n}\n\nclass Group extends React.Component<GroupProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    let isAppearanceApplicable = false;\n    if (fieldElement.control && fieldElement.control.appearance) {\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\n        isAppearanceApplicable = true;\n      }\n    }\n    if (isComponentRender) {\n      return (\n        <FormGroup>\n          <Label className={'groupLabel'}>{fieldLabel}</Label>\n          {fieldElement.children && (\n            <GroupTypeEvaluator\n              choices={choices}\n              fieldElements={fieldElement.children}\n              fieldParentTreeName={\n                fieldParentTreeName + 'group/' + fieldElement.name + '/'\n              }\n              defaultLanguage={defaultLanguage}\n              csvList={csvList}\n              isAppearanceApplicable={isAppearanceApplicable}\n            />\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\n        );\n      }\n      if (\n        !this.props.isGroupFieldsEmptySelector(\n          fieldParentTreeName + fieldElement.name\n        )\n      ) {\n        this.props.emptyGroupFieldsActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n};\n\n/** connect Group component to the redux store */\nconst ConnectedGroup = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Group);\n\nexport default ConnectedGroup;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport GroupTypeEvaluator from '../../../../../components/typeEvalutors/Group';\n\nexport interface SingleRepeatProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  defaultLanguage: string;\n  repeatIndex: number;\n  assignmentHandler: any;\n  removeHandler: any;\n  removeOptionHandler: any;\n  unControlFlag: boolean;\n}\n\nclass SingleRepeat extends React.Component<SingleRepeatProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      defaultLanguage,\n      fieldElement,\n      fieldParentTreeName,\n      repeatIndex,\n      unControlFlag,\n    } = this.props;\n    let isAppearanceApplicable = false;\n    if (fieldElement.control && fieldElement.control.appearance) {\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\n        isAppearanceApplicable = true;\n      }\n    }\n    return (\n      <div className={'groupFormFieldBody'}>\n        {fieldElement.children && (\n          <GroupTypeEvaluator\n            choices={choices}\n            fieldElements={fieldElement.children}\n            fieldParentTreeName={\n              fieldParentTreeName +\n              'repeat/' +\n              fieldElement.name +\n              '/' +\n              repeatIndex +\n              '/'\n            }\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n            isAppearanceApplicable={isAppearanceApplicable}\n          />\n        )}\n\n        {unControlFlag === false ? (\n          <div className={'minusIconWrapper'}>\n            <span onClick={this.handleChange}>\n              <FontAwesomeIcon icon=\"minus-circle\" className={'minusIcon'} />\n            </span>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  // tslint:disable-next-line: variable-name\n  private handleChange = (_event: React.MouseEvent<HTMLDivElement>) => {\n    const {\n      repeatIndex,\n      fieldValue,\n      assignmentHandler,\n      fieldElement,\n      fieldParentTreeName,\n      removeHandler,\n      removeOptionHandler,\n    } = this.props;\n    let newFieldValue: any[] = [...fieldValue];\n    newFieldValue = newFieldValue.filter(\n      // tslint:disable-next-line: variable-name\n      (_elem, index) => index !== repeatIndex\n    );\n    assignmentHandler(fieldParentTreeName + fieldElement.name, newFieldValue);\n    removeHandler(fieldParentTreeName + 'repeat/' + fieldElement.name + '/');\n    removeOptionHandler(fieldParentTreeName + fieldElement.name, repeatIndex);\n  };\n}\n\nexport default SingleRepeat;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport {\n  assignFieldValueAction,\n  emptyGroupFields,\n  getEvaluatedExpression,\n  getFieldValue,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  RemoveFromOptionList,\n  removeGroupFieldsFromErrors,\n} from '../../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../../utils/helpers';\nimport SingleRepeat from '.././Single Repeat';\n\nexport interface ControlledRepeatProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldValue: any;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\n}\n\nclass ControlledRepeat extends React.Component<ControlledRepeatProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldValue,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n      assignFieldValueActionCreator,\n      removeGroupFieldsFromErrorsActionCreator,\n      removeOptionListFromActionCreator,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (!fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          [{}]\n        );\n      }\n\n      return (\n        <FormGroup className={'groupBody'}>\n          <Label>{fieldLabel}</Label>\n          {fieldValue &&\n            // tslint:disable-next-line: variable-name\n            fieldValue.map((_elm: any, index: any) => (\n              <div className=\"repeat-fields-body\" key={'repeat' + index}>\n                <SingleRepeat\n                  choices={choices}\n                  defaultLanguage={defaultLanguage}\n                  fieldElement={fieldElement}\n                  fieldParentTreeName={fieldParentTreeName}\n                  fieldValue={fieldValue}\n                  repeatIndex={index}\n                  assignmentHandler={assignFieldValueActionCreator}\n                  removeHandler={removeGroupFieldsFromErrorsActionCreator}\n                  removeOptionHandler={removeOptionListFromActionCreator}\n                  csvList={csvList}\n                  unControlFlag={false}\n                />\n              </div>\n            ))}\n          <div>\n            <span onClick={this.addAnotherRepeat}>\n              <FontAwesomeIcon icon=\"plus-circle\" className={'plusIcon'} />\n            </span>\n          </div>\n        </FormGroup>\n      );\n    } else {\n      if (\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        );\n      }\n      if (fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  // tslint:disable-next-line: variable-name\n  private addAnotherRepeat = (_event: React.MouseEvent<HTMLDivElement>) => {\n    const { fieldValue, fieldParentTreeName, fieldElement } = this.props;\n    const newFieldValue = [...fieldValue];\n    newFieldValue.push({});\n    this.props.assignFieldValueActionCreator(\n      fieldParentTreeName + fieldElement.name,\n      newFieldValue\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n  removeOptionListFromActionCreator: RemoveFromOptionList,\n};\n\n/** connect Group component to the redux store */\nconst ConnectedControlledRepeat = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ControlledRepeat);\n\nexport default ConnectedControlledRepeat;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport {\n  assignFieldValueAction,\n  assignOptionListAction,\n  emptyGroupFields,\n  getEvaluatedExpression,\n  getFieldValue,\n  getOptionList,\n  isErrorsIncludeGroupFields,\n  isGroupFieldsEmpty,\n  RemoveFromOptionList,\n  removeGroupFieldsFromErrors,\n} from '../../../../../store/ducks/formState';\nimport {\n  getFieldLabelText,\n  shouldComponentBeRelevant,\n} from '../../../../../utils/helpers';\nimport SingleRepeat from '.././Single Repeat';\n\nexport interface UncontrolledRepeatProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldValue: any;\n  fieldParentTreeName: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  optionList: object;\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\n}\n\nclass UncontrolledRepeat extends React.Component<UncontrolledRepeatProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldValue,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n      isComponentRender,\n      optionList,\n      assignFieldValueActionCreator,\n      removeGroupFieldsFromErrorsActionCreator,\n      removeOptionListFromActionCreator,\n    } = this.props;\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (!fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          []\n        );\n      }\n\n      let noOfJrCount: number = 0;\n\n      if (fieldElement.control) {\n        const jrCount: string = 'jr:count';\n        const res: any = fieldElement.control[jrCount];\n\n        if (/^[0-9]*$/i.test(res)) {\n          noOfJrCount = parseInt(res, 10);\n        } else {\n          const value: any = this.props.getEvaluatedExpressionSelector(\n            res,\n            fieldParentTreeName + fieldElement.name\n          );\n          if (value) {\n            noOfJrCount = parseInt(value, 10);\n          }\n        }\n      }\n\n      if (\n        fieldValue &&\n        fieldValue.length === 0 &&\n        noOfJrCount === 0 &&\n        this.props.isErrorsIncludeGroupFieldsSelector(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        )\n      ) {\n        this.props.removeGroupFieldsFromErrorsActionCreator(\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\n        );\n      }\n\n      if (fieldValue && fieldValue.length > 0 && noOfJrCount === 0) {\n        this.removeFromError();\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          []\n        );\n      }\n\n      if (optionList && _.size(optionList) > noOfJrCount && noOfJrCount === 0) {\n        this.props.assignOptionListActionCreator(\n          this.props.fieldParentTreeName + this.props.fieldElement.name,\n          []\n        );\n      }\n\n      if (noOfJrCount > 0) {\n        const newFieldValue = [...fieldValue];\n\n        if (fieldValue && fieldValue.length < noOfJrCount) {\n          const iterate = noOfJrCount - fieldValue.length;\n          for (let j = 0; j < iterate; j++) {\n            newFieldValue.push({});\n          }\n        }\n\n        if (fieldValue && fieldValue.length > noOfJrCount) {\n          const iterate = fieldValue.length - noOfJrCount;\n          for (let i = 0; i < iterate; i++) {\n            newFieldValue.pop();\n          }\n          this.props.assignFieldValueActionCreator(\n            fieldParentTreeName + fieldElement.name,\n            newFieldValue\n          );\n          this.removeFromError();\n        }\n\n        if (optionList && _.size(optionList) > noOfJrCount) {\n          const iterate = _.size(optionList) - noOfJrCount;\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            Array.prototype.slice.call(optionList, iterate)\n          );\n          this.removeFromError();\n        }\n\n        return (\n          <FormGroup className={'groupBodyUnControlled'}>\n            <Label>{fieldLabel}</Label>\n            {newFieldValue &&\n              // tslint:disable-next-line: variable-name\n              newFieldValue.map((_elm: any, index: any) => (\n                <div className=\"repeat-fields-body\" key={'repeat' + index}>\n                  <SingleRepeat\n                    choices={choices}\n                    defaultLanguage={defaultLanguage}\n                    fieldElement={fieldElement}\n                    fieldParentTreeName={fieldParentTreeName}\n                    fieldValue={fieldValue}\n                    repeatIndex={index}\n                    assignmentHandler={assignFieldValueActionCreator}\n                    removeHandler={removeGroupFieldsFromErrorsActionCreator}\n                    removeOptionHandler={removeOptionListFromActionCreator}\n                    csvList={csvList}\n                    unControlFlag={true}\n                  />\n                </div>\n              ))}\n          </FormGroup>\n        );\n      } else {\n        return null;\n      }\n    } else {\n      this.removeFromError();\n      if (fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  private removeFromError() {\n    if (\n      this.props.isErrorsIncludeGroupFieldsSelector(\n        this.props.fieldParentTreeName +\n          'repeat/' +\n          this.props.fieldElement.name +\n          '/'\n      )\n    ) {\n      this.props.removeGroupFieldsFromErrorsActionCreator(\n        this.props.fieldParentTreeName +\n          'repeat/' +\n          this.props.fieldElement.name +\n          '/'\n      );\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isGroupFieldsEmptySelector: any;\n  isErrorsIncludeGroupFieldsSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\n    isGroupFieldsEmpty(state, fieldTreeName);\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\n    isErrorsIncludeGroupFields(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isErrorsIncludeGroupFieldsSelector,\n    isGroupFieldsEmptySelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  emptyGroupFieldsActionCreator: emptyGroupFields,\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\n  removeOptionListFromActionCreator: RemoveFromOptionList,\n};\n\n/** connect Repeat component to the redux store */\nconst ConnectedUncontrolledRepeat = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UncontrolledRepeat);\n\nexport default ConnectedUncontrolledRepeat;\n","import * as React from 'react';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport ControlledRepeat from './Controlled Repeat';\nimport UncontrolledRepeat from './Uncontrolled Repeat';\n\n/** props interface for the Repeat component */\nexport interface RepeatProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass Repeat extends React.Component<RepeatProps> {\n  public render() {\n    const { fieldElement } = this.props;\n    if (fieldElement.control && fieldElement.control['jr:count']) {\n      return <UncontrolledRepeat {...this.props} />;\n    }\n    return <ControlledRepeat {...this.props} />;\n  }\n}\n\nexport default Repeat;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\n\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the calculate component */\nexport interface CalculateProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Calculate extends React.Component<CalculateProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      let calculatedValue: any = '';\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (calculatedValue !== fieldValue) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          calculatedValue\n        );\n      }\n      return (\n        <FormGroup>\n          <Input\n            type=\"hidden\"\n            name={fieldElement.name}\n            value={calculatedValue || ''}\n            readOnly={isReadonly}\n          />\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Calculate component to the redux store */\nconst ConnectedCalculate = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Calculate);\n\nexport default ConnectedCalculate;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the KbDate component */\nexport interface DateProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass KbDate extends React.Component<DateProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      let defaultValue: string = '';\n      if (fieldValue && fieldValue !== '') {\n        const modifiedDate = new Date(fieldValue);\n        defaultValue = modifiedDate.toISOString().slice(0, 10);\n      }\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          <Input\n            type=\"date\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={defaultValue}\n            readOnly={isReadonly}\n          />\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? new Date(event.currentTarget.value)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect KbDate component to the redux store */\nconst ConnectedDate = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(KbDate);\n\nexport default ConnectedDate;\n","import * as React from 'react';\nimport DatePicker from 'react-datepicker';\nimport { connect } from 'react-redux';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\nimport 'react-datepicker/dist/react-datepicker.css';\n\n/** props interface for the date Time component */\nexport interface DateTimeProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass DateTime extends React.Component<DateTimeProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          <br />\n          <DatePicker\n            name={fieldElement.name}\n            selected={fieldValue ? new Date(fieldValue) : null}\n            onChange={this.handleChange(fieldElement.name)}\n            showTimeSelect={true}\n            timeFormat=\"h:m aa\"\n            timeIntervals={15}\n            timeCaption=\"time\"\n            dateFormat=\"MM/dd/yyyy h:mm aa\"\n            placeholderText=\"mm/dd/yyyy h:m aa\"\n            className=\"form-control\"\n            readOnly={isReadonly}\n          />\n          <br />\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  private handleChange = (name: any) => (value: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + name,\n      value !== '' ? new Date(value) : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Date Time component to the redux store */\nconst ConnectedDateTime = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DateTime);\n\nexport default ConnectedDateTime;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the decimal component */\nexport interface DecimalProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface DecimalState {\n  fieldValue: string;\n  isFocused: boolean;\n}\n\nclass Decimal extends React.Component<DecimalProps, DecimalState> {\n  constructor(props: DecimalProps) {\n    super(props);\n    this.state = { fieldValue: '', isFocused: false };\n  }\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated =\n      isRequired &&\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\n    const isConstraintViolated =\n      fieldValue !== '' &&\n      fieldValue !== null &&\n      fieldValue !== undefined &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (typeof this.props.fieldValue === 'string') {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          parseFloat(this.props.fieldValue)\n        );\n      }\n\n      let modifiedValue: any;\n      {\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\n      }\n\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          <Input\n            type=\"number\"\n            step=\"any\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            onBlur={this.onBlurHandler}\n            value={\n              this.state.isFocused\n                ? this.state.fieldValue || ''\n                : modifiedValue || ''\n            }\n            readOnly={isReadonly}\n          />\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (this.state.isFocused) {\n        this.setState({ ...this.state, isFocused: false });\n      }\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: true,\n    });\n  };\n\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: false,\n    });\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? parseFloat(event.currentTarget.value)\n        : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedDecimal = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Decimal);\n\nexport default ConnectedDecimal;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n/** props interface for the integer component */\nexport interface IntegerProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\nexport interface IntegerState {\n  fieldValue: string;\n  isFocused: boolean;\n}\nclass Integer extends React.Component<IntegerProps, IntegerState> {\n  constructor(props: IntegerProps) {\n    super(props);\n    this.state = { fieldValue: '', isFocused: false };\n  }\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n\n    const isRequiredViolated =\n      isRequired &&\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\n\n    const isConstraintViolated =\n      fieldValue !== '' &&\n      fieldValue !== null &&\n      fieldValue !== undefined &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel =\n      customizeLabelsWithPreviousInputs(\n        getEvaluatedExpressionSelector,\n        constraintLabel,\n        fieldParentTreeName + fieldElement.name\n      ) || '';\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      if (typeof this.props.fieldValue === 'string') {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          parseInt(this.props.fieldValue, 10)\n        );\n      }\n\n      let modifiedValue: any;\n      {\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\n      }\n\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          <Input\n            type=\"number\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            onBlur={this.onBlurHandler}\n            value={\n              this.state.isFocused\n                ? this.state.fieldValue || ''\n                : modifiedValue || ''\n            }\n            readOnly={isReadonly}\n          />\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (this.state.isFocused) {\n        this.setState({ ...this.state, isFocused: false });\n      }\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: true,\n    });\n  };\n\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: false,\n    });\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== ''\n        ? parseInt(event.currentTarget.value, 10)\n        : null\n    );\n  };\n}\n/** connect the component to the store */\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n/** connect Integer component to the redux store */\nconst ConnectedInteger = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Integer);\nexport default ConnectedInteger;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, FormText, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the text component */\nexport interface NoteProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isPresentInErrorSelector: any;\n  isComponentRender: boolean;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass Note extends React.Component<NoteProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const fieldHint = getHintLabelText(fieldElement, defaultLanguage);\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n      return (\n        <FormGroup>\n          <Label>{fieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          {fieldElement.hint && (\n            <FormText className=\"hintText\">{fieldHint}</FormText>\n          )}\n\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Note component to the redux store */\nconst ConnectedNote = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Note);\n\nexport default ConnectedNote;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport { FieldElement } from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  assignFieldValueAction,\n  getFieldValue,\n} from '../../../../store/ducks/formState';\nimport { getFieldLabelText, isInputRequired } from '../../../../utils/helpers';\n\n/** props interface for the photo component */\nexport interface PhotoProps {\n  fieldElement: FieldElement;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  defaultLanguage: string;\n}\n\nclass Photo extends React.Component<PhotoProps> {\n  public render() {\n    const { fieldElement, fieldValue, defaultLanguage } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    return (\n      <FormGroup>\n        <Label>{fieldLabel}</Label>\n        {isRequired && <Label>{REQUIRED_SYMBOL}</Label>}\n        <Input\n          type=\"file\"\n          accept=\"image/*\"\n          name={fieldElement.name}\n          onChange={this.onChangeHandler}\n          value={fieldValue}\n        />\n        {isRequired && <Label>{REQUIRED_FIELD_MSG}</Label>}\n      </FormGroup>\n    );\n  }\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      event.currentTarget.name,\n      event.currentTarget.value\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement } = parentProps;\n  const result = {\n    fieldValue: getFieldValue(state, fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  assignFieldValueActionCreator: assignFieldValueAction,\n};\n\n/** connect Photo component to the redux store */\nconst ConnectedPhoto = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Photo);\n\nexport default ConnectedPhoto;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectAll Dropdown component */\nexport interface SelectAllDropDownProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectAllDropDown extends React.Component<SelectAllDropDownProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== [] &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n        this.setOptionList(resultOptions);\n      } else if (fieldElement.itemset) {\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              options.push({ label: childrenLabel, value: elem.name });\n            }\n          });\n\n          const optionsArray: any = [];\n          if (options) {\n            options.map(elem => {\n              const elemObj: any = {};\n              const name: string = 'name';\n              const label: string = 'label';\n              elemObj[name] = elem.value;\n              elemObj[label] = elem.label;\n              optionsArray.push(elemObj);\n            });\n          }\n          this.setOptionList(optionsArray);\n        }\n      } else {\n        if (fieldElement.children) {\n          fieldElement.children.map(elem => {\n            const childrenLabel: string = getFieldLabelText(\n              elem,\n              defaultLanguage\n            );\n\n            options.push({ label: childrenLabel, value: elem.name });\n          });\n          this.setOptionList(fieldElement.children);\n        }\n      }\n\n      const tmpValueArray: any = [];\n      let isNotIncluded: boolean = false;\n      if (fieldValue && fieldValue.length > 0) {\n        const optionsValueArray: any = [];\n        options.map(elem => {\n          if (elem.value) {\n            optionsValueArray.push(elem.value);\n          }\n        });\n\n        for (const row of fieldValue) {\n          if (!optionsValueArray.includes(row)) {\n            isNotIncluded = true;\n          } else {\n            tmpValueArray.push(row);\n          }\n        }\n      }\n\n      if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n        this.props.assignFieldValueActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          tmpValueArray || []\n        );\n      }\n\n      const selectedValues: any[] = [];\n      if (fieldValue && fieldValue.length > 0) {\n        options.map(elem => {\n          for (const row of fieldValue) {\n            if (elem.value === row) {\n              selectedValues.push(elem);\n            }\n          }\n        });\n      }\n\n      if (typeof this.props.fieldValue === 'string') {\n        const seperatedValues: string[] = fieldValue.split(' ');\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          seperatedValues\n        );\n      }\n\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          <div key={fieldElement.name} className=\"selectAllDropDown\">\n            <Select\n              isMulti={true}\n              name={fieldElement.name}\n              options={options}\n              onChange={this.onChangeHandler(fieldElement.name)}\n              value={selectedValues || []}\n            />\n          </div>\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      if (this.props.optionList != null) {\n        this.props.assignOptionListActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n      return null;\n    }\n  }\n\n  /** Sets the option list to the Redux Store\n   * @param {any} optionObject - the option object to be processed\n   */\n  private setOptionList = (optionObject: any) => {\n    const tempObjArray: any = [];\n    optionObject.map((elem: { name: any; label: any }) => {\n      const elemObj: any = {};\n      const name: string = 'name';\n      const label: string = 'label';\n      elemObj[name] = elem.name;\n      elemObj[label] = elem.label;\n      tempObjArray.push(elemObj);\n    });\n\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\n      this.props.assignOptionListActionCreator(\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\n        tempObjArray\n      );\n    }\n  };\n\n  /** sets the value of field element in store\n   * @param {any} values - the onchange input values\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandler = (fieldName: any) => (values: any) => {\n    const selectedValues: any = [];\n    let i = 0;\n\n    if (values) {\n      values.map(() => {\n        if (!selectedValues.includes(values[i].value)) {\n          selectedValues.push(values[i].value);\n        }\n        i++;\n      });\n\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + fieldName,\n        selectedValues\n      );\n    } else {\n      this.props.assignFieldValueActionCreator(\n        this.props.fieldParentTreeName + fieldName,\n        null\n      );\n    }\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const finalRes: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n\n        let filterResult: any = [];\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n\n        let j = 0;\n        filterResult.map(() => {\n          options.map(option => {\n            if (option[nameOfKey] === filterResult[j]) {\n              finalRes.push(option);\n            }\n          });\n          j = j + 1;\n        });\n\n        i = i + 2;\n      }\n\n      options = [...Array.from(new Set(finalRes))];\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string[];\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Dropdown component to the redux store */\nconst ConnectedSelectAllDropDown = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectAllDropDown);\n\nexport default ConnectedSelectAllDropDown;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectAll Radio component */\nexport interface SelectAllRadioProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n  optionList: object;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectAllRadio extends React.Component<SelectAllRadioProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== [] &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      let options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      const childrenArray: any = [];\n      if (fieldElement.children) {\n        fieldElement.children.map(elem => {\n          const elemObj: any = {};\n          const name: string = 'name';\n          const label: string = 'label';\n          elemObj[name] = elem.name;\n          elemObj[label] = elem.label;\n          childrenArray.push(elemObj);\n        });\n      }\n\n      let values: any = [];\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        values = [];\n        options = [];\n        const tmpValueArray: any = [];\n        let isNotIncluded: boolean = false;\n\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n\n        if (fieldValue && fieldValue.length > 0) {\n          const optionsValueArray: any = [];\n          options.map(elem => {\n            if (elem.value) {\n              optionsValueArray.push(elem.value);\n            }\n          });\n\n          for (const row of fieldValue) {\n            if (!optionsValueArray.includes(row)) {\n              isNotIncluded = true;\n            } else {\n              tmpValueArray.push(row);\n            }\n          }\n        }\n\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            tmpValueArray || []\n          );\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            resultOptions\n          );\n        }\n        values = [...resultOptions];\n      } else if (fieldElement.itemset) {\n        values = [];\n        options = [];\n        const tmpValueArray: any = [];\n        const optionsArray: any = [];\n        let isNotIncluded: boolean = false;\n\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              options.push({ label: childrenLabel, value: elem.name });\n            }\n          });\n        }\n\n        if (fieldValue && fieldValue.length > 0) {\n          const optionsValueArray: any = [];\n          options.map((elem: any) => {\n            if (elem.value) {\n              optionsValueArray.push(elem.value);\n            }\n          });\n\n          for (const row of fieldValue) {\n            if (!optionsValueArray.includes(row)) {\n              isNotIncluded = true;\n            } else {\n              tmpValueArray.push(row);\n            }\n          }\n        }\n\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            tmpValueArray || []\n          );\n        }\n\n        if (options) {\n          options.map(elem => {\n            const elemObj: any = {};\n            const name: string = 'name';\n            const label: string = 'label';\n            elemObj[name] = elem.value;\n            elemObj[label] = elem.label;\n            optionsArray.push(elemObj);\n          });\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...optionsArray })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            optionsArray\n          );\n        }\n\n        values = [...optionsArray];\n      } else {\n        values = [];\n        options = [];\n        if (fieldElement.children) {\n          fieldElement.children.map(elem =>\n            options.push({ label: elem.label, value: elem.name })\n          );\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            childrenArray\n          );\n        }\n        values = [...childrenArray];\n      }\n\n      const selectedValues: any[] = [];\n      if (fieldValue && fieldValue.length > 0) {\n        options.map(elem => {\n          for (const row of fieldValue) {\n            if (elem.value === row) {\n              selectedValues.push(elem.value);\n            }\n          }\n        });\n      }\n\n      let flagInline = false;\n      if (fieldElement.control && fieldElement.control.appearance) {\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\n            flagInline = true;\n          }\n        });\n      }\n\n      if (typeof this.props.fieldValue === 'string') {\n        const seperatedValues: string[] = fieldValue.split(' ');\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          seperatedValues\n        );\n      }\n\n      return (\n        <div>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          <Form key=\"selectAll\">\n            {values.map((elem: any, index: any) => (\n              <FormGroup key={index} check={true} inline={flagInline}>\n                <Label check={true}>\n                  <Input\n                    key={fieldElement.name + '-' + index}\n                    type=\"checkbox\"\n                    name={fieldElement.name}\n                    value={elem.name || []}\n                    onChange={this.onChangeHandlerCheckBox}\n                    readOnly={isReadonly}\n                    checked={selectedValues.includes(elem.name)}\n                  />{' '}\n                  {getFieldLabelText(elem, defaultLanguage)}\n                </Label>\n              </FormGroup>\n            ))}\n          </Form>\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </div>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n\n      if (this.props.optionList != null) {\n        this.props.assignOptionListActionCreator(\n          this.props.fieldParentTreeName + fieldElement.name,\n          null\n        );\n      }\n\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {any} event - the onchange event\n   */\n\n  private onChangeHandlerCheckBox = (event: any) => {\n    const { fieldValue, fieldElement, fieldParentTreeName } = this.props;\n    const fieldName = fieldParentTreeName + fieldElement.name;\n    if (event.target.checked) {\n      if (\n        fieldValue &&\n        fieldValue.length > 0 &&\n        !fieldValue.includes(event.target.value)\n      ) {\n        this.props.assignFieldValueActionCreator(fieldName, [\n          ...fieldValue,\n          event.target.value,\n        ]);\n      } else {\n        this.props.assignFieldValueActionCreator(fieldName, [\n          event.target.value,\n        ]);\n      }\n    } else {\n      if (\n        fieldValue &&\n        fieldValue.length > 0 &&\n        fieldValue.includes(event.target.value)\n      ) {\n        const newValue = fieldValue.filter(\n          (elm: any) => elm !== event.target.value\n        );\n\n        this.props.assignFieldValueActionCreator(\n          fieldName,\n          newValue.length ? newValue : null\n        );\n      }\n    }\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const finalRes: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n\n        let filterResult: any = [];\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n\n        let j = 0;\n        filterResult.map(() => {\n          options.map(option => {\n            if (option[nameOfKey] === filterResult[j]) {\n              finalRes.push(option);\n            }\n          });\n          j = j + 1;\n        });\n\n        i = i + 2;\n      }\n\n      options = [...Array.from(new Set(finalRes))];\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string[];\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Radio component to the redux store */\nconst ConnectedSelectAllRadio = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectAllRadio);\n\nexport default ConnectedSelectAllRadio;\n","import * as React from 'react';\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport Dropdown from './Dropdown';\nimport Radio from './Radio';\n\n/** props interface for the SelectOne component */\nexport interface SelectAllProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass SelectAll extends React.Component<SelectAllProps> {\n  public render() {\n    const { fieldElement } = this.props;\n    if (shouldComponentBeMinimal(fieldElement)) {\n      return <Dropdown {...this.props} />;\n    }\n    return <Radio {...this.props} />;\n  }\n}\n\nexport default SelectAll;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport { FormGroup, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneDropDownProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectOneDropDown extends React.Component<SelectOneDropDownProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n      const options: Options[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        const updatedFieldElement: any = fieldElement.control.appearance\n          .toString()\n          .replace('minimal', '');\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\n          const processedStringArray = updatedFieldElement.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        resultOptions.map(elem =>\n          options.push({ label: elem.label, value: elem.name })\n        );\n\n        this.setOptionList(resultOptions);\n      } else if (fieldElement.itemset) {\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              options.push({ label: childrenLabel, value: elem.name });\n            }\n          });\n          this.setOptionList(choices[fieldElement.itemset.trim()]);\n        }\n      } else {\n        if (fieldElement.children) {\n          fieldElement.children.map(elem => {\n            const childrenLabel: string = getFieldLabelText(\n              elem,\n              defaultLanguage\n            );\n            options.push({ label: childrenLabel, value: elem.name });\n          });\n\n          this.setOptionList(fieldElement.children);\n        }\n      }\n\n      if (fieldValue) {\n        const optionsValueArray: any = [];\n        options.map(elem => {\n          if (elem.value) {\n            optionsValueArray.push(elem.value);\n          }\n        });\n\n        if (!optionsValueArray.includes(fieldValue)) {\n          this.props.assignFieldValueActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            ''\n          );\n        }\n      }\n\n      let selectedValue: any;\n      options.map(elem => {\n        if (elem.value === fieldValue) {\n          selectedValue = elem;\n        }\n      });\n\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          <div key={fieldElement.name} className=\"selectOneDropDown\">\n            <Select\n              multi={false}\n              name={fieldElement.name}\n              options={options}\n              value={selectedValue || ''}\n              onChange={this.onChangeHandler(fieldElement.name)}\n            />\n          </div>\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** Sets the option list to the Redux Store\n   * @param {any} optionObject - the option object to be processed\n   */\n  private setOptionList = (optionObject: any) => {\n    const tempObjArray: any = [];\n    optionObject.map((elem: { name: any; label: any }) => {\n      const elemObj: any = {};\n      const name: string = 'name';\n      const label: string = 'label';\n      elemObj[name] = elem.name;\n      elemObj[label] = elem.label;\n      tempObjArray.push(elemObj);\n    });\n\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\n      this.props.assignOptionListActionCreator(\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\n        tempObjArray\n      );\n    }\n  };\n\n  /** sets the value of field element in store\n   * @param {any} event - the onchange input event\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandler = (fieldName: any) => (event: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + fieldName,\n      event.value || ''\n    );\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique dropdown options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n        let filterResult: any = '';\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n        options = options.filter(option => option[nameOfKey] === filterResult);\n        i = i + 2;\n      }\n    }\n\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne component to the redux store */\nconst ConnectedSelectOneDropDown = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectOneDropDown);\n\nexport default ConnectedSelectOneDropDown;\n","import _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  assignOptionListAction,\n  getEvaluatedExpression,\n  getEvaluatedExpressionForSelect,\n  getFieldValue,\n  getOptionList,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../../utils/helpers';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneRadioProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  optionList: object;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  assignOptionListActionCreator: typeof assignOptionListAction;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface Options {\n  label: any;\n  value: string;\n}\n\nclass SelectOneRadio extends React.Component<SelectOneRadioProps> {\n  public render() {\n    const {\n      choices,\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      let resultOptions: any[] = [];\n\n      if (fieldElement.control && fieldElement.control.appearance) {\n        if (/search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)) {\n          const processedStringArray = fieldElement.control.appearance.match(\n            /search\\([^\\)|(]+\\)/i\n          ) || [''];\n\n          resultOptions = this.getProcessedString(processedStringArray[0]);\n        }\n      }\n\n      const childrenArray: any = [];\n      if (fieldElement.children) {\n        fieldElement.children.map(elem => {\n          const elemObj: any = {};\n          const name: string = 'name';\n          const label: string = 'label';\n          elemObj[name] = elem.name;\n          elemObj[label] = elem.label;\n          childrenArray.push(elemObj);\n        });\n      }\n\n      let values: any = [];\n\n      if (\n        fieldElement.control &&\n        fieldElement.control.appearance &&\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\n      ) {\n        values = [];\n        if (fieldValue) {\n          const optionsValueArray: any = [];\n          resultOptions.map(elem => {\n            if (elem.name) {\n              optionsValueArray.push(elem.name);\n            }\n          });\n\n          if (!optionsValueArray.includes(fieldValue)) {\n            this.props.assignFieldValueActionCreator(\n              this.props.fieldParentTreeName + fieldElement.name,\n              ''\n            );\n          }\n        }\n\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            resultOptions\n          );\n        }\n        values = [...resultOptions];\n      } else if (fieldElement.itemset) {\n        const choiceOptions: any = [];\n        values = [];\n        if (choices && choices[fieldElement.itemset.trim()]) {\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\n            if (\n              fieldElement.choice_filter &&\n              this.props.getEvaluatedExpressionSelectorForSelect(\n                fieldElement.choice_filter,\n                fieldParentTreeName + fieldElement.name,\n                elem\n              )\n            ) {\n              const childrenLabel: string = getFieldLabelText(\n                elem,\n                defaultLanguage\n              );\n              choiceOptions.push({ label: childrenLabel, name: elem.name });\n            }\n          });\n\n          if (fieldValue) {\n            const optionsValueArray: any = [];\n            choiceOptions.map((elem: any) => {\n              if (elem.name) {\n                optionsValueArray.push(elem.name);\n              }\n            });\n            if (!optionsValueArray.includes(fieldValue)) {\n              this.props.assignFieldValueActionCreator(\n                this.props.fieldParentTreeName + fieldElement.name,\n                ''\n              );\n            }\n          }\n          if (!_.isEqual(this.props.optionList, { ...choiceOptions })) {\n            this.props.assignOptionListActionCreator(\n              this.props.fieldParentTreeName + fieldElement.name,\n              choiceOptions\n            );\n          }\n          values = [...choiceOptions];\n        }\n      } else {\n        values = [];\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\n          this.props.assignOptionListActionCreator(\n            this.props.fieldParentTreeName + fieldElement.name,\n            childrenArray\n          );\n        }\n        values = [...childrenArray];\n      }\n\n      let flagInline = false;\n      if (fieldElement.control && fieldElement.control.appearance) {\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\n            flagInline = true;\n          }\n        });\n      }\n\n      return (\n        <div>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          <Form key=\"selectOne\">\n            {values.map((elem: any, index: any) => (\n              <FormGroup key={index} check={true} inline={flagInline}>\n                <Label check={true}>\n                  <Input\n                    key={fieldElement.name + '-' + index}\n                    type=\"radio\"\n                    name={fieldElement.name}\n                    value={elem.name}\n                    onChange={this.onChangeHandlerRadio(fieldElement.name)}\n                    readOnly={isReadonly}\n                    checked={elem.name === fieldValue}\n                  />{' '}\n                  {getFieldLabelText(elem, defaultLanguage)}\n                </Label>\n              </FormGroup>\n            ))}\n          </Form>\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </div>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n  /** sets the value of Radio Button field element in store\n   * @param {any} event - the onchange input event\n   * @param {any} fieldName - the input name\n   */\n  private onChangeHandlerRadio = (fieldName: any) => (event: any) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + fieldName,\n      event.target.value || ''\n    );\n  };\n\n  /** converts apeearance text into array and pass them to further process\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\n   */\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\n    const processedStringArray = stringWithSearchKeyWord.match(\n      /\\([^\\)]+\\)/i\n    ) || [''];\n    let params = processedStringArray[0];\n\n    if (params.length > 2) {\n      params = params.substring(1, params.length - 1);\n      const resultArray = params.split(',');\n      let criteriaParams = [...resultArray];\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\n      return this.extractAndFilterOptions(\n        resultArray[0],\n        resultArray[1] || null,\n        criteriaParams || []\n      );\n    }\n    return [];\n  };\n\n  /** generates unique radio button options using CSV\n   * @param {string} csvName - the CSV file name\n   * @param {string | null} criteriaType - criteria to match with previous user input\n   * @param {any} filterCriterias - previous user input collections\n   */\n  private extractAndFilterOptions = (\n    csvName: string,\n    criteriaType: string | null,\n    filterCriterias: any\n  ) => {\n    if (criteriaType) {\n      criteriaType = criteriaType.trim();\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\n    }\n\n    let options: any[] = [];\n    const distinctOptions: any[] = [];\n    const csv: any = this.props.csvList;\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\n    if (csv[csvName]) {\n      const modifiedName = csvName.replace(/'/g, '');\n      options = this.props.csvList[modifiedName] || [];\n    }\n\n    if (criteriaType && criteriaType.trim() === 'matches') {\n      let i = 0;\n      while (i < filterCriterias.length) {\n        let nameOfKey = filterCriterias[i].trim();\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\n        const interConnectedValue = filterCriterias[i + 1];\n        const tempOptions = [...options];\n        let filterResult: any = '';\n        tempOptions.forEach(elm => {\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\n            interConnectedValue,\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\n            elm\n          );\n        });\n        options = options.filter(option => option[nameOfKey] === filterResult);\n        i = i + 2;\n      }\n    }\n    if (options.length !== 0) {\n      let labelColumnName: string = '';\n      let valueColumnName: string = '';\n      if (\n        this.props.fieldElement.children &&\n        this.props.fieldElement.children[0] &&\n        this.props.fieldElement.children[0].name &&\n        this.props.fieldElement.children[0].label\n      ) {\n        labelColumnName = getFieldLabelText(\n          this.props.fieldElement.children[0],\n          this.props.defaultLanguage\n        );\n        valueColumnName = this.props.fieldElement.children[0].name;\n      }\n      options.forEach(elem => {\n        const tmpOpt: any = {};\n        const label: string = 'label';\n        const name: string = 'name';\n        tmpOpt[label] = elem[labelColumnName].trim();\n        tmpOpt[name] = elem[valueColumnName].trim();\n        distinctOptions.push(tmpOpt);\n      });\n      return _.uniqBy(distinctOptions, 'name');\n    }\n    return [];\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  getEvaluatedExpressionSelectorForSelect: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  optionList: object;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const getEvaluatedExpressionSelectorForSelect = (\n    expression: string,\n    fieldTreeName: string,\n    options: any\n  ) =>\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    getEvaluatedExpressionSelectorForSelect,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  assignOptionListActionCreator: assignOptionListAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect SelectOne Radio component to the redux store */\nconst ConnectedSelectOneRadio = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectOneRadio);\n\nexport default ConnectedSelectOneRadio;\n","import * as React from 'react';\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport Dropdown from './Dropdown';\nimport Radio from './Radio';\n\n/** props interface for the SelectOne component */\nexport interface SelectOneProps {\n  choices: any;\n  csvList: any;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  defaultLanguage: string;\n}\n\nclass SelectOne extends React.Component<SelectOneProps> {\n  public render() {\n    const { fieldElement } = this.props;\n    if (shouldComponentBeMinimal(fieldElement)) {\n      return <Dropdown {...this.props} />;\n    }\n    return <Radio {...this.props} />;\n  }\n}\n\nexport default SelectOne;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the text component */\nexport interface TextProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: string;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isPresentInErrorSelector: any;\n  isComponentRender: boolean;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nexport interface TextState {\n  fieldValue: string;\n  isFocused: boolean;\n}\n\nclass Text extends React.Component<TextProps, TextState> {\n  constructor(props: TextProps) {\n    super(props);\n    this.state = { fieldValue: '', isFocused: false };\n  }\n\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      if (fieldElement.bind && fieldElement.bind.calculate) {\n        let calculatedValue: any = '';\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\n          fieldElement.bind.calculate,\n          fieldParentTreeName + fieldElement.name\n        );\n\n        if (calculatedValue !== fieldValue) {\n          this.props.assignFieldValueActionCreator(\n            fieldParentTreeName + fieldElement.name,\n            calculatedValue\n          );\n        }\n\n        return (\n          <FormGroup>\n            <Label>{modifiedFieldLabel}</Label>\n            {isRequired && (\n              <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n            )}\n            <Input\n              type=\"text\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              onBlur={this.onBlurHandler}\n              value={\n                this.state.isFocused\n                  ? this.state.fieldValue || ''\n                  : calculatedValue || ''\n              }\n              readOnly={isReadonly}\n            />\n            {fieldElement.hint && (\n              <Label className=\"hintText\">{hintLabel}</Label>\n            )}\n            {isRequiredViolated && (\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n            )}\n            {isConstraintViolated && (\n              <Label className=\"constraintText\">\n                {modifiedConstraintLabel}\n              </Label>\n            )}\n          </FormGroup>\n        );\n      } else {\n        return (\n          <FormGroup>\n            <Label>{modifiedFieldLabel}</Label>\n            {isRequired && (\n              <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n            )}\n            <Input\n              type=\"text\"\n              name={fieldElement.name}\n              onChange={this.onChangeHandler}\n              onBlur={this.onBlurHandler}\n              value={\n                this.state.isFocused\n                  ? this.state.fieldValue || ''\n                  : fieldValue || ''\n              }\n              readOnly={isReadonly}\n            />\n            {fieldElement.hint && (\n              <Label className=\"hintText\">{hintLabel}</Label>\n            )}\n            {isRequiredViolated && (\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n            )}\n            {isConstraintViolated && (\n              <Label className=\"constraintText\">\n                {modifiedConstraintLabel}\n              </Label>\n            )}\n          </FormGroup>\n        );\n      }\n    } else {\n      if (this.state.isFocused) {\n        this.setState({ ...this.state, isFocused: false });\n      }\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  /** sets the value of field element in store\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\n   */\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: true,\n    });\n  };\n\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.setState({\n      ...this.state,\n      fieldValue: event.currentTarget.value || '',\n      isFocused: false,\n    });\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value || ''\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: string;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect Text component to the redux store */\nconst ConnectedText = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Text);\n\nexport default ConnectedText;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Input, Label } from 'reactstrap';\nimport { Store } from 'redux';\nimport {\n  FieldElement,\n  FieldParentTreeName,\n} from '../../../../components/typeEvalutors/Base';\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\nimport {\n  addErrorInputId,\n  assignFieldValueAction,\n  getEvaluatedExpression,\n  getFieldValue,\n  isPresentInError,\n  removeErrorInputId,\n} from '../../../../store/ducks/formState';\nimport {\n  customizeLabelsWithPreviousInputs,\n  getConstraintLabelText,\n  getFieldLabelText,\n  getHintLabelText,\n  isInputRequired,\n  shouldComponentBeReadOnly,\n  shouldComponentBeRelevant,\n  shouldInputViolatesConstraint,\n} from '../../../../utils/helpers';\n\n/** props interface for the KbTime component */\nexport interface TimeProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n  fieldValue: any;\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n  addErrorInputIdActionCreator: typeof addErrorInputId;\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\n  defaultLanguage: string;\n}\n\nclass KbTime extends React.Component<TimeProps> {\n  public render() {\n    const {\n      fieldElement,\n      fieldParentTreeName,\n      fieldValue,\n      isComponentRender,\n      getEvaluatedExpressionSelector,\n      isPresentInErrorSelector,\n      defaultLanguage,\n    } = this.props;\n    const isRequired = isInputRequired(fieldElement);\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\n    const isConstraintViolated =\n      fieldValue &&\n      fieldValue !== '' &&\n      shouldInputViolatesConstraint(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      fieldLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const constraintLabel = getConstraintLabelText(\n      fieldElement,\n      defaultLanguage\n    );\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\n      getEvaluatedExpressionSelector,\n      constraintLabel,\n      fieldParentTreeName + fieldElement.name\n    );\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\n    if (isComponentRender) {\n      if (fieldValue == null && 'default' in fieldElement) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          fieldElement.default\n        );\n      }\n      const isReadonly = shouldComponentBeReadOnly(\n        fieldElement,\n        fieldParentTreeName,\n        getEvaluatedExpressionSelector\n      );\n      if (\n        (isRequiredViolated || isConstraintViolated) &&\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.addErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      } else if (\n        !isRequiredViolated &&\n        !isConstraintViolated &&\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\n      ) {\n        this.props.removeErrorInputIdActionCreator(\n          fieldParentTreeName + fieldElement.name\n        );\n      }\n\n      return (\n        <FormGroup>\n          <Label>{modifiedFieldLabel}</Label>\n          {isRequired && (\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\n          )}\n          <Input\n            type=\"time\"\n            name={fieldElement.name}\n            onChange={this.onChangeHandler}\n            value={fieldValue || ''}\n            readOnly={isReadonly}\n          />\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\n          {isRequiredViolated && (\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\n          )}\n          {isConstraintViolated && (\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\n          )}\n        </FormGroup>\n      );\n    } else {\n      if (fieldValue != null) {\n        this.props.assignFieldValueActionCreator(\n          fieldParentTreeName + fieldElement.name,\n          null\n        );\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\n          this.props.removeErrorInputIdActionCreator(\n            fieldParentTreeName + fieldElement.name\n          );\n        }\n      }\n      return null;\n    }\n  }\n\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.assignFieldValueActionCreator(\n      this.props.fieldParentTreeName + event.currentTarget.name,\n      event.currentTarget.value !== '' ? event.currentTarget.value : null\n    );\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  fieldValue: any;\n  getEvaluatedExpressionSelector: any;\n  isComponentRender: boolean;\n  isPresentInErrorSelector: any;\n}\n\n/** Interface to describe props from parent */\ninterface ParentProps {\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (\n  state: Partial<Store>,\n  parentProps: ParentProps\n): DispatchedStateProps => {\n  const { fieldElement, fieldParentTreeName } = parentProps;\n  const getEvaluatedExpressionSelector = (\n    expression: string,\n    fieldTreeName: string\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\n    isPresentInError(state, fieldTreeName);\n  const result = {\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\n    getEvaluatedExpressionSelector,\n    isComponentRender: shouldComponentBeRelevant(\n      fieldElement,\n      fieldParentTreeName,\n      getEvaluatedExpressionSelector\n    ),\n    isPresentInErrorSelector,\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  addErrorInputIdActionCreator: addErrorInputId,\n  assignFieldValueActionCreator: assignFieldValueAction,\n  removeErrorInputIdActionCreator: removeErrorInputId,\n};\n\n/** connect KbTime component to the redux store */\nconst ConnectedTime = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(KbTime);\n\nexport default ConnectedTime;\n","import * as React from 'react';\nimport {\n  CALCULATE_FIELD_TYPE,\n  DATE_FIELD_TYPE,\n  DATE_TIME_FIELD_TYPE,\n  DECIMAL_FIELD_TYPE,\n  INTEGER_FIELD_TYPE,\n  NOTE_FIELD_TYPE,\n  PHOTO_FIELD_TYPE,\n  SELECT_ALL_FIELD_TYPE,\n  SELECT_ONE_FIELD_TYPE,\n  TEXT_FIELD_TYPE,\n  TIME_FIELD_TYPE,\n} from '../../../constants';\nimport Calculate from '../../../containers/fields/base/Calculate';\nimport KbDate from '../../../containers/fields/base/Date';\nimport DateTime from '../../../containers/fields/base/Date Time';\nimport Decimal from '../../../containers/fields/base/Decimal';\nimport Integer from '../../../containers/fields/base/Integer';\nimport Note from '../../../containers/fields/base/Note';\nimport Photo from '../../../containers/fields/base/Photo';\nimport SelectAll from '../../../containers/fields/base/Select All';\nimport SelectOne from '../../../containers/fields/base/Select One';\nimport Text from '../../../containers/fields/base/Text';\nimport KbTime from '../../../containers/fields/base/Time';\n\n/** type of fieldParentTreeName */\nexport type FieldParentTreeName = string;\n\n/** interface for bind property */\ninterface BindProperty {\n  calculate?: string;\n  relevant?: string;\n  readonly?: string;\n  appearance?: string;\n  required?: string;\n  constraint?: string;\n  'jr:constraintMsg'?: { [key: string]: string } | string;\n}\n\n/** interface for kobo field element */\nexport interface FieldElement {\n  name: string;\n  type: string;\n  children?: any[];\n  bind?: BindProperty;\n  label?: { [key: string]: string } | string;\n  default?: any;\n  control?: any;\n  hint?: any;\n  itemset?: string;\n  choice_filter?: string;\n}\n\n/** props interface for BaseTypeEvaluator component */\nexport interface BaseTypeEvaluatorProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElement: FieldElement;\n  fieldParentTreeName: FieldParentTreeName;\n}\n\nclass BaseTypeEvaluator extends React.Component<BaseTypeEvaluatorProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage,\n    } = this.props;\n    return this.typeEvaluator(\n      choices,\n      csvList,\n      fieldElement,\n      fieldParentTreeName,\n      defaultLanguage\n    );\n  }\n\n  /** returns jsx components based on field types\n   * @param {any} choices - the choices of form definition\n   * @param {FieldElement} fieldElement - the field element object\n   * @param {FieldParentTreeName} fieldParentTreeName - the field parent hierchical name\n   * @return {React.ReactElement} - jsx base components\n   */\n  private typeEvaluator(\n    choices: any,\n    csvList: any,\n    fieldElement: FieldElement,\n    fieldParentTreeName: FieldParentTreeName,\n    defaultLanguage: string\n  ): React.ReactElement {\n    switch (fieldElement.type) {\n      case TEXT_FIELD_TYPE:\n        return (\n          <Text\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DATE_FIELD_TYPE:\n        return (\n          <KbDate\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case TIME_FIELD_TYPE:\n        return (\n          <KbTime\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DATE_TIME_FIELD_TYPE:\n        return (\n          <DateTime\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case INTEGER_FIELD_TYPE:\n        return (\n          <Integer\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case DECIMAL_FIELD_TYPE:\n        return (\n          <Decimal\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case NOTE_FIELD_TYPE:\n        return (\n          <Note\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case CALCULATE_FIELD_TYPE:\n        return (\n          <Calculate\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      case SELECT_ONE_FIELD_TYPE:\n        return (\n          <SelectOne\n            choices={choices}\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n      case SELECT_ALL_FIELD_TYPE:\n        return (\n          <SelectAll\n            choices={choices}\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n      case PHOTO_FIELD_TYPE:\n        return (\n          <Photo\n            fieldElement={fieldElement}\n            defaultLanguage={defaultLanguage}\n          />\n        );\n      default:\n        return (\n          <div style={{ display: 'none' }}>\n            Other {fieldElement.type} {fieldElement.name}\n          </div>\n        );\n    }\n  }\n}\n\nexport default BaseTypeEvaluator;\n","import * as React from 'react';\nimport { Col, Row } from 'reactstrap';\nimport { GROUP_FIELD_TYPE, REPEAT_FIELD_TYPE } from '../../../constants';\nimport Group from '../../../containers/fields/group/Group';\nimport Repeat from '../../../containers/fields/group/Repeat';\nimport BaseTypeEvaluator, { FieldElement, FieldParentTreeName } from '../Base';\n\n/** props Interface for the GroupTypeEvaluator component */\nexport interface GroupTypeEvaluatorProps {\n  choices: any;\n  csvList: any;\n  defaultLanguage: string;\n  fieldElements: FieldElement[];\n  fieldParentTreeName: string;\n  isAppearanceApplicable: boolean;\n}\n\nclass GroupTypeEvaluator extends React.Component<GroupTypeEvaluatorProps> {\n  public render() {\n    const {\n      choices,\n      csvList,\n      fieldElements,\n      fieldParentTreeName,\n      defaultLanguage,\n      isAppearanceApplicable,\n    } = this.props;\n    return (\n      <Row>\n        {fieldElements.map(fieldElement => (\n          <Col\n            key={'group_' + fieldElement.name}\n            className={'groupTypeEvaluator'}\n            md={this.getAppearanceValue(fieldElement, isAppearanceApplicable)}\n          >\n            {this.typeEvaluator(\n              choices,\n              csvList,\n              fieldElement,\n              fieldParentTreeName,\n              defaultLanguage\n            )}\n          </Col>\n        ))}\n      </Row>\n    );\n  }\n\n  /** returns jsx components based on field types\n   * @param {any} choices - the form choices\n   * @param {FieldElement} fieldElement - the field element object\n   * @param {FieldParentTreeName} - the field parent hierarchical name\n   * @return {React.ReactElement} - jsx group components/ base evaluator component\n   */\n  private typeEvaluator(\n    choices: any,\n    csvList: any,\n    fieldElement: FieldElement,\n    fieldParentTreeName: FieldParentTreeName,\n    defaultLanguage: string\n  ): React.ReactElement {\n    switch (fieldElement.type) {\n      case GROUP_FIELD_TYPE:\n        return (\n          <div>\n            <Group\n              choices={choices}\n              fieldElement={fieldElement}\n              fieldParentTreeName={fieldParentTreeName}\n              defaultLanguage={defaultLanguage}\n              csvList={csvList}\n            />\n          </div>\n        );\n      case REPEAT_FIELD_TYPE:\n        return (\n          <div>\n            <Repeat\n              choices={choices}\n              fieldElement={fieldElement}\n              fieldParentTreeName={fieldParentTreeName}\n              defaultLanguage={defaultLanguage}\n              csvList={csvList}\n            />\n          </div>\n        );\n      default:\n        return (\n          <BaseTypeEvaluator\n            choices={choices}\n            fieldElement={fieldElement}\n            fieldParentTreeName={fieldParentTreeName}\n            defaultLanguage={defaultLanguage}\n            csvList={csvList}\n          />\n        );\n    }\n  }\n\n  private getAppearanceValue = (\n    fieldElement: FieldElement,\n    isAppearanceApplicable: boolean\n  ): number => {\n    if (\n      isAppearanceApplicable &&\n      fieldElement.control &&\n      fieldElement.control.appearance\n    ) {\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\n        const processedStringArray = fieldElement.control.appearance.match(\n          /^w(\\d+)\\b/i\n        );\n        const processedString = processedStringArray[0].replace('w', '');\n        const result = isNaN(processedString)\n          ? 12\n          : parseInt(processedString, 10);\n        return result;\n      }\n    }\n    return 12;\n  };\n}\n\nexport default GroupTypeEvaluator;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { faMinusCircle, faPlusCircle } from '@fortawesome/free-solid-svg-icons';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Container, Row } from 'reactstrap';\nimport { Store } from 'redux';\nimport KbAlert from '../components/Alert';\nimport DropDown from '../components/DropDown';\nimport GroupTypeEvaluator from '../components/typeEvalutors/Group';\nimport {\n  getUserInputFromStore,\n  isErrorsArrayEmpty,\n  resetStoreAction,\n  setUserInputObj,\n} from '../store/ducks/formState';\n\nlibrary.add(faPlusCircle, faMinusCircle);\n\nexport interface AppProps {\n  choices: any;\n  csvList: any;\n  isNoErrors: any;\n  userInputObj: any;\n  userInputJson: any;\n  defaultLanguage: string;\n  formTitle: string;\n  fieldElements: any;\n  setUserInputAction: typeof setUserInputObj;\n  languageOptions: any;\n  resetStoreActionCreator: typeof resetStoreAction;\n  handleSubmit(userInput: any): any;\n}\n\nexport interface AppState {\n  defaultLanguage: string;\n  isSubmissionError: boolean;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n  }\n\n  public componentDidMount() {\n    const { userInputJson, userInputObj } = this.props;\n    this.props.resetStoreActionCreator();\n    if (userInputJson && userInputJson !== userInputObj) {\n      this.props.setUserInputAction(userInputJson);\n    }\n    this.setState({\n      defaultLanguage: this.props.defaultLanguage,\n      isSubmissionError: false,\n    });\n  }\n\n  public handleSelect = (languageName: string) => {\n    this.setState({ defaultLanguage: languageName });\n  };\n\n  public render() {\n    const {\n      csvList,\n      fieldElements,\n      formTitle,\n      languageOptions,\n      choices,\n    } = this.props;\n    const { defaultLanguage } = this.state || this.props;\n\n    const props = {\n      choices,\n      csvList,\n      defaultLanguage,\n      fieldElements,\n      fieldParentTreeName: '',\n      isAppearanceApplicable: false,\n      languageOptions,\n    };\n\n    return (\n      <Container className=\"form-container\">\n        <Row className={'form-title formTitle'}>\n          <Col>\n            <h3 className=\"headerText\">{formTitle}</h3>\n          </Col>\n          <DropDown\n            languages={...languageOptions}\n            onChangeSelect={this.handleSelect}\n            defaultLanguage={defaultLanguage}\n          />\n        </Row>\n        {this.state && this.state.isSubmissionError && (\n          <KbAlert\n            color={'danger'}\n            isOpen={this.state.isSubmissionError}\n            handleToggle={this.toggleStateValue}\n            headerText={'Oh snap! You got an error!'}\n            bodyText={\n              'Please make sure the required fields are not missing and there are no errors'\n            }\n          />\n        )}\n        <Row className=\"formFieldBody\">\n          <Col>\n            <GroupTypeEvaluator {...props} />\n            <Row className=\"welcome-box\">\n              <Col>\n                <Button className=\"btn btn-success\" onClick={this.handleClick}>\n                  Submit\n                </Button>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  // tslint:disable-next-line: variable-name\n  private handleClick = (_event: React.MouseEvent<HTMLButtonElement>) => {\n    const { handleSubmit, isNoErrors, userInputObj } = this.props;\n    if (isNoErrors) {\n      handleSubmit(userInputObj);\n    } else {\n      handleSubmit('Field Violated');\n      this.setState({ isSubmissionError: true });\n      window.scrollTo(0, 0);\n    }\n  };\n\n  private toggleStateValue = () => {\n    this.setState({ isSubmissionError: false });\n  };\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  isNoErrors: any;\n  userInputObj: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    isNoErrors: isErrorsArrayEmpty(state),\n    userInputObj: getUserInputFromStore(state),\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  resetStoreActionCreator: resetStoreAction,\n  setUserInputAction: setUserInputObj,\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedApp = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\nexport default ConnectedApp;\n","import { createStore, Store } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer, { FormState } from './ducks/formState';\n\n/** The initial store */\nconst store: Store & FormState = createStore(reducer, composeWithDevTools());\n\nexport default store;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nexport interface OdkFormRendererProps {\n  csvList: any;\n  defaultLanguage: string;\n  formDefinitionJson: any;\n  languageOptions: any;\n  userInputJson: any;\n  handleSubmit(userInput: any): any;\n}\n\nclass OdkFormRenderer extends React.Component<OdkFormRendererProps> {\n  public render() {\n    const {\n      csvList,\n      defaultLanguage,\n      formDefinitionJson,\n      userInputJson,\n      languageOptions,\n      handleSubmit,\n    } = this.props;\n    const props = {\n      choices: formDefinitionJson.choices || {},\n      csvList,\n      defaultLanguage,\n      fieldElements: formDefinitionJson.children,\n      formTitle: formDefinitionJson.title,\n      handleSubmit,\n      languageOptions,\n      userInputJson,\n    };\n    return (\n      <Provider store={store}>\n        <App {...props} />\n      </Provider>\n    );\n  }\n}\n\nexport default OdkFormRenderer;\n"],"names":["actualExpression","KbAlert","render","this","props","bodyText","React","Alert","color","isOpen","toggle","handleToggle","className","headerText","DropDown","event","onChangeSelect","value","selectedValue","options","languages","map","elem","push","label","_this2","defaultLanguage","Select","multi","placeholder","onChange","onChangeHandler","REQUIRED_FIELD_MSG","currentHierarchicalName","formItemProperty","userInput","tokenizeCharacter","type","input","current","tokenizers","test","undefined","consumedChars","char","TypeError","matchQuote","pattern","tokenizePattern","kbSelected","funcName","params","_paramsTokens","tmp","Array","isArray","forEach","element","kbToday","_params","d","Date","setHours","kbRound","toFixed","parseFloat","kbRegex","RegExp","kbCountSelected","length","kbInt","parseInt","kbCoalesce","kbPosition","tmpName","split","kbSum","paramsTokens","sumValue","sumValuesOverJsn","sum","jsnObj","variableName","i","key","kbConcat","concatStr","kbSubstr","substring","outerScopedVariables","variableValue","tmpUserInput","nodeNames","parseMostClosestScopedVariable","tmpHierchicalName","parent","index","parseDot","path","getIn","parseLiterals","_tmpOutput","tokens","toLowerCase","parseFunction","_output","possibleFunctions","arrayOfParams","arrayOfOriginalTokens","tmpQueue","tmpTokens","pop","tmpVal","parser","parsedFn","parsedVal","functionFn","parseAnd","output","newOutput","parseParen","terminatingTokens","indexOf","parseDivide","parsed","ct","parseMinus","parserFn","consumedTokens","preOutput","preParsed","parseMultiply","preParseFn","Object","prototype","toString","call","isNaN","getTime","NaN","Math","ceil","parsers","j","flagLessThanOrEqual","flagGreaterThanOrEqual","leftOutput","pos","console","log","evaluater","expression","tmpFormItemProperty","tmpCurrentHierarchicalName","tokenized","tokenizerFn","token","tokenizer","getTextFromProperty","property","languageIdentifier","getFieldLabelText","fieldElement","getHintLabelText","hint","customizeLabelsWithPreviousInputs","evaluator","labelText","fieldTreeName","placesOfCustomizationsRequiredList","match","tmpPlace","customizedName","replace","getConstraintLabelText","bind","isInputRequired","isRequired","required","shouldComponentBeRelevant","fieldParentTreeName","evaluateExpression","relevant","name","shouldComponentBeReadOnly","readonly","shouldInputViolatesConstraint","constraint","getModifiedUserInputObject","userInputObj","fieldValue","treeNodes","modifiedObj","getValueFromUserInputObj","shouldComponentBeMinimal","isMinimal","control","appearance","includes","FIELD_VALUE_ASSIGNED","OPTION_LIST_ASSIGNED","REMOVE_FROM_OPTION_LIST_REPEAT","RESET_STORE","ADD_ERROR_INPUT_ID","REMOVE_ERROR_INPUT_ID","EMPTY_GROUP_FIELDS","REMOVE_GROUP_FIELDS_FROM_ERRORS","SET_USER_INPUT_OBJ","assignFieldValueAction","assignOptionListAction","optionList","RemoveFromOptionList","repeatIndex","addErrorInputId","removeErrorInputId","emptyGroupFields","removeGroupFieldsFromErrors","initialState","SeamlessImmutable","errors","reducer","state","action","modifiedUserInputObj","asMutable","deep","stateM","modifiedUserInputObjList","newState","filteredRepeatArray","hasOwnProperty","entries","keyValueOptionListobj","repeatIndexString","String","keyRepeat","getModifiedOptionListForRepeat","modifiedOptionListRepeat","newStateForRepeat","updateIn","arr","concat","filter","elm","mUserInputObj","groupTreeName","keys","objKey","startsWith","emptyGroupedValues","mState","getFieldValue","getOptionList","getEvaluatedExpression","getEvaluatedExpressionForSelect","isPresentInError","isGroupFieldsEmpty","isEmpty","checkGroupedValuesForEmpty","isErrorsIncludeGroupFields","isPresent","fTName","isErrorsArrayEmpty","getUserInputFromStore","Group","choices","csvList","isComponentRender","fieldLabel","isAppearanceApplicable","FormGroup","Label","children","GroupTypeEvaluator","fieldElements","isErrorsIncludeGroupFieldsSelector","removeGroupFieldsFromErrorsActionCreator","isGroupFieldsEmptySelector","emptyGroupFieldsActionCreator","ConnectedGroup","connect","parentProps","getEvaluatedExpressionSelector","SingleRepeat","_event","_this","assignmentHandler","removeHandler","removeOptionHandler","newFieldValue","_elem","unControlFlag","onClick","handleChange","FontAwesomeIcon","icon","Component","ControlledRepeat","assignFieldValueActionCreator","removeOptionListFromActionCreator","_elm","addAnotherRepeat","ConnectedControlledRepeat","UncontrolledRepeat","noOfJrCount","res","removeFromError","_","size","assignOptionListActionCreator","iterate","slice","ConnectedUncontrolledRepeat","Repeat","Calculate","isPresentInErrorSelector","isRequiredViolated","isConstraintViolated","isReadonly","removeErrorInputIdActionCreator","addErrorInputIdActionCreator","calculatedValue","calculate","Input","readOnly","ConnectedCalculate","KbDate","currentTarget","modifiedFieldLabel","modifiedConstraintLabel","hintLabel","defaultValue","toISOString","ConnectedDate","DateTime","DatePicker","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","placeholderText","ConnectedDateTime","Decimal","setState","isFocused","modifiedValue","step","onBlur","onBlurHandler","ConnectedDecimal","Integer","ConnectedInteger","Note","fieldHint","FormText","ConnectedNote","Photo","accept","ConnectedPhoto","SelectAllDropDown","optionObject","tempObjArray","elemObj","isEqual","fieldName","values","selectedValues","stringWithSearchKeyWord","resultArray","criteriaParams","splice","extractAndFilterOptions","csvName","criteriaType","filterCriterias","trim","distinctOptions","finalRes","modifiedName","nameOfKey","interConnectedValue","tempOptions","filterResult","getEvaluatedExpressionSelectorForSelect","option","from","Set","labelColumnName","valueColumnName","tmpOpt","uniqBy","resultOptions","updatedFieldElement","processedStringArray","getProcessedString","setOptionList","itemset","choice_filter","childrenLabel","optionsArray","tmpValueArray","isNotIncluded","optionsValueArray","row","seperatedValues","isMulti","ConnectedSelectAllDropDown","SelectAllRadio","target","checked","newValue","childrenArray","flagInline","tmpStyle","Form","check","inline","onChangeHandlerCheckBox","ConnectedSelectAllRadio","SelectAll","Dropdown","Radio","SelectOneDropDown","ConnectedSelectOneDropDown","SelectOneRadio","choiceOptions","onChangeHandlerRadio","ConnectedSelectOneRadio","SelectOne","Text","ConnectedText","KbTime","ConnectedTime","BaseTypeEvaluator","typeEvaluator","style","display","processedString","Row","Col","md","getAppearanceValue","library","add","faPlusCircle","faMinusCircle","App","languageName","handleSubmit","isNoErrors","isSubmissionError","window","scrollTo","componentDidMount","userInputJson","resetStoreActionCreator","setUserInputAction","languageOptions","Container","formTitle","handleSelect","toggleStateValue","Button","handleClick","ConnectedApp","store","createStore","composeWithDevTools","formDefinitionJson","Provider","title"],"mappings":"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"}