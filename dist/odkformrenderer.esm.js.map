{"version":3,"file":"odkformrenderer.esm.js","sources":["../src/components/Alert/index.tsx","../src/components/DropDown/index.tsx","../src/constants.tsx","../src/utils/compiler.ts","../src/utils/helpers.ts","../src/store/ducks/formState.ts","../src/containers/fields/group/Group/index.tsx","../src/containers/fields/group/Repeat/Single Repeat/index.tsx","../src/containers/fields/group/Repeat/Controlled Repeat/index.tsx","../src/containers/fields/group/Repeat/Uncontrolled Repeat/index.tsx","../src/containers/fields/group/Repeat/index.tsx","../src/containers/fields/base/Calculate/index.tsx","../src/containers/fields/base/Date/index.tsx","../src/containers/fields/base/Date Time/index.tsx","../src/containers/fields/base/Decimal/index.tsx","../src/containers/fields/base/File/FilePreview/FilePreview.tsx","../src/containers/fields/base/File/index.tsx","../src/containers/fields/base/Integer/index.tsx","../src/containers/fields/base/Note/index.tsx","../src/containers/fields/base/Select All/Dropdown/index.tsx","../src/containers/fields/base/Select All/Radio/index.tsx","../src/containers/fields/base/Select All/index.tsx","../src/containers/fields/base/Select One/Dropdown/index.tsx","../src/containers/fields/base/Select One/Radio/index.tsx","../src/containers/fields/base/Select One/index.tsx","../src/containers/fields/base/Text/index.tsx","../src/containers/fields/base/Time/index.tsx","../src/components/typeEvalutors/Base/index.tsx","../src/components/typeEvalutors/Group/index.tsx","../src/App/index.tsx","../src/store/index.tsx","../src/index.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { Alert } from 'reactstrap';\r\n\r\nexport interface KbAlertProps {\r\n  headerText: string;\r\n  bodyText: string;\r\n  handleToggle: any;\r\n  isOpen: boolean;\r\n  color: string;\r\n}\r\n\r\nclass KbAlert extends React.Component<KbAlertProps> {\r\n  public render() {\r\n    const { headerText, bodyText, handleToggle, isOpen, color } = this.props;\r\n    return (\r\n      <Alert color={color} isOpen={isOpen} toggle={handleToggle}>\r\n        <h4 className=\"alert-heading\">{headerText}</h4>\r\n        <p>{bodyText}</p>\r\n      </Alert>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KbAlert;\r\n","import * as React from 'react';\r\nimport Select from 'react-select';\r\n\r\nexport interface DropDownProps {\r\n  languages: any;\r\n  onChangeSelect: any;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass DropDown extends React.Component<DropDownProps> {\r\n  public render() {\r\n    const options: Options[] = [];\r\n    const languageOptions = [...this.props.languages];\r\n    languageOptions.map((elem: any) => {\r\n      options.push({ label: elem.label, value: elem.value });\r\n    });\r\n\r\n    let selectedValue: any;\r\n    options.map(elem => {\r\n      if (elem.value === this.props.defaultLanguage) {\r\n        selectedValue = elem;\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Select\r\n        multi={false}\r\n        options={options}\r\n        className={'col-md-2 dropDown'}\r\n        placeholder=\"Language\"\r\n        onChange={this.onChangeHandler}\r\n        value={selectedValue || ''}\r\n      />\r\n    );\r\n  }\r\n\r\n  /** pass the selected value to the parent class\r\n   * @param {any} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: any) => {\r\n    this.props.onChangeSelect(event.value);\r\n  };\r\n}\r\n\r\nexport default DropDown;\r\n","// Field Types\r\nexport const GROUP_FIELD_TYPE = 'group';\r\nexport type GROUP_FIELD_TYPE = typeof GROUP_FIELD_TYPE;\r\nexport const REPEAT_FIELD_TYPE = 'repeat';\r\nexport type REPEAT_FIELD_TYPE = typeof REPEAT_FIELD_TYPE;\r\nexport const TEXT_FIELD_TYPE = 'text';\r\nexport type TEXT_FIELD_TYPE = typeof TEXT_FIELD_TYPE;\r\nexport const DATE_FIELD_TYPE = 'date';\r\nexport type DATE_FIELD_TYPE = typeof DATE_FIELD_TYPE;\r\nexport const DATE_TIME_FIELD_TYPE = 'dateTime';\r\nexport type TIME_FIELD_TYPE = typeof TIME_FIELD_TYPE;\r\nexport const TIME_FIELD_TYPE = 'time';\r\nexport type DATE_TIME_FIELD_TYPE = typeof DATE_TIME_FIELD_TYPE;\r\nexport const INTEGER_FIELD_TYPE = 'integer';\r\nexport type INTEGER_FIELD_TYPE = typeof INTEGER_FIELD_TYPE;\r\nexport const DECIMAL_FIELD_TYPE = 'decimal';\r\nexport type DECIMAL_FIELD_TYPE = typeof DECIMAL_FIELD_TYPE;\r\nexport const PHOTO_FIELD_TYPE = 'photo';\r\nexport type PHOTO_FIELD_TYPE = typeof PHOTO_FIELD_TYPE;\r\nexport const FILE_FIELD_TYPE = 'file';\r\nexport type FILE_FIELD_TYPE = typeof FILE_FIELD_TYPE;\r\nexport const NOTE_FIELD_TYPE = 'note';\r\nexport type NOTE_FIELD_TYPE = typeof NOTE_FIELD_TYPE;\r\nexport const SELECT_ONE_FIELD_TYPE = 'select one';\r\nexport type SELECT_ONE_FIELD_TYPE = typeof SELECT_ONE_FIELD_TYPE;\r\nexport const SELECT_ALL_FIELD_TYPE = 'select all that apply';\r\nexport type SELECT_ALL_FIELD_TYPE = typeof SELECT_ALL_FIELD_TYPE;\r\nexport const CALCULATE_FIELD_TYPE = 'calculate';\r\nexport type CALCULATE_FIELD_TYPE = typeof CALCULATE_FIELD_TYPE;\r\n\r\n// Required Properties\r\nexport const REQUIRED_FIELD_MSG = 'This field is required';\r\nexport type REQUIRED_FIELD_MSG = typeof REQUIRED_FIELD_MSG;\r\nexport const REQUIRED_SYMBOL = '*';\r\nexport type REQUIRED_SYMBOL = typeof REQUIRED_SYMBOL;\r\n","let actualExpression: string;\r\nlet currentHierarchicalName: string = '';\r\nlet formItemProperty: any = {};\r\nlet userInput: any = {};\r\n\r\n/**\r\n * tokenizeCharacter is a type of util method\r\n * @param {any} type - the type that will be returned if matches\r\n * @param {any} value - the actual value of the tokenize character\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeCharacter(type: any, value: any, input: any, current: any) {\r\n  return value === input[current] ? [1, { type, value }] : [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeParenOpen returns tokenizeReturnObject for character (\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeParenOpen(input: any, current: any) {\r\n  return tokenizeCharacter('paren', '(', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeBrakeOpen returns tokenizeReturnObject for character [\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeBrakeOpen(input: any, current: any) {\r\n  return tokenizeCharacter('brac', '[', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeBrakeClose returns tokenizeReturnObject for character ]\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeBrakeClose(input: any, current: any) {\r\n  return tokenizeCharacter('brac', ']', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeParenClose returns tokenizeReturnObject for character )\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeParenClose(input: any, current: any) {\r\n  return tokenizeCharacter('paren', ')', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeEqual returns tokenizeReturnObject for character =\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeEqual(input: any, current: any) {\r\n  return tokenizeCharacter('equal', '=', input, current);\r\n}\r\n\r\n/**\r\n * tokenizePlus returns tokenizeReturnObject for character +\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizePlus(input: any, current: any) {\r\n  return tokenizeCharacter('plus', '+', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeMinus returns tokenizeReturnObject for character -\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeMinus(input: any, current: any) {\r\n  return tokenizeCharacter('minus', '-', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeMultiply returns tokenizeReturnObject for character *\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeMultiply(input: any, current: any) {\r\n  return tokenizeCharacter('multiply', '*', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeDivide returns tokenizeReturnObject for character /\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeDivide(input: any, current: any) {\r\n  return tokenizeCharacter('divide', '/', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeLessThan returns tokenizeReturnObject for character <\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeLessThan(input: any, current: any) {\r\n  return tokenizeCharacter('lessThan', '<', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeGreaterThan returns tokenizeReturnObject for character >\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeGreaterThan(input: any, current: any) {\r\n  return tokenizeCharacter('greaterThan', '>', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeNot returns tokenizeReturnObject for character !\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeNot(input: any, current: any) {\r\n  if(input[current] == '!') {\r\n    return tokenizeCharacter('not', '!', input, current);\r\n  } else if(input[current] == 'n') {\r\n    if ( (input[current + 1] && input[current + 1] == 'o') && (input[current + 2] && input[current + 2] == 't')) {\r\n      const type = 'not';\r\n      const value = '!';\r\n      return [3, { type, value }]\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeComma returns tokenizeReturnObject for character ,\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeComma(input: any, current: any) {\r\n  return tokenizeCharacter('comma', ',', input, current);\r\n}\r\n\r\n/**\r\n * tokenizeDot returns tokenizeReturnObject for character .\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeDot(input: any, current: any) {\r\n  return tokenizeCharacter('dot', '.', input, current);\r\n}\r\n\r\n/**\r\n * tokenizePattern is a type of util method\r\n * @param {any} type - the type that will be returned if matches\r\n * @param {any} pattern - the pattern that will be matched for tokenization\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizePattern(type: any, pattern: any, input: any, current: any) {\r\n  let char = input[current];\r\n  let consumedChars = 0;\r\n  if (pattern.test(char)) {\r\n    let value = '';\r\n    while (char && pattern.test(char)) {\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    return [consumedChars, { type, value }];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeString returns tokenizeReturnObject for strings. example: 'abc12' , \"test1\", \"afgkj dafgk\"\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns - tokenizeReturnObject\r\n */\r\nfunction tokenizeString(input: any, current: any) {\r\n  if (input[current] === '\"' || input[current] === \"'\") {\r\n    const matchQuote = input[current];\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    consumedChars += 1;\r\n    let char = input[current + consumedChars];\r\n    while (char !== matchQuote) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    return [consumedChars + 1, { type: 'string', value }];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeFunction returns tokenizeReturnObject for functions. Example: round( , substring(\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject; value contains function name if matched\r\n */\r\nfunction tokenizeFunction(input: any, current: any) {\r\n  if (/[a-z_]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (char && /[:a-z0-9_-]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    while (char && /\\s/.test(char)) {\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if(value == 'not') {\r\n      return [0, null];\r\n    }\r\n    if (char && char === '(') {\r\n      return [consumedChars, { type: 'function', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeNumber returns tokenizeReturnObject for discrete numbers. Example: 123 , 02113\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeNumber(input: any, current: any) {\r\n  if (/[0-9]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (/[0-9]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if (char !== '.') {\r\n      return [consumedChars, { type: 'number', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeDecimal returns tokenizeReturnObject for decimal numbers. Example: 12.3 , 0.2113\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeDecimal(input: any, current: any) {\r\n  if (/[0-9.]/i.test(input[current])) {\r\n    let value = '';\r\n    let consumedChars = 0;\r\n    // consumedChars ++;\r\n    let char = input[current + consumedChars];\r\n    while (/[0-9]/i.test(char)) {\r\n      if (char === undefined) {\r\n        throw new TypeError('unterminated string ');\r\n      }\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n    }\r\n    if (char === '.') {\r\n      value += char;\r\n      consumedChars += 1;\r\n      char = input[current + consumedChars];\r\n      if (/[0-9]/i.test(char)) {\r\n        while (/[0-9]/i.test(char)) {\r\n          if (char === undefined) {\r\n            throw new TypeError('unterminated string ');\r\n          }\r\n          value += char;\r\n          consumedChars += 1;\r\n          char = input[current + consumedChars];\r\n        }\r\n        return [consumedChars, { type: 'decimal', value }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeVariable returns tokenizeReturnObject for variables. Example syntax: ${Iamvariable} , #{urvariable}\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeVariable(input: any, current: any) {\r\n  if (input[current] === '#' || input[current] === '$') {\r\n    if (input[current + 1] && input[current + 1] === '{') {\r\n      let value = '';\r\n      let consumedChars = 1;\r\n      consumedChars += 1;\r\n      let char = input[current + consumedChars];\r\n      while (char !== '}') {\r\n        if (char === undefined) {\r\n          throw new TypeError('unterminated string ');\r\n        }\r\n        value += char;\r\n        consumedChars += 1;\r\n        char = input[current + consumedChars];\r\n      }\r\n      return [consumedChars + 1, { type: 'variable', value }];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeOr returns tokenizeReturnObject for syntax or\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeOr(input: any, current: any) {\r\n  if (input[current] === 'o') {\r\n    if (input[current + 1] && input[current + 1] === 'r') {\r\n      if (\r\n        input[current + 2] === undefined ||\r\n        /[0-9\\s]/.test(input[current + 2])\r\n      ) {\r\n        return [2, { type: 'or', value: 'or' }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeIf returns tokenizeReturnObject for word if\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeIf(input: any, current: any) {\r\n  if (input[current] === 'i') {\r\n    if (input[current + 1] && input[current + 1] === 'f') {\r\n      if (\r\n        input[current + 2] === undefined ||\r\n        !/[a-z]i/.test(input[current + 2])\r\n      ) {\r\n        return [2, { type: 'if', value: 'if' }];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeAnd returns tokenizeReturnObject for word and\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeAnd(input: any, current: any) {\r\n  if (input[current] === 'a') {\r\n    if (input[current + 1] && input[current + 1] === 'n') {\r\n      if (input[current + 2] && input[current + 2] === 'd') {\r\n        if (\r\n          input[current + 3] === undefined ||\r\n          /[0-9\\s]/.test(input[current + 3])\r\n        ) {\r\n          return [3, { type: 'and', value: 'and' }];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeDiv returns tokenizeReturnObject of type divide for word div\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeDiv(input: any, current: any) {\r\n  if (input[current] === 'd') {\r\n    if (input[current + 1] && input[current + 1] === 'i') {\r\n      if (input[current + 2] && input[current + 2] === 'v') {\r\n        if (\r\n          input[current + 3] === undefined ||\r\n          /[0-9\\s]/.test(input[current + 3])\r\n        ) {\r\n          return [3, { type: 'divide', value: '/' }];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * tokenizeName returns tokenizeReturnObject of type name for regex [a-z_]+\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject\r\n */\r\nfunction tokenizeName(input: any, current: any) {\r\n  return tokenizePattern('name', /[a-z_]/i, input, current);\r\n}\r\n\r\n/**\r\n * skipWhiteSpace removes space and iterates the position of compiler\r\n * @param {any} input - the input expression, valid cases involve only string type\r\n * @param {any} current - the position of the compiler at the input expression\r\n * @returns tokenizeReturnObject that consumes characters without returning type\r\n */\r\nfunction skipWhiteSpace(input: any, current: any) {\r\n  return /\\s/.test(input[current]) ? [1, null] : [0, null];\r\n}\r\n\r\n/**\r\n * Precedence of the tokenizer methods\r\n * If new tokenizer method is created, please add inside tokenizers with correct precedence\r\n */\r\nconst tokenizers = [\r\n  skipWhiteSpace,\r\n  tokenizeParenOpen,\r\n  tokenizeParenClose,\r\n  tokenizeIf,\r\n  tokenizeOr,\r\n  tokenizeAnd,\r\n  tokenizeVariable,\r\n  tokenizeString,\r\n  tokenizeFunction,\r\n  tokenizeEqual,\r\n  tokenizePlus,\r\n  tokenizeMinus,\r\n  tokenizeMultiply,\r\n  tokenizeDivide,\r\n  tokenizeDiv,\r\n  tokenizeLessThan,\r\n  tokenizeGreaterThan,\r\n  tokenizeNot,\r\n  tokenizeBrakeOpen,\r\n  tokenizeBrakeClose,\r\n  tokenizeDot,\r\n  tokenizeComma,\r\n  tokenizeNumber,\r\n  tokenizeDecimal,\r\n  tokenizeName,\r\n];\r\n\r\n/**\r\n * tokenizer is primary method that takes the expression and convert them to appropiate tokens.\r\n * Throws syntax error if expression is not appropiate or could not be tokenized properly\r\n * @param {string} input - should be of string for valid cases\r\n * @returns array of tokens\r\n */\r\nfunction tokenizer(input: any) {\r\n  let current: number = 0;\r\n  const tokens: any = [];\r\n  while (current < input.length) {\r\n    let tokenized = false;\r\n    tokenizers.forEach(tokenizerFn => {\r\n      if (tokenized) {\r\n        return;\r\n      }\r\n      const [consumedChars, token]: any = tokenizerFn(input, current);\r\n      if (consumedChars !== 0) {\r\n        tokenized = true;\r\n        current += consumedChars;\r\n      }\r\n      if (token) {\r\n        tokens.push(token);\r\n      }\r\n    });\r\n    if (!tokenized) {\r\n      throw new TypeError(\r\n        `I dont know what this character is: ${input[current]}`\r\n      );\r\n    }\r\n  }\r\n  return tokens;\r\n}\r\n\r\n/**\r\n * kbSelected parses the function selected and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSelected(funcName: any, params: any, _paramsTokens: any) {\r\n  if (funcName === 'selected') {\r\n    let tmp = false;\r\n    if (Array.isArray(params[0])) {\r\n      params[0].forEach((element: any) => {\r\n        // tslint:disable-next-line: triple-equals\r\n        tmp = tmp || element == params[1];\r\n      });\r\n      return [true, tmp];\r\n    }\r\n    // tslint:disable-next-line: triple-equals\r\n    return [true, params[0] == params[1]];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbToday parses the function today and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbToday(funcName: any, _params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'today') {\r\n    const d = new Date();\r\n    d.setHours(0, 0, 0, 0);\r\n    return [true, d];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbRound parses the function round and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbRound(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'round') {\r\n    if (params[0] && params[1]) {\r\n      if (typeof params[0] === 'number' && typeof params[1] === 'number') {\r\n        return [true, params[0].toFixed(params[1])];\r\n      }\r\n      if (typeof params[0] === 'string' && typeof params[1] === 'number') {\r\n        return [true, parseFloat(params[0]).toFixed(params[1])];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbRegex parses the function regex and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbRegex(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'regex') {\r\n    const regex = RegExp(params[1]);\r\n    return [true, regex.test(params[0])];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbCountSelected parses the function count-selected and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbCountSelected(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'count-selected') {\r\n    if (params[0] && Array.isArray(params[0])) {\r\n      return [true, params[0].length];\r\n    }\r\n    if (params[0] && typeof params[0] !== 'object') {\r\n      return [true, 1];\r\n    }\r\n    return [true, 0];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbInt parses the function int and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbInt(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'int') {\r\n    if (typeof params[0] === 'string') {\r\n      return [true, parseInt(params[0], 10)];\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbCoalesce parses the function coalesce and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbCoalesce(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'coalesce') {\r\n    if (!params[0] && params[0] !== 0) {\r\n      return [true, params[1]];\r\n    }\r\n    return [true, params[0]];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbPosition parses the function position and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbPosition(funcName: any, _params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'position') {\r\n    if (currentHierarchicalName) {\r\n      const tmpName = currentHierarchicalName.split('/');\r\n      if (tmpName.length > 2) {\r\n        return [true, parseInt(tmpName[tmpName.length - 2], 10) + 1];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * sumValuesOverJsn is a utility method for kbSum\r\n * @param sum - initial sum value\r\n * @param jsnObj - variable name and value in json object\r\n * @param variableName - variable name\r\n * @returns the calculated sum\r\n */\r\nfunction sumValuesOverJsn(sum: any, jsnObj: any, variableName: any) {\r\n  if (Array.isArray(jsnObj)) {\r\n    let i;\r\n    for (i = 0; i < jsnObj.length; i += 1) {\r\n      sum = sumValuesOverJsn(sum, jsnObj[i], variableName);\r\n    }\r\n  } else if (typeof jsnObj === 'object') {\r\n    for (const key in jsnObj) {\r\n      if (typeof jsnObj[key] === 'object') {\r\n        sum = sumValuesOverJsn(sum, jsnObj[key], variableName);\r\n      } else if (key === variableName) {\r\n        if (typeof jsnObj[key] === 'string') {\r\n          sum += parseFloat(jsnObj[key]);\r\n        }\r\n        if (typeof jsnObj[key] === 'number') {\r\n          sum += jsnObj[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\n/**\r\n * kbSum parses the function sum and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSum(funcName: any, _params: any, paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'sum') {\r\n    let sumValue = null;\r\n    if (\r\n      paramsTokens &&\r\n      paramsTokens.length > 0 &&\r\n      paramsTokens[0] &&\r\n      paramsTokens[0].length > 0 &&\r\n      paramsTokens[0][0].type === 'variable'\r\n    ) {\r\n      sumValue = sumValuesOverJsn(0, userInput, paramsTokens[0][0].value);\r\n    }\r\n    return [true, sumValue];\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbConcat parses the function concat and returns functionParseReturnObject\r\n * @param funcName - the function name of the token\r\n * @param params - calculated value of the params tokens\r\n * @param _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbConcat(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'concat') {\r\n    if (params && params.length > 0) {\r\n      let concatStr = '';\r\n      // tslint:disable-next-line: prefer-for-of\r\n      for (let i = 0; i < params.length; i += 1) {\r\n        if (params[i] == null) {\r\n          return [false, null];\r\n        }\r\n        concatStr += params[i];\r\n      }\r\n      return [true, concatStr];\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * kbSubstr parses the function substr and returns functionParseReturnObject\r\n * @param {any} funcName - the function name of the token\r\n * @param {any} params - calculated value of the params tokens\r\n * @param {any} _paramsTokens - orginal param tokens\r\n * @returns functionParseReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction kbSubstr(funcName: any, params: any, _paramsTokens: any) {\r\n  // tslint:disable-next-line: triple-equals\r\n  if (funcName == 'substr') {\r\n    if (params && params.length > 0) {\r\n      if (params[0] && params[1] !== null) {\r\n        if (params[2] !== null && params[2] < params[0].length) {\r\n          const subStr = params[0].substring(params[1], params[2]);\r\n          return [true, subStr];\r\n        }\r\n        return [true, params[0].substring(params[1])];\r\n      }\r\n    }\r\n  }\r\n  return [false, null];\r\n}\r\n\r\n/**\r\n * outerScopedVariables is a utility method that returns same variable values based on outerscope\r\n * @param {any} variableName - variable name\r\n * @param {any} variableValue - variable value upto now\r\n * @param {any} tmpUserInput - variable key-value storage\r\n * @returns parsed scoped variable value\r\n */\r\nfunction outerScopedVariables(\r\n  variableName: any,\r\n  variableValue: any,\r\n  tmpUserInput: any\r\n): any {\r\n  // tslint:disable-next-line: forin\r\n  for (const key in tmpUserInput) {\r\n    const nodeNames = key.split('/');\r\n    const variableNameFromKey = nodeNames[nodeNames.length - 1];\r\n    if (variableNameFromKey === variableName) {\r\n      return tmpUserInput[key];\r\n    }\r\n    if (typeof tmpUserInput[key] === 'object') {\r\n      if (variableValue == null) {\r\n        variableValue = outerScopedVariables(\r\n          variableName,\r\n          variableValue,\r\n          tmpUserInput[key]\r\n        );\r\n      }\r\n    }\r\n  }\r\n  return variableValue;\r\n}\r\n\r\n/**\r\n * parseMostClosestScopedVariable returns the closest scoped parsed variable value\r\n * @param {any} variableName - the variable name\r\n * @returns the parsed variable value\r\n */\r\nfunction parseMostClosestScopedVariable(variableName: any) {\r\n  const tmpHierchicalName = currentHierarchicalName.split('/');\r\n  let i;\r\n  const tmpUserInput = userInput;\r\n  let variableValue = null;\r\n  variableValue = outerScopedVariables(\r\n    variableName,\r\n    variableValue,\r\n    tmpUserInput\r\n  );\r\n  let parent = '';\r\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\r\n    // tslint:disable-next-line: triple-equals\r\n    if (tmpHierchicalName[i] == 'repeat') {\r\n      i += 1;\r\n      const index = parseInt(tmpHierchicalName[i + 1], 10);\r\n      variableValue = outerScopedVariables(\r\n        variableName,\r\n        variableValue,\r\n        tmpUserInput[parent + tmpHierchicalName[i]][index]\r\n      );\r\n      i += 2;\r\n    } else {\r\n      // path.push(parent + tmpHierchicalName[i + 1]);\r\n      parent = parent + tmpHierchicalName[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  return variableValue;\r\n}\r\n\r\n/**\r\n * parseDot parses the dot\r\n * @returns parsed value\r\n */\r\nfunction parseDot() {\r\n  const tmpHierchicalName = currentHierarchicalName.split('/');\r\n  let i;\r\n  let tmpUserInput = userInput;\r\n  let parent = '';\r\n  const path = [];\r\n  for (i = 0; i < tmpHierchicalName.length - 1; ) {\r\n    // tslint:disable-next-line: triple-equals\r\n    if (tmpHierchicalName[i] == 'repeat') {\r\n      i += 1;\r\n      path.push(parent + tmpHierchicalName[i]);\r\n      path.push(parseInt(tmpHierchicalName[i + 1], 10));\r\n      parent = parent + tmpHierchicalName[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      // path.push(parent + tmpHierchicalName[i + 1]);\r\n      parent = parent + tmpHierchicalName[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  path.push(parent + tmpHierchicalName[tmpHierchicalName.length - 1]);\r\n  tmpUserInput = userInput.getIn(path);\r\n  return tmpUserInput;\r\n}\r\n\r\n/**\r\n * parseLiterals parse a set of tokens, starting from number, string, decimal, variable, name, dot\r\n * @param {any} _tmpOutput - the parsed value of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the position of parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseLiterals(_tmpOutput: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'number') {\r\n    return [1, parseInt(tokens[current].value, 10)];\r\n  }\r\n  if (tokens[current].type === 'string') {\r\n    return [1, tokens[current].value];\r\n  }\r\n  if (tokens[current].type === 'decimal') {\r\n    return [1, parseFloat(tokens[current].value)];\r\n  }\r\n  if (tokens[current].type === 'variable') {\r\n    return [1, parseMostClosestScopedVariable(tokens[current].value)];\r\n  }\r\n  if (tokens[current].type === 'name') {\r\n    if (tokens[current].value.toLowerCase() === 'true') {\r\n      return [1, true];\r\n    }\r\n    if (tokens[current].value.toLowerCase() === 'false') {\r\n      return [1, false];\r\n    }\r\n    if (formItemProperty && tokens[current].value in formItemProperty) {\r\n      return [1, formItemProperty[tokens[current].value]];\r\n    }\r\n    return [1, null];\r\n  }\r\n  if (tokens[current].type === 'dot') {\r\n    return [1, parseDot()];\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseFuntion parses the functions present in expression\r\n * @param {any} _output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseFunction(_output: any, tokens: any, current: any) {\r\n  // precedence of functions\r\n  const possibleFunctions = [\r\n    kbSelected,\r\n    kbCountSelected,\r\n    kbToday,\r\n    kbRegex,\r\n    kbInt,\r\n    kbCoalesce,\r\n    kbPosition,\r\n    kbSum,\r\n    kbConcat,\r\n    kbSubstr,\r\n    kbRound,\r\n  ];\r\n  if (tokens[current].type === 'function') {\r\n    const funcName = tokens[current].value;\r\n    const arrayOfParams: any = [];\r\n    const arrayOfOriginalTokens: any = [];\r\n    let i = 1;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      const tmpQueue = [];\r\n      tmpQueue.push(1);\r\n      i += 1;\r\n      let tmpTokens = [];\r\n      while (tokens[current + i] && tmpQueue.length) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === ')'\r\n        ) {\r\n          tmpQueue.pop();\r\n        }\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === '('\r\n        ) {\r\n          tmpQueue.push(1);\r\n        }\r\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\r\n          tmpTokens.pop();\r\n          const tmpVal = parser(null, tmpTokens, 0);\r\n          arrayOfParams.push(tmpVal);\r\n          arrayOfOriginalTokens.push(tmpTokens);\r\n          tmpTokens = [];\r\n        }\r\n        i += 1;\r\n      }\r\n      i -= 1;\r\n\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpTokens.pop();\r\n        const tmpVal = parser(null, tmpTokens, 0);\r\n        arrayOfParams.push(tmpVal);\r\n        arrayOfOriginalTokens.push(tmpTokens);\r\n        let parsedFn = false;\r\n        let parsedVal = null;\r\n        possibleFunctions.forEach(functionFn => {\r\n          if (parsedFn) {\r\n            return;\r\n          }\r\n          [parsedFn, parsedVal] = functionFn(\r\n            funcName,\r\n            arrayOfParams,\r\n            arrayOfOriginalTokens\r\n          );\r\n        });\r\n        if (parsedFn) {\r\n          return [i + 1, parsedVal];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseIf parses the if present in expression\r\n * @param {any} _output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseIf(_output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'if') {\r\n    const arrayOfParams = [];\r\n    let i = 1;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      const tmpQueue = [];\r\n      tmpQueue.push(1);\r\n      i += 1;\r\n      let tmpTokens = [];\r\n      while (tokens[current + i] && tmpQueue.length) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === ')'\r\n        ) {\r\n          tmpQueue.pop();\r\n        }\r\n        if (\r\n          tokens[current + i].type === 'paren' &&\r\n          tokens[current + i].value === '('\r\n        ) {\r\n          tmpQueue.push(1);\r\n        }\r\n        if (tokens[current + i].type === 'comma' && tmpQueue.length === 1) {\r\n          tmpTokens.pop();\r\n          const tmpVal = parser(null, tmpTokens, 0);\r\n          arrayOfParams.push(tmpVal);\r\n          tmpTokens = [];\r\n        }\r\n        i += 1;\r\n      }\r\n      i -= 1;\r\n\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpTokens.pop();\r\n        const tmpVal = parser(null, tmpTokens, 0);\r\n        arrayOfParams.push(tmpVal);\r\n        if (arrayOfParams.length % 2 === 0) {\r\n          let j;\r\n          for (j = 0; j < arrayOfParams.length; j += 2) {\r\n            if (arrayOfParams[j]) {\r\n              return [i + 1, arrayOfParams[j + 1]];\r\n            }\r\n          }\r\n        } else {\r\n          let j;\r\n          for (j = 0; j < arrayOfParams.length - 1; j += 2) {\r\n            if (arrayOfParams[j]) {\r\n              return [i + 1, arrayOfParams[j + 1]];\r\n            }\r\n          }\r\n          return [i + 1, arrayOfParams[arrayOfParams.length - 1]];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseNot parses the not present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseNot(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'not') {\r\n    let tmpTokens;\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal' && output != null) {\r\n      tmpTokens = [];\r\n      i += 1;\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      let newOutput;\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n        // tslint:disable-next-line: triple-equals\r\n        return [i, output != newOutput];\r\n      }\r\n    } else {\r\n      let parsed = false;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      let consumedTokens;\r\n      let newOutput;\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          i += consumedTokens;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [i, !newOutput];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseAnd parses the and present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseAnd(output: any, tokens: any, current: any): any {\r\n  if (tokens[current].type === 'and' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    let newOutput = null;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      let consumedChars;\r\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\r\n      i += consumedChars;\r\n    } else {\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n      }\r\n    }\r\n    if (newOutput != null) {\r\n      newOutput = output && newOutput;\r\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\r\n        let consumedChars = 0;\r\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\r\n        i += consumedChars;\r\n      }\r\n      return [i, newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseOr parses the or present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseOr(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'or' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    let newOutput = null;\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === '('\r\n    ) {\r\n      let consumedChars;\r\n      [consumedChars, newOutput] = parseParen(null, tokens, current + i);\r\n      i += consumedChars;\r\n    } else {\r\n      const terminatingTokens = ['and', 'or'];\r\n      while (\r\n        tokens[current + i] &&\r\n        terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n      ) {\r\n        tmpTokens.push(tokens[current + i]);\r\n        i += 1;\r\n      }\r\n      if (tmpTokens.length) {\r\n        newOutput = parser(null, tmpTokens, 0);\r\n      }\r\n    }\r\n    if (newOutput != null) {\r\n      if (tokens[current + i] && tokens[current + i].type === 'and') {\r\n        let consumedChars = 0;\r\n        [consumedChars, newOutput] = parseAnd(newOutput, tokens, current + i);\r\n        i += consumedChars;\r\n      }\r\n      return [i, output || newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseEqual parses the equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseEqual(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'equal' && output != null) {\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n      // tslint:disable-next-line: triple-equals\r\n      return [i, output == newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseLessThan parses the less than or equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseLessThan(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'lessThan' && output != null) {\r\n    let flagLessThanOrEqual = false;\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal') {\r\n      i += 1;\r\n      flagLessThanOrEqual = true;\r\n    }\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n      if (flagLessThanOrEqual) {\r\n        return [i, output <= newOutput];\r\n      }\r\n      return [i, output < newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseGreaterThan parses the greater than or equal present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseGreaterThan(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'greaterThan' && output != null) {\r\n    let flagGreaterThanOrEqual = false;\r\n    const tmpTokens = [];\r\n    let i = 1;\r\n    if (tokens[current + i].type === 'equal') {\r\n      i += 1;\r\n      flagGreaterThanOrEqual = true;\r\n    }\r\n    const terminatingTokens = ['and', 'or'];\r\n    while (\r\n      tokens[current + i] &&\r\n      terminatingTokens.indexOf(tokens[current + i].type) === -1\r\n    ) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      i += 1;\r\n    }\r\n    let newOutput;\r\n    if (tmpTokens.length) {\r\n      newOutput = parser(null, tmpTokens, 0);\r\n\r\n      if (flagGreaterThanOrEqual) {\r\n        return [i, output >= newOutput];\r\n      }\r\n      return [i, output > newOutput];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseParen parses the paren present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\n// tslint:disable-next-line: variable-name\r\nfunction parseParen(_output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'paren' && tokens[current].value === '(') {\r\n    const tmpQueue = [];\r\n    tmpQueue.push(1);\r\n    let i = 1;\r\n    const tmpTokens = [];\r\n    while (tokens[current + i] && tmpQueue.length) {\r\n      tmpTokens.push(tokens[current + i]);\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === ')'\r\n      ) {\r\n        tmpQueue.pop();\r\n      }\r\n      if (\r\n        tokens[current + i].type === 'paren' &&\r\n        tokens[current + i].value === '('\r\n      ) {\r\n        tmpQueue.push(1);\r\n      }\r\n      i += 1;\r\n    }\r\n    i -= 1;\r\n\r\n    if (\r\n      tokens[current + i].type === 'paren' &&\r\n      tokens[current + i].value === ')'\r\n    ) {\r\n      tmpTokens.pop();\r\n      const tmpVal = parser(null, tmpTokens, 0);\r\n      return [i + 1, tmpVal];\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseDivide parses the divide present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseDivide(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'divide') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n        }\r\n        const precedentParsers = [parseDivide, parseMultiply];\r\n        let preParsed = false;\r\n        let preOutput;\r\n        precedentParsers.forEach(preParseFn => {\r\n          if (preParsed) {\r\n            return;\r\n          }\r\n          if (tokens[current]) {\r\n            [consumedTokens, preOutput] = preParseFn(\r\n              newOutput,\r\n              tokens,\r\n              current\r\n            );\r\n            ct += consumedTokens;\r\n            if (consumedTokens !== 0) {\r\n              preParsed = true;\r\n              newOutput = preOutput;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (newOutput != null) {\r\n          output /= newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseMultiply parses the multiply present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseMultiply(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'multiply') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n        }\r\n        const precedentParsers = [parseDivide, parseMultiply];\r\n        let preParsed = false;\r\n        let preOutput;\r\n        precedentParsers.forEach(preParseFn => {\r\n          if (preParsed) {\r\n            return;\r\n          }\r\n          if (tokens[current]) {\r\n            [consumedTokens, preOutput] = preParseFn(\r\n              newOutput,\r\n              tokens,\r\n              current\r\n            );\r\n            ct += consumedTokens;\r\n            if (consumedTokens !== 0) {\r\n              preParsed = true;\r\n              newOutput = preOutput;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (newOutput != null) {\r\n          output *= newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parsePlus parses the addition present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parsePlus(output: any, tokens: any, current: any) {\r\n  if (output != null && tokens[current].type === 'plus') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'string',\r\n      'minus',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [\r\n        parseLiterals,\r\n        parseMinus,\r\n        parseParen,\r\n        parseFunction,\r\n      ];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let consumedTokens;\r\n        let newOutput: any;\r\n        if (parserFn === parseMinus) {\r\n          [consumedTokens, newOutput] = parserFn(null, tokens, current + 1);\r\n        } else {\r\n          [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        }\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n          const precedentParsers = [parseDivide, parseMultiply];\r\n          let preParsed = false;\r\n          let preOutput;\r\n          precedentParsers.forEach(preParseFn => {\r\n            if (preParsed) {\r\n              return;\r\n            }\r\n            if (tokens[current]) {\r\n              [consumedTokens, preOutput] = preParseFn(\r\n                newOutput,\r\n                tokens,\r\n                current\r\n              );\r\n              ct += consumedTokens;\r\n              if (consumedTokens !== 0) {\r\n                preParsed = true;\r\n                newOutput = preOutput;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (newOutput != null) {\r\n          output += newOutput;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n/**\r\n * parseMinus parses the minus present in expression\r\n * @param {any} output - the parsed output of previous tokens\r\n * @param {any} tokens - the array of tokens\r\n * @param {any} current - the current position of the parser\r\n * @returns parserReturnObject\r\n */\r\nfunction parseMinus(output: any, tokens: any, current: any) {\r\n  if (tokens[current].type === 'minus') {\r\n    const possibleTokens = [\r\n      'number',\r\n      'decimal',\r\n      'paren',\r\n      'variable',\r\n      'function',\r\n    ];\r\n    if (\r\n      current < tokens.length &&\r\n      possibleTokens.indexOf(tokens[current + 1].type) !== -1\r\n    ) {\r\n      let parsed = false;\r\n      let ct: any = null;\r\n      const possibleParsers = [parseLiterals, parseParen, parseFunction];\r\n      possibleParsers.forEach(parserFn => {\r\n        if (parsed) {\r\n          return;\r\n        }\r\n        let [consumedTokens, newOutput] = parserFn(output, tokens, current + 1);\r\n        if (consumedTokens !== 0) {\r\n          parsed = true;\r\n          consumedTokens += 1;\r\n          current += consumedTokens;\r\n          ct = consumedTokens;\r\n          const precedentParsers = [parseDivide, parseMultiply];\r\n          let preParsed = false;\r\n          let preOutput;\r\n          precedentParsers.forEach(preParseFn => {\r\n            if (preParsed) {\r\n              return;\r\n            }\r\n            if (tokens[current]) {\r\n              [consumedTokens, preOutput] = preParseFn(\r\n                newOutput,\r\n                tokens,\r\n                current\r\n              );\r\n              ct += consumedTokens;\r\n              if (consumedTokens !== 0) {\r\n                preParsed = true;\r\n                newOutput = preOutput;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (newOutput) {\r\n          if (output) {\r\n            if (\r\n              Object.prototype.toString.call(newOutput) === '[object Date]' &&\r\n              Object.prototype.toString.call(output) === '[object Date]'\r\n            ) {\r\n              if (!isNaN(output.getTime()) && !isNaN(newOutput.getTime())) {\r\n                output -= newOutput;\r\n                output = Math.ceil(output / (1000 * 60 * 60 * 24));\r\n              } else {\r\n                output = NaN;\r\n              }\r\n            } else if (\r\n              Object.prototype.toString.call(newOutput) === '[object Date]' ||\r\n              Object.prototype.toString.call(output) === '[object Date]'\r\n            ) {\r\n              output = NaN;\r\n            } else if (newOutput === '' || output === '') {\r\n              output = NaN;\r\n            } else {\r\n              output -= newOutput;\r\n            }\r\n          } else {\r\n            if (Object.prototype.toString.call(newOutput) === '[object Date]') {\r\n              output = NaN;\r\n            } else {\r\n              output = -newOutput;\r\n            }\r\n          }\r\n        } else {\r\n          output = NaN;\r\n        }\r\n      });\r\n      if (parsed) {\r\n        if (output === '') {\r\n          output = NaN;\r\n        }\r\n        return [ct, output];\r\n      }\r\n    }\r\n  }\r\n  return [0, null];\r\n}\r\n\r\n// precedence of the parser methods\r\nconst parsers = [\r\n  parseIf,\r\n  parseParen,\r\n  parseLiterals,\r\n  parseDivide,\r\n  parseMultiply,\r\n  parsePlus,\r\n  parseMinus,\r\n  parseLessThan,\r\n  parseGreaterThan,\r\n  parseEqual,\r\n  parseAnd,\r\n  parseOr,\r\n  parseNot,\r\n  parseFunction,\r\n];\r\n\r\n/**\r\n * the main parser that parses the series of tokens generated by the tokenizer.\r\n * Throws syntax error if not parsed\r\n * @param {any} leftOutput - the initial output or output of previous left side tokens\r\n * @param {any} tokens - the set or array of tokens need to be parsed\r\n * @param {any} pos - the start position of the parser\r\n * @returns parsed value of the set of tokens\r\n */\r\nfunction parser(leftOutput: any, tokens: any, pos: any) {\r\n  let current = pos;\r\n  let output = leftOutput;\r\n  while (current < tokens.length) {\r\n    let parsed = false;\r\n    parsers.forEach(parserFn => {\r\n      if (parsed) {\r\n        return;\r\n      }\r\n      const [consumedTokens, newOutput] = parserFn(output, tokens, current);\r\n      if (consumedTokens !== 0) {\r\n        parsed = true;\r\n        current += consumedTokens;\r\n      }\r\n      if (newOutput != null) {\r\n        output = newOutput;\r\n      }\r\n    });\r\n    if (!parsed) {\r\n      // throw new TypeError('syntax error');\r\n      // tslint:disable-next-line: no-console\r\n      // tslint:disable-next-line: no-console\r\n      console.log(actualExpression);\r\n      return null;\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * odk wrapper evaluator, default method that will be exported, parses expressions\r\n * @param {any} expression - expression that needs to be evaluated\r\n * @param {any} tmpUserInput - the variable key-value json, (current user input json)\r\n * @param {any} tmpFormItemProperty - the name key-value json (current option list)\r\n * @param {any} tmpCurrentHierarchicalName - the node at which the evaluater is called\r\n * @returns evaluated value\r\n */\r\nexport default function evaluater(\r\n  expression: string,\r\n  tmpUserInput: any,\r\n  tmpFormItemProperty: any,\r\n  tmpCurrentHierarchicalName: string\r\n) {\r\n  if (!tmpUserInput) {\r\n    tmpUserInput = {};\r\n  }\r\n  currentHierarchicalName = tmpCurrentHierarchicalName;\r\n  actualExpression = expression;\r\n  userInput = tmpUserInput;\r\n  formItemProperty = tmpFormItemProperty;\r\n  return parser(null, tokenizer(expression), 0);\r\n}\r\n","import { FieldElement } from '../components/typeEvalutors/Base';\r\n\r\n/**\r\n * get the text from multilang obj based on language identifier,\r\n * @param {FieldElement} property - field multilang property or string\r\n * @return {string} - text value of the property based on language identifier, empty if not present\r\n */\r\nexport default function getTextFromProperty(\r\n  property: string | { [key: string]: string },\r\n  languageIdentifier: string\r\n): string {\r\n  if (typeof property === 'string') {\r\n    return property || '';\r\n  }\r\n  return property[languageIdentifier] || '';\r\n}\r\n\r\n/**\r\n * get the label text of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field label text\r\n */\r\nexport function getFieldLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.label) {\r\n    return getTextFromProperty(fieldElement.label, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the label hint of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field label text\r\n */\r\nexport function getHintLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.hint) {\r\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the customised label text with previous input of the fieldElement\r\n * @param {any} evaluator - the getEvaluatedExpressionSelector Function\r\n * @param {string} labelText - the current Label Text\r\n * @param {string} fieldTreeName - the field tree name\r\n * @return {string | null} - field label text or null\r\n */\r\nexport function customizeLabelsWithPreviousInputs(\r\n  evaluator: any,\r\n  labelText: string,\r\n  fieldTreeName: string\r\n): string | null {\r\n  if (labelText === null || labelText === undefined) {\r\n    return null;\r\n  }\r\n  const placesOfCustomizationsRequiredList = labelText.match(/\\[(.*?)\\]/g);\r\n\r\n  // to calculate - i.e, [${departure_date_from_bangladesh}]\r\n  if (placesOfCustomizationsRequiredList) {\r\n    placesOfCustomizationsRequiredList.forEach(tmpPlace => {\r\n      tmpPlace = tmpPlace.substring(1, tmpPlace.length - 1);\r\n      const customizedName = evaluator(tmpPlace, fieldTreeName);\r\n      const tmp = '[' + tmpPlace + ']';\r\n      if (customizedName != null && customizedName !== undefined) {\r\n        labelText = labelText.replace(tmp, customizedName);\r\n      } else {\r\n        labelText = labelText.replace(tmp, '');\r\n      }\r\n    });\r\n  } else {\r\n    // to calculate - i.e, ${departure_date_from_bangladesh}\r\n    const matchList = labelText.match(/\\${(.*[^}])[\\}?]$/g);\r\n    if (matchList) {\r\n      matchList.forEach(tmpPlace => {\r\n        const customizedName = evaluator(tmpPlace, fieldTreeName);\r\n        if (customizedName != null && customizedName !== undefined) {\r\n          labelText = labelText.replace(tmpPlace, customizedName);\r\n        } else {\r\n          labelText = labelText.replace(tmpPlace, '');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  return labelText;\r\n}\r\n\r\n/**\r\n * get the hint text of the fieldElement\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - field hint text\r\n */\r\nexport function getFieldHintText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.hint) {\r\n    return getTextFromProperty(fieldElement.hint, languageIdentifier);\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the label text of the fieldElement constraint msg\r\n * @param {FieldElement} fieldElement - the fieldElement Object\r\n * @return {string} - constraint label text\r\n */\r\nexport function getConstraintLabelText(\r\n  fieldElement: FieldElement,\r\n  languageIdentifier: string\r\n) {\r\n  if (fieldElement.bind && fieldElement.bind['jr:constraintMsg']) {\r\n    return getTextFromProperty(\r\n      fieldElement.bind['jr:constraintMsg'],\r\n      languageIdentifier\r\n    );\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * get the boolean result depending on the expression\r\n * @param {string} - required string\r\n * @returns {boolean} - true if required, otherwise false\r\n */\r\nfunction requiredEvaluator(expression: string): boolean {\r\n  if (\r\n    expression.toLowerCase() === 'yes' ||\r\n    expression === '1' ||\r\n    expression.toLowerCase() === 'true'\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * get the boolean result of fieldElement string\r\n * @param fieldElement\r\n * @return {boolean} - boolean value by calculating fieldElement required properties\r\n */\r\nexport function isInputRequired(fieldElement: FieldElement): boolean {\r\n  let isRequired = false;\r\n  if (fieldElement.bind) {\r\n    if (fieldElement.bind.required) {\r\n      if (\r\n        typeof fieldElement.bind.required === 'string' &&\r\n        requiredEvaluator(fieldElement.bind.required)\r\n      ) {\r\n        isRequired = true;\r\n      }\r\n    }\r\n  }\r\n  return isRequired;\r\n}\r\n\r\n/** interface for EvaluateExpression\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {fieldTreeName} - the field Tree name\r\n * @returns {any} - evaluated value\r\n */\r\nexport type EvaluateExpression = (\r\n  expression: string,\r\n  fieldTreeName: string\r\n) => any;\r\n\r\n/** evaluates whether a component be relevant or not\r\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the relevant expression\r\n * @returns {boolean} - true if relevant; otherwise, false;\r\n */\r\nexport function shouldComponentBeRelevant(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.relevant) {\r\n    const isRelevant = evaluateExpression(\r\n      fieldElement.bind.relevant,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isRelevant) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/** evaluates whether a component be readonly or not\r\n * @param {FieldElement} fieldElement - the expression that needs to be evaluated\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the readonly expression\r\n * @returns {boolean} - true if readonly; otherwise, false;\r\n */\r\nexport function shouldComponentBeReadOnly(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.readonly) {\r\n    const isReadOnly = evaluateExpression(\r\n      fieldElement.bind.readonly,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isReadOnly) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** evaluates whether the input violates constraint or not\r\n * @param {FieldElement} fieldElement - the constraint expression\r\n * @param {string} fieldParentTreeName- the field Parent Tree name\r\n * @param {EvaluateExpression} evaluateExpression- an handler to evaluate the expression\r\n * @returns {boolean} - true if violates; otherwise, false;\r\n */\r\nexport function shouldInputViolatesConstraint(\r\n  fieldElement: FieldElement,\r\n  fieldParentTreeName: string,\r\n  evaluateExpression: EvaluateExpression\r\n): boolean {\r\n  if (fieldElement && fieldElement.bind && fieldElement.bind.constraint) {\r\n    const isConstraintViolated = !evaluateExpression(\r\n      fieldElement.bind.constraint,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isConstraintViolated) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** returns the new user input object after assigning value of passed fieldTreeName\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @param {any} fieldValue - the value that needs to be assigned\r\n * @returns {any} - the new user input object after assignment\r\n */\r\nexport function getModifiedUserInputObject(\r\n  userInputObj: any,\r\n  fieldTreeName: string,\r\n  fieldValue: any\r\n): any {\r\n  const treeNodes = fieldTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  modifiedObj[parent + treeNodes[treeNodes.length - 1]] = fieldValue;\r\n  return userInputObj;\r\n}\r\n\r\n/** Returns the filtered option list Array For Repeat property\r\n * @param {any} userInputObj - the current option list object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @param {any} repeatIndex - the repeat index to remove\r\n * @returns {any} - the new user filredred repear array after assignment\r\n */\r\nexport function getModifiedOptionListForRepeat(\r\n  userInputObj: any,\r\n  fieldTreeName: string,\r\n  repeatIndex: number\r\n): any {\r\n  const filteredRepeatArray: any = [];\r\n  const optionListobj: any = userInputObj;\r\n\r\n  Object.entries(optionListobj).forEach(key => {\r\n    const keyNameOptionListobj: any = key[0];\r\n    const keyValueOptionListobj: any = key[1];\r\n    if (keyNameOptionListobj === fieldTreeName) {\r\n      const repeatIndexString: string = String(repeatIndex);\r\n      Object.entries(keyValueOptionListobj).map(keyRepeat => {\r\n        const keyNameRepeatObject: any = keyRepeat[0];\r\n        const keyValueRepeatValue: any = keyRepeat[1];\r\n        if (keyNameRepeatObject !== repeatIndexString) {\r\n          filteredRepeatArray.push(keyValueRepeatValue);\r\n        }\r\n      });\r\n    }\r\n  });\r\n  return filteredRepeatArray;\r\n}\r\n\r\n/** returns the value from the user input object\r\n * @param {any} userInputObj - the user input object\r\n * @param {string} fieldTreeName - the field Tree name\r\n * @returns {any} - the value, present in user input object, of the fieldTreeName\r\n */\r\nexport function getValueFromUserInputObj(\r\n  userInputObj: any,\r\n  fieldTreeName: string\r\n): any {\r\n  const treeNodes = fieldTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  return modifiedObj[parent + treeNodes[treeNodes.length - 1]];\r\n}\r\n\r\n/** evaluates whether the component is minimal or not\r\n * @param {FieldElement} fieldElement - the constraint expression\r\n * @returns {boolean} - true if minimal; otherwise, false;\r\n */\r\nexport function shouldComponentBeMinimal(fieldElement: FieldElement): boolean {\r\n  let isMinimal = false;\r\n  if (fieldElement.control && fieldElement.control.appearance) {\r\n    fieldElement.control.appearance.toString().includes('minimal')\r\n      ? (isMinimal = true)\r\n      : (isMinimal = false);\r\n  }\r\n  return isMinimal;\r\n}\r\n\r\n/** returns the new user input object after emptying the desired grouped values\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} groupTreeName - the group Tree name\r\n * @returns {any} - the new user input object after emptying the grouped values\r\n */\r\nexport function emptyGroupedValues(\r\n  userInputObj: any,\r\n  groupTreeName: string\r\n): any {\r\n  const treeNodes = groupTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  Object.keys(modifiedObj).forEach(objKey => {\r\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\r\n      modifiedObj[objKey] = null;\r\n    }\r\n  });\r\n  return userInputObj;\r\n}\r\n\r\n/** returns whether the grouped values are empty or not\r\n * @param {any} userInputObj - the current user input object\r\n * @param {string} groupTreeName - the group Tree name\r\n * @returns {any} - true if empty; otherwise, false\r\n */\r\nexport function checkGroupedValuesForEmpty(\r\n  userInputObj: any,\r\n  groupTreeName: string\r\n): any {\r\n  const treeNodes = groupTreeName.split('/');\r\n  let i;\r\n  let parent = '';\r\n  let modifiedObj = userInputObj;\r\n  for (i = 0; i < treeNodes.length - 1; ) {\r\n    if (treeNodes[i] === 'repeat') {\r\n      i += 1;\r\n      if (parent + treeNodes[i] in modifiedObj) {\r\n        modifiedObj = modifiedObj[parent + treeNodes[i]];\r\n      } else {\r\n        modifiedObj[parent + treeNodes[i]] = [];\r\n      }\r\n      const index = parseInt(treeNodes[i + 1], 10);\r\n      if (modifiedObj[index]) {\r\n        modifiedObj = modifiedObj[index];\r\n      } else {\r\n        modifiedObj[index] = {};\r\n        modifiedObj = modifiedObj[index];\r\n      }\r\n      parent = parent + treeNodes[i] + '/';\r\n      i += 2;\r\n    } else {\r\n      parent = parent + treeNodes[i + 1] + '/';\r\n      i += 2;\r\n    }\r\n  }\r\n  let isEmpty: boolean = true;\r\n  Object.keys(modifiedObj).forEach(objKey => {\r\n    if (objKey.startsWith(parent + treeNodes[treeNodes.length - 1])) {\r\n      if (\r\n        modifiedObj[objKey] !== null &&\r\n        modifiedObj[objKey] !== undefined &&\r\n        isEmpty\r\n      ) {\r\n        isEmpty = false;\r\n      }\r\n    }\r\n  });\r\n  return isEmpty;\r\n}\r\n","import { AnyAction, Store } from 'redux';\r\nimport SeamlessImmutable from 'seamless-immutable';\r\nimport evaluater from '../../utils/compiler';\r\nimport {\r\n  checkGroupedValuesForEmpty,\r\n  emptyGroupedValues,\r\n  getModifiedOptionListForRepeat,\r\n  getModifiedUserInputObject,\r\n  getValueFromUserInputObj,\r\n} from '../../utils/helpers';\r\n\r\n/** interface for the store state */\r\nexport interface FormState {\r\n  userInput: object;\r\n  errors: string[];\r\n  optionList: object;\r\n  isFormSubmitted: boolean;\r\n  mediaList: object;\r\n}\r\n\r\n// actions\r\n\r\n/** FIELD_VALUE_ASSIGNED action type */\r\nexport const FIELD_VALUE_ASSIGNED = 'odk/reducer/form/FIELD_VALUE_ASSIGNED';\r\n/** OPTION_LIST_ASSIGNED action type */\r\nexport const OPTION_LIST_ASSIGNED = 'odk/reducer/form/OPTION_LIST_ASSIGNED';\r\n/** MEDIA_LIST_ASSIGNED action type */\r\nexport const MEDIA_LIST_ADDED = 'odk/reducer/form/MEDIA_LIST_ADDED';\r\n/** REMOVE_FROM_MEDIA_LIST action type */\r\nexport const REMOVE_FROM_MEDIA_LIST = 'odk/reducer/form/REMOVE_FROM_MEDIA_LIST';\r\n/** REMOVE_FROM_OPTION_LIST action type */\r\nexport const REMOVE_FROM_OPTION_LIST_REPEAT =\r\n  'odk/reducer/form/REMOVE_FROM_OPTION_LIST_REPEAT';\r\n/** RESET_STORE action type */\r\nexport const RESET_STORE = 'odk/reducer/form/RESET_STORE';\r\n/** ADD_ERROR_INPUT_ID action type */\r\nexport const ADD_ERROR_INPUT_ID = 'odk/reducer/form/ADD_ERROR_INPUT_ID';\r\n/** REMOVE_ERROR_INPUT_ID action type */\r\nexport const REMOVE_ERROR_INPUT_ID = 'odk/reducer/form/REMOVE_ERROR_INPUT_ID';\r\n/** EMPTY_GROUP_FIELDS */\r\nexport const EMPTY_GROUP_FIELDS = 'odk/reducer/form/EMPTY_GROUP_FIELDS';\r\n/** REMOVE_GROUP_FIELDS_FROM_ERRORS */\r\nexport const REMOVE_GROUP_FIELDS_FROM_ERRORS =\r\n  'odk/reducer/form/REMOVE_GROUP_FIELDS_FROM_ERRORS';\r\nexport const SET_USER_INPUT_OBJ = 'odk/reducer/form/SET_USER_INPUT_OBJ';\r\nexport const SET_FORM_SUBMIT_STATUS = 'odk/reducer/form/SET_FORM_SUBMIT_STATUS';\r\n\r\n/** interface for ASSIGN_FIELD_VALUE action */\r\nexport interface AssignFieldValueAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  fieldValue: any;\r\n  type: typeof FIELD_VALUE_ASSIGNED;\r\n}\r\n\r\n/** interface for OPTION_LIST_ASSIGNED action */\r\nexport interface AssignOptionListAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  optionList: any;\r\n  type: typeof OPTION_LIST_ASSIGNED;\r\n}\r\n\r\n/** interface for MEDIA_LIST_ADDED action */\r\nexport interface AddMediaListAction extends AnyAction {\r\n  mediaObject: any;\r\n  type: typeof MEDIA_LIST_ADDED;\r\n}\r\n\r\n/** interface for REMOVE_FROM_MEDIA_LIST action */\r\nexport interface RemoveFromMediaListAction extends AnyAction {\r\n  fieldTreeName: string;\r\n  mediaList: any;\r\n  type: typeof REMOVE_FROM_MEDIA_LIST;\r\n}\r\n\r\n/** interface for REMOVE_FROM_OPTION_LIST action */\r\nexport interface RemoveFromOptionList extends AnyAction {\r\n  fieldTreeName: string;\r\n  repeatIndex: number;\r\n  type: typeof REMOVE_FROM_OPTION_LIST_REPEAT;\r\n}\r\n\r\n/** interface for RESET_STORE action */\r\nexport interface ResetStoreAction extends AnyAction {\r\n  type: typeof RESET_STORE;\r\n}\r\n\r\n/** interface for ADD_ERROR_INPUT_ID action */\r\nexport interface AddErrorInputId extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof ADD_ERROR_INPUT_ID;\r\n}\r\n\r\n/** interface for REMOVE_ERROR_INPUT_ID action */\r\nexport interface RemoveErrorInputId extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof REMOVE_ERROR_INPUT_ID;\r\n}\r\n\r\n/** interface for EMPTY_GROUP_FIELDS action */\r\nexport interface EmptyGroupFields extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof EMPTY_GROUP_FIELDS;\r\n}\r\n\r\n/** interface for REMOVE_GROUP_FIELDS_FROM_ERRORS action */\r\nexport interface RemoveGroupFieldsFromErrors extends AnyAction {\r\n  fieldTreeName: string;\r\n  type: typeof REMOVE_GROUP_FIELDS_FROM_ERRORS;\r\n}\r\n\r\n/** interface for SET_USER_INPUT_OBJ action */\r\nexport interface SetUserInputObj extends AnyAction {\r\n  userInputObj: any;\r\n  type: typeof SET_USER_INPUT_OBJ;\r\n}\r\n\r\n/** interface for SET_FORM_SUBMIT_STATUS action */\r\nexport interface SetFormSubmitStatus extends AnyAction {\r\n  isFormSubmitted: boolean;\r\n  type: typeof SET_FORM_SUBMIT_STATUS;\r\n}\r\n\r\n/** Assigns the value to the proper field name\r\n * @param {string} fieldTreeName - the extended field name\r\n * @param {any} fieldValue - the value that will be assigned\r\n * @return {AssignFieldValueAction} - an action to assign value to a field in the redux store\r\n */\r\nexport const assignFieldValueAction = (\r\n  fieldTreeName: string,\r\n  fieldValue: any\r\n): AssignFieldValueAction => ({\r\n  fieldTreeName,\r\n  fieldValue,\r\n  type: FIELD_VALUE_ASSIGNED,\r\n});\r\n\r\n/** Assigns option list to the proper field name\r\n * @param {string} fieldTreeName - the extended field name\r\n * @param {any} optionList - the option list that will be assigned\r\n * @return {AssignOptionListAction} - an action to assign option List to a field in the redux store\r\n */\r\nexport const assignOptionListAction = (\r\n  fieldTreeName: string,\r\n  optionList: any\r\n): AssignOptionListAction => ({\r\n  fieldTreeName,\r\n  optionList,\r\n  type: OPTION_LIST_ASSIGNED,\r\n});\r\n\r\n/** Remove option list from Redux Store\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveFromOptionList} - an action to remove input id for errors\r\n */\r\nexport const RemoveFromOptionList = (\r\n  fieldTreeName: string,\r\n  repeatIndex: number\r\n): RemoveFromOptionList => ({\r\n  fieldTreeName,\r\n  repeatIndex,\r\n  type: REMOVE_FROM_OPTION_LIST_REPEAT,\r\n});\r\n\r\n/** Adds media object to the proper field name\r\n * @param {any} mediaObject - the media object that will be added\r\n * @return {AddMediaListAction} - an action to assign media object to a field in the redux store\r\n */\r\nexport const addMediaListAction = (mediaObject: any): AddMediaListAction => ({\r\n  mediaObject,\r\n  type: MEDIA_LIST_ADDED,\r\n});\r\n\r\n/** Remove a media item in option list from Redux Store\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveFromMediaListAction} - an action to remove media info from redux store\r\n */\r\nexport const removeFromMediaListAction = (\r\n  fieldTreeName: string,\r\n  mediaList: any\r\n): RemoveFromMediaListAction => ({\r\n  fieldTreeName,\r\n  mediaList,\r\n  type: REMOVE_FROM_MEDIA_LIST,\r\n});\r\n\r\n/** Resets the redux store state to initial state\r\n * @return {ResetStoreAction} - an action to reset the redux store state\r\n */\r\nexport const resetStoreAction = (): ResetStoreAction => ({\r\n  type: RESET_STORE,\r\n});\r\n\r\n/** add the field tree name as error id to store in redux store that violates constraints\r\n * @param fieldTreeName - the field tree name\r\n * @returns {AddErrorInputId} - an action to add input id for errors\r\n */\r\nexport const addErrorInputId = (fieldTreeName: string): AddErrorInputId => ({\r\n  fieldTreeName,\r\n  type: ADD_ERROR_INPUT_ID,\r\n});\r\n\r\n/** remove the field tree name as error id to store in redux store that violates constraints\r\n * @param fieldTreeName - the field tree name\r\n * @returns {RemoveErrorInputId} - an action to remove input id for errors\r\n */\r\nexport const removeErrorInputId = (\r\n  fieldTreeName: string\r\n): RemoveErrorInputId => ({\r\n  fieldTreeName,\r\n  type: REMOVE_ERROR_INPUT_ID,\r\n});\r\n\r\n/** empties the values of the fields of the group\r\n * @param fieldTreeName - the group field tree name\r\n * @returns {RemoveErrorInputId} - an action to empty the group field values\r\n */\r\nexport const emptyGroupFields = (fieldTreeName: string): EmptyGroupFields => ({\r\n  fieldTreeName,\r\n  type: EMPTY_GROUP_FIELDS,\r\n});\r\n\r\n/** removes the group field names from store errors obj\r\n * @param {string} fieldTreeName - the group field tree name\r\n * @returns {RemoveGroupFieldsFromErrors} - an action to remove group field names from errors\r\n */\r\nexport const removeGroupFieldsFromErrors = (\r\n  fieldTreeName: string\r\n): RemoveGroupFieldsFromErrors => ({\r\n  fieldTreeName,\r\n  type: REMOVE_GROUP_FIELDS_FROM_ERRORS,\r\n});\r\n\r\n/** sets the user input object to redux store\r\n * @param {any} userInputObj - the user input obj\r\n * @returns {SetUserInputObj} - an action to set user input to redux store\r\n */\r\nexport const setUserInputObj = (userInputObj: any): SetUserInputObj => ({\r\n  type: SET_USER_INPUT_OBJ,\r\n  userInputObj,\r\n});\r\n\r\n/** sets the form submit info to redux store\r\n * @param {boolean} isFormSubmitted - the form submit info variable\r\n * @returns {SetFormSubmitInfo} - an action to set form submit info to redux store\r\n */\r\nexport const setFormSubmitStatus = (\r\n  isFormSubmitted: boolean\r\n): SetFormSubmitStatus => ({\r\n  isFormSubmitted,\r\n  type: SET_FORM_SUBMIT_STATUS,\r\n});\r\n\r\n/** Create type for forms reducer actions */\r\nexport type FormActionTypes =\r\n  | AssignFieldValueAction\r\n  | AssignOptionListAction\r\n  | RemoveFromOptionList\r\n  | AddMediaListAction\r\n  | RemoveFromMediaListAction\r\n  | ResetStoreAction\r\n  | AddErrorInputId\r\n  | RemoveErrorInputId\r\n  | EmptyGroupFields\r\n  | RemoveGroupFieldsFromErrors\r\n  | SetUserInputObj\r\n  | SetFormSubmitStatus\r\n  | AnyAction;\r\n\r\n/** Create an immutable form state */\r\nexport type ImmutableFormState = SeamlessImmutable.ImmutableObject<FormState>;\r\n\r\n/** initial form state */\r\nexport const initialState: ImmutableFormState = SeamlessImmutable({\r\n  errors: [],\r\n  isFormSubmitted: false,\r\n  mediaList: {},\r\n  optionList: {},\r\n  userInput: {},\r\n});\r\n\r\n/** the form reducer function */\r\nexport default function reducer(\r\n  state: ImmutableFormState = initialState,\r\n  action: FormActionTypes\r\n): ImmutableFormState {\r\n  switch (action.type) {\r\n    case FIELD_VALUE_ASSIGNED:\r\n      const modifiedUserInputObj = getModifiedUserInputObject(\r\n        state.getIn(['userInput']).asMutable({ deep: true }),\r\n        action.fieldTreeName,\r\n        action.fieldValue\r\n      );\r\n      const stateM = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({ ...stateM, userInput: modifiedUserInputObj });\r\n\r\n    case OPTION_LIST_ASSIGNED:\r\n      const modifiedUserInputObjList = getModifiedUserInputObject(\r\n        state.getIn(['optionList']).asMutable({ deep: true }),\r\n        action.fieldTreeName,\r\n        action.optionList != null ? { ...action.optionList } : null\r\n      );\r\n      const newState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({\r\n        ...newState,\r\n        optionList: modifiedUserInputObjList,\r\n      });\r\n\r\n    case REMOVE_FROM_OPTION_LIST_REPEAT:\r\n      let filteredRepeatArray: any = [];\r\n      if (\r\n        state\r\n          .getIn(['optionList'])\r\n          .asMutable({ deep: true })\r\n          .hasOwnProperty(action.fieldTreeName)\r\n      ) {\r\n        filteredRepeatArray = [\r\n          ...getModifiedOptionListForRepeat(\r\n            state.getIn(['optionList']).asMutable({ deep: true }),\r\n            action.fieldTreeName,\r\n            action.repeatIndex\r\n          ),\r\n        ];\r\n        const modifiedOptionListRepeat = getModifiedUserInputObject(\r\n          state.getIn(['optionList']).asMutable({ deep: true }),\r\n          action.fieldTreeName,\r\n          { ...filteredRepeatArray }\r\n        );\r\n        const newStateForRepeat = state.asMutable({ deep: true });\r\n        return SeamlessImmutable({\r\n          ...newStateForRepeat,\r\n          optionList: modifiedOptionListRepeat,\r\n        });\r\n      }\r\n      return state;\r\n\r\n    case MEDIA_LIST_ADDED:\r\n      const modifiedMediaList = {\r\n        ...state.getIn(['mediaList']).asMutable({ deep: true }),\r\n        [action.mediaObject.name]: action.mediaObject,\r\n      };\r\n      const newMediaState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({\r\n        ...newMediaState,\r\n        mediaList: modifiedMediaList,\r\n      });\r\n\r\n    case REMOVE_FROM_MEDIA_LIST:\r\n      if (\r\n        state\r\n          .getIn(['mediaList'])\r\n          .asMutable({ deep: true })\r\n          .hasOwnProperty(action.fieldTreeName)\r\n      ) {\r\n        // const tempMediaState = state.asMutable({ deep: true });\r\n        // return SeamlessImmutable({\r\n        //   ...tempMediaState,\r\n        //   mediaList: modifiedMediaObject,\r\n        // });\r\n      }\r\n      return state;\r\n\r\n    case RESET_STORE:\r\n      return initialState;\r\n\r\n    case ADD_ERROR_INPUT_ID:\r\n      if (!state.errors.includes(action.fieldTreeName)) {\r\n        return state.updateIn(['errors'], arr =>\r\n          arr.concat([action.fieldTreeName])\r\n        );\r\n      }\r\n      return state;\r\n\r\n    case REMOVE_ERROR_INPUT_ID:\r\n      if (state.errors.includes(action.fieldTreeName)) {\r\n        return state.updateIn(['errors'], arr =>\r\n          arr.filter(elm => elm !== action.fieldTreeName)\r\n        );\r\n      }\r\n      return state;\r\n\r\n    case EMPTY_GROUP_FIELDS:\r\n      const mUserInputObj = emptyGroupedValues(\r\n        state.getIn(['userInput']).asMutable({ deep: true }),\r\n        action.fieldTreeName\r\n      );\r\n      const mState = state.asMutable({ deep: true });\r\n      return SeamlessImmutable({ ...mState, userInput: mUserInputObj });\r\n\r\n    case REMOVE_GROUP_FIELDS_FROM_ERRORS:\r\n      return state.updateIn(['errors'], arr =>\r\n        arr.filter(elm => !elm.startsWith(action.fieldTreeName))\r\n      );\r\n\r\n    case SET_USER_INPUT_OBJ:\r\n      return SeamlessImmutable({\r\n        ...state,\r\n        userInput: (action as any).userInputObj,\r\n      });\r\n\r\n    case SET_FORM_SUBMIT_STATUS:\r\n      return SeamlessImmutable({\r\n        ...state,\r\n        isFormSubmitted: (action as any).isFormSubmitted,\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// selectors\r\n\r\n/** get the value by their respective element tree name\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} value if the element name is found else null\r\n */\r\nexport function getFieldValue(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return getValueFromUserInputObj(\r\n    (state as any).getIn(['userInput']).asMutable({ deep: true }),\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** get option list by their respective element tree name\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} value if the element name is found else null\r\n */\r\nexport function getOptionList(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return getValueFromUserInputObj(\r\n    (state as any).getIn(['optionList']).asMutable({ deep: true }),\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** get the value of the evaluated expression\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} - the evaluated value or null if syntax error\r\n */\r\nexport function getEvaluatedExpression(\r\n  state: Partial<Store>,\r\n  expression: string,\r\n  fieldTreeName: string\r\n): any {\r\n  return evaluater(expression, (state as any).userInput, null, fieldTreeName);\r\n}\r\n\r\n/** get the value of the evaluated expression for Select One and Select All\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} expression - the expression that needs to be evaluated\r\n * @param {any} options - the options that needs to be evaluated\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {any | null} - the evaluated value or null if syntax error\r\n */\r\nexport function getEvaluatedExpressionForSelect(\r\n  state: Partial<Store>,\r\n  expression: string,\r\n  options: any,\r\n  fieldTreeName: string\r\n): any {\r\n  return evaluater(\r\n    expression,\r\n    (state as any).userInput,\r\n    options,\r\n    fieldTreeName\r\n  );\r\n}\r\n\r\n/** check if the field element is present in the store\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the field\r\n * @return {boolean} true if present; otherwise, false\r\n */\r\nexport function isPresentInError(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return (state as any).errors.includes(fieldTreeName);\r\n}\r\n\r\n/** check if the field elements under group are empty or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the group field\r\n * @return {boolean} true if empty; otherwise, false\r\n */\r\nexport function isGroupFieldsEmpty(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  return checkGroupedValuesForEmpty((state as any).userInput, fieldTreeName);\r\n}\r\n\r\n/** check if the field elements under group are present in errors or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fieldTreeName - the hierchical tree name of the group field\r\n * @return {boolean} true if present; otherwise, false\r\n */\r\nexport function isErrorsIncludeGroupFields(\r\n  state: Partial<Store>,\r\n  fieldTreeName: string\r\n): any {\r\n  let isPresent = false;\r\n  (state as any).errors.forEach((fTName: string) => {\r\n    if (fTName.startsWith(fieldTreeName) && !isPresent) {\r\n      isPresent = true;\r\n    }\r\n  });\r\n  return isPresent;\r\n}\r\n\r\n/** check if the errors array in store empty or not\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} true if empty; otherwise, false\r\n */\r\nexport function isErrorsArrayEmpty(state: Partial<Store>): any {\r\n  return (state as any).errors && (state as any).errors.length ? false : true;\r\n}\r\n\r\n/** get the userInput object from store\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} the current userInputObject\r\n */\r\nexport function getUserInputFromStore(state: Partial<Store>): any {\r\n  return (state as any).getIn(['userInput']).asMutable({ deep: true });\r\n}\r\n\r\n/** get the userInput object from store\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {boolean} the current isFormSubmitted\r\n */\r\nexport function getFormSubmitStatus(state: Partial<Store>): any {\r\n  return (state as any).isFormSubmitted;\r\n}\r\n\r\n/** get the file if present in store\r\n * @param {Partial<Store>} state - the redux store\r\n * @param {string} fileName - the fileName\r\n * @return {any} - the file or null\r\n */\r\nexport function getFileObject(state: Partial<Store>, fileName: string): any {\r\n  const fileObject = (state as any).getIn(['mediaList', fileName]);\r\n  return fileObject ? (state as any).getIn(['mediaList', fileName]) : null;\r\n}\r\n\r\n/** get all the files\r\n * @param {Partial<Store>} state - the redux store\r\n * @return {any} - the files or empty object\r\n */\r\nexport function getAllFileObjects(state: Partial<Store>): any {\r\n  return (state as any).getIn(['mediaList']);\r\n}\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport GroupTypeEvaluator from '../../../../components/typeEvalutors/Group';\r\nimport {\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../utils/helpers';\r\n\r\nexport interface GroupProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n}\r\n\r\nclass Group extends React.Component<GroupProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isComponentRender,\r\n    } = this.props;\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    let isAppearanceApplicable = false;\r\n    if (fieldElement.control && fieldElement.control.appearance) {\r\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n        isAppearanceApplicable = true;\r\n      }\r\n    }\r\n    if (isComponentRender) {\r\n      return (\r\n        <FormGroup>\r\n          <Label className={'groupLabel'}>{fieldLabel}</Label>\r\n          {fieldElement.children && (\r\n            <GroupTypeEvaluator\r\n              choices={choices}\r\n              fieldElements={fieldElement.children}\r\n              fieldParentTreeName={\r\n                fieldParentTreeName + 'group/' + fieldElement.name + '/'\r\n              }\r\n              defaultLanguage={defaultLanguage}\r\n              csvList={csvList}\r\n              isAppearanceApplicable={isAppearanceApplicable}\r\n            />\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (\r\n        this.props.isErrorsIncludeGroupFieldsSelector(\r\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\r\n        )\r\n      ) {\r\n        this.props.removeGroupFieldsFromErrorsActionCreator(\r\n          fieldParentTreeName + 'group/' + fieldElement.name + '/'\r\n        );\r\n      }\r\n      if (\r\n        !this.props.isGroupFieldsEmptySelector(\r\n          fieldParentTreeName + fieldElement.name\r\n        )\r\n      ) {\r\n        this.props.emptyGroupFieldsActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n};\r\n\r\n/** connect Group component to the redux store */\r\nconst ConnectedGroup = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Group);\r\n\r\nexport default ConnectedGroup;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport GroupTypeEvaluator from '../../../../../components/typeEvalutors/Group';\r\n\r\nexport interface SingleRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  defaultLanguage: string;\r\n  repeatIndex: number;\r\n  assignmentHandler: any;\r\n  removeHandler: any;\r\n  removeOptionHandler: any;\r\n  unControlFlag: boolean;\r\n}\r\n\r\nclass SingleRepeat extends React.Component<SingleRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      repeatIndex,\r\n      unControlFlag,\r\n    } = this.props;\r\n    let isAppearanceApplicable = false;\r\n    if (fieldElement.control && fieldElement.control.appearance) {\r\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n        isAppearanceApplicable = true;\r\n      }\r\n    }\r\n    return (\r\n      <div className={'groupFormFieldBody'}>\r\n        {fieldElement.children && (\r\n          <GroupTypeEvaluator\r\n            choices={choices}\r\n            fieldElements={fieldElement.children}\r\n            fieldParentTreeName={\r\n              fieldParentTreeName +\r\n              'repeat/' +\r\n              fieldElement.name +\r\n              '/' +\r\n              repeatIndex +\r\n              '/'\r\n            }\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n            isAppearanceApplicable={isAppearanceApplicable}\r\n          />\r\n        )}\r\n\r\n        {unControlFlag === false ? (\r\n          <div className={'minusIconWrapper'}>\r\n            <span onClick={this.handleChange}>\r\n              <FontAwesomeIcon icon=\"minus-circle\" className={'minusIcon'} />\r\n            </span>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private handleChange = (_event: React.MouseEvent<HTMLDivElement>) => {\r\n    const {\r\n      repeatIndex,\r\n      fieldValue,\r\n      assignmentHandler,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      removeHandler,\r\n      removeOptionHandler,\r\n    } = this.props;\r\n    let newFieldValue: any[] = [...fieldValue];\r\n    newFieldValue = newFieldValue.filter(\r\n      // tslint:disable-next-line: variable-name\r\n      (_elem, index) => index !== repeatIndex\r\n    );\r\n    assignmentHandler(fieldParentTreeName + fieldElement.name, newFieldValue);\r\n    removeHandler(fieldParentTreeName + 'repeat/' + fieldElement.name + '/');\r\n    removeOptionHandler(fieldParentTreeName + fieldElement.name, repeatIndex);\r\n  };\r\n}\r\n\r\nexport default SingleRepeat;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport {\r\n  assignFieldValueAction,\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  RemoveFromOptionList,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../../utils/helpers';\r\nimport SingleRepeat from '.././Single Repeat';\r\n\r\nexport interface ControlledRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldValue: any;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\r\n}\r\n\r\nclass ControlledRepeat extends React.Component<ControlledRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldValue,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isComponentRender,\r\n      assignFieldValueActionCreator,\r\n      removeGroupFieldsFromErrorsActionCreator,\r\n      removeOptionListFromActionCreator,\r\n    } = this.props;\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (!fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          [{}]\r\n        );\r\n      }\r\n\r\n      return (\r\n        <FormGroup className={'groupBody'}>\r\n          <Label>{fieldLabel}</Label>\r\n          {fieldValue &&\r\n            // tslint:disable-next-line: variable-name\r\n            fieldValue.map((_elm: any, index: any) => (\r\n              <div className=\"repeat-fields-body\" key={'repeat' + index}>\r\n                <SingleRepeat\r\n                  choices={choices}\r\n                  defaultLanguage={defaultLanguage}\r\n                  fieldElement={fieldElement}\r\n                  fieldParentTreeName={fieldParentTreeName}\r\n                  fieldValue={fieldValue}\r\n                  repeatIndex={index}\r\n                  assignmentHandler={assignFieldValueActionCreator}\r\n                  removeHandler={removeGroupFieldsFromErrorsActionCreator}\r\n                  removeOptionHandler={removeOptionListFromActionCreator}\r\n                  csvList={csvList}\r\n                  unControlFlag={false}\r\n                />\r\n              </div>\r\n            ))}\r\n          <div>\r\n            <span onClick={this.addAnotherRepeat}>\r\n              <FontAwesomeIcon icon=\"plus-circle\" className={'plusIcon'} />\r\n            </span>\r\n          </div>\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (\r\n        this.props.isErrorsIncludeGroupFieldsSelector(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        )\r\n      ) {\r\n        this.props.removeGroupFieldsFromErrorsActionCreator(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        );\r\n      }\r\n      if (fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private addAnotherRepeat = (_event: React.MouseEvent<HTMLDivElement>) => {\r\n    const { fieldValue, fieldParentTreeName, fieldElement } = this.props;\r\n    const newFieldValue = [...fieldValue];\r\n    newFieldValue.push({});\r\n    this.props.assignFieldValueActionCreator(\r\n      fieldParentTreeName + fieldElement.name,\r\n      newFieldValue\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n  removeOptionListFromActionCreator: RemoveFromOptionList,\r\n};\r\n\r\n/** connect Group component to the redux store */\r\nconst ConnectedControlledRepeat = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ControlledRepeat);\r\n\r\nexport default ConnectedControlledRepeat;\r\n","import _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport {\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  emptyGroupFields,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getOptionList,\r\n  isErrorsIncludeGroupFields,\r\n  isGroupFieldsEmpty,\r\n  RemoveFromOptionList,\r\n  removeGroupFieldsFromErrors,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  getFieldLabelText,\r\n  shouldComponentBeRelevant,\r\n} from '../../../../../utils/helpers';\r\nimport SingleRepeat from '.././Single Repeat';\r\n\r\nexport interface UncontrolledRepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldValue: any;\r\n  fieldParentTreeName: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  optionList: object;\r\n  emptyGroupFieldsActionCreator: typeof emptyGroupFields;\r\n  removeGroupFieldsFromErrorsActionCreator: typeof removeGroupFieldsFromErrors;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  removeOptionListFromActionCreator: typeof RemoveFromOptionList;\r\n}\r\n\r\nclass UncontrolledRepeat extends React.Component<UncontrolledRepeatProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldValue,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isComponentRender,\r\n      optionList,\r\n      assignFieldValueActionCreator,\r\n      removeGroupFieldsFromErrorsActionCreator,\r\n      removeOptionListFromActionCreator,\r\n    } = this.props;\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (!fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      let noOfJrCount: number = 0;\r\n\r\n      if (fieldElement.control) {\r\n        const jrCount: string = 'jr:count';\r\n        const res: any = fieldElement.control[jrCount];\r\n\r\n        if (/^[0-9]*$/i.test(res)) {\r\n          noOfJrCount = parseInt(res, 10);\r\n        } else {\r\n          const value: any = this.props.getEvaluatedExpressionSelector(\r\n            res,\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n          if (value) {\r\n            noOfJrCount = parseInt(value, 10);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length === 0 &&\r\n        noOfJrCount === 0 &&\r\n        this.props.isErrorsIncludeGroupFieldsSelector(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        )\r\n      ) {\r\n        this.props.removeGroupFieldsFromErrorsActionCreator(\r\n          fieldParentTreeName + 'repeat/' + fieldElement.name + '/'\r\n        );\r\n      }\r\n\r\n      if (fieldValue && fieldValue.length > 0 && noOfJrCount === 0) {\r\n        this.removeFromError();\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      if (optionList && _.size(optionList) > noOfJrCount && noOfJrCount === 0) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n          []\r\n        );\r\n      }\r\n\r\n      if (noOfJrCount > 0) {\r\n        const newFieldValue = [...fieldValue];\r\n\r\n        if (fieldValue && fieldValue.length < noOfJrCount) {\r\n          const iterate = noOfJrCount - fieldValue.length;\r\n          for (let j = 0; j < iterate; j++) {\r\n            newFieldValue.push({});\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > noOfJrCount) {\r\n          const iterate = fieldValue.length - noOfJrCount;\r\n          for (let i = 0; i < iterate; i++) {\r\n            newFieldValue.pop();\r\n          }\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            newFieldValue\r\n          );\r\n          this.removeFromError();\r\n        }\r\n\r\n        if (optionList && _.size(optionList) > noOfJrCount) {\r\n          const iterate = _.size(optionList) - noOfJrCount;\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            Array.prototype.slice.call(optionList, iterate)\r\n          );\r\n          this.removeFromError();\r\n        }\r\n\r\n        return (\r\n          <FormGroup className={'groupBodyUnControlled'}>\r\n            <Label>{fieldLabel}</Label>\r\n            {newFieldValue &&\r\n              // tslint:disable-next-line: variable-name\r\n              newFieldValue.map((_elm: any, index: any) => (\r\n                <div className=\"repeat-fields-body\" key={'repeat' + index}>\r\n                  <SingleRepeat\r\n                    choices={choices}\r\n                    defaultLanguage={defaultLanguage}\r\n                    fieldElement={fieldElement}\r\n                    fieldParentTreeName={fieldParentTreeName}\r\n                    fieldValue={fieldValue}\r\n                    repeatIndex={index}\r\n                    assignmentHandler={assignFieldValueActionCreator}\r\n                    removeHandler={removeGroupFieldsFromErrorsActionCreator}\r\n                    removeOptionHandler={removeOptionListFromActionCreator}\r\n                    csvList={csvList}\r\n                    unControlFlag={true}\r\n                  />\r\n                </div>\r\n              ))}\r\n          </FormGroup>\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      this.removeFromError();\r\n      if (fieldValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private removeFromError() {\r\n    if (\r\n      this.props.isErrorsIncludeGroupFieldsSelector(\r\n        this.props.fieldParentTreeName +\r\n          'repeat/' +\r\n          this.props.fieldElement.name +\r\n          '/'\r\n      )\r\n    ) {\r\n      this.props.removeGroupFieldsFromErrorsActionCreator(\r\n        this.props.fieldParentTreeName +\r\n          'repeat/' +\r\n          this.props.fieldElement.name +\r\n          '/'\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isGroupFieldsEmptySelector: any;\r\n  isErrorsIncludeGroupFieldsSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isGroupFieldsEmptySelector = (fieldTreeName: string) =>\r\n    isGroupFieldsEmpty(state, fieldTreeName);\r\n  const isErrorsIncludeGroupFieldsSelector = (fieldTreeName: string) =>\r\n    isErrorsIncludeGroupFields(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isErrorsIncludeGroupFieldsSelector,\r\n    isGroupFieldsEmptySelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  emptyGroupFieldsActionCreator: emptyGroupFields,\r\n  removeGroupFieldsFromErrorsActionCreator: removeGroupFieldsFromErrors,\r\n  removeOptionListFromActionCreator: RemoveFromOptionList,\r\n};\r\n\r\n/** connect Repeat component to the redux store */\r\nconst ConnectedUncontrolledRepeat = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UncontrolledRepeat);\r\n\r\nexport default ConnectedUncontrolledRepeat;\r\n","import * as React from 'react';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport ControlledRepeat from './Controlled Repeat';\r\nimport UncontrolledRepeat from './Uncontrolled Repeat';\r\n\r\n/** props interface for the Repeat component */\r\nexport interface RepeatProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Repeat extends React.Component<RepeatProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (fieldElement.control && fieldElement.control['jr:count']) {\r\n      return <UncontrolledRepeat {...this.props} />;\r\n    }\r\n    return <ControlledRepeat {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default Repeat;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Input } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\n\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the calculate component */\r\nexport interface CalculateProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Calculate extends React.Component<CalculateProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      isPresentInErrorSelector,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      let calculatedValue: any = '';\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (calculatedValue && fieldValue !== calculatedValue) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          calculatedValue\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          <Input\r\n            type=\"hidden\"\r\n            name={fieldElement.name}\r\n            value={calculatedValue || ''}\r\n            readOnly={isReadonly}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Calculate component to the redux store */\r\nconst ConnectedCalculate = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Calculate);\r\n\r\nexport default ConnectedCalculate;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the KbDate component */\r\nexport interface DateProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass KbDate extends React.Component<DateProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      let defaultValue: string = '';\r\n      if (fieldValue && fieldValue !== '') {\r\n        const modifiedDate = new Date(fieldValue);\r\n        defaultValue = modifiedDate.toISOString().slice(0, 10);\r\n      }\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"date\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            value={defaultValue}\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? new Date(event.currentTarget.value)\r\n        : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect KbDate component to the redux store */\r\nconst ConnectedDate = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(KbDate);\r\n\r\nexport default ConnectedDate;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n/** props interface for the date Time component */\r\nexport interface DateTimeProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass DateTime extends React.Component<DateTimeProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      let modifiedDate: any = null;\r\n      if (fieldValue) {\r\n        modifiedDate = new Date(fieldValue);\r\n        const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\r\n        modifiedDate.setHours(modifiedDate.getHours() - timeZoneOffset);\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <br />\r\n          <DatePicker\r\n            name={fieldElement.name}\r\n            selected={fieldValue ? modifiedDate : null}\r\n            onChange={this.handleChange(fieldElement.name)}\r\n            showTimeSelect={true}\r\n            timeFormat=\"h:m aa\"\r\n            timeIntervals={15}\r\n            timeCaption=\"time\"\r\n            dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n            placeholderText=\"mm/dd/yyyy h:m aa\"\r\n            className=\"form-control\"\r\n            readOnly={isReadonly}\r\n          />\r\n          <br />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private handleChange = (name: any) => (value: any) => {\r\n    const modifiedDate: any = new Date(value);\r\n    const timeZoneOffset = modifiedDate.getTimezoneOffset() / 60;\r\n    modifiedDate.setHours(modifiedDate.getHours() + timeZoneOffset);\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + name,\r\n      value !== '' ? modifiedDate : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Date Time component to the redux store */\r\nconst ConnectedDateTime = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DateTime);\r\n\r\nexport default ConnectedDateTime;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the decimal component */\r\nexport interface DecimalProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface DecimalState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\n\r\nclass Decimal extends React.Component<DecimalProps, DecimalState> {\r\n  constructor(props: DecimalProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated =\r\n      isRequired &&\r\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\r\n    const isConstraintViolated =\r\n      fieldValue !== '' &&\r\n      fieldValue !== null &&\r\n      fieldValue !== undefined &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          parseFloat(this.props.fieldValue)\r\n        );\r\n      }\r\n\r\n      let modifiedValue: any;\r\n      {\r\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (fieldValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n        modifiedValue = calculatedValue;\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"number\"\r\n            step=\"any\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            onBlur={this.onBlurHandler}\r\n            value={\r\n              this.state.isFocused\r\n                ? this.state.fieldValue || ''\r\n                : modifiedValue || ''\r\n            }\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? parseFloat(event.currentTarget.value)\r\n        : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Decimal component to the redux store */\r\nconst ConnectedDecimal = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Decimal);\r\n\r\nexport default ConnectedDecimal;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  assignFieldValueAction,\r\n  getFileObject,\r\n} from '../../../../../store/ducks/formState';\r\n\r\ninterface FilePreviewProps {\r\n  fieldName: string;\r\n  fieldValue: any;\r\n  fileObject: any;\r\n  assignFieldValueActionCreator: any;\r\n}\r\n\r\nclass FilePreview extends React.Component<FilePreviewProps> {\r\n  public render() {\r\n    const { fieldName, fieldValue, assignFieldValueActionCreator } = this.props;\r\n    const removeHandler = () => {\r\n      assignFieldValueActionCreator(fieldName, null);\r\n    };\r\n    return (\r\n      <>\r\n        <p className=\"text-muted\">\r\n          Uploaded File Name: <strong className=\"text-primary\"> {fieldValue} </strong>\r\n        </p>\r\n        <Button size=\"sm\" color=\"danger\" onClick={removeHandler}>\r\n          Remove File\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fileObject: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldName: string;\r\n  fieldValue: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldValue } = parentProps;\r\n  const result = {\r\n    fileObject: getFileObject(state, fieldValue),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n};\r\n\r\n/** connect FilePreview component to the redux store */\r\nconst ConnectedFilePreview = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FilePreview);\r\n\r\nexport default ConnectedFilePreview;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport { PHOTO_FIELD_TYPE } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  addMediaListAction,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\nimport FilePreview from './FilePreview/FilePreview';\r\n\r\n/** props interface for the file component */\r\nexport interface FileProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  addMediaListActionCreator: typeof addMediaListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass File extends React.Component<FileProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          {fieldValue ? (\r\n            <FilePreview\r\n              fieldName={fieldParentTreeName + fieldElement.name}\r\n              fieldValue={fieldValue}\r\n            />\r\n          ) : fieldElement.type === PHOTO_FIELD_TYPE ? (\r\n            <Input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              readOnly={isReadonly}\r\n            />\r\n          ) : (\r\n            <Input\r\n              type=\"file\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              readOnly={isReadonly}\r\n            />\r\n          )}\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: any) => {\r\n    if (event.target.files[0]) {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + event.target.name,\r\n        event.target.files[0].name\r\n      );\r\n      this.props.addMediaListActionCreator(event.target.files[0]);\r\n    } else {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + event.target.name,\r\n        null\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  addMediaListActionCreator: addMediaListAction,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect File component to the redux store */\r\nconst ConnectedFile = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(File);\r\n\r\nexport default ConnectedFile;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the integer component */\r\nexport interface IntegerProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\nexport interface IntegerState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\nclass Integer extends React.Component<IntegerProps, IntegerState> {\r\n  constructor(props: IntegerProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated =\r\n      isRequired &&\r\n      (fieldValue === null || fieldValue === '' || fieldValue === undefined);\r\n\r\n    const isConstraintViolated =\r\n      fieldValue !== '' &&\r\n      fieldValue !== null &&\r\n      fieldValue !== undefined &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel =\r\n      customizeLabelsWithPreviousInputs(\r\n        getEvaluatedExpressionSelector,\r\n        constraintLabel,\r\n        fieldParentTreeName + fieldElement.name\r\n      ) || '';\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          parseInt(this.props.fieldValue, 10)\r\n        );\r\n      }\r\n\r\n      let modifiedValue: any;\r\n      {\r\n        fieldValue === 0 ? (modifiedValue = '0') : (modifiedValue = fieldValue);\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (fieldValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n        modifiedValue = calculatedValue;\r\n      }\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"number\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            onBlur={this.onBlurHandler}\r\n            value={\r\n              this.state.isFocused\r\n                ? this.state.fieldValue || ''\r\n                : modifiedValue || ''\r\n            }\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== ''\r\n        ? parseInt(event.currentTarget.value, 10)\r\n        : null\r\n    );\r\n  };\r\n}\r\n/** connect the component to the store */\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n/** connect Integer component to the redux store */\r\nconst ConnectedInteger = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Integer);\r\nexport default ConnectedInteger;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, FormText, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the text component */\r\nexport interface NoteProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  isPresentInErrorSelector: any;\r\n  isComponentRender: boolean;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass Note extends React.Component<NoteProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const fieldHint = getHintLabelText(fieldElement, defaultLanguage);\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n      return (\r\n        <FormGroup>\r\n          <Label>{fieldLabel}</Label>\r\n          {isRequired && (\r\n            <Label className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</Label>\r\n          )}\r\n          {fieldElement.hint && (\r\n            <FormText className=\"hintText\">{fieldHint}</FormText>\r\n          )}\r\n\r\n          {isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Note component to the redux store */\r\nconst ConnectedNote = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Note);\r\n\r\nexport default ConnectedNote;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from 'react-select';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectAll Dropdown component */\r\nexport interface SelectAllDropDownProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectAllDropDown extends React.Component<SelectAllDropDownProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== [] &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      const options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n        this.setOptionList(resultOptions);\r\n      } else if (fieldElement.itemset) {\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n\r\n          const optionsArray: any = [];\r\n          if (options) {\r\n            options.map(elem => {\r\n              const elemObj: any = {};\r\n              const name: string = 'name';\r\n              const label: string = 'label';\r\n              elemObj[name] = elem.value;\r\n              elemObj[label] = elem.label;\r\n              optionsArray.push(elemObj);\r\n            });\r\n          }\r\n          this.setOptionList(optionsArray);\r\n        }\r\n      } else {\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem => {\r\n            const childrenLabel: string = getFieldLabelText(\r\n              elem,\r\n              defaultLanguage\r\n            );\r\n\r\n            options.push({ label: childrenLabel, value: elem.name });\r\n          });\r\n          this.setOptionList(fieldElement.children);\r\n        }\r\n      }\r\n\r\n      const tmpValueArray: any = [];\r\n      let isNotIncluded: boolean = false;\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        const optionsValueArray: any = [];\r\n        options.map(elem => {\r\n          if (elem.value) {\r\n            optionsValueArray.push(elem.value);\r\n          }\r\n        });\r\n\r\n        for (const row of fieldValue) {\r\n          if (!optionsValueArray.includes(row)) {\r\n            isNotIncluded = true;\r\n          } else {\r\n            tmpValueArray.push(row);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n        this.props.assignFieldValueActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          tmpValueArray || []\r\n        );\r\n      }\r\n\r\n      const selectedValues: any[] = [];\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        options.map(elem => {\r\n          for (const row of fieldValue) {\r\n            if (elem.value === row) {\r\n              selectedValues.push(elem);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        const seperatedValues: string[] = fieldValue.split(' ');\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          seperatedValues\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <div key={fieldElement.name} className=\"selectAllDropDown\">\r\n            <Select\r\n              isMulti={true}\r\n              name={fieldElement.name}\r\n              options={options}\r\n              onChange={this.onChangeHandler(fieldElement.name)}\r\n              value={selectedValues || []}\r\n            />\r\n          </div>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      if (this.props.optionList != null) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** Sets the option list to the Redux Store\r\n   * @param {any} optionObject - the option object to be processed\r\n   */\r\n  private setOptionList = (optionObject: any) => {\r\n    const tempObjArray: any = [];\r\n    optionObject.map((elem: { name: any; label: any }) => {\r\n      const elemObj: any = {};\r\n      const name: string = 'name';\r\n      const label: string = 'label';\r\n      elemObj[name] = elem.name;\r\n      elemObj[label] = elem.label;\r\n      tempObjArray.push(elemObj);\r\n    });\r\n\r\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\r\n      this.props.assignOptionListActionCreator(\r\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n        tempObjArray\r\n      );\r\n    }\r\n  };\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} values - the onchange input values\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandler = (fieldName: any) => (values: any) => {\r\n    const selectedValues: any = [];\r\n    let i = 0;\r\n    if (values && values.length > 0) {\r\n      values.map(() => {\r\n        if (!selectedValues.includes(values[i].value)) {\r\n          selectedValues.push(values[i].value);\r\n        }\r\n        i++;\r\n      });\r\n\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + fieldName,\r\n        selectedValues\r\n      );\r\n    } else {\r\n      this.props.assignFieldValueActionCreator(\r\n        this.props.fieldParentTreeName + fieldName,\r\n        null\r\n      );\r\n    }\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const finalRes: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n\r\n        let filterResult: any = [];\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n\r\n        let j = 0;\r\n        filterResult.map(() => {\r\n          options.map(option => {\r\n            if (option[nameOfKey] === filterResult[j]) {\r\n              finalRes.push(option);\r\n            }\r\n          });\r\n          j = j + 1;\r\n        });\r\n\r\n        i = i + 2;\r\n      }\r\n\r\n      options = [...Array.from(new Set(finalRes))];\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string[];\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Dropdown component to the redux store */\r\nconst ConnectedSelectAllDropDown = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectAllDropDown);\r\n\r\nexport default ConnectedSelectAllDropDown;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectAll Radio component */\r\nexport interface SelectAllRadioProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n  optionList: object;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectAllRadio extends React.Component<SelectAllRadioProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === []);\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== [] &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      let options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      const childrenArray: any = [];\r\n      if (fieldElement.children) {\r\n        fieldElement.children.map(elem => {\r\n          const elemObj: any = {};\r\n          const name: string = 'name';\r\n          const label: string = 'label';\r\n          elemObj[name] = elem.name;\r\n          elemObj[label] = elem.label;\r\n          childrenArray.push(elemObj);\r\n        });\r\n      }\r\n\r\n      let values: any = [];\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        values = [];\r\n        options = [];\r\n        const tmpValueArray: any = [];\r\n        let isNotIncluded: boolean = false;\r\n\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n\r\n        if (fieldValue && fieldValue.length > 0) {\r\n          const optionsValueArray: any = [];\r\n          options.map(elem => {\r\n            if (elem.value) {\r\n              optionsValueArray.push(elem.value);\r\n            }\r\n          });\r\n\r\n          for (const row of fieldValue) {\r\n            if (!optionsValueArray.includes(row)) {\r\n              isNotIncluded = true;\r\n            } else {\r\n              tmpValueArray.push(row);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            tmpValueArray || []\r\n          );\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            resultOptions\r\n          );\r\n        }\r\n        values = [...resultOptions];\r\n      } else if (fieldElement.itemset) {\r\n        values = [];\r\n        options = [];\r\n        const tmpValueArray: any = [];\r\n        const optionsArray: any = [];\r\n        let isNotIncluded: boolean = false;\r\n\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0) {\r\n          const optionsValueArray: any = [];\r\n          options.map((elem: any) => {\r\n            if (elem.value) {\r\n              optionsValueArray.push(elem.value);\r\n            }\r\n          });\r\n\r\n          for (const row of fieldValue) {\r\n            if (!optionsValueArray.includes(row)) {\r\n              isNotIncluded = true;\r\n            } else {\r\n              tmpValueArray.push(row);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (fieldValue && fieldValue.length > 0 && isNotIncluded) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            tmpValueArray || []\r\n          );\r\n        }\r\n\r\n        if (options) {\r\n          options.map(elem => {\r\n            const elemObj: any = {};\r\n            const name: string = 'name';\r\n            const label: string = 'label';\r\n            elemObj[name] = elem.value;\r\n            elemObj[label] = elem.label;\r\n            optionsArray.push(elemObj);\r\n          });\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...optionsArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            optionsArray\r\n          );\r\n        }\r\n\r\n        values = [...optionsArray];\r\n      } else {\r\n        values = [];\r\n        options = [];\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem =>\r\n            options.push({ label: elem.label, value: elem.name })\r\n          );\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            childrenArray\r\n          );\r\n        }\r\n        values = [...childrenArray];\r\n      }\r\n\r\n      const selectedValues: any[] = [];\r\n      if (fieldValue && fieldValue.length > 0) {\r\n        options.map(elem => {\r\n          for (const row of fieldValue) {\r\n            if (elem.value === row) {\r\n              selectedValues.push(elem.value);\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      let flagInline = false;\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\r\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\r\n            flagInline = true;\r\n          }\r\n        });\r\n      }\r\n\r\n      if (typeof this.props.fieldValue === 'string') {\r\n        const seperatedValues: string[] = fieldValue.split(' ');\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          seperatedValues\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <div>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Form key=\"selectAll\">\r\n            {values.map((elem: any, index: any) => (\r\n              <FormGroup key={index} check={true} inline={flagInline}>\r\n                <Label check={true}>\r\n                  <Input\r\n                    key={fieldElement.name + '-' + index}\r\n                    type=\"checkbox\"\r\n                    name={fieldElement.name}\r\n                    value={elem.name || []}\r\n                    onChange={this.onChangeHandlerCheckBox}\r\n                    readOnly={isReadonly}\r\n                    checked={selectedValues.includes(elem.name)}\r\n                  />{' '}\r\n                  {getFieldLabelText(elem, defaultLanguage)}\r\n                </Label>\r\n              </FormGroup>\r\n            ))}\r\n          </Form>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n\r\n      if (this.props.optionList != null) {\r\n        this.props.assignOptionListActionCreator(\r\n          this.props.fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n      }\r\n\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} event - the onchange event\r\n   */\r\n\r\n  private onChangeHandlerCheckBox = (event: any) => {\r\n    const { fieldValue, fieldElement, fieldParentTreeName } = this.props;\r\n    const fieldName = fieldParentTreeName + fieldElement.name;\r\n    if (event.target.checked) {\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length > 0 &&\r\n        !fieldValue.includes(event.target.value)\r\n      ) {\r\n        this.props.assignFieldValueActionCreator(fieldName, [\r\n          ...fieldValue,\r\n          event.target.value,\r\n        ]);\r\n      } else {\r\n        this.props.assignFieldValueActionCreator(fieldName, [\r\n          event.target.value,\r\n        ]);\r\n      }\r\n    } else {\r\n      if (\r\n        fieldValue &&\r\n        fieldValue.length > 0 &&\r\n        fieldValue.includes(event.target.value)\r\n      ) {\r\n        const newValue = fieldValue.filter(\r\n          (elm: any) => elm !== event.target.value\r\n        );\r\n\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldName,\r\n          newValue.length ? newValue : null\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const finalRes: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n\r\n        let filterResult: any = [];\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n\r\n        let j = 0;\r\n        filterResult.map(() => {\r\n          options.map(option => {\r\n            if (option[nameOfKey] === filterResult[j]) {\r\n              finalRes.push(option);\r\n            }\r\n          });\r\n          j = j + 1;\r\n        });\r\n\r\n        i = i + 2;\r\n      }\r\n\r\n      options = [...Array.from(new Set(finalRes))];\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string[];\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Radio component to the redux store */\r\nconst ConnectedSelectAllRadio = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectAllRadio);\r\n\r\nexport default ConnectedSelectAllRadio;\r\n","import * as React from 'react';\r\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport Dropdown from './Dropdown';\r\nimport Radio from './Radio';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectAllProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass SelectAll extends React.Component<SelectAllProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (shouldComponentBeMinimal(fieldElement)) {\r\n      return <Dropdown {...this.props} />;\r\n    }\r\n    return <Radio {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default SelectAll;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Select from 'react-select';\r\nimport { FormGroup, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneDropDownProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectOneDropDown extends React.Component<SelectOneDropDownProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n      const options: Options[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        const updatedFieldElement: any = fieldElement.control.appearance\r\n          .toString()\r\n          .replace('minimal', '');\r\n        if (/search\\([^\\)|(]+\\)/i.test(updatedFieldElement)) {\r\n          const processedStringArray = updatedFieldElement.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        resultOptions.map(elem =>\r\n          options.push({ label: elem.label, value: elem.name })\r\n        );\r\n\r\n        this.setOptionList(resultOptions);\r\n      } else if (fieldElement.itemset) {\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              options.push({ label: childrenLabel, value: elem.name });\r\n            }\r\n          });\r\n          this.setOptionList(choices[fieldElement.itemset.trim()]);\r\n        }\r\n      } else {\r\n        if (fieldElement.children) {\r\n          fieldElement.children.map(elem => {\r\n            const childrenLabel: string = getFieldLabelText(\r\n              elem,\r\n              defaultLanguage\r\n            );\r\n            options.push({ label: childrenLabel, value: elem.name });\r\n          });\r\n\r\n          this.setOptionList(fieldElement.children);\r\n        }\r\n      }\r\n\r\n      if (fieldValue) {\r\n        const optionsValueArray: any = [];\r\n        options.map(elem => {\r\n          if (elem.value) {\r\n            optionsValueArray.push(elem.value);\r\n          }\r\n        });\r\n\r\n        if (!optionsValueArray.includes(fieldValue)) {\r\n          this.props.assignFieldValueActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            ''\r\n          );\r\n        }\r\n      }\r\n\r\n      let selectedValue: any;\r\n      options.map(elem => {\r\n        if (elem.value === fieldValue) {\r\n          selectedValue = elem;\r\n        }\r\n      });\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <div key={fieldElement.name} className=\"selectOneDropDown\">\r\n            <Select\r\n              multi={false}\r\n              name={fieldElement.name}\r\n              options={options}\r\n              value={selectedValue || ''}\r\n              onChange={this.onChangeHandler(fieldElement.name)}\r\n            />\r\n          </div>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** Sets the option list to the Redux Store\r\n   * @param {any} optionObject - the option object to be processed\r\n   */\r\n  private setOptionList = (optionObject: any) => {\r\n    const tempObjArray: any = [];\r\n    optionObject.map((elem: { name: any; label: any }) => {\r\n      const elemObj: any = {};\r\n      const name: string = 'name';\r\n      const label: string = 'label';\r\n      elemObj[name] = elem.name;\r\n      elemObj[label] = elem.label;\r\n      tempObjArray.push(elemObj);\r\n    });\r\n\r\n    if (!_.isEqual(this.props.optionList, { ...tempObjArray })) {\r\n      this.props.assignOptionListActionCreator(\r\n        this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n        tempObjArray\r\n      );\r\n    }\r\n  };\r\n\r\n  /** sets the value of field element in store\r\n   * @param {any} event - the onchange input event\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandler = (fieldName: any) => (event: any) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + fieldName,\r\n      event.value || ''\r\n    );\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique dropdown options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n        let filterResult: any = '';\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n        options = options.filter(option => option[nameOfKey] === filterResult);\r\n        i = i + 2;\r\n      }\r\n    }\r\n\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne component to the redux store */\r\nconst ConnectedSelectOneDropDown = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectOneDropDown);\r\n\r\nexport default ConnectedSelectOneDropDown;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport _ from 'lodash';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  assignOptionListAction,\r\n  getEvaluatedExpression,\r\n  getEvaluatedExpressionForSelect,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  getOptionList,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../../utils/helpers';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneRadioProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  optionList: object;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  assignOptionListActionCreator: typeof assignOptionListAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface Options {\r\n  label: any;\r\n  value: string;\r\n}\r\n\r\nclass SelectOneRadio extends React.Component<SelectOneRadioProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      let resultOptions: any[] = [];\r\n\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        if (/search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)) {\r\n          const processedStringArray = fieldElement.control.appearance.match(\r\n            /search\\([^\\)|(]+\\)/i\r\n          ) || [''];\r\n\r\n          resultOptions = this.getProcessedString(processedStringArray[0]);\r\n        }\r\n      }\r\n\r\n      const childrenArray: any = [];\r\n      if (fieldElement.children) {\r\n        fieldElement.children.map(elem => {\r\n          const elemObj: any = {};\r\n          const name: string = 'name';\r\n          const label: string = 'label';\r\n          elemObj[name] = elem.name;\r\n          elemObj[label] = elem.label;\r\n          childrenArray.push(elemObj);\r\n        });\r\n      }\r\n\r\n      let values: any = [];\r\n\r\n      if (\r\n        fieldElement.control &&\r\n        fieldElement.control.appearance &&\r\n        /search\\([^\\)|(]+\\)/i.test(fieldElement.control.appearance)\r\n      ) {\r\n        values = [];\r\n        if (fieldValue) {\r\n          const optionsValueArray: any = [];\r\n          resultOptions.map(elem => {\r\n            if (elem.name) {\r\n              optionsValueArray.push(elem.name);\r\n            }\r\n          });\r\n\r\n          if (!optionsValueArray.includes(fieldValue)) {\r\n            this.props.assignFieldValueActionCreator(\r\n              this.props.fieldParentTreeName + fieldElement.name,\r\n              ''\r\n            );\r\n          }\r\n        }\r\n\r\n        if (!_.isEqual(this.props.optionList, { ...resultOptions })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            resultOptions\r\n          );\r\n        }\r\n        values = [...resultOptions];\r\n      } else if (fieldElement.itemset) {\r\n        const choiceOptions: any = [];\r\n        values = [];\r\n        if (choices && choices[fieldElement.itemset.trim()]) {\r\n          _.forEach(choices[fieldElement.itemset.trim()], (elem: any) => {\r\n            if (\r\n              fieldElement.choice_filter &&\r\n              this.props.getEvaluatedExpressionSelectorForSelect(\r\n                fieldElement.choice_filter,\r\n                fieldParentTreeName + fieldElement.name,\r\n                elem\r\n              )\r\n            ) {\r\n              const childrenLabel: string = getFieldLabelText(\r\n                elem,\r\n                defaultLanguage\r\n              );\r\n              choiceOptions.push({ label: childrenLabel, name: elem.name });\r\n            }\r\n          });\r\n\r\n          if (fieldValue) {\r\n            const optionsValueArray: any = [];\r\n            choiceOptions.map((elem: any) => {\r\n              if (elem.name) {\r\n                optionsValueArray.push(elem.name);\r\n              }\r\n            });\r\n            if (!optionsValueArray.includes(fieldValue)) {\r\n              this.props.assignFieldValueActionCreator(\r\n                this.props.fieldParentTreeName + fieldElement.name,\r\n                ''\r\n              );\r\n            }\r\n          }\r\n          if (!_.isEqual(this.props.optionList, { ...choiceOptions })) {\r\n            this.props.assignOptionListActionCreator(\r\n              this.props.fieldParentTreeName + fieldElement.name,\r\n              choiceOptions\r\n            );\r\n          }\r\n          values = [...choiceOptions];\r\n        }\r\n      } else {\r\n        values = [];\r\n        if (!_.isEqual(this.props.optionList, { ...childrenArray })) {\r\n          this.props.assignOptionListActionCreator(\r\n            this.props.fieldParentTreeName + fieldElement.name,\r\n            childrenArray\r\n          );\r\n        }\r\n        values = [...childrenArray];\r\n      }\r\n\r\n      let flagInline = false;\r\n      if (fieldElement.control && fieldElement.control.appearance) {\r\n        fieldElement.control.appearance.split(' ').forEach((tmpStyle: any) => {\r\n          if (!flagInline && tmpStyle === 'horizontal-compact') {\r\n            flagInline = true;\r\n          }\r\n        });\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <div>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Form key=\"selectOne\">\r\n            {values.map((elem: any, index: any) => (\r\n              <FormGroup key={index} check={true} inline={flagInline}>\r\n                <Label check={true}>\r\n                  <Input\r\n                    key={fieldElement.name + '-' + index}\r\n                    type=\"radio\"\r\n                    name={fieldElement.name}\r\n                    value={elem.name}\r\n                    onChange={this.onChangeHandlerRadio(fieldElement.name)}\r\n                    readOnly={isReadonly}\r\n                    checked={elem.name === fieldValue}\r\n                  />{' '}\r\n                  {getFieldLabelText(elem, defaultLanguage)}\r\n                </Label>\r\n              </FormGroup>\r\n            ))}\r\n          </Form>\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n  /** sets the value of Radio Button field element in store\r\n   * @param {any} event - the onchange input event\r\n   * @param {any} fieldName - the input name\r\n   */\r\n  private onChangeHandlerRadio = (fieldName: any) => (event: any) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + fieldName,\r\n      event.target.value || ''\r\n    );\r\n  };\r\n\r\n  /** converts apeearance text into array and pass them to further process\r\n   * @param {string} stringWithSearchKeyWord - the fieldElement children appearance text (partial)\r\n   */\r\n  private getProcessedString = (stringWithSearchKeyWord: string) => {\r\n    const processedStringArray = stringWithSearchKeyWord.match(\r\n      /\\([^\\)]+\\)/i\r\n    ) || [''];\r\n    let params = processedStringArray[0];\r\n\r\n    if (params.length > 2) {\r\n      params = params.substring(1, params.length - 1);\r\n      const resultArray = params.split(',');\r\n      let criteriaParams = [...resultArray];\r\n      criteriaParams = criteriaParams.splice(2, criteriaParams.length);\r\n      return this.extractAndFilterOptions(\r\n        resultArray[0],\r\n        resultArray[1] || null,\r\n        criteriaParams || []\r\n      );\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /** generates unique radio button options using CSV\r\n   * @param {string} csvName - the CSV file name\r\n   * @param {string | null} criteriaType - criteria to match with previous user input\r\n   * @param {any} filterCriterias - previous user input collections\r\n   */\r\n  private extractAndFilterOptions = (\r\n    csvName: string,\r\n    criteriaType: string | null,\r\n    filterCriterias: any\r\n  ) => {\r\n    if (criteriaType) {\r\n      criteriaType = criteriaType.trim();\r\n      criteriaType = criteriaType.substring(1, criteriaType.length - 1).trim();\r\n    }\r\n\r\n    let options: any[] = [];\r\n    const distinctOptions: any[] = [];\r\n    const csv: any = this.props.csvList;\r\n    csvName = csvName.substring(1, csvName.length - 1) + '.csv';\r\n    if (csv[csvName]) {\r\n      const modifiedName = csvName.replace(/'/g, '');\r\n      options = this.props.csvList[modifiedName] || [];\r\n    }\r\n\r\n    if (criteriaType && criteriaType.trim() === 'matches') {\r\n      let i = 0;\r\n      while (i < filterCriterias.length) {\r\n        let nameOfKey = filterCriterias[i].trim();\r\n        nameOfKey = nameOfKey.substring(1, nameOfKey.length - 1).trim();\r\n        const interConnectedValue = filterCriterias[i + 1];\r\n        const tempOptions = [...options];\r\n        let filterResult: any = '';\r\n        tempOptions.forEach(elm => {\r\n          filterResult = this.props.getEvaluatedExpressionSelectorForSelect(\r\n            interConnectedValue,\r\n            this.props.fieldParentTreeName + this.props.fieldElement.name,\r\n            elm\r\n          );\r\n        });\r\n        options = options.filter(option => option[nameOfKey] === filterResult);\r\n        i = i + 2;\r\n      }\r\n    }\r\n    if (options.length !== 0) {\r\n      let labelColumnName: string = '';\r\n      let valueColumnName: string = '';\r\n      if (\r\n        this.props.fieldElement.children &&\r\n        this.props.fieldElement.children[0] &&\r\n        this.props.fieldElement.children[0].name &&\r\n        this.props.fieldElement.children[0].label\r\n      ) {\r\n        labelColumnName = getFieldLabelText(\r\n          this.props.fieldElement.children[0],\r\n          this.props.defaultLanguage\r\n        );\r\n        valueColumnName = this.props.fieldElement.children[0].name;\r\n      }\r\n      options.forEach(elem => {\r\n        const tmpOpt: any = {};\r\n        const label: string = 'label';\r\n        const name: string = 'name';\r\n        tmpOpt[label] = elem[labelColumnName].trim();\r\n        tmpOpt[name] = elem[valueColumnName].trim();\r\n        distinctOptions.push(tmpOpt);\r\n      });\r\n      return _.uniqBy(distinctOptions, 'name');\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getEvaluatedExpressionSelectorForSelect: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  optionList: object;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const getEvaluatedExpressionSelectorForSelect = (\r\n    expression: string,\r\n    fieldTreeName: string,\r\n    options: any\r\n  ) =>\r\n    getEvaluatedExpressionForSelect(state, expression, options, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getEvaluatedExpressionSelectorForSelect,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n    optionList: getOptionList(state, fieldParentTreeName + fieldElement.name),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  assignOptionListActionCreator: assignOptionListAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect SelectOne Radio component to the redux store */\r\nconst ConnectedSelectOneRadio = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(SelectOneRadio);\r\n\r\nexport default ConnectedSelectOneRadio;\r\n","import * as React from 'react';\r\nimport { shouldComponentBeMinimal } from '../../../../../src/utils/helpers';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport Dropdown from './Dropdown';\r\nimport Radio from './Radio';\r\n\r\n/** props interface for the SelectOne component */\r\nexport interface SelectOneProps {\r\n  choices: any;\r\n  csvList: any;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass SelectOne extends React.Component<SelectOneProps> {\r\n  public render() {\r\n    const { fieldElement } = this.props;\r\n    if (shouldComponentBeMinimal(fieldElement)) {\r\n      return <Dropdown {...this.props} />;\r\n    }\r\n    return <Radio {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default SelectOne;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the text component */\r\nexport interface TextProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: string;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isPresentInErrorSelector: any;\r\n  isComponentRender: boolean;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nexport interface TextState {\r\n  fieldValue: string;\r\n  isFocused: boolean;\r\n}\r\n\r\nclass Text extends React.Component<TextProps, TextState> {\r\n  constructor(props: TextProps) {\r\n    super(props);\r\n    this.state = { fieldValue: '', isFocused: false };\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      if (fieldElement.bind && fieldElement.bind.calculate) {\r\n        let calculatedValue: any = '';\r\n        calculatedValue = this.props.getEvaluatedExpressionSelector(\r\n          fieldElement.bind.calculate,\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n\r\n        if (calculatedValue && calculatedValue !== fieldValue) {\r\n          this.props.assignFieldValueActionCreator(\r\n            fieldParentTreeName + fieldElement.name,\r\n            calculatedValue\r\n          );\r\n        }\r\n\r\n        return (\r\n          <FormGroup>\r\n            <Label>\r\n              {modifiedFieldLabel}{' '}\r\n              {isRequired && (\r\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n              )}\r\n            </Label>\r\n            <Input\r\n              type=\"text\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              onBlur={this.onBlurHandler}\r\n              value={\r\n                this.state.isFocused\r\n                  ? this.state.fieldValue || ''\r\n                  : calculatedValue || ''\r\n              }\r\n              readOnly={isReadonly}\r\n            />\r\n            {isFormSubmitted && isError && (\r\n              <FontAwesomeIcon\r\n                icon=\"exclamation-circle\"\r\n                className=\"errorSign\"\r\n              />\r\n            )}\r\n            {fieldElement.hint && (\r\n              <Label className=\"hintText\">{hintLabel}</Label>\r\n            )}\r\n            {isFormSubmitted && isRequiredViolated && (\r\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n            )}\r\n            {isConstraintViolated && (\r\n              <Label className=\"constraintText\">\r\n                {modifiedConstraintLabel}\r\n              </Label>\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      } else {\r\n        return (\r\n          <FormGroup>\r\n            <Label>\r\n              {modifiedFieldLabel}{' '}\r\n              {isRequired && (\r\n                <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n              )}\r\n            </Label>\r\n            <Input\r\n              type=\"text\"\r\n              name={fieldElement.name}\r\n              onChange={this.onChangeHandler}\r\n              onBlur={this.onBlurHandler}\r\n              value={\r\n                this.state.isFocused\r\n                  ? this.state.fieldValue || ''\r\n                  : fieldValue || ''\r\n              }\r\n              readOnly={isReadonly}\r\n            />\r\n            {isFormSubmitted && isError && (\r\n              <FontAwesomeIcon\r\n                icon=\"exclamation-circle\"\r\n                className=\"errorSign\"\r\n              />\r\n            )}\r\n            {fieldElement.hint && (\r\n              <Label className=\"hintText\">{hintLabel}</Label>\r\n            )}\r\n            {isFormSubmitted && isRequiredViolated && (\r\n              <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n            )}\r\n            {isConstraintViolated && (\r\n              <Label className=\"constraintText\">\r\n                {modifiedConstraintLabel}\r\n              </Label>\r\n            )}\r\n          </FormGroup>\r\n        );\r\n      }\r\n    } else {\r\n      if (this.state.isFocused) {\r\n        this.setState({ ...this.state, isFocused: false });\r\n      }\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** sets the value of field element in store\r\n   * @param {React.FormEvent<HTMLInputElement>} event - the onchange input event\r\n   */\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: true,\r\n    });\r\n  };\r\n\r\n  private onBlurHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      ...this.state,\r\n      fieldValue: event.currentTarget.value || '',\r\n      isFocused: false,\r\n    });\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value || ''\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: string;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect Text component to the redux store */\r\nconst ConnectedText = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Text);\r\n\r\nexport default ConnectedText;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormGroup, Input, Label } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport {\r\n  FieldElement,\r\n  FieldParentTreeName,\r\n} from '../../../../components/typeEvalutors/Base';\r\nimport { REQUIRED_FIELD_MSG, REQUIRED_SYMBOL } from '../../../../constants';\r\nimport {\r\n  addErrorInputId,\r\n  assignFieldValueAction,\r\n  getEvaluatedExpression,\r\n  getFieldValue,\r\n  getFormSubmitStatus,\r\n  isPresentInError,\r\n  removeErrorInputId,\r\n} from '../../../../store/ducks/formState';\r\nimport {\r\n  customizeLabelsWithPreviousInputs,\r\n  getConstraintLabelText,\r\n  getFieldLabelText,\r\n  getHintLabelText,\r\n  isInputRequired,\r\n  shouldComponentBeReadOnly,\r\n  shouldComponentBeRelevant,\r\n  shouldInputViolatesConstraint,\r\n} from '../../../../utils/helpers';\r\n\r\n/** props interface for the KbTime component */\r\nexport interface TimeProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n  fieldValue: any;\r\n  assignFieldValueActionCreator: typeof assignFieldValueAction;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: boolean;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n  addErrorInputIdActionCreator: typeof addErrorInputId;\r\n  removeErrorInputIdActionCreator: typeof removeErrorInputId;\r\n  defaultLanguage: string;\r\n}\r\n\r\nclass KbTime extends React.Component<TimeProps> {\r\n  public render() {\r\n    const {\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      fieldValue,\r\n      isComponentRender,\r\n      getEvaluatedExpressionSelector,\r\n      getFormSubmitStatusSelector,\r\n      isPresentInErrorSelector,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    const isRequired = isInputRequired(fieldElement);\r\n    const isFormSubmitted: boolean = getFormSubmitStatusSelector;\r\n    const isRequiredViolated = isRequired && (!fieldValue || fieldValue === '');\r\n    const isConstraintViolated =\r\n      fieldValue &&\r\n      fieldValue !== '' &&\r\n      shouldInputViolatesConstraint(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n    const fieldLabel = getFieldLabelText(fieldElement, defaultLanguage);\r\n    const modifiedFieldLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      fieldLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const constraintLabel = getConstraintLabelText(\r\n      fieldElement,\r\n      defaultLanguage\r\n    );\r\n    const modifiedConstraintLabel = customizeLabelsWithPreviousInputs(\r\n      getEvaluatedExpressionSelector,\r\n      constraintLabel,\r\n      fieldParentTreeName + fieldElement.name\r\n    );\r\n    const hintLabel = getHintLabelText(fieldElement, defaultLanguage);\r\n    if (isComponentRender) {\r\n      if (fieldValue == null && 'default' in fieldElement) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          fieldElement.default\r\n        );\r\n      }\r\n      const isReadonly = shouldComponentBeReadOnly(\r\n        fieldElement,\r\n        fieldParentTreeName,\r\n        getEvaluatedExpressionSelector\r\n      );\r\n      if (\r\n        (isRequiredViolated || isConstraintViolated) &&\r\n        !isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.addErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      } else if (\r\n        !isRequiredViolated &&\r\n        !isConstraintViolated &&\r\n        isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)\r\n      ) {\r\n        this.props.removeErrorInputIdActionCreator(\r\n          fieldParentTreeName + fieldElement.name\r\n        );\r\n      }\r\n\r\n      const isError = isPresentInErrorSelector(\r\n        fieldParentTreeName + fieldElement.name\r\n      );\r\n\r\n      return (\r\n        <FormGroup>\r\n          <Label>\r\n            {modifiedFieldLabel}{' '}\r\n            {isRequired && (\r\n              <span className=\"requiredTextSteric\">{REQUIRED_SYMBOL}</span>\r\n            )}\r\n          </Label>\r\n          <Input\r\n            type=\"time\"\r\n            name={fieldElement.name}\r\n            onChange={this.onChangeHandler}\r\n            value={fieldValue || ''}\r\n            readOnly={isReadonly}\r\n          />\r\n          {isFormSubmitted && isError && (\r\n            <FontAwesomeIcon icon=\"exclamation-circle\" className=\"errorSign\" />\r\n          )}\r\n          {fieldElement.hint && <Label className=\"hintText\">{hintLabel}</Label>}\r\n          {isFormSubmitted && isRequiredViolated && (\r\n            <Label className=\"requiredText\">{REQUIRED_FIELD_MSG}</Label>\r\n          )}\r\n          {isConstraintViolated && (\r\n            <Label className=\"constraintText\">{modifiedConstraintLabel}</Label>\r\n          )}\r\n        </FormGroup>\r\n      );\r\n    } else {\r\n      if (fieldValue != null) {\r\n        this.props.assignFieldValueActionCreator(\r\n          fieldParentTreeName + fieldElement.name,\r\n          null\r\n        );\r\n        if (isPresentInErrorSelector(fieldParentTreeName + fieldElement.name)) {\r\n          this.props.removeErrorInputIdActionCreator(\r\n            fieldParentTreeName + fieldElement.name\r\n          );\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private onChangeHandler = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.props.assignFieldValueActionCreator(\r\n      this.props.fieldParentTreeName + event.currentTarget.name,\r\n      event.currentTarget.value !== '' ? event.currentTarget.value : null\r\n    );\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  fieldValue: any;\r\n  getEvaluatedExpressionSelector: any;\r\n  getFormSubmitStatusSelector: any;\r\n  isComponentRender: boolean;\r\n  isPresentInErrorSelector: any;\r\n}\r\n\r\n/** Interface to describe props from parent */\r\ninterface ParentProps {\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (\r\n  state: Partial<Store>,\r\n  parentProps: ParentProps\r\n): DispatchedStateProps => {\r\n  const { fieldElement, fieldParentTreeName } = parentProps;\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n  const isPresentInErrorSelector = (fieldTreeName: string) =>\r\n    isPresentInError(state, fieldTreeName);\r\n  const getFormSubmitStatusSelector = getFormSubmitStatus(state);\r\n  const result = {\r\n    fieldValue: getFieldValue(state, fieldParentTreeName + fieldElement.name),\r\n    getEvaluatedExpressionSelector,\r\n    getFormSubmitStatusSelector,\r\n    isComponentRender: shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      getEvaluatedExpressionSelector\r\n    ),\r\n    isPresentInErrorSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  addErrorInputIdActionCreator: addErrorInputId,\r\n  assignFieldValueActionCreator: assignFieldValueAction,\r\n  removeErrorInputIdActionCreator: removeErrorInputId,\r\n};\r\n\r\n/** connect KbTime component to the redux store */\r\nconst ConnectedTime = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(KbTime);\r\n\r\nexport default ConnectedTime;\r\n","import * as React from 'react';\r\nimport {\r\n  CALCULATE_FIELD_TYPE,\r\n  DATE_FIELD_TYPE,\r\n  DATE_TIME_FIELD_TYPE,\r\n  DECIMAL_FIELD_TYPE,\r\n  FILE_FIELD_TYPE,\r\n  INTEGER_FIELD_TYPE,\r\n  NOTE_FIELD_TYPE,\r\n  PHOTO_FIELD_TYPE,\r\n  SELECT_ALL_FIELD_TYPE,\r\n  SELECT_ONE_FIELD_TYPE,\r\n  TEXT_FIELD_TYPE,\r\n  TIME_FIELD_TYPE,\r\n} from '../../../constants';\r\nimport Calculate from '../../../containers/fields/base/Calculate';\r\nimport KbDate from '../../../containers/fields/base/Date';\r\nimport DateTime from '../../../containers/fields/base/Date Time';\r\nimport Decimal from '../../../containers/fields/base/Decimal';\r\nimport File from '../../../containers/fields/base/File';\r\nimport Integer from '../../../containers/fields/base/Integer';\r\nimport Note from '../../../containers/fields/base/Note';\r\nimport SelectAll from '../../../containers/fields/base/Select All';\r\nimport SelectOne from '../../../containers/fields/base/Select One';\r\nimport Text from '../../../containers/fields/base/Text';\r\nimport KbTime from '../../../containers/fields/base/Time';\r\n\r\n/** type of fieldParentTreeName */\r\nexport type FieldParentTreeName = string;\r\n\r\n/** interface for bind property */\r\ninterface BindProperty {\r\n  calculate?: string;\r\n  relevant?: string;\r\n  readonly?: string;\r\n  appearance?: string;\r\n  required?: string;\r\n  constraint?: string;\r\n  'jr:constraintMsg'?: { [key: string]: string } | string;\r\n}\r\n\r\n/** interface for kobo field element */\r\nexport interface FieldElement {\r\n  name: string;\r\n  type: string;\r\n  children?: any[];\r\n  bind?: BindProperty;\r\n  label?: { [key: string]: string } | string;\r\n  default?: any;\r\n  control?: any;\r\n  hint?: any;\r\n  itemset?: string;\r\n  choice_filter?: string;\r\n}\r\n\r\n/** props interface for BaseTypeEvaluator component */\r\nexport interface BaseTypeEvaluatorProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElement: FieldElement;\r\n  fieldParentTreeName: FieldParentTreeName;\r\n}\r\n\r\nclass BaseTypeEvaluator extends React.Component<BaseTypeEvaluatorProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n    } = this.props;\r\n    return this.typeEvaluator(\r\n      choices,\r\n      csvList,\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      defaultLanguage\r\n    );\r\n  }\r\n\r\n  /** returns jsx components based on field types\r\n   * @param {any} choices - the choices of form definition\r\n   * @param {FieldElement} fieldElement - the field element object\r\n   * @param {FieldParentTreeName} fieldParentTreeName - the field parent hierchical name\r\n   * @return {React.ReactElement} - jsx base components\r\n   */\r\n  private typeEvaluator(\r\n    choices: any,\r\n    csvList: any,\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: FieldParentTreeName,\r\n    defaultLanguage: string\r\n  ): React.ReactElement {\r\n    switch (fieldElement.type) {\r\n      case TEXT_FIELD_TYPE:\r\n        return (\r\n          <Text\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DATE_FIELD_TYPE:\r\n        return (\r\n          <KbDate\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case TIME_FIELD_TYPE:\r\n        return (\r\n          <KbTime\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DATE_TIME_FIELD_TYPE:\r\n        return (\r\n          <DateTime\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case INTEGER_FIELD_TYPE:\r\n        return (\r\n          <Integer\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case DECIMAL_FIELD_TYPE:\r\n        return (\r\n          <Decimal\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case NOTE_FIELD_TYPE:\r\n        return (\r\n          <Note\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case CALCULATE_FIELD_TYPE:\r\n        return (\r\n          <Calculate\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case SELECT_ONE_FIELD_TYPE:\r\n        return (\r\n          <SelectOne\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n      case SELECT_ALL_FIELD_TYPE:\r\n        return (\r\n          <SelectAll\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n      case PHOTO_FIELD_TYPE:\r\n        return (\r\n          <File\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      case FILE_FIELD_TYPE:\r\n        return (\r\n          <File\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <div style={{ display: 'none' }}>\r\n            Other {fieldElement.type} {fieldElement.name}\r\n          </div>\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nexport default BaseTypeEvaluator;\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Col, Row } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport { GROUP_FIELD_TYPE, REPEAT_FIELD_TYPE } from '../../../constants';\r\nimport Group from '../../../containers/fields/group/Group';\r\nimport Repeat from '../../../containers/fields/group/Repeat';\r\nimport { getEvaluatedExpression } from '../../../store/ducks/formState';\r\nimport { shouldComponentBeRelevant } from '../../../utils/helpers';\r\nimport BaseTypeEvaluator, { FieldElement, FieldParentTreeName } from '../Base';\r\n\r\n/** props Interface for the GroupTypeEvaluator component */\r\nexport interface GroupTypeEvaluatorProps {\r\n  choices: any;\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  fieldElements: FieldElement[];\r\n  fieldParentTreeName: string;\r\n  isAppearanceApplicable: boolean;\r\n  getEvaluatedExpressionSelector: any;\r\n}\r\n\r\nclass GroupTypeEvaluator extends React.Component<GroupTypeEvaluatorProps> {\r\n  public render() {\r\n    const {\r\n      choices,\r\n      csvList,\r\n      fieldElements,\r\n      fieldParentTreeName,\r\n      defaultLanguage,\r\n      isAppearanceApplicable,\r\n    } = this.props;\r\n    return (\r\n      <Row className={'groupTypeEvaluatorRow'}>\r\n        {fieldElements.map(fieldElement => {\r\n          const value: number = this.getAppearanceValue(\r\n            fieldElement,\r\n            fieldParentTreeName,\r\n            isAppearanceApplicable\r\n          );\r\n          return (\r\n            <Col\r\n              key={'group_' + fieldElement.name}\r\n              className={'groupTypeEvaluator'}\r\n              md={value}\r\n              hidden={value === 0 ? true : false}\r\n            >\r\n              {this.typeEvaluator(\r\n                choices,\r\n                csvList,\r\n                fieldElement,\r\n                fieldParentTreeName,\r\n                defaultLanguage\r\n              )}\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  /** returns jsx components based on field types\r\n   * @param {any} choices - the form choices\r\n   * @param {FieldElement} fieldElement - the field element object\r\n   * @param {FieldParentTreeName} - the field parent hierarchical name\r\n   * @return {React.ReactElement} - jsx group components/ base evaluator component\r\n   */\r\n  private typeEvaluator(\r\n    choices: any,\r\n    csvList: any,\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: FieldParentTreeName,\r\n    defaultLanguage: string\r\n  ): React.ReactElement {\r\n    switch (fieldElement.type) {\r\n      case GROUP_FIELD_TYPE:\r\n        return (\r\n          <div>\r\n            <Group\r\n              choices={choices}\r\n              fieldElement={fieldElement}\r\n              fieldParentTreeName={fieldParentTreeName}\r\n              defaultLanguage={defaultLanguage}\r\n              csvList={csvList}\r\n            />\r\n          </div>\r\n        );\r\n      case REPEAT_FIELD_TYPE:\r\n        return (\r\n          <div>\r\n            <Repeat\r\n              choices={choices}\r\n              fieldElement={fieldElement}\r\n              fieldParentTreeName={fieldParentTreeName}\r\n              defaultLanguage={defaultLanguage}\r\n              csvList={csvList}\r\n            />\r\n          </div>\r\n        );\r\n      default:\r\n        return (\r\n          <BaseTypeEvaluator\r\n            choices={choices}\r\n            fieldElement={fieldElement}\r\n            fieldParentTreeName={fieldParentTreeName}\r\n            defaultLanguage={defaultLanguage}\r\n            csvList={csvList}\r\n          />\r\n        );\r\n    }\r\n  }\r\n\r\n  private getAppearanceValue = (\r\n    fieldElement: FieldElement,\r\n    fieldParentTreeName: string,\r\n    isAppearanceApplicable: boolean\r\n  ): number => {\r\n    const isRender: boolean = shouldComponentBeRelevant(\r\n      fieldElement,\r\n      fieldParentTreeName,\r\n      this.props.getEvaluatedExpressionSelector\r\n    );\r\n\r\n    if (!isRender) {\r\n      return 0;\r\n    } else if (\r\n      isRender &&\r\n      isAppearanceApplicable &&\r\n      fieldElement.control &&\r\n      fieldElement.control.appearance\r\n    ) {\r\n      if (/^w(\\d+)\\b/i.test(fieldElement.control.appearance)) {\r\n        const processedStringArray = fieldElement.control.appearance.match(\r\n          /^w(\\d+)\\b/i\r\n        );\r\n        const processedString = processedStringArray[0].replace('w', '');\r\n        const result = isNaN(processedString)\r\n          ? 12\r\n          : parseInt(processedString, 10);\r\n        return result;\r\n      }\r\n    }\r\n    return 12;\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  getEvaluatedExpressionSelector: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\r\n  const getEvaluatedExpressionSelector = (\r\n    expression: string,\r\n    fieldTreeName: string\r\n  ) => getEvaluatedExpression(state, expression, fieldTreeName);\r\n\r\n  const result = {\r\n    getEvaluatedExpressionSelector,\r\n  };\r\n  return result;\r\n};\r\n\r\n/** connect GroupTypeEvaluator component to the redux store */\r\nconst ConnectedGroupTypeEvaluator = connect(mapStateToProps)(\r\n  GroupTypeEvaluator\r\n);\r\n\r\nexport default ConnectedGroupTypeEvaluator;\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n  faExclamationCircle,\r\n  faMinusCircle,\r\n  faPlusCircle,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Col, Container, Row } from 'reactstrap';\r\nimport { Store } from 'redux';\r\nimport KbAlert from '../components/Alert';\r\nimport DropDown from '../components/DropDown';\r\nimport GroupTypeEvaluator from '../components/typeEvalutors/Group';\r\nimport {\r\n  getAllFileObjects,\r\n  getUserInputFromStore,\r\n  isErrorsArrayEmpty,\r\n  resetStoreAction,\r\n  setFormSubmitStatus,\r\n  setUserInputObj,\r\n} from '../store/ducks/formState';\r\n\r\nlibrary.add(faPlusCircle, faMinusCircle, faExclamationCircle);\r\n\r\nexport interface AppProps {\r\n  choices: any;\r\n  csvList: any;\r\n  isNoErrors: any;\r\n  userInputObj: any;\r\n  userInputJson: any;\r\n  defaultLanguage: string;\r\n  formTitle: string;\r\n  fieldElements: any;\r\n  setUserInputAction: typeof setUserInputObj;\r\n  languageOptions: any;\r\n  setFormSubmitStatusAction: typeof setFormSubmitStatus;\r\n  resetStoreActionCreator: typeof resetStoreAction;\r\n  mediaList: any;\r\n  handleSubmit(userInput: any, mediaList: any): any;\r\n}\r\n\r\nexport interface AppState {\r\n  defaultLanguage: string;\r\n  isSubmissionError: boolean;\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    const { userInputJson, userInputObj } = this.props;\r\n    this.props.resetStoreActionCreator();\r\n    if (userInputJson && userInputJson !== userInputObj) {\r\n      this.props.setUserInputAction(userInputJson);\r\n    }\r\n    this.setState({\r\n      defaultLanguage: this.props.defaultLanguage,\r\n      isSubmissionError: false,\r\n    });\r\n  }\r\n\r\n  public handleSelect = (languageName: string) => {\r\n    this.setState({ defaultLanguage: languageName });\r\n  };\r\n\r\n  public render() {\r\n    const {\r\n      csvList,\r\n      fieldElements,\r\n      formTitle,\r\n      languageOptions,\r\n      choices,\r\n    } = this.props;\r\n    const { defaultLanguage } = this.state || this.props;\r\n\r\n    const props = {\r\n      choices,\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElements,\r\n      fieldParentTreeName: '',\r\n      isAppearanceApplicable: false,\r\n      languageOptions,\r\n    };\r\n\r\n    return (\r\n      <Container className=\"form-container\">\r\n        <Row className={'form-title formTitle'}>\r\n          <Col>\r\n            <h3 className=\"headerText\">{formTitle}</h3>\r\n          </Col>\r\n          <DropDown\r\n            languages={...languageOptions}\r\n            onChangeSelect={this.handleSelect}\r\n            defaultLanguage={defaultLanguage}\r\n          />\r\n        </Row>\r\n        {this.state && this.state.isSubmissionError && (\r\n          <KbAlert\r\n            color={'danger'}\r\n            isOpen={this.state.isSubmissionError}\r\n            handleToggle={this.toggleStateValue}\r\n            headerText={'Oh snap! You got an error!'}\r\n            bodyText={\r\n              'Please make sure the required fields are not missing and there are no errors'\r\n            }\r\n          />\r\n        )}\r\n        <Row className=\"formFieldBody\">\r\n          <Col>\r\n            <GroupTypeEvaluator {...props} />\r\n            <Row className=\"welcome-box\">\r\n              <Col>\r\n                <Button className=\"btn btn-success\" onClick={this.handleClick}>\r\n                  Submit\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  // tslint:disable-next-line: variable-name\r\n  private handleClick = (_event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const { handleSubmit, isNoErrors, userInputObj, mediaList } = this.props;\r\n    if (isNoErrors) {\r\n      this.setState({ isSubmissionError: false });\r\n      handleSubmit(userInputObj, mediaList);\r\n    } else {\r\n      handleSubmit('Field Violated', mediaList);\r\n      this.setState({ isSubmissionError: true });\r\n      this.props.setFormSubmitStatusAction(true);\r\n      window.scrollTo(0, 0);\r\n    }\r\n  };\r\n\r\n  private toggleStateValue = () => {\r\n    this.setState({ isSubmissionError: false });\r\n  };\r\n}\r\n\r\n/** connect the component to the store */\r\n\r\n/** Interface to describe props from mapStateToProps */\r\ninterface DispatchedStateProps {\r\n  isNoErrors: any;\r\n  userInputObj: any;\r\n  mediaList: any;\r\n}\r\n\r\n/** Map props to state  */\r\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\r\n  const result = {\r\n    isNoErrors: isErrorsArrayEmpty(state),\r\n    mediaList: getAllFileObjects(state),\r\n    userInputObj: getUserInputFromStore(state),\r\n  };\r\n  return result;\r\n};\r\n\r\n/** map props to actions */\r\nconst mapDispatchToProps = {\r\n  resetStoreActionCreator: resetStoreAction,\r\n  setFormSubmitStatusAction: setFormSubmitStatus,\r\n  setUserInputAction: setUserInputObj,\r\n};\r\n\r\n/** connect Decimal component to the redux store */\r\nconst ConnectedApp = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n\r\nexport default ConnectedApp;\r\n","import { createStore, Store } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer, { FormState } from './ducks/formState';\r\n\r\n/** The initial store */\r\nconst store: Store & FormState = createStore(reducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nexport interface OdkFormRendererProps {\r\n  csvList: any;\r\n  defaultLanguage: string;\r\n  formDefinitionJson: any;\r\n  languageOptions: any;\r\n  userInputJson: any;\r\n  handleSubmit: (userInput: any, mediaList: any) => any;\r\n}\r\n\r\nclass OdkFormRenderer extends React.Component<OdkFormRendererProps> {\r\n  public render() {\r\n    const {\r\n      csvList,\r\n      defaultLanguage,\r\n      formDefinitionJson,\r\n      userInputJson,\r\n      languageOptions,\r\n      handleSubmit,\r\n    } = this.props;\r\n    const props = {\r\n      choices: formDefinitionJson.choices || {},\r\n      csvList,\r\n      defaultLanguage,\r\n      fieldElements: formDefinitionJson.children,\r\n      formTitle: formDefinitionJson.title,\r\n      handleSubmit,\r\n      languageOptions,\r\n      userInputJson,\r\n    };\r\n    return (\r\n      <Provider store={store}>\r\n        <App {...props} />\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OdkFormRenderer;\r\n"],"names":["KbAlert","render","props","headerText","bodyText","handleToggle","isOpen","color","React","Alert","toggle","className","DropDown","event","onChangeSelect","value","options","languageOptions","languages","map","elem","push","label","selectedValue","defaultLanguage","Select","multi","placeholder","onChange","onChangeHandler","GROUP_FIELD_TYPE","REPEAT_FIELD_TYPE","TEXT_FIELD_TYPE","DATE_FIELD_TYPE","DATE_TIME_FIELD_TYPE","TIME_FIELD_TYPE","INTEGER_FIELD_TYPE","DECIMAL_FIELD_TYPE","PHOTO_FIELD_TYPE","FILE_FIELD_TYPE","NOTE_FIELD_TYPE","SELECT_ONE_FIELD_TYPE","SELECT_ALL_FIELD_TYPE","CALCULATE_FIELD_TYPE","REQUIRED_FIELD_MSG","REQUIRED_SYMBOL","actualExpression","currentHierarchicalName","formItemProperty","userInput","tokenizeCharacter","type","input","current","tokenizeParenOpen","tokenizeBrakeOpen","tokenizeBrakeClose","tokenizeParenClose","tokenizeEqual","tokenizePlus","tokenizeMinus","tokenizeMultiply","tokenizeDivide","tokenizeLessThan","tokenizeGreaterThan","tokenizeNot","tokenizeComma","tokenizeDot","tokenizePattern","pattern","char","consumedChars","test","tokenizeString","matchQuote","undefined","TypeError","tokenizeFunction","tokenizeNumber","tokenizeDecimal","tokenizeVariable","tokenizeOr","tokenizeIf","tokenizeAnd","tokenizeDiv","tokenizeName","skipWhiteSpace","tokenizers","tokenizer","tokens","tokenized","forEach","tokenizerFn","token","length","kbSelected","funcName","params","_paramsTokens","tmp","Array","isArray","element","kbToday","_params","d","Date","setHours","kbRound","toFixed","parseFloat","kbRegex","regex","RegExp","kbCountSelected","kbInt","parseInt","kbCoalesce","kbPosition","tmpName","split","sumValuesOverJsn","sum","jsnObj","variableName","i","key","kbSum","paramsTokens","sumValue","kbConcat","concatStr","kbSubstr","subStr","substring","outerScopedVariables","variableValue","tmpUserInput","nodeNames","variableNameFromKey","parseMostClosestScopedVariable","tmpHierchicalName","parent","index","parseDot","path","getIn","parseLiterals","_tmpOutput","toLowerCase","parseFunction","_output","possibleFunctions","arrayOfParams","arrayOfOriginalTokens","tmpQueue","tmpTokens","pop","tmpVal","parser","parsedFn","parsedVal","functionFn","parseIf","j","parseNot","output","terminatingTokens","indexOf","newOutput","parsed","possibleParsers","parseMinus","parseParen","consumedTokens","parserFn","parseAnd","parseOr","parseEqual","parseLessThan","flagLessThanOrEqual","parseGreaterThan","flagGreaterThanOrEqual","parseDivide","possibleTokens","ct","precedentParsers","parseMultiply","preParsed","preOutput","preParseFn","parsePlus","Object","prototype","toString","call","isNaN","getTime","Math","ceil","NaN","parsers","leftOutput","pos","console","log","evaluater","expression","tmpFormItemProperty","tmpCurrentHierarchicalName","getTextFromProperty","property","languageIdentifier","getFieldLabelText","fieldElement","getHintLabelText","hint","customizeLabelsWithPreviousInputs","evaluator","labelText","fieldTreeName","placesOfCustomizationsRequiredList","match","tmpPlace","customizedName","replace","matchList","getConstraintLabelText","bind","requiredEvaluator","isInputRequired","isRequired","required","shouldComponentBeRelevant","fieldParentTreeName","evaluateExpression","relevant","isRelevant","name","shouldComponentBeReadOnly","readonly","isReadOnly","shouldInputViolatesConstraint","constraint","isConstraintViolated","getModifiedUserInputObject","userInputObj","fieldValue","treeNodes","modifiedObj","getModifiedOptionListForRepeat","repeatIndex","filteredRepeatArray","optionListobj","entries","keyNameOptionListobj","keyValueOptionListobj","repeatIndexString","String","keyRepeat","keyNameRepeatObject","keyValueRepeatValue","getValueFromUserInputObj","shouldComponentBeMinimal","isMinimal","control","appearance","includes","emptyGroupedValues","groupTreeName","keys","objKey","startsWith","checkGroupedValuesForEmpty","isEmpty","FIELD_VALUE_ASSIGNED","OPTION_LIST_ASSIGNED","MEDIA_LIST_ADDED","REMOVE_FROM_MEDIA_LIST","REMOVE_FROM_OPTION_LIST_REPEAT","RESET_STORE","ADD_ERROR_INPUT_ID","REMOVE_ERROR_INPUT_ID","EMPTY_GROUP_FIELDS","REMOVE_GROUP_FIELDS_FROM_ERRORS","SET_USER_INPUT_OBJ","SET_FORM_SUBMIT_STATUS","assignFieldValueAction","assignOptionListAction","optionList","RemoveFromOptionList","addMediaListAction","mediaObject","resetStoreAction","addErrorInputId","removeErrorInputId","emptyGroupFields","removeGroupFieldsFromErrors","setUserInputObj","setFormSubmitStatus","isFormSubmitted","initialState","SeamlessImmutable","errors","mediaList","reducer","state","action","modifiedUserInputObj","asMutable","deep","stateM","modifiedUserInputObjList","newState","hasOwnProperty","modifiedOptionListRepeat","newStateForRepeat","modifiedMediaList","newMediaState","updateIn","arr","concat","filter","elm","mUserInputObj","mState","getFieldValue","getOptionList","getEvaluatedExpression","getEvaluatedExpressionForSelect","isPresentInError","isGroupFieldsEmpty","isErrorsIncludeGroupFields","isPresent","fTName","isErrorsArrayEmpty","getUserInputFromStore","getFormSubmitStatus","getFileObject","fileName","fileObject","getAllFileObjects","Group","choices","csvList","isComponentRender","fieldLabel","isAppearanceApplicable","FormGroup","Label","children","GroupTypeEvaluator","fieldElements","isErrorsIncludeGroupFieldsSelector","removeGroupFieldsFromErrorsActionCreator","isGroupFieldsEmptySelector","emptyGroupFieldsActionCreator","mapStateToProps","parentProps","getEvaluatedExpressionSelector","result","mapDispatchToProps","ConnectedGroup","connect","SingleRepeat","_event","assignmentHandler","removeHandler","removeOptionHandler","newFieldValue","_elem","unControlFlag","onClick","handleChange","FontAwesomeIcon","icon","Component","ControlledRepeat","assignFieldValueActionCreator","removeOptionListFromActionCreator","_elm","addAnotherRepeat","ConnectedControlledRepeat","UncontrolledRepeat","noOfJrCount","jrCount","res","removeFromError","_","size","assignOptionListActionCreator","iterate","slice","ConnectedUncontrolledRepeat","Repeat","Calculate","isPresentInErrorSelector","isRequiredViolated","isReadonly","addErrorInputIdActionCreator","removeErrorInputIdActionCreator","calculatedValue","calculate","Input","readOnly","ConnectedCalculate","KbDate","currentTarget","getFormSubmitStatusSelector","modifiedFieldLabel","constraintLabel","modifiedConstraintLabel","hintLabel","defaultValue","modifiedDate","toISOString","isError","ConnectedDate","DateTime","timeZoneOffset","getTimezoneOffset","getHours","DatePicker","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","placeholderText","ConnectedDateTime","Decimal","setState","isFocused","modifiedValue","step","onBlur","onBlurHandler","ConnectedDecimal","FilePreview","fieldName","Button","ConnectedFilePreview","File","target","files","addMediaListActionCreator","accept","ConnectedFile","Integer","ConnectedInteger","Note","fieldHint","FormText","ConnectedNote","SelectAllDropDown","optionObject","tempObjArray","elemObj","isEqual","values","selectedValues","stringWithSearchKeyWord","processedStringArray","resultArray","criteriaParams","splice","extractAndFilterOptions","csvName","criteriaType","filterCriterias","trim","distinctOptions","finalRes","csv","modifiedName","nameOfKey","interConnectedValue","tempOptions","filterResult","getEvaluatedExpressionSelectorForSelect","option","from","Set","labelColumnName","valueColumnName","tmpOpt","uniqBy","resultOptions","updatedFieldElement","getProcessedString","setOptionList","itemset","choice_filter","childrenLabel","optionsArray","tmpValueArray","isNotIncluded","optionsValueArray","row","seperatedValues","isMulti","ConnectedSelectAllDropDown","SelectAllRadio","checked","newValue","childrenArray","flagInline","tmpStyle","Form","check","inline","onChangeHandlerCheckBox","ConnectedSelectAllRadio","SelectAll","Dropdown","Radio","SelectOneDropDown","ConnectedSelectOneDropDown","SelectOneRadio","choiceOptions","onChangeHandlerRadio","ConnectedSelectOneRadio","SelectOne","Text","ConnectedText","KbTime","ConnectedTime","BaseTypeEvaluator","typeEvaluator","style","display","isRender","processedString","Row","getAppearanceValue","Col","md","hidden","ConnectedGroupTypeEvaluator","library","add","faPlusCircle","faMinusCircle","faExclamationCircle","App","languageName","handleSubmit","isNoErrors","isSubmissionError","setFormSubmitStatusAction","window","scrollTo","componentDidMount","userInputJson","resetStoreActionCreator","setUserInputAction","formTitle","Container","handleSelect","toggleStateValue","handleClick","ConnectedApp","store","createStore","composeWithDevTools","OdkFormRenderer","formDefinitionJson","title","Provider"],"mappings":"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"}