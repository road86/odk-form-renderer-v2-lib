// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App renders App correctly 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <App>
    <Container
      className="form-container"
      tag="div"
    >
      <div
        className="form-container container"
      >
        <Row
          className="welcome-box"
          tag="div"
        >
          <div
            className="welcome-box row"
          >
            <Col
              tag="div"
              widths={
                Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ]
              }
            >
              <div
                className="col"
              >
                <h3>
                  Welcome to Odk Form Renderer
                </h3>
              </div>
            </Col>
          </div>
        </Row>
        <GroupTypeEvaluator
          defaultLanguage="English"
          fieldElements={
            Array [
              Object {
                "hint": "This is a sample for introductory and debugging purposes. It is updated periodically so check \\"\\"Get Blank Form\\"\\" to get the latest! 

Version 2018032801 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new-front (selfie) for video type

Version 2018022001 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance image-map for select_one and select_multiple types
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new for image, audio, video types

Version 2017121301 added:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance thousands-sep for numeric types
&nbsp;&nbsp;&nbsp;&nbsp;- Range questions
&nbsp;&nbsp;&nbsp;&nbsp;- Ethiopian, coptic and islamic calendars",
                "label": "Welcome to ODK Collect! This form showcases the different available question types (_widgets_).",
                "name": "intro",
                "type": "note",
              },
              Object {
                "children": Array [
                  Object {
                    "bind": Object {
                      "constraint": ".=\\"hello\\"",
                      "jr:constraintMsg": "Violated",
                      "readonly": "true",
                      "required": "true",
                    },
                    "label": "String widget",
                    "name": "string_widget",
                    "type": "text",
                  },
                  Object {
                    "bind": Object {
                      "constraint": ".=\\"hello\\"",
                      "jr:constraintMsg": "Violated",
                      "required": "true",
                    },
                    "default": "this is test",
                    "hint": "text type with numbers appearance",
                    "label": "String number widget",
                    "name": "string_number_widget",
                    "type": "text",
                  },
                  Object {
                    "hint": "text type with url appearance and default value of http://opendatakit.org/",
                    "label": "URL widget",
                    "name": "url_widget",
                    "type": "text",
                  },
                  Object {
                    "hint": "text type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                    "label": "Ex string widget",
                    "name": "ex_string_widget",
                    "type": "text",
                  },
                  Object {
                    "hint": "text type with printer:org.opendatakit.sensors.ZebraPrinter",
                    "label": "Ex printer widget",
                    "name": "ex_printer_widget",
                    "type": "text",
                  },
                ],
                "label": "Text widgets",
                "name": "text_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "bind": Object {
                      "constraint": ".>=0",
                      "jr:constraintMsg": Object {
                        "English": "Negative value not allowed",
                      },
                      "readonly": "true",
                      "required": "Yes",
                    },
                    "hint": "integer type with no appearance",
                    "label": "Integer widget",
                    "name": "integer_widget",
                    "type": "integer",
                  },
                  Object {
                    "bind": Object {
                      "constraint": ".>=0",
                      "jr:constraintMsg": Object {
                        "English": "Negative value not allowed",
                      },
                      "required": "Yes",
                    },
                    "hint": "integer type with thousands-sep appearance. This appearance can also be applied to decimal and string numbers widgets",
                    "label": "Integer widget with thousands separators",
                    "name": "integer_thousands_sep_widget",
                    "type": "integer",
                  },
                  Object {
                    "bind": Object {
                      "constraint": ".>=0",
                      "jr:constraintMsg": Object {
                        "English": "Negative value not allowed",
                      },
                      "required": "Yes",
                    },
                    "hint": "integer type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                    "label": "Ex integer widget",
                    "name": "ex_integer_widget",
                    "type": "integer",
                  },
                  Object {
                    "bind": Object {
                      "constraint": ".>=0",
                      "jr:constraintMsg": Object {
                        "English": "Negative value not allowed",
                      },
                      "required": "Yes",
                    },
                    "hint": "decimal type with no appearance",
                    "label": "Decimal widget",
                    "name": "decimal_widget",
                    "type": "decimal",
                  },
                  Object {
                    "hint": "decimal type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                    "label": "Ex decimal widget",
                    "name": "ex_decimal_widget",
                    "type": "decimal",
                  },
                  Object {
                    "hint": "decimal type with bearing appearance",
                    "label": "Bearing widget",
                    "name": "bearing_widget",
                    "type": "decimal",
                  },
                ],
                "label": "Numerical widgets",
                "name": "number_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "hint": "image type with no appearance",
                    "label": "Image widget",
                    "name": "image_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with new appearance (can also be added with annotate appearance and on audio and video types)",
                    "label": "Image widget without Choose button",
                    "name": "image_widget_no_choose",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with selfie appearance",
                    "label": "Selfie widget",
                    "name": "selfie_image_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with draw appearance",
                    "label": "Draw widget",
                    "name": "draw_image_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with annotate appearance",
                    "label": "Annotate widget",
                    "name": "annotate_image_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with signature appearance",
                    "label": "Signature widget",
                    "name": "signature_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with web appearance",
                    "label": "Web view image widget",
                    "name": "webview_image_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with align:1 1 1 appearance, requires external aligned image app",
                    "label": "Align image widget",
                    "name": "aligned_image_widget",
                    "type": "photo",
                  },
                ],
                "label": "Image widgets",
                "name": "image_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "hint": "barcode type with no appearance",
                    "label": "Barcode widget",
                    "name": "barcode_widget",
                    "type": "barcode",
                  },
                  Object {
                    "hint": "audio type with no appearance",
                    "label": "Audio widget",
                    "name": "audio_widget",
                    "type": "audio",
                  },
                  Object {
                    "hint": "video type with no appearance",
                    "label": "Video widget",
                    "name": "video_widget",
                    "type": "video",
                  },
                  Object {
                    "hint": "video type with new-front appearance",
                    "label": "Selfie video widget",
                    "name": "selfie_video_widget",
                    "type": "video",
                  },
                ],
                "label": "Media widgets",
                "name": "media_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "hint": "date type with no appearance",
                    "label": "Date widget",
                    "name": "date_widget",
                    "type": "date",
                  },
                  Object {
                    "hint": "date type with no-calendar appearance",
                    "label": "Date Widget",
                    "name": "date_widget_nocalendar",
                    "type": "date",
                  },
                  Object {
                    "hint": "date type with month-year appearance",
                    "label": "Date widget",
                    "name": "date_widget_month_year",
                    "type": "date",
                  },
                  Object {
                    "hint": "date type with year appearance",
                    "label": "Date widget",
                    "name": "date_widget_year",
                    "type": "date",
                  },
                  Object {
                    "hint": "time type with no appearance",
                    "label": "Time widget",
                    "name": "time_widget",
                    "type": "time",
                  },
                  Object {
                    "hint": "dateTime type with no appearance",
                    "label": "Date time widget",
                    "name": "date_time_widget",
                    "type": "dateTime",
                  },
                  Object {
                    "hint": "dateTime type with no-calendar appearance",
                    "label": "Date time widget",
                    "name": "date_time_widget_nocalendar",
                    "type": "dateTime",
                  },
                  Object {
                    "hint": "date type ethiopian appearance",
                    "label": "Ethiopian date widget",
                    "name": "ethiopian_date_widget",
                    "type": "date",
                  },
                  Object {
                    "hint": "date type coptic appearance",
                    "label": "Coptic date widget",
                    "name": "coptic_date_widget",
                    "type": "date",
                  },
                  Object {
                    "hint": "date type islamic appearance",
                    "label": "Islamic date widget",
                    "name": "islamic_date_widget",
                    "type": "date",
                  },
                ],
                "label": "Date and time widgets",
                "name": "date_time_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "bind": Object {
                      "required": "Yes",
                    },
                    "children": Array [
                      Object {
                        "label": Object {
                          "Bangla": "Albania",
                          "English": "Albania",
                        },
                        "name": "AL",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Andorra",
                          "English": "Andorra",
                        },
                        "name": "AD",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Armenia",
                          "English": "Armenia",
                        },
                        "name": "AM",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Austria",
                          "English": "Austria",
                        },
                        "name": "AT",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Azerbaijan",
                          "English": "Azerbaijan",
                        },
                        "name": "AZ",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Belarus",
                          "English": "Belarus",
                        },
                        "name": "BY",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Belgium",
                          "English": "Belgium",
                        },
                        "name": "BE",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Bosnia and Herzegovina",
                          "English": "Bosnia and Herzegovina",
                        },
                        "name": "BA",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Bulgaria",
                          "English": "Bulgaria",
                        },
                        "name": "BG",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Spain",
                          "English": "Spain",
                        },
                        "name": "ES",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Sweden",
                          "English": "Sweden",
                        },
                        "name": "SE",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Switzerland",
                          "English": "Switzerland",
                        },
                        "name": "CH",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Tunisia",
                          "English": "Tunisia",
                        },
                        "name": "TN",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Turkey",
                          "English": "Turkey",
                        },
                        "name": "TR",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Ukraine",
                          "English": "Ukraine",
                        },
                        "name": "UA",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "United Kingdom (UK)",
                          "English": "United Kingdom (UK)",
                        },
                        "name": "GB",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "Vatican City",
                          "English": "Vatican City",
                        },
                        "name": "VA",
                      },
                      Object {
                        "label": Object {
                          "Bangla": "অন্যান্য",
                          "English": "Others",
                        },
                        "name": "99",
                      },
                    ],
                    "control": Object {
                      "appearance": "minimal",
                    },
                    "label": Object {
                      "Bangla": "যেই দেশ থেকে ফেরত এসেছে তার নাম",
                      "English": "Return From",
                    },
                    "name": "return_from",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with minimal appearance, 4 text choices",
                    "label": "Spinner widget",
                    "name": "spinner_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with quick appearance, 4 text choices",
                    "label": "Select one autoadvance widget",
                    "name": "select_one_autoadvance_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with search appearance, 4 text choices",
                    "label": "Select one search widget",
                    "name": "select_one_search_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with autocomplete appearance, 4 text choices",
                    "label": "Select one search widget",
                    "name": "select_one_autocomplete_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with no appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                    "label": "Grid select one widget",
                    "name": "grid_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with compact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                    "label": "Grid select one widget",
                    "name": "grid_widget_compact",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with compact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                    "label": "Grid select one widget",
                    "name": "grid_widget_compact2",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with quickcompact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                    "label": "Grid select one widget",
                    "name": "grid_widget_quickcompact",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with quickcompact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                    "label": "Grid select one widget",
                    "name": "grid_widget_quickcompact2",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Head",
                        "name": "head",
                      },
                      Object {
                        "label": "Neck",
                        "name": "neck",
                      },
                      Object {
                        "label": "Lungs",
                        "name": "lungs",
                      },
                      Object {
                        "label": "Left proximal arm",
                        "name": "left_proximal_arm",
                      },
                      Object {
                        "label": "Left distal arm",
                        "name": "left_distal_arm",
                      },
                      Object {
                        "label": "Right proximal arm",
                        "name": "right_proximal_arm",
                      },
                      Object {
                        "label": "Right distal arm",
                        "name": "right_distal_arm",
                      },
                      Object {
                        "label": "Left proximal leg",
                        "name": "left_proximal_leg",
                      },
                      Object {
                        "label": "Left distal leg",
                        "name": "left_distal_leg",
                      },
                      Object {
                        "label": "Right proximal leg",
                        "name": "right_proximal_leg",
                      },
                      Object {
                        "label": "Right distal leg",
                        "name": "right_distal_leg",
                      },
                    ],
                    "hint": "select_one with type image-map appearance and image body.svg",
                    "label": "Image select one widget",
                    "name": "select_one_image_map",
                    "type": "select one",
                  },
                ],
                "label": "Select one widgets",
                "name": "select_one_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_multiple type with no appearance, 4 text choices",
                    "label": "Multi select widget",
                    "name": "select_multi_widget",
                    "type": "select all that apply",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_multiple type with compact appearance, 4 image choices",
                    "label": "Grid select multiple widget",
                    "name": "grid_multi_widget_compact",
                    "type": "select all that apply",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_multiple type with compact-2 appearance, 4 image choices",
                    "label": "Grid select multiple widget",
                    "name": "grid_multi_widget_compact2",
                    "type": "select all that apply",
                  },
                  Object {
                    "bind": Object {
                      "required": "Yes",
                    },
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "control": Object {
                      "appearance": "minimal",
                    },
                    "hint": "select_multiple type with minimal appearance, 4 image choices",
                    "label": "Spinner widget: select multiple",
                    "name": "spinner_multi_widget",
                    "type": "select all that apply",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Head",
                        "name": "head",
                      },
                      Object {
                        "label": "Neck",
                        "name": "neck",
                      },
                      Object {
                        "label": "Lungs",
                        "name": "lungs",
                      },
                      Object {
                        "label": "Left proximal arm",
                        "name": "left_proximal_arm",
                      },
                      Object {
                        "label": "Left distal arm",
                        "name": "left_distal_arm",
                      },
                      Object {
                        "label": "Right proximal arm",
                        "name": "right_proximal_arm",
                      },
                      Object {
                        "label": "Right distal arm",
                        "name": "right_distal_arm",
                      },
                      Object {
                        "label": "Left proximal leg",
                        "name": "left_proximal_leg",
                      },
                      Object {
                        "label": "Left distal leg",
                        "name": "left_distal_leg",
                      },
                      Object {
                        "label": "Right proximal leg",
                        "name": "right_proximal_leg",
                      },
                      Object {
                        "label": "Right distal leg",
                        "name": "right_distal_leg",
                      },
                    ],
                    "hint": "select_multiple type with image-map appearance and image body.svg",
                    "label": "Image select multiple widget",
                    "name": "select_multi_image_map",
                    "type": "select all that apply",
                  },
                ],
                "label": "This section contains \\"Select Multi Widgets\\"",
                "name": "select_multi_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "Show only the labels of these options and not the inputs (type=select_one yes_no, appearance=label)",
                    "label": "Label widget",
                    "name": "table_list_test_label",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "Show only the labels of these options and not the inputs (type=select_multiple yes_no, appearance=label)",
                    "label": "Label multi widget",
                    "name": "table_list_test_label_2",
                    "type": "select all that apply",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "Show only the inputs of these options and not the labels (type=select_one yes_no, appearance=list-nolabel)",
                    "label": "List widget",
                    "name": "table_list_1",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "Show only the inputs of these options and not the labels (type=select_multiple yes_no, appearance=list-nolabel)",
                    "label": "List multi widget",
                    "name": "table_list_2",
                    "type": "select all that apply",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "This is a normal list widget with (type = select_one, appearance = list)",
                    "label": "List widget",
                    "name": "list_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "This is a normal list widget with (type = select_multiple, appearance = list)",
                    "label": "List multi widget",
                    "name": "list_multi_widget",
                    "type": "select all that apply",
                  },
                ],
                "hint": "Shows all questions on one page in ODK Collect (appearance=field-list)",
                "label": "List group",
                "name": "table_list_test",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "label": "Name",
                    "name": "repeat_q",
                    "type": "text",
                  },
                ],
                "name": "repeat_1",
                "type": "repeat",
              },
              Object {
                "children": Array [
                  Object {
                    "bind": Object {
                      "calculate": "concat('uuid:', uuid())",
                      "readonly": "true()",
                    },
                    "name": "instanceID",
                    "type": "calculate",
                  },
                ],
                "control": Object {
                  "bodyless": true,
                },
                "name": "meta",
                "type": "group",
              },
            ]
          }
          fieldParentTreeName=""
        >
          <div>
            <div
              key="group_intro"
            >
              <BaseTypeEvaluator
                fieldElement={
                  Object {
                    "hint": "This is a sample for introductory and debugging purposes. It is updated periodically so check \\"\\"Get Blank Form\\"\\" to get the latest! 

Version 2018032801 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new-front (selfie) for video type

Version 2018022001 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance image-map for select_one and select_multiple types
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new for image, audio, video types

Version 2017121301 added:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance thousands-sep for numeric types
&nbsp;&nbsp;&nbsp;&nbsp;- Range questions
&nbsp;&nbsp;&nbsp;&nbsp;- Ethiopian, coptic and islamic calendars",
                    "label": "Welcome to ODK Collect! This form showcases the different available question types (_widgets_).",
                    "name": "intro",
                    "type": "note",
                  }
                }
                fieldParentTreeName=""
              >
                <Note
                  fieldElement={
                    Object {
                      "hint": "This is a sample for introductory and debugging purposes. It is updated periodically so check \\"\\"Get Blank Form\\"\\" to get the latest! 

Version 2018032801 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new-front (selfie) for video type

Version 2018022001 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance image-map for select_one and select_multiple types
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new for image, audio, video types

Version 2017121301 added:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance thousands-sep for numeric types
&nbsp;&nbsp;&nbsp;&nbsp;- Range questions
&nbsp;&nbsp;&nbsp;&nbsp;- Ethiopian, coptic and islamic calendars",
                      "label": "Welcome to ODK Collect! This form showcases the different available question types (_widgets_).",
                      "name": "intro",
                      "type": "note",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Welcome to ODK Collect! This form showcases the different available question types (_widgets_).
                        </label>
                      </Label>
                      <FormText
                        color="muted"
                        tag="small"
                      >
                        <small
                          className="form-text text-muted"
                        >
                          This is a sample for introductory and debugging purposes. It is updated periodically so check ""Get Blank Form"" to get the latest! 

Version 2018032801 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new-front (selfie) for video type

Version 2018022001 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance image-map for select_one and select_multiple types
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new for image, audio, video types

Version 2017121301 added:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance thousands-sep for numeric types
&nbsp;&nbsp;&nbsp;&nbsp;- Range questions
&nbsp;&nbsp;&nbsp;&nbsp;- Ethiopian, coptic and islamic calendars
                        </small>
                      </FormText>
                    </div>
                  </FormGroup>
                </Note>
              </BaseTypeEvaluator>
            </div>
            <div
              key="group_text_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "bind": Object {
                            "constraint": ".=\\"hello\\"",
                            "jr:constraintMsg": "Violated",
                            "readonly": "true",
                            "required": "true",
                          },
                          "label": "String widget",
                          "name": "string_widget",
                          "type": "text",
                        },
                        Object {
                          "bind": Object {
                            "constraint": ".=\\"hello\\"",
                            "jr:constraintMsg": "Violated",
                            "required": "true",
                          },
                          "default": "this is test",
                          "hint": "text type with numbers appearance",
                          "label": "String number widget",
                          "name": "string_number_widget",
                          "type": "text",
                        },
                        Object {
                          "hint": "text type with url appearance and default value of http://opendatakit.org/",
                          "label": "URL widget",
                          "name": "url_widget",
                          "type": "text",
                        },
                        Object {
                          "hint": "text type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                          "label": "Ex string widget",
                          "name": "ex_string_widget",
                          "type": "text",
                        },
                        Object {
                          "hint": "text type with printer:org.opendatakit.sensors.ZebraPrinter",
                          "label": "Ex printer widget",
                          "name": "ex_printer_widget",
                          "type": "text",
                        },
                      ],
                      "label": "Text widgets",
                      "name": "text_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Text widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".=\\"hello\\"",
                                "jr:constraintMsg": "Violated",
                                "readonly": "true",
                                "required": "true",
                              },
                              "label": "String widget",
                              "name": "string_widget",
                              "type": "text",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Text)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".=\\"hello\\"",
                                  "jr:constraintMsg": "Violated",
                                  "readonly": "true",
                                  "required": "true",
                                },
                                "label": "String widget",
                                "name": "string_widget",
                                "type": "text",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Text
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".=\\"hello\\"",
                                    "jr:constraintMsg": "Violated",
                                    "readonly": "true",
                                    "required": "true",
                                  },
                                  "label": "String widget",
                                  "name": "string_widget",
                                  "type": "text",
                                }
                              }
                              fieldParentTreeName=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      String widget
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="string_widget"
                                    onChange={[Function]}
                                    readOnly={true}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="string_widget"
                                      onChange={[Function]}
                                      readOnly={true}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      This field is required
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Text>
                          </Connect(Text)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".=\\"hello\\"",
                                "jr:constraintMsg": "Violated",
                                "required": "true",
                              },
                              "default": "this is test",
                              "hint": "text type with numbers appearance",
                              "label": "String number widget",
                              "name": "string_number_widget",
                              "type": "text",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Text)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".=\\"hello\\"",
                                  "jr:constraintMsg": "Violated",
                                  "required": "true",
                                },
                                "default": "this is test",
                                "hint": "text type with numbers appearance",
                                "label": "String number widget",
                                "name": "string_number_widget",
                                "type": "text",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Text
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".=\\"hello\\"",
                                    "jr:constraintMsg": "Violated",
                                    "required": "true",
                                  },
                                  "default": "this is test",
                                  "hint": "text type with numbers appearance",
                                  "label": "String number widget",
                                  "name": "string_number_widget",
                                  "type": "text",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue="this is test"
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      String number widget
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="string_number_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="text"
                                    value="this is test"
                                  >
                                    <input
                                      className="form-control"
                                      name="string_number_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value="this is test"
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Violated
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Text>
                          </Connect(Text)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "text type with url appearance and default value of http://opendatakit.org/",
                              "label": "URL widget",
                              "name": "url_widget",
                              "type": "text",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Text)
                            fieldElement={
                              Object {
                                "hint": "text type with url appearance and default value of http://opendatakit.org/",
                                "label": "URL widget",
                                "name": "url_widget",
                                "type": "text",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Text
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "text type with url appearance and default value of http://opendatakit.org/",
                                  "label": "URL widget",
                                  "name": "url_widget",
                                  "type": "text",
                                }
                              }
                              fieldParentTreeName=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      URL widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="url_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="url_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Text>
                          </Connect(Text)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "text type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                              "label": "Ex string widget",
                              "name": "ex_string_widget",
                              "type": "text",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Text)
                            fieldElement={
                              Object {
                                "hint": "text type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                "label": "Ex string widget",
                                "name": "ex_string_widget",
                                "type": "text",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Text
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "text type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                  "label": "Ex string widget",
                                  "name": "ex_string_widget",
                                  "type": "text",
                                }
                              }
                              fieldParentTreeName=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Ex string widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="ex_string_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="ex_string_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Text>
                          </Connect(Text)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "text type with printer:org.opendatakit.sensors.ZebraPrinter",
                              "label": "Ex printer widget",
                              "name": "ex_printer_widget",
                              "type": "text",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Text)
                            fieldElement={
                              Object {
                                "hint": "text type with printer:org.opendatakit.sensors.ZebraPrinter",
                                "label": "Ex printer widget",
                                "name": "ex_printer_widget",
                                "type": "text",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Text
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "text type with printer:org.opendatakit.sensors.ZebraPrinter",
                                  "label": "Ex printer widget",
                                  "name": "ex_printer_widget",
                                  "type": "text",
                                }
                              }
                              fieldParentTreeName=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Ex printer widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="ex_printer_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="ex_printer_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Text>
                          </Connect(Text)>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_number_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "bind": Object {
                            "constraint": ".>=0",
                            "jr:constraintMsg": Object {
                              "English": "Negative value not allowed",
                            },
                            "readonly": "true",
                            "required": "Yes",
                          },
                          "hint": "integer type with no appearance",
                          "label": "Integer widget",
                          "name": "integer_widget",
                          "type": "integer",
                        },
                        Object {
                          "bind": Object {
                            "constraint": ".>=0",
                            "jr:constraintMsg": Object {
                              "English": "Negative value not allowed",
                            },
                            "required": "Yes",
                          },
                          "hint": "integer type with thousands-sep appearance. This appearance can also be applied to decimal and string numbers widgets",
                          "label": "Integer widget with thousands separators",
                          "name": "integer_thousands_sep_widget",
                          "type": "integer",
                        },
                        Object {
                          "bind": Object {
                            "constraint": ".>=0",
                            "jr:constraintMsg": Object {
                              "English": "Negative value not allowed",
                            },
                            "required": "Yes",
                          },
                          "hint": "integer type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                          "label": "Ex integer widget",
                          "name": "ex_integer_widget",
                          "type": "integer",
                        },
                        Object {
                          "bind": Object {
                            "constraint": ".>=0",
                            "jr:constraintMsg": Object {
                              "English": "Negative value not allowed",
                            },
                            "required": "Yes",
                          },
                          "hint": "decimal type with no appearance",
                          "label": "Decimal widget",
                          "name": "decimal_widget",
                          "type": "decimal",
                        },
                        Object {
                          "hint": "decimal type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                          "label": "Ex decimal widget",
                          "name": "ex_decimal_widget",
                          "type": "decimal",
                        },
                        Object {
                          "hint": "decimal type with bearing appearance",
                          "label": "Bearing widget",
                          "name": "bearing_widget",
                          "type": "decimal",
                        },
                      ],
                      "label": "Numerical widgets",
                      "name": "number_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Numerical widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".>=0",
                                "jr:constraintMsg": Object {
                                  "English": "Negative value not allowed",
                                },
                                "readonly": "true",
                                "required": "Yes",
                              },
                              "hint": "integer type with no appearance",
                              "label": "Integer widget",
                              "name": "integer_widget",
                              "type": "integer",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Integer)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".>=0",
                                  "jr:constraintMsg": Object {
                                    "English": "Negative value not allowed",
                                  },
                                  "readonly": "true",
                                  "required": "Yes",
                                },
                                "hint": "integer type with no appearance",
                                "label": "Integer widget",
                                "name": "integer_widget",
                                "type": "integer",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Integer
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".>=0",
                                    "jr:constraintMsg": Object {
                                      "English": "Negative value not allowed",
                                    },
                                    "readonly": "true",
                                    "required": "Yes",
                                  },
                                  "hint": "integer type with no appearance",
                                  "label": "Integer widget",
                                  "name": "integer_widget",
                                  "type": "integer",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Integer widget
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="integer_widget"
                                    onChange={[Function]}
                                    readOnly={true}
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="integer_widget"
                                      onChange={[Function]}
                                      readOnly={true}
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      This field is required
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Integer>
                          </Connect(Integer)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".>=0",
                                "jr:constraintMsg": Object {
                                  "English": "Negative value not allowed",
                                },
                                "required": "Yes",
                              },
                              "hint": "integer type with thousands-sep appearance. This appearance can also be applied to decimal and string numbers widgets",
                              "label": "Integer widget with thousands separators",
                              "name": "integer_thousands_sep_widget",
                              "type": "integer",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Integer)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".>=0",
                                  "jr:constraintMsg": Object {
                                    "English": "Negative value not allowed",
                                  },
                                  "required": "Yes",
                                },
                                "hint": "integer type with thousands-sep appearance. This appearance can also be applied to decimal and string numbers widgets",
                                "label": "Integer widget with thousands separators",
                                "name": "integer_thousands_sep_widget",
                                "type": "integer",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Integer
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".>=0",
                                    "jr:constraintMsg": Object {
                                      "English": "Negative value not allowed",
                                    },
                                    "required": "Yes",
                                  },
                                  "hint": "integer type with thousands-sep appearance. This appearance can also be applied to decimal and string numbers widgets",
                                  "label": "Integer widget with thousands separators",
                                  "name": "integer_thousands_sep_widget",
                                  "type": "integer",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Integer widget with thousands separators
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="integer_thousands_sep_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="integer_thousands_sep_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      This field is required
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Integer>
                          </Connect(Integer)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".>=0",
                                "jr:constraintMsg": Object {
                                  "English": "Negative value not allowed",
                                },
                                "required": "Yes",
                              },
                              "hint": "integer type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                              "label": "Ex integer widget",
                              "name": "ex_integer_widget",
                              "type": "integer",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Integer)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".>=0",
                                  "jr:constraintMsg": Object {
                                    "English": "Negative value not allowed",
                                  },
                                  "required": "Yes",
                                },
                                "hint": "integer type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                "label": "Ex integer widget",
                                "name": "ex_integer_widget",
                                "type": "integer",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Integer
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".>=0",
                                    "jr:constraintMsg": Object {
                                      "English": "Negative value not allowed",
                                    },
                                    "required": "Yes",
                                  },
                                  "hint": "integer type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                  "label": "Ex integer widget",
                                  "name": "ex_integer_widget",
                                  "type": "integer",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Ex integer widget
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="ex_integer_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="ex_integer_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      This field is required
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Integer>
                          </Connect(Integer)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".>=0",
                                "jr:constraintMsg": Object {
                                  "English": "Negative value not allowed",
                                },
                                "required": "Yes",
                              },
                              "hint": "decimal type with no appearance",
                              "label": "Decimal widget",
                              "name": "decimal_widget",
                              "type": "decimal",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Decimal)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".>=0",
                                  "jr:constraintMsg": Object {
                                    "English": "Negative value not allowed",
                                  },
                                  "required": "Yes",
                                },
                                "hint": "decimal type with no appearance",
                                "label": "Decimal widget",
                                "name": "decimal_widget",
                                "type": "decimal",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Decimal
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".>=0",
                                    "jr:constraintMsg": Object {
                                      "English": "Negative value not allowed",
                                    },
                                    "required": "Yes",
                                  },
                                  "hint": "decimal type with no appearance",
                                  "label": "Decimal widget",
                                  "name": "decimal_widget",
                                  "type": "decimal",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Decimal widget
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="decimal_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="decimal_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      This field is required
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Decimal>
                          </Connect(Decimal)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "decimal type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                              "label": "Ex decimal widget",
                              "name": "ex_decimal_widget",
                              "type": "decimal",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Decimal)
                            fieldElement={
                              Object {
                                "hint": "decimal type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                "label": "Ex decimal widget",
                                "name": "ex_decimal_widget",
                                "type": "decimal",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Decimal
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "decimal type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                  "label": "Ex decimal widget",
                                  "name": "ex_decimal_widget",
                                  "type": "decimal",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Ex decimal widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="ex_decimal_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="ex_decimal_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Decimal>
                          </Connect(Decimal)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="5"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "decimal type with bearing appearance",
                              "label": "Bearing widget",
                              "name": "bearing_widget",
                              "type": "decimal",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Decimal)
                            fieldElement={
                              Object {
                                "hint": "decimal type with bearing appearance",
                                "label": "Bearing widget",
                                "name": "bearing_widget",
                                "type": "decimal",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Decimal
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "decimal type with bearing appearance",
                                  "label": "Bearing widget",
                                  "name": "bearing_widget",
                                  "type": "decimal",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Bearing widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="bearing_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="bearing_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Decimal>
                          </Connect(Decimal)>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_image_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "hint": "image type with no appearance",
                          "label": "Image widget",
                          "name": "image_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with new appearance (can also be added with annotate appearance and on audio and video types)",
                          "label": "Image widget without Choose button",
                          "name": "image_widget_no_choose",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with selfie appearance",
                          "label": "Selfie widget",
                          "name": "selfie_image_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with draw appearance",
                          "label": "Draw widget",
                          "name": "draw_image_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with annotate appearance",
                          "label": "Annotate widget",
                          "name": "annotate_image_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with signature appearance",
                          "label": "Signature widget",
                          "name": "signature_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with web appearance",
                          "label": "Web view image widget",
                          "name": "webview_image_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with align:1 1 1 appearance, requires external aligned image app",
                          "label": "Align image widget",
                          "name": "aligned_image_widget",
                          "type": "photo",
                        },
                      ],
                      "label": "Image widgets",
                      "name": "image_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Image widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with no appearance",
                              "label": "Image widget",
                              "name": "image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with no appearance",
                                "label": "Image widget",
                                "name": "image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with no appearance",
                                  "label": "Image widget",
                                  "name": "image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Image widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with new appearance (can also be added with annotate appearance and on audio and video types)",
                              "label": "Image widget without Choose button",
                              "name": "image_widget_no_choose",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with new appearance (can also be added with annotate appearance and on audio and video types)",
                                "label": "Image widget without Choose button",
                                "name": "image_widget_no_choose",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with new appearance (can also be added with annotate appearance and on audio and video types)",
                                  "label": "Image widget without Choose button",
                                  "name": "image_widget_no_choose",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Image widget without Choose button
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="image_widget_no_choose"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="image_widget_no_choose"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with selfie appearance",
                              "label": "Selfie widget",
                              "name": "selfie_image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with selfie appearance",
                                "label": "Selfie widget",
                                "name": "selfie_image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with selfie appearance",
                                  "label": "Selfie widget",
                                  "name": "selfie_image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Selfie widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="selfie_image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="selfie_image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with draw appearance",
                              "label": "Draw widget",
                              "name": "draw_image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with draw appearance",
                                "label": "Draw widget",
                                "name": "draw_image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with draw appearance",
                                  "label": "Draw widget",
                                  "name": "draw_image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Draw widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="draw_image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="draw_image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with annotate appearance",
                              "label": "Annotate widget",
                              "name": "annotate_image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with annotate appearance",
                                "label": "Annotate widget",
                                "name": "annotate_image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with annotate appearance",
                                  "label": "Annotate widget",
                                  "name": "annotate_image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Annotate widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="annotate_image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="annotate_image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="5"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with signature appearance",
                              "label": "Signature widget",
                              "name": "signature_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with signature appearance",
                                "label": "Signature widget",
                                "name": "signature_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with signature appearance",
                                  "label": "Signature widget",
                                  "name": "signature_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Signature widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="signature_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="signature_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="6"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with web appearance",
                              "label": "Web view image widget",
                              "name": "webview_image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with web appearance",
                                "label": "Web view image widget",
                                "name": "webview_image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with web appearance",
                                  "label": "Web view image widget",
                                  "name": "webview_image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Web view image widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="webview_image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="webview_image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="7"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with align:1 1 1 appearance, requires external aligned image app",
                              "label": "Align image widget",
                              "name": "aligned_image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with align:1 1 1 appearance, requires external aligned image app",
                                "label": "Align image widget",
                                "name": "aligned_image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with align:1 1 1 appearance, requires external aligned image app",
                                  "label": "Align image widget",
                                  "name": "aligned_image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Align image widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="aligned_image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="aligned_image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_media_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "hint": "barcode type with no appearance",
                          "label": "Barcode widget",
                          "name": "barcode_widget",
                          "type": "barcode",
                        },
                        Object {
                          "hint": "audio type with no appearance",
                          "label": "Audio widget",
                          "name": "audio_widget",
                          "type": "audio",
                        },
                        Object {
                          "hint": "video type with no appearance",
                          "label": "Video widget",
                          "name": "video_widget",
                          "type": "video",
                        },
                        Object {
                          "hint": "video type with new-front appearance",
                          "label": "Selfie video widget",
                          "name": "selfie_video_widget",
                          "type": "video",
                        },
                      ],
                      "label": "Media widgets",
                      "name": "media_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Media widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "barcode type with no appearance",
                              "label": "Barcode widget",
                              "name": "barcode_widget",
                              "type": "barcode",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            barcode
                             
                            barcode_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "audio type with no appearance",
                              "label": "Audio widget",
                              "name": "audio_widget",
                              "type": "audio",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            audio
                             
                            audio_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "video type with no appearance",
                              "label": "Video widget",
                              "name": "video_widget",
                              "type": "video",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            video
                             
                            video_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "video type with new-front appearance",
                              "label": "Selfie video widget",
                              "name": "selfie_video_widget",
                              "type": "video",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            video
                             
                            selfie_video_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_date_time_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "hint": "date type with no appearance",
                          "label": "Date widget",
                          "name": "date_widget",
                          "type": "date",
                        },
                        Object {
                          "hint": "date type with no-calendar appearance",
                          "label": "Date Widget",
                          "name": "date_widget_nocalendar",
                          "type": "date",
                        },
                        Object {
                          "hint": "date type with month-year appearance",
                          "label": "Date widget",
                          "name": "date_widget_month_year",
                          "type": "date",
                        },
                        Object {
                          "hint": "date type with year appearance",
                          "label": "Date widget",
                          "name": "date_widget_year",
                          "type": "date",
                        },
                        Object {
                          "hint": "time type with no appearance",
                          "label": "Time widget",
                          "name": "time_widget",
                          "type": "time",
                        },
                        Object {
                          "hint": "dateTime type with no appearance",
                          "label": "Date time widget",
                          "name": "date_time_widget",
                          "type": "dateTime",
                        },
                        Object {
                          "hint": "dateTime type with no-calendar appearance",
                          "label": "Date time widget",
                          "name": "date_time_widget_nocalendar",
                          "type": "dateTime",
                        },
                        Object {
                          "hint": "date type ethiopian appearance",
                          "label": "Ethiopian date widget",
                          "name": "ethiopian_date_widget",
                          "type": "date",
                        },
                        Object {
                          "hint": "date type coptic appearance",
                          "label": "Coptic date widget",
                          "name": "coptic_date_widget",
                          "type": "date",
                        },
                        Object {
                          "hint": "date type islamic appearance",
                          "label": "Islamic date widget",
                          "name": "islamic_date_widget",
                          "type": "date",
                        },
                      ],
                      "label": "Date and time widgets",
                      "name": "date_time_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Date and time widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type with no appearance",
                              "label": "Date widget",
                              "name": "date_widget",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type with no appearance",
                                "label": "Date widget",
                                "name": "date_widget",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type with no appearance",
                                  "label": "Date widget",
                                  "name": "date_widget",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="date_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="date"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="date_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="date"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type with no-calendar appearance",
                              "label": "Date Widget",
                              "name": "date_widget_nocalendar",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type with no-calendar appearance",
                                "label": "Date Widget",
                                "name": "date_widget_nocalendar",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type with no-calendar appearance",
                                  "label": "Date Widget",
                                  "name": "date_widget_nocalendar",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Date Widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="date_widget_nocalendar"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="date"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="date_widget_nocalendar"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="date"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type with month-year appearance",
                              "label": "Date widget",
                              "name": "date_widget_month_year",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type with month-year appearance",
                                "label": "Date widget",
                                "name": "date_widget_month_year",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type with month-year appearance",
                                  "label": "Date widget",
                                  "name": "date_widget_month_year",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="date_widget_month_year"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="date"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="date_widget_month_year"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="date"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type with year appearance",
                              "label": "Date widget",
                              "name": "date_widget_year",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type with year appearance",
                                "label": "Date widget",
                                "name": "date_widget_year",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type with year appearance",
                                  "label": "Date widget",
                                  "name": "date_widget_year",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="date_widget_year"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="date"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="date_widget_year"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="date"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "time type with no appearance",
                              "label": "Time widget",
                              "name": "time_widget",
                              "type": "time",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            time
                             
                            time_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="5"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "dateTime type with no appearance",
                              "label": "Date time widget",
                              "name": "date_time_widget",
                              "type": "dateTime",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            dateTime
                             
                            date_time_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="6"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "dateTime type with no-calendar appearance",
                              "label": "Date time widget",
                              "name": "date_time_widget_nocalendar",
                              "type": "dateTime",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            dateTime
                             
                            date_time_widget_nocalendar
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="7"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type ethiopian appearance",
                              "label": "Ethiopian date widget",
                              "name": "ethiopian_date_widget",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type ethiopian appearance",
                                "label": "Ethiopian date widget",
                                "name": "ethiopian_date_widget",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type ethiopian appearance",
                                  "label": "Ethiopian date widget",
                                  "name": "ethiopian_date_widget",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Ethiopian date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="ethiopian_date_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="date"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="ethiopian_date_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="date"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="8"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type coptic appearance",
                              "label": "Coptic date widget",
                              "name": "coptic_date_widget",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type coptic appearance",
                                "label": "Coptic date widget",
                                "name": "coptic_date_widget",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type coptic appearance",
                                  "label": "Coptic date widget",
                                  "name": "coptic_date_widget",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Coptic date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="coptic_date_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="date"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="coptic_date_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="date"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="9"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type islamic appearance",
                              "label": "Islamic date widget",
                              "name": "islamic_date_widget",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type islamic appearance",
                                "label": "Islamic date widget",
                                "name": "islamic_date_widget",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type islamic appearance",
                                  "label": "Islamic date widget",
                                  "name": "islamic_date_widget",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Islamic date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="islamic_date_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="date"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="islamic_date_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="date"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_select_one_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "bind": Object {
                            "required": "Yes",
                          },
                          "children": Array [
                            Object {
                              "label": Object {
                                "Bangla": "Albania",
                                "English": "Albania",
                              },
                              "name": "AL",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Andorra",
                                "English": "Andorra",
                              },
                              "name": "AD",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Armenia",
                                "English": "Armenia",
                              },
                              "name": "AM",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Austria",
                                "English": "Austria",
                              },
                              "name": "AT",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Azerbaijan",
                                "English": "Azerbaijan",
                              },
                              "name": "AZ",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Belarus",
                                "English": "Belarus",
                              },
                              "name": "BY",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Belgium",
                                "English": "Belgium",
                              },
                              "name": "BE",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Bosnia and Herzegovina",
                                "English": "Bosnia and Herzegovina",
                              },
                              "name": "BA",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Bulgaria",
                                "English": "Bulgaria",
                              },
                              "name": "BG",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Spain",
                                "English": "Spain",
                              },
                              "name": "ES",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Sweden",
                                "English": "Sweden",
                              },
                              "name": "SE",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Switzerland",
                                "English": "Switzerland",
                              },
                              "name": "CH",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Tunisia",
                                "English": "Tunisia",
                              },
                              "name": "TN",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Turkey",
                                "English": "Turkey",
                              },
                              "name": "TR",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Ukraine",
                                "English": "Ukraine",
                              },
                              "name": "UA",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "United Kingdom (UK)",
                                "English": "United Kingdom (UK)",
                              },
                              "name": "GB",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "Vatican City",
                                "English": "Vatican City",
                              },
                              "name": "VA",
                            },
                            Object {
                              "label": Object {
                                "Bangla": "অন্যান্য",
                                "English": "Others",
                              },
                              "name": "99",
                            },
                          ],
                          "control": Object {
                            "appearance": "minimal",
                          },
                          "label": Object {
                            "Bangla": "যেই দেশ থেকে ফেরত এসেছে তার নাম",
                            "English": "Return From",
                          },
                          "name": "return_from",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with minimal appearance, 4 text choices",
                          "label": "Spinner widget",
                          "name": "spinner_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with quick appearance, 4 text choices",
                          "label": "Select one autoadvance widget",
                          "name": "select_one_autoadvance_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with search appearance, 4 text choices",
                          "label": "Select one search widget",
                          "name": "select_one_search_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with autocomplete appearance, 4 text choices",
                          "label": "Select one search widget",
                          "name": "select_one_autocomplete_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with no appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                          "label": "Grid select one widget",
                          "name": "grid_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with compact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                          "label": "Grid select one widget",
                          "name": "grid_widget_compact",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with compact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                          "label": "Grid select one widget",
                          "name": "grid_widget_compact2",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with quickcompact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                          "label": "Grid select one widget",
                          "name": "grid_widget_quickcompact",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with quickcompact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                          "label": "Grid select one widget",
                          "name": "grid_widget_quickcompact2",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Head",
                              "name": "head",
                            },
                            Object {
                              "label": "Neck",
                              "name": "neck",
                            },
                            Object {
                              "label": "Lungs",
                              "name": "lungs",
                            },
                            Object {
                              "label": "Left proximal arm",
                              "name": "left_proximal_arm",
                            },
                            Object {
                              "label": "Left distal arm",
                              "name": "left_distal_arm",
                            },
                            Object {
                              "label": "Right proximal arm",
                              "name": "right_proximal_arm",
                            },
                            Object {
                              "label": "Right distal arm",
                              "name": "right_distal_arm",
                            },
                            Object {
                              "label": "Left proximal leg",
                              "name": "left_proximal_leg",
                            },
                            Object {
                              "label": "Left distal leg",
                              "name": "left_distal_leg",
                            },
                            Object {
                              "label": "Right proximal leg",
                              "name": "right_proximal_leg",
                            },
                            Object {
                              "label": "Right distal leg",
                              "name": "right_distal_leg",
                            },
                          ],
                          "hint": "select_one with type image-map appearance and image body.svg",
                          "label": "Image select one widget",
                          "name": "select_one_image_map",
                          "type": "select one",
                        },
                      ],
                      "label": "Select one widgets",
                      "name": "select_one_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Select one widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "required": "Yes",
                              },
                              "children": Array [
                                Object {
                                  "label": Object {
                                    "Bangla": "Albania",
                                    "English": "Albania",
                                  },
                                  "name": "AL",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Andorra",
                                    "English": "Andorra",
                                  },
                                  "name": "AD",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Armenia",
                                    "English": "Armenia",
                                  },
                                  "name": "AM",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Austria",
                                    "English": "Austria",
                                  },
                                  "name": "AT",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Azerbaijan",
                                    "English": "Azerbaijan",
                                  },
                                  "name": "AZ",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Belarus",
                                    "English": "Belarus",
                                  },
                                  "name": "BY",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Belgium",
                                    "English": "Belgium",
                                  },
                                  "name": "BE",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Bosnia and Herzegovina",
                                    "English": "Bosnia and Herzegovina",
                                  },
                                  "name": "BA",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Bulgaria",
                                    "English": "Bulgaria",
                                  },
                                  "name": "BG",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Spain",
                                    "English": "Spain",
                                  },
                                  "name": "ES",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Sweden",
                                    "English": "Sweden",
                                  },
                                  "name": "SE",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Switzerland",
                                    "English": "Switzerland",
                                  },
                                  "name": "CH",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Tunisia",
                                    "English": "Tunisia",
                                  },
                                  "name": "TN",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Turkey",
                                    "English": "Turkey",
                                  },
                                  "name": "TR",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Ukraine",
                                    "English": "Ukraine",
                                  },
                                  "name": "UA",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "United Kingdom (UK)",
                                    "English": "United Kingdom (UK)",
                                  },
                                  "name": "GB",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "Vatican City",
                                    "English": "Vatican City",
                                  },
                                  "name": "VA",
                                },
                                Object {
                                  "label": Object {
                                    "Bangla": "অন্যান্য",
                                    "English": "Others",
                                  },
                                  "name": "99",
                                },
                              ],
                              "control": Object {
                                "appearance": "minimal",
                              },
                              "label": Object {
                                "Bangla": "যেই দেশ থেকে ফেরত এসেছে তার নাম",
                                "English": "Return From",
                              },
                              "name": "return_from",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "required": "Yes",
                                },
                                "children": Array [
                                  Object {
                                    "label": Object {
                                      "Bangla": "Albania",
                                      "English": "Albania",
                                    },
                                    "name": "AL",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Andorra",
                                      "English": "Andorra",
                                    },
                                    "name": "AD",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Armenia",
                                      "English": "Armenia",
                                    },
                                    "name": "AM",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Austria",
                                      "English": "Austria",
                                    },
                                    "name": "AT",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Azerbaijan",
                                      "English": "Azerbaijan",
                                    },
                                    "name": "AZ",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Belarus",
                                      "English": "Belarus",
                                    },
                                    "name": "BY",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Belgium",
                                      "English": "Belgium",
                                    },
                                    "name": "BE",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Bosnia and Herzegovina",
                                      "English": "Bosnia and Herzegovina",
                                    },
                                    "name": "BA",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Bulgaria",
                                      "English": "Bulgaria",
                                    },
                                    "name": "BG",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Spain",
                                      "English": "Spain",
                                    },
                                    "name": "ES",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Sweden",
                                      "English": "Sweden",
                                    },
                                    "name": "SE",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Switzerland",
                                      "English": "Switzerland",
                                    },
                                    "name": "CH",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Tunisia",
                                      "English": "Tunisia",
                                    },
                                    "name": "TN",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Turkey",
                                      "English": "Turkey",
                                    },
                                    "name": "TR",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Ukraine",
                                      "English": "Ukraine",
                                    },
                                    "name": "UA",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "United Kingdom (UK)",
                                      "English": "United Kingdom (UK)",
                                    },
                                    "name": "GB",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "Vatican City",
                                      "English": "Vatican City",
                                    },
                                    "name": "VA",
                                  },
                                  Object {
                                    "label": Object {
                                      "Bangla": "অন্যান্য",
                                      "English": "Others",
                                    },
                                    "name": "99",
                                  },
                                ],
                                "control": Object {
                                  "appearance": "minimal",
                                },
                                "label": Object {
                                  "Bangla": "যেই দেশ থেকে ফেরত এসেছে তার নাম",
                                  "English": "Return From",
                                },
                                "name": "return_from",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneDropDown)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "required": "Yes",
                                  },
                                  "children": Array [
                                    Object {
                                      "label": Object {
                                        "Bangla": "Albania",
                                        "English": "Albania",
                                      },
                                      "name": "AL",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Andorra",
                                        "English": "Andorra",
                                      },
                                      "name": "AD",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Armenia",
                                        "English": "Armenia",
                                      },
                                      "name": "AM",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Austria",
                                        "English": "Austria",
                                      },
                                      "name": "AT",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Azerbaijan",
                                        "English": "Azerbaijan",
                                      },
                                      "name": "AZ",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Belarus",
                                        "English": "Belarus",
                                      },
                                      "name": "BY",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Belgium",
                                        "English": "Belgium",
                                      },
                                      "name": "BE",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Bosnia and Herzegovina",
                                        "English": "Bosnia and Herzegovina",
                                      },
                                      "name": "BA",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Bulgaria",
                                        "English": "Bulgaria",
                                      },
                                      "name": "BG",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Spain",
                                        "English": "Spain",
                                      },
                                      "name": "ES",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Sweden",
                                        "English": "Sweden",
                                      },
                                      "name": "SE",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Switzerland",
                                        "English": "Switzerland",
                                      },
                                      "name": "CH",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Tunisia",
                                        "English": "Tunisia",
                                      },
                                      "name": "TN",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Turkey",
                                        "English": "Turkey",
                                      },
                                      "name": "TR",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Ukraine",
                                        "English": "Ukraine",
                                      },
                                      "name": "UA",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "United Kingdom (UK)",
                                        "English": "United Kingdom (UK)",
                                      },
                                      "name": "GB",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "Vatican City",
                                        "English": "Vatican City",
                                      },
                                      "name": "VA",
                                    },
                                    Object {
                                      "label": Object {
                                        "Bangla": "অন্যান্য",
                                        "English": "Others",
                                      },
                                      "name": "99",
                                    },
                                  ],
                                  "control": Object {
                                    "appearance": "minimal",
                                  },
                                  "label": Object {
                                    "Bangla": "যেই দেশ থেকে ফেরত এসেছে তার নাম",
                                    "English": "Return From",
                                  },
                                  "name": "return_from",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneDropDown
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "bind": Object {
                                      "required": "Yes",
                                    },
                                    "children": Array [
                                      Object {
                                        "label": Object {
                                          "Bangla": "Albania",
                                          "English": "Albania",
                                        },
                                        "name": "AL",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Andorra",
                                          "English": "Andorra",
                                        },
                                        "name": "AD",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Armenia",
                                          "English": "Armenia",
                                        },
                                        "name": "AM",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Austria",
                                          "English": "Austria",
                                        },
                                        "name": "AT",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Azerbaijan",
                                          "English": "Azerbaijan",
                                        },
                                        "name": "AZ",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Belarus",
                                          "English": "Belarus",
                                        },
                                        "name": "BY",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Belgium",
                                          "English": "Belgium",
                                        },
                                        "name": "BE",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Bosnia and Herzegovina",
                                          "English": "Bosnia and Herzegovina",
                                        },
                                        "name": "BA",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Bulgaria",
                                          "English": "Bulgaria",
                                        },
                                        "name": "BG",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Spain",
                                          "English": "Spain",
                                        },
                                        "name": "ES",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Sweden",
                                          "English": "Sweden",
                                        },
                                        "name": "SE",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Switzerland",
                                          "English": "Switzerland",
                                        },
                                        "name": "CH",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Tunisia",
                                          "English": "Tunisia",
                                        },
                                        "name": "TN",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Turkey",
                                          "English": "Turkey",
                                        },
                                        "name": "TR",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Ukraine",
                                          "English": "Ukraine",
                                        },
                                        "name": "UA",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "United Kingdom (UK)",
                                          "English": "United Kingdom (UK)",
                                        },
                                        "name": "GB",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "Vatican City",
                                          "English": "Vatican City",
                                        },
                                        "name": "VA",
                                      },
                                      Object {
                                        "label": Object {
                                          "Bangla": "অন্যান্য",
                                          "English": "Others",
                                        },
                                        "name": "99",
                                      },
                                    ],
                                    "control": Object {
                                      "appearance": "minimal",
                                    },
                                    "label": Object {
                                      "Bangla": "যেই দেশ থেকে ফেরত এসেছে তার নাম",
                                      "English": "Return From",
                                    },
                                    "name": "return_from",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Return From
                                      </label>
                                    </Label>
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        *
                                      </label>
                                    </Label>
                                    <StateManager
                                      defaultInputValue=""
                                      defaultMenuIsOpen={false}
                                      defaultValue={null}
                                      multi={false}
                                      name="return_from"
                                      onChange={[Function]}
                                      options={
                                        Array [
                                          Object {
                                            "label": "AL",
                                            "value": "AL",
                                          },
                                          Object {
                                            "label": "AD",
                                            "value": "AD",
                                          },
                                          Object {
                                            "label": "AM",
                                            "value": "AM",
                                          },
                                          Object {
                                            "label": "AT",
                                            "value": "AT",
                                          },
                                          Object {
                                            "label": "AZ",
                                            "value": "AZ",
                                          },
                                          Object {
                                            "label": "BY",
                                            "value": "BY",
                                          },
                                          Object {
                                            "label": "BE",
                                            "value": "BE",
                                          },
                                          Object {
                                            "label": "BA",
                                            "value": "BA",
                                          },
                                          Object {
                                            "label": "BG",
                                            "value": "BG",
                                          },
                                          Object {
                                            "label": "ES",
                                            "value": "ES",
                                          },
                                          Object {
                                            "label": "SE",
                                            "value": "SE",
                                          },
                                          Object {
                                            "label": "CH",
                                            "value": "CH",
                                          },
                                          Object {
                                            "label": "TN",
                                            "value": "TN",
                                          },
                                          Object {
                                            "label": "TR",
                                            "value": "TR",
                                          },
                                          Object {
                                            "label": "UA",
                                            "value": "UA",
                                          },
                                          Object {
                                            "label": "GB",
                                            "value": "GB",
                                          },
                                          Object {
                                            "label": "VA",
                                            "value": "VA",
                                          },
                                          Object {
                                            "label": "99",
                                            "value": "99",
                                          },
                                        ]
                                      }
                                    >
                                      <Select
                                        backspaceRemovesValue={true}
                                        blurInputOnSelect={true}
                                        captureMenuScroll={false}
                                        closeMenuOnScroll={false}
                                        closeMenuOnSelect={true}
                                        components={Object {}}
                                        controlShouldRenderValue={true}
                                        escapeClearsValue={false}
                                        filterOption={[Function]}
                                        formatGroupLabel={[Function]}
                                        getOptionLabel={[Function]}
                                        getOptionValue={[Function]}
                                        inputValue=""
                                        isDisabled={false}
                                        isLoading={false}
                                        isMulti={false}
                                        isOptionDisabled={[Function]}
                                        isRtl={false}
                                        isSearchable={true}
                                        loadingMessage={[Function]}
                                        maxMenuHeight={300}
                                        menuIsOpen={false}
                                        menuPlacement="bottom"
                                        menuPosition="absolute"
                                        menuShouldBlockScroll={false}
                                        menuShouldScrollIntoView={true}
                                        minMenuHeight={140}
                                        multi={false}
                                        name="return_from"
                                        noOptionsMessage={[Function]}
                                        onChange={[Function]}
                                        onInputChange={[Function]}
                                        onMenuClose={[Function]}
                                        onMenuOpen={[Function]}
                                        openMenuOnClick={true}
                                        openMenuOnFocus={false}
                                        options={
                                          Array [
                                            Object {
                                              "label": "AL",
                                              "value": "AL",
                                            },
                                            Object {
                                              "label": "AD",
                                              "value": "AD",
                                            },
                                            Object {
                                              "label": "AM",
                                              "value": "AM",
                                            },
                                            Object {
                                              "label": "AT",
                                              "value": "AT",
                                            },
                                            Object {
                                              "label": "AZ",
                                              "value": "AZ",
                                            },
                                            Object {
                                              "label": "BY",
                                              "value": "BY",
                                            },
                                            Object {
                                              "label": "BE",
                                              "value": "BE",
                                            },
                                            Object {
                                              "label": "BA",
                                              "value": "BA",
                                            },
                                            Object {
                                              "label": "BG",
                                              "value": "BG",
                                            },
                                            Object {
                                              "label": "ES",
                                              "value": "ES",
                                            },
                                            Object {
                                              "label": "SE",
                                              "value": "SE",
                                            },
                                            Object {
                                              "label": "CH",
                                              "value": "CH",
                                            },
                                            Object {
                                              "label": "TN",
                                              "value": "TN",
                                            },
                                            Object {
                                              "label": "TR",
                                              "value": "TR",
                                            },
                                            Object {
                                              "label": "UA",
                                              "value": "UA",
                                            },
                                            Object {
                                              "label": "GB",
                                              "value": "GB",
                                            },
                                            Object {
                                              "label": "VA",
                                              "value": "VA",
                                            },
                                            Object {
                                              "label": "99",
                                              "value": "99",
                                            },
                                          ]
                                        }
                                        pageSize={5}
                                        placeholder="Select..."
                                        screenReaderStatus={[Function]}
                                        styles={Object {}}
                                        tabIndex="0"
                                        tabSelectsValue={true}
                                        value={null}
                                      >
                                        <SelectContainer
                                          clearValue={[Function]}
                                          cx={[Function]}
                                          getStyles={[Function]}
                                          getValue={[Function]}
                                          hasValue={false}
                                          innerProps={
                                            Object {
                                              "id": undefined,
                                              "onKeyDown": [Function],
                                            }
                                          }
                                          isDisabled={false}
                                          isFocused={false}
                                          isMulti={false}
                                          isRtl={false}
                                          options={
                                            Array [
                                              Object {
                                                "label": "AL",
                                                "value": "AL",
                                              },
                                              Object {
                                                "label": "AD",
                                                "value": "AD",
                                              },
                                              Object {
                                                "label": "AM",
                                                "value": "AM",
                                              },
                                              Object {
                                                "label": "AT",
                                                "value": "AT",
                                              },
                                              Object {
                                                "label": "AZ",
                                                "value": "AZ",
                                              },
                                              Object {
                                                "label": "BY",
                                                "value": "BY",
                                              },
                                              Object {
                                                "label": "BE",
                                                "value": "BE",
                                              },
                                              Object {
                                                "label": "BA",
                                                "value": "BA",
                                              },
                                              Object {
                                                "label": "BG",
                                                "value": "BG",
                                              },
                                              Object {
                                                "label": "ES",
                                                "value": "ES",
                                              },
                                              Object {
                                                "label": "SE",
                                                "value": "SE",
                                              },
                                              Object {
                                                "label": "CH",
                                                "value": "CH",
                                              },
                                              Object {
                                                "label": "TN",
                                                "value": "TN",
                                              },
                                              Object {
                                                "label": "TR",
                                                "value": "TR",
                                              },
                                              Object {
                                                "label": "UA",
                                                "value": "UA",
                                              },
                                              Object {
                                                "label": "GB",
                                                "value": "GB",
                                              },
                                              Object {
                                                "label": "VA",
                                                "value": "VA",
                                              },
                                              Object {
                                                "label": "99",
                                                "value": "99",
                                              },
                                            ]
                                          }
                                          selectOption={[Function]}
                                          selectProps={
                                            Object {
                                              "backspaceRemovesValue": true,
                                              "blurInputOnSelect": true,
                                              "captureMenuScroll": false,
                                              "closeMenuOnScroll": false,
                                              "closeMenuOnSelect": true,
                                              "components": Object {},
                                              "controlShouldRenderValue": true,
                                              "escapeClearsValue": false,
                                              "filterOption": [Function],
                                              "formatGroupLabel": [Function],
                                              "getOptionLabel": [Function],
                                              "getOptionValue": [Function],
                                              "inputValue": "",
                                              "isDisabled": false,
                                              "isLoading": false,
                                              "isMulti": false,
                                              "isOptionDisabled": [Function],
                                              "isRtl": false,
                                              "isSearchable": true,
                                              "loadingMessage": [Function],
                                              "maxMenuHeight": 300,
                                              "menuIsOpen": false,
                                              "menuPlacement": "bottom",
                                              "menuPosition": "absolute",
                                              "menuShouldBlockScroll": false,
                                              "menuShouldScrollIntoView": true,
                                              "minMenuHeight": 140,
                                              "multi": false,
                                              "name": "return_from",
                                              "noOptionsMessage": [Function],
                                              "onChange": [Function],
                                              "onInputChange": [Function],
                                              "onMenuClose": [Function],
                                              "onMenuOpen": [Function],
                                              "openMenuOnClick": true,
                                              "openMenuOnFocus": false,
                                              "options": Array [
                                                Object {
                                                  "label": "AL",
                                                  "value": "AL",
                                                },
                                                Object {
                                                  "label": "AD",
                                                  "value": "AD",
                                                },
                                                Object {
                                                  "label": "AM",
                                                  "value": "AM",
                                                },
                                                Object {
                                                  "label": "AT",
                                                  "value": "AT",
                                                },
                                                Object {
                                                  "label": "AZ",
                                                  "value": "AZ",
                                                },
                                                Object {
                                                  "label": "BY",
                                                  "value": "BY",
                                                },
                                                Object {
                                                  "label": "BE",
                                                  "value": "BE",
                                                },
                                                Object {
                                                  "label": "BA",
                                                  "value": "BA",
                                                },
                                                Object {
                                                  "label": "BG",
                                                  "value": "BG",
                                                },
                                                Object {
                                                  "label": "ES",
                                                  "value": "ES",
                                                },
                                                Object {
                                                  "label": "SE",
                                                  "value": "SE",
                                                },
                                                Object {
                                                  "label": "CH",
                                                  "value": "CH",
                                                },
                                                Object {
                                                  "label": "TN",
                                                  "value": "TN",
                                                },
                                                Object {
                                                  "label": "TR",
                                                  "value": "TR",
                                                },
                                                Object {
                                                  "label": "UA",
                                                  "value": "UA",
                                                },
                                                Object {
                                                  "label": "GB",
                                                  "value": "GB",
                                                },
                                                Object {
                                                  "label": "VA",
                                                  "value": "VA",
                                                },
                                                Object {
                                                  "label": "99",
                                                  "value": "99",
                                                },
                                              ],
                                              "pageSize": 5,
                                              "placeholder": "Select...",
                                              "screenReaderStatus": [Function],
                                              "styles": Object {},
                                              "tabIndex": "0",
                                              "tabSelectsValue": true,
                                              "value": null,
                                            }
                                          }
                                          setValue={[Function]}
                                          theme={
                                            Object {
                                              "borderRadius": 4,
                                              "colors": Object {
                                                "danger": "#DE350B",
                                                "dangerLight": "#FFBDAD",
                                                "neutral0": "hsl(0, 0%, 100%)",
                                                "neutral10": "hsl(0, 0%, 90%)",
                                                "neutral20": "hsl(0, 0%, 80%)",
                                                "neutral30": "hsl(0, 0%, 70%)",
                                                "neutral40": "hsl(0, 0%, 60%)",
                                                "neutral5": "hsl(0, 0%, 95%)",
                                                "neutral50": "hsl(0, 0%, 50%)",
                                                "neutral60": "hsl(0, 0%, 40%)",
                                                "neutral70": "hsl(0, 0%, 30%)",
                                                "neutral80": "hsl(0, 0%, 20%)",
                                                "neutral90": "hsl(0, 0%, 10%)",
                                                "primary": "#2684FF",
                                                "primary25": "#DEEBFF",
                                                "primary50": "#B2D4FF",
                                                "primary75": "#4C9AFF",
                                              },
                                              "spacing": Object {
                                                "baseUnit": 4,
                                                "controlHeight": 38,
                                                "menuGutter": 8,
                                              },
                                            }
                                          }
                                        >
                                          <EmotionCssPropInternal
                                            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="SelectContainer"
                                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                            className=""
                                            css={
                                              Object {
                                                "boxSizing": "border-box",
                                                "direction": null,
                                                "label": "container",
                                                "pointerEvents": null,
                                                "position": "relative",
                                              }
                                            }
                                            onKeyDown={[Function]}
                                          >
                                            <div
                                              className=" css-2b097c-container"
                                              onKeyDown={[Function]}
                                            >
                                              <Control
                                                clearValue={[Function]}
                                                cx={[Function]}
                                                getStyles={[Function]}
                                                getValue={[Function]}
                                                hasValue={false}
                                                innerProps={
                                                  Object {
                                                    "onMouseDown": [Function],
                                                    "onTouchEnd": [Function],
                                                  }
                                                }
                                                innerRef={[Function]}
                                                isDisabled={false}
                                                isFocused={false}
                                                isMulti={false}
                                                isRtl={false}
                                                menuIsOpen={false}
                                                options={
                                                  Array [
                                                    Object {
                                                      "label": "AL",
                                                      "value": "AL",
                                                    },
                                                    Object {
                                                      "label": "AD",
                                                      "value": "AD",
                                                    },
                                                    Object {
                                                      "label": "AM",
                                                      "value": "AM",
                                                    },
                                                    Object {
                                                      "label": "AT",
                                                      "value": "AT",
                                                    },
                                                    Object {
                                                      "label": "AZ",
                                                      "value": "AZ",
                                                    },
                                                    Object {
                                                      "label": "BY",
                                                      "value": "BY",
                                                    },
                                                    Object {
                                                      "label": "BE",
                                                      "value": "BE",
                                                    },
                                                    Object {
                                                      "label": "BA",
                                                      "value": "BA",
                                                    },
                                                    Object {
                                                      "label": "BG",
                                                      "value": "BG",
                                                    },
                                                    Object {
                                                      "label": "ES",
                                                      "value": "ES",
                                                    },
                                                    Object {
                                                      "label": "SE",
                                                      "value": "SE",
                                                    },
                                                    Object {
                                                      "label": "CH",
                                                      "value": "CH",
                                                    },
                                                    Object {
                                                      "label": "TN",
                                                      "value": "TN",
                                                    },
                                                    Object {
                                                      "label": "TR",
                                                      "value": "TR",
                                                    },
                                                    Object {
                                                      "label": "UA",
                                                      "value": "UA",
                                                    },
                                                    Object {
                                                      "label": "GB",
                                                      "value": "GB",
                                                    },
                                                    Object {
                                                      "label": "VA",
                                                      "value": "VA",
                                                    },
                                                    Object {
                                                      "label": "99",
                                                      "value": "99",
                                                    },
                                                  ]
                                                }
                                                selectOption={[Function]}
                                                selectProps={
                                                  Object {
                                                    "backspaceRemovesValue": true,
                                                    "blurInputOnSelect": true,
                                                    "captureMenuScroll": false,
                                                    "closeMenuOnScroll": false,
                                                    "closeMenuOnSelect": true,
                                                    "components": Object {},
                                                    "controlShouldRenderValue": true,
                                                    "escapeClearsValue": false,
                                                    "filterOption": [Function],
                                                    "formatGroupLabel": [Function],
                                                    "getOptionLabel": [Function],
                                                    "getOptionValue": [Function],
                                                    "inputValue": "",
                                                    "isDisabled": false,
                                                    "isLoading": false,
                                                    "isMulti": false,
                                                    "isOptionDisabled": [Function],
                                                    "isRtl": false,
                                                    "isSearchable": true,
                                                    "loadingMessage": [Function],
                                                    "maxMenuHeight": 300,
                                                    "menuIsOpen": false,
                                                    "menuPlacement": "bottom",
                                                    "menuPosition": "absolute",
                                                    "menuShouldBlockScroll": false,
                                                    "menuShouldScrollIntoView": true,
                                                    "minMenuHeight": 140,
                                                    "multi": false,
                                                    "name": "return_from",
                                                    "noOptionsMessage": [Function],
                                                    "onChange": [Function],
                                                    "onInputChange": [Function],
                                                    "onMenuClose": [Function],
                                                    "onMenuOpen": [Function],
                                                    "openMenuOnClick": true,
                                                    "openMenuOnFocus": false,
                                                    "options": Array [
                                                      Object {
                                                        "label": "AL",
                                                        "value": "AL",
                                                      },
                                                      Object {
                                                        "label": "AD",
                                                        "value": "AD",
                                                      },
                                                      Object {
                                                        "label": "AM",
                                                        "value": "AM",
                                                      },
                                                      Object {
                                                        "label": "AT",
                                                        "value": "AT",
                                                      },
                                                      Object {
                                                        "label": "AZ",
                                                        "value": "AZ",
                                                      },
                                                      Object {
                                                        "label": "BY",
                                                        "value": "BY",
                                                      },
                                                      Object {
                                                        "label": "BE",
                                                        "value": "BE",
                                                      },
                                                      Object {
                                                        "label": "BA",
                                                        "value": "BA",
                                                      },
                                                      Object {
                                                        "label": "BG",
                                                        "value": "BG",
                                                      },
                                                      Object {
                                                        "label": "ES",
                                                        "value": "ES",
                                                      },
                                                      Object {
                                                        "label": "SE",
                                                        "value": "SE",
                                                      },
                                                      Object {
                                                        "label": "CH",
                                                        "value": "CH",
                                                      },
                                                      Object {
                                                        "label": "TN",
                                                        "value": "TN",
                                                      },
                                                      Object {
                                                        "label": "TR",
                                                        "value": "TR",
                                                      },
                                                      Object {
                                                        "label": "UA",
                                                        "value": "UA",
                                                      },
                                                      Object {
                                                        "label": "GB",
                                                        "value": "GB",
                                                      },
                                                      Object {
                                                        "label": "VA",
                                                        "value": "VA",
                                                      },
                                                      Object {
                                                        "label": "99",
                                                        "value": "99",
                                                      },
                                                    ],
                                                    "pageSize": 5,
                                                    "placeholder": "Select...",
                                                    "screenReaderStatus": [Function],
                                                    "styles": Object {},
                                                    "tabIndex": "0",
                                                    "tabSelectsValue": true,
                                                    "value": null,
                                                  }
                                                }
                                                setValue={[Function]}
                                                theme={
                                                  Object {
                                                    "borderRadius": 4,
                                                    "colors": Object {
                                                      "danger": "#DE350B",
                                                      "dangerLight": "#FFBDAD",
                                                      "neutral0": "hsl(0, 0%, 100%)",
                                                      "neutral10": "hsl(0, 0%, 90%)",
                                                      "neutral20": "hsl(0, 0%, 80%)",
                                                      "neutral30": "hsl(0, 0%, 70%)",
                                                      "neutral40": "hsl(0, 0%, 60%)",
                                                      "neutral5": "hsl(0, 0%, 95%)",
                                                      "neutral50": "hsl(0, 0%, 50%)",
                                                      "neutral60": "hsl(0, 0%, 40%)",
                                                      "neutral70": "hsl(0, 0%, 30%)",
                                                      "neutral80": "hsl(0, 0%, 20%)",
                                                      "neutral90": "hsl(0, 0%, 10%)",
                                                      "primary": "#2684FF",
                                                      "primary25": "#DEEBFF",
                                                      "primary50": "#B2D4FF",
                                                      "primary75": "#4C9AFF",
                                                    },
                                                    "spacing": Object {
                                                      "baseUnit": 4,
                                                      "controlHeight": 38,
                                                      "menuGutter": 8,
                                                    },
                                                  }
                                                }
                                              >
                                                <EmotionCssPropInternal
                                                  __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Control"
                                                  __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                  className=""
                                                  css={
                                                    Object {
                                                      "&:hover": Object {
                                                        "borderColor": "hsl(0, 0%, 70%)",
                                                      },
                                                      "alignItems": "center",
                                                      "backgroundColor": "hsl(0, 0%, 100%)",
                                                      "borderColor": "hsl(0, 0%, 80%)",
                                                      "borderRadius": 4,
                                                      "borderStyle": "solid",
                                                      "borderWidth": 1,
                                                      "boxShadow": null,
                                                      "boxSizing": "border-box",
                                                      "cursor": "default",
                                                      "display": "flex",
                                                      "flexWrap": "wrap",
                                                      "justifyContent": "space-between",
                                                      "label": "control",
                                                      "minHeight": 38,
                                                      "outline": "0 !important",
                                                      "position": "relative",
                                                      "transition": "all 100ms",
                                                    }
                                                  }
                                                  onMouseDown={[Function]}
                                                  onTouchEnd={[Function]}
                                                >
                                                  <div
                                                    className=" css-yk16xz-control"
                                                    onMouseDown={[Function]}
                                                    onTouchEnd={[Function]}
                                                  >
                                                    <ValueContainer
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={false}
                                                      isDisabled={false}
                                                      isMulti={false}
                                                      isRtl={false}
                                                      options={
                                                        Array [
                                                          Object {
                                                            "label": "AL",
                                                            "value": "AL",
                                                          },
                                                          Object {
                                                            "label": "AD",
                                                            "value": "AD",
                                                          },
                                                          Object {
                                                            "label": "AM",
                                                            "value": "AM",
                                                          },
                                                          Object {
                                                            "label": "AT",
                                                            "value": "AT",
                                                          },
                                                          Object {
                                                            "label": "AZ",
                                                            "value": "AZ",
                                                          },
                                                          Object {
                                                            "label": "BY",
                                                            "value": "BY",
                                                          },
                                                          Object {
                                                            "label": "BE",
                                                            "value": "BE",
                                                          },
                                                          Object {
                                                            "label": "BA",
                                                            "value": "BA",
                                                          },
                                                          Object {
                                                            "label": "BG",
                                                            "value": "BG",
                                                          },
                                                          Object {
                                                            "label": "ES",
                                                            "value": "ES",
                                                          },
                                                          Object {
                                                            "label": "SE",
                                                            "value": "SE",
                                                          },
                                                          Object {
                                                            "label": "CH",
                                                            "value": "CH",
                                                          },
                                                          Object {
                                                            "label": "TN",
                                                            "value": "TN",
                                                          },
                                                          Object {
                                                            "label": "TR",
                                                            "value": "TR",
                                                          },
                                                          Object {
                                                            "label": "UA",
                                                            "value": "UA",
                                                          },
                                                          Object {
                                                            "label": "GB",
                                                            "value": "GB",
                                                          },
                                                          Object {
                                                            "label": "VA",
                                                            "value": "VA",
                                                          },
                                                          Object {
                                                            "label": "99",
                                                            "value": "99",
                                                          },
                                                        ]
                                                      }
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": true,
                                                          "captureMenuScroll": false,
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {},
                                                          "controlShouldRenderValue": true,
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "inputValue": "",
                                                          "isDisabled": false,
                                                          "isLoading": false,
                                                          "isMulti": false,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": true,
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 300,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "multi": false,
                                                          "name": "return_from",
                                                          "noOptionsMessage": [Function],
                                                          "onChange": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [
                                                            Object {
                                                              "label": "AL",
                                                              "value": "AL",
                                                            },
                                                            Object {
                                                              "label": "AD",
                                                              "value": "AD",
                                                            },
                                                            Object {
                                                              "label": "AM",
                                                              "value": "AM",
                                                            },
                                                            Object {
                                                              "label": "AT",
                                                              "value": "AT",
                                                            },
                                                            Object {
                                                              "label": "AZ",
                                                              "value": "AZ",
                                                            },
                                                            Object {
                                                              "label": "BY",
                                                              "value": "BY",
                                                            },
                                                            Object {
                                                              "label": "BE",
                                                              "value": "BE",
                                                            },
                                                            Object {
                                                              "label": "BA",
                                                              "value": "BA",
                                                            },
                                                            Object {
                                                              "label": "BG",
                                                              "value": "BG",
                                                            },
                                                            Object {
                                                              "label": "ES",
                                                              "value": "ES",
                                                            },
                                                            Object {
                                                              "label": "SE",
                                                              "value": "SE",
                                                            },
                                                            Object {
                                                              "label": "CH",
                                                              "value": "CH",
                                                            },
                                                            Object {
                                                              "label": "TN",
                                                              "value": "TN",
                                                            },
                                                            Object {
                                                              "label": "TR",
                                                              "value": "TR",
                                                            },
                                                            Object {
                                                              "label": "UA",
                                                              "value": "UA",
                                                            },
                                                            Object {
                                                              "label": "GB",
                                                              "value": "GB",
                                                            },
                                                            Object {
                                                              "label": "VA",
                                                              "value": "VA",
                                                            },
                                                            Object {
                                                              "label": "99",
                                                              "value": "99",
                                                            },
                                                          ],
                                                          "pageSize": 5,
                                                          "placeholder": "Select...",
                                                          "screenReaderStatus": [Function],
                                                          "styles": Object {},
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "value": null,
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#DE350B",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2684FF",
                                                            "primary25": "#DEEBFF",
                                                            "primary50": "#B2D4FF",
                                                            "primary75": "#4C9AFF",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    >
                                                      <EmotionCssPropInternal
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        className=""
                                                        css={
                                                          Object {
                                                            "WebkitOverflowScrolling": "touch",
                                                            "alignItems": "center",
                                                            "boxSizing": "border-box",
                                                            "display": "flex",
                                                            "flex": 1,
                                                            "flexWrap": "wrap",
                                                            "overflow": "hidden",
                                                            "padding": "2px 8px",
                                                            "position": "relative",
                                                          }
                                                        }
                                                      >
                                                        <div
                                                          className=" css-1hwfws3"
                                                        >
                                                          <Placeholder
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={false}
                                                            isDisabled={false}
                                                            isFocused={false}
                                                            isMulti={false}
                                                            isRtl={false}
                                                            key="placeholder"
                                                            options={
                                                              Array [
                                                                Object {
                                                                  "label": "AL",
                                                                  "value": "AL",
                                                                },
                                                                Object {
                                                                  "label": "AD",
                                                                  "value": "AD",
                                                                },
                                                                Object {
                                                                  "label": "AM",
                                                                  "value": "AM",
                                                                },
                                                                Object {
                                                                  "label": "AT",
                                                                  "value": "AT",
                                                                },
                                                                Object {
                                                                  "label": "AZ",
                                                                  "value": "AZ",
                                                                },
                                                                Object {
                                                                  "label": "BY",
                                                                  "value": "BY",
                                                                },
                                                                Object {
                                                                  "label": "BE",
                                                                  "value": "BE",
                                                                },
                                                                Object {
                                                                  "label": "BA",
                                                                  "value": "BA",
                                                                },
                                                                Object {
                                                                  "label": "BG",
                                                                  "value": "BG",
                                                                },
                                                                Object {
                                                                  "label": "ES",
                                                                  "value": "ES",
                                                                },
                                                                Object {
                                                                  "label": "SE",
                                                                  "value": "SE",
                                                                },
                                                                Object {
                                                                  "label": "CH",
                                                                  "value": "CH",
                                                                },
                                                                Object {
                                                                  "label": "TN",
                                                                  "value": "TN",
                                                                },
                                                                Object {
                                                                  "label": "TR",
                                                                  "value": "TR",
                                                                },
                                                                Object {
                                                                  "label": "UA",
                                                                  "value": "UA",
                                                                },
                                                                Object {
                                                                  "label": "GB",
                                                                  "value": "GB",
                                                                },
                                                                Object {
                                                                  "label": "VA",
                                                                  "value": "VA",
                                                                },
                                                                Object {
                                                                  "label": "99",
                                                                  "value": "99",
                                                                },
                                                              ]
                                                            }
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": true,
                                                                "captureMenuScroll": false,
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {},
                                                                "controlShouldRenderValue": true,
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "inputValue": "",
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": false,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "multi": false,
                                                                "name": "return_from",
                                                                "noOptionsMessage": [Function],
                                                                "onChange": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [
                                                                  Object {
                                                                    "label": "AL",
                                                                    "value": "AL",
                                                                  },
                                                                  Object {
                                                                    "label": "AD",
                                                                    "value": "AD",
                                                                  },
                                                                  Object {
                                                                    "label": "AM",
                                                                    "value": "AM",
                                                                  },
                                                                  Object {
                                                                    "label": "AT",
                                                                    "value": "AT",
                                                                  },
                                                                  Object {
                                                                    "label": "AZ",
                                                                    "value": "AZ",
                                                                  },
                                                                  Object {
                                                                    "label": "BY",
                                                                    "value": "BY",
                                                                  },
                                                                  Object {
                                                                    "label": "BE",
                                                                    "value": "BE",
                                                                  },
                                                                  Object {
                                                                    "label": "BA",
                                                                    "value": "BA",
                                                                  },
                                                                  Object {
                                                                    "label": "BG",
                                                                    "value": "BG",
                                                                  },
                                                                  Object {
                                                                    "label": "ES",
                                                                    "value": "ES",
                                                                  },
                                                                  Object {
                                                                    "label": "SE",
                                                                    "value": "SE",
                                                                  },
                                                                  Object {
                                                                    "label": "CH",
                                                                    "value": "CH",
                                                                  },
                                                                  Object {
                                                                    "label": "TN",
                                                                    "value": "TN",
                                                                  },
                                                                  Object {
                                                                    "label": "TR",
                                                                    "value": "TR",
                                                                  },
                                                                  Object {
                                                                    "label": "UA",
                                                                    "value": "UA",
                                                                  },
                                                                  Object {
                                                                    "label": "GB",
                                                                    "value": "GB",
                                                                  },
                                                                  Object {
                                                                    "label": "VA",
                                                                    "value": "VA",
                                                                  },
                                                                  Object {
                                                                    "label": "99",
                                                                    "value": "99",
                                                                  },
                                                                ],
                                                                "pageSize": 5,
                                                                "placeholder": "Select...",
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {},
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "value": null,
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#DE350B",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2684FF",
                                                                  "primary25": "#DEEBFF",
                                                                  "primary50": "#B2D4FF",
                                                                  "primary75": "#4C9AFF",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Placeholder"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                              className=""
                                                              css={
                                                                Object {
                                                                  "boxSizing": "border-box",
                                                                  "color": "hsl(0, 0%, 50%)",
                                                                  "label": "placeholder",
                                                                  "marginLeft": 2,
                                                                  "marginRight": 2,
                                                                  "position": "absolute",
                                                                  "top": "50%",
                                                                  "transform": "translateY(-50%)",
                                                                }
                                                              }
                                                            >
                                                              <div
                                                                className=" css-1wa3eu0-placeholder"
                                                              >
                                                                Select...
                                                              </div>
                                                            </EmotionCssPropInternal>
                                                          </Placeholder>
                                                          <Input
                                                            aria-autocomplete="list"
                                                            autoCapitalize="none"
                                                            autoComplete="off"
                                                            autoCorrect="off"
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            id="react-select-4-input"
                                                            innerRef={[Function]}
                                                            isDisabled={false}
                                                            isHidden={false}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": true,
                                                                "captureMenuScroll": false,
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {},
                                                                "controlShouldRenderValue": true,
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "inputValue": "",
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": false,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "multi": false,
                                                                "name": "return_from",
                                                                "noOptionsMessage": [Function],
                                                                "onChange": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [
                                                                  Object {
                                                                    "label": "AL",
                                                                    "value": "AL",
                                                                  },
                                                                  Object {
                                                                    "label": "AD",
                                                                    "value": "AD",
                                                                  },
                                                                  Object {
                                                                    "label": "AM",
                                                                    "value": "AM",
                                                                  },
                                                                  Object {
                                                                    "label": "AT",
                                                                    "value": "AT",
                                                                  },
                                                                  Object {
                                                                    "label": "AZ",
                                                                    "value": "AZ",
                                                                  },
                                                                  Object {
                                                                    "label": "BY",
                                                                    "value": "BY",
                                                                  },
                                                                  Object {
                                                                    "label": "BE",
                                                                    "value": "BE",
                                                                  },
                                                                  Object {
                                                                    "label": "BA",
                                                                    "value": "BA",
                                                                  },
                                                                  Object {
                                                                    "label": "BG",
                                                                    "value": "BG",
                                                                  },
                                                                  Object {
                                                                    "label": "ES",
                                                                    "value": "ES",
                                                                  },
                                                                  Object {
                                                                    "label": "SE",
                                                                    "value": "SE",
                                                                  },
                                                                  Object {
                                                                    "label": "CH",
                                                                    "value": "CH",
                                                                  },
                                                                  Object {
                                                                    "label": "TN",
                                                                    "value": "TN",
                                                                  },
                                                                  Object {
                                                                    "label": "TR",
                                                                    "value": "TR",
                                                                  },
                                                                  Object {
                                                                    "label": "UA",
                                                                    "value": "UA",
                                                                  },
                                                                  Object {
                                                                    "label": "GB",
                                                                    "value": "GB",
                                                                  },
                                                                  Object {
                                                                    "label": "VA",
                                                                    "value": "VA",
                                                                  },
                                                                  Object {
                                                                    "label": "99",
                                                                    "value": "99",
                                                                  },
                                                                ],
                                                                "pageSize": 5,
                                                                "placeholder": "Select...",
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {},
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "value": null,
                                                              }
                                                            }
                                                            spellCheck="false"
                                                            tabIndex="0"
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#DE350B",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2684FF",
                                                                  "primary25": "#DEEBFF",
                                                                  "primary50": "#B2D4FF",
                                                                  "primary75": "#4C9AFF",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                            type="text"
                                                            value=""
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Input"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                              css={
                                                                Object {
                                                                  "boxSizing": "border-box",
                                                                  "color": "hsl(0, 0%, 20%)",
                                                                  "margin": 2,
                                                                  "paddingBottom": 2,
                                                                  "paddingTop": 2,
                                                                  "visibility": "visible",
                                                                }
                                                              }
                                                            >
                                                              <div
                                                                className="css-b8ldur-Input"
                                                              >
                                                                <AutosizeInput
                                                                  aria-autocomplete="list"
                                                                  autoCapitalize="none"
                                                                  autoComplete="off"
                                                                  autoCorrect="off"
                                                                  className=""
                                                                  disabled={false}
                                                                  id="react-select-4-input"
                                                                  injectStyles={true}
                                                                  inputRef={[Function]}
                                                                  inputStyle={
                                                                    Object {
                                                                      "background": 0,
                                                                      "border": 0,
                                                                      "color": "inherit",
                                                                      "fontSize": "inherit",
                                                                      "label": "input",
                                                                      "opacity": 1,
                                                                      "outline": 0,
                                                                      "padding": 0,
                                                                    }
                                                                  }
                                                                  minWidth={1}
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  spellCheck="false"
                                                                  tabIndex="0"
                                                                  type="text"
                                                                  value=""
                                                                >
                                                                  <div
                                                                    className=""
                                                                    style={
                                                                      Object {
                                                                        "display": "inline-block",
                                                                      }
                                                                    }
                                                                  >
                                                                    <input
                                                                      aria-autocomplete="list"
                                                                      autoCapitalize="none"
                                                                      autoComplete="off"
                                                                      autoCorrect="off"
                                                                      disabled={false}
                                                                      id="react-select-4-input"
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      spellCheck="false"
                                                                      style={
                                                                        Object {
                                                                          "background": 0,
                                                                          "border": 0,
                                                                          "boxSizing": "content-box",
                                                                          "color": "inherit",
                                                                          "fontSize": "inherit",
                                                                          "label": "input",
                                                                          "opacity": 1,
                                                                          "outline": 0,
                                                                          "padding": 0,
                                                                          "width": "2px",
                                                                        }
                                                                      }
                                                                      tabIndex="0"
                                                                      type="text"
                                                                      value=""
                                                                    />
                                                                    <div
                                                                      style={
                                                                        Object {
                                                                          "height": 0,
                                                                          "left": 0,
                                                                          "overflow": "scroll",
                                                                          "position": "absolute",
                                                                          "top": 0,
                                                                          "visibility": "hidden",
                                                                          "whiteSpace": "pre",
                                                                        }
                                                                      }
                                                                    />
                                                                  </div>
                                                                </AutosizeInput>
                                                              </div>
                                                            </EmotionCssPropInternal>
                                                          </Input>
                                                        </div>
                                                      </EmotionCssPropInternal>
                                                    </ValueContainer>
                                                    <IndicatorsContainer
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={false}
                                                      isDisabled={false}
                                                      isMulti={false}
                                                      isRtl={false}
                                                      options={
                                                        Array [
                                                          Object {
                                                            "label": "AL",
                                                            "value": "AL",
                                                          },
                                                          Object {
                                                            "label": "AD",
                                                            "value": "AD",
                                                          },
                                                          Object {
                                                            "label": "AM",
                                                            "value": "AM",
                                                          },
                                                          Object {
                                                            "label": "AT",
                                                            "value": "AT",
                                                          },
                                                          Object {
                                                            "label": "AZ",
                                                            "value": "AZ",
                                                          },
                                                          Object {
                                                            "label": "BY",
                                                            "value": "BY",
                                                          },
                                                          Object {
                                                            "label": "BE",
                                                            "value": "BE",
                                                          },
                                                          Object {
                                                            "label": "BA",
                                                            "value": "BA",
                                                          },
                                                          Object {
                                                            "label": "BG",
                                                            "value": "BG",
                                                          },
                                                          Object {
                                                            "label": "ES",
                                                            "value": "ES",
                                                          },
                                                          Object {
                                                            "label": "SE",
                                                            "value": "SE",
                                                          },
                                                          Object {
                                                            "label": "CH",
                                                            "value": "CH",
                                                          },
                                                          Object {
                                                            "label": "TN",
                                                            "value": "TN",
                                                          },
                                                          Object {
                                                            "label": "TR",
                                                            "value": "TR",
                                                          },
                                                          Object {
                                                            "label": "UA",
                                                            "value": "UA",
                                                          },
                                                          Object {
                                                            "label": "GB",
                                                            "value": "GB",
                                                          },
                                                          Object {
                                                            "label": "VA",
                                                            "value": "VA",
                                                          },
                                                          Object {
                                                            "label": "99",
                                                            "value": "99",
                                                          },
                                                        ]
                                                      }
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": true,
                                                          "captureMenuScroll": false,
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {},
                                                          "controlShouldRenderValue": true,
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "inputValue": "",
                                                          "isDisabled": false,
                                                          "isLoading": false,
                                                          "isMulti": false,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": true,
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 300,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "multi": false,
                                                          "name": "return_from",
                                                          "noOptionsMessage": [Function],
                                                          "onChange": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [
                                                            Object {
                                                              "label": "AL",
                                                              "value": "AL",
                                                            },
                                                            Object {
                                                              "label": "AD",
                                                              "value": "AD",
                                                            },
                                                            Object {
                                                              "label": "AM",
                                                              "value": "AM",
                                                            },
                                                            Object {
                                                              "label": "AT",
                                                              "value": "AT",
                                                            },
                                                            Object {
                                                              "label": "AZ",
                                                              "value": "AZ",
                                                            },
                                                            Object {
                                                              "label": "BY",
                                                              "value": "BY",
                                                            },
                                                            Object {
                                                              "label": "BE",
                                                              "value": "BE",
                                                            },
                                                            Object {
                                                              "label": "BA",
                                                              "value": "BA",
                                                            },
                                                            Object {
                                                              "label": "BG",
                                                              "value": "BG",
                                                            },
                                                            Object {
                                                              "label": "ES",
                                                              "value": "ES",
                                                            },
                                                            Object {
                                                              "label": "SE",
                                                              "value": "SE",
                                                            },
                                                            Object {
                                                              "label": "CH",
                                                              "value": "CH",
                                                            },
                                                            Object {
                                                              "label": "TN",
                                                              "value": "TN",
                                                            },
                                                            Object {
                                                              "label": "TR",
                                                              "value": "TR",
                                                            },
                                                            Object {
                                                              "label": "UA",
                                                              "value": "UA",
                                                            },
                                                            Object {
                                                              "label": "GB",
                                                              "value": "GB",
                                                            },
                                                            Object {
                                                              "label": "VA",
                                                              "value": "VA",
                                                            },
                                                            Object {
                                                              "label": "99",
                                                              "value": "99",
                                                            },
                                                          ],
                                                          "pageSize": 5,
                                                          "placeholder": "Select...",
                                                          "screenReaderStatus": [Function],
                                                          "styles": Object {},
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "value": null,
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#DE350B",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2684FF",
                                                            "primary25": "#DEEBFF",
                                                            "primary50": "#B2D4FF",
                                                            "primary75": "#4C9AFF",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    >
                                                      <EmotionCssPropInternal
                                                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IndicatorsContainer"
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        className=""
                                                        css={
                                                          Object {
                                                            "alignItems": "center",
                                                            "alignSelf": "stretch",
                                                            "boxSizing": "border-box",
                                                            "display": "flex",
                                                            "flexShrink": 0,
                                                          }
                                                        }
                                                      >
                                                        <div
                                                          className=" css-1hb7zxy-IndicatorsContainer"
                                                        >
                                                          <IndicatorSeparator
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={false}
                                                            isDisabled={false}
                                                            isFocused={false}
                                                            isMulti={false}
                                                            isRtl={false}
                                                            options={
                                                              Array [
                                                                Object {
                                                                  "label": "AL",
                                                                  "value": "AL",
                                                                },
                                                                Object {
                                                                  "label": "AD",
                                                                  "value": "AD",
                                                                },
                                                                Object {
                                                                  "label": "AM",
                                                                  "value": "AM",
                                                                },
                                                                Object {
                                                                  "label": "AT",
                                                                  "value": "AT",
                                                                },
                                                                Object {
                                                                  "label": "AZ",
                                                                  "value": "AZ",
                                                                },
                                                                Object {
                                                                  "label": "BY",
                                                                  "value": "BY",
                                                                },
                                                                Object {
                                                                  "label": "BE",
                                                                  "value": "BE",
                                                                },
                                                                Object {
                                                                  "label": "BA",
                                                                  "value": "BA",
                                                                },
                                                                Object {
                                                                  "label": "BG",
                                                                  "value": "BG",
                                                                },
                                                                Object {
                                                                  "label": "ES",
                                                                  "value": "ES",
                                                                },
                                                                Object {
                                                                  "label": "SE",
                                                                  "value": "SE",
                                                                },
                                                                Object {
                                                                  "label": "CH",
                                                                  "value": "CH",
                                                                },
                                                                Object {
                                                                  "label": "TN",
                                                                  "value": "TN",
                                                                },
                                                                Object {
                                                                  "label": "TR",
                                                                  "value": "TR",
                                                                },
                                                                Object {
                                                                  "label": "UA",
                                                                  "value": "UA",
                                                                },
                                                                Object {
                                                                  "label": "GB",
                                                                  "value": "GB",
                                                                },
                                                                Object {
                                                                  "label": "VA",
                                                                  "value": "VA",
                                                                },
                                                                Object {
                                                                  "label": "99",
                                                                  "value": "99",
                                                                },
                                                              ]
                                                            }
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": true,
                                                                "captureMenuScroll": false,
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {},
                                                                "controlShouldRenderValue": true,
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "inputValue": "",
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": false,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "multi": false,
                                                                "name": "return_from",
                                                                "noOptionsMessage": [Function],
                                                                "onChange": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [
                                                                  Object {
                                                                    "label": "AL",
                                                                    "value": "AL",
                                                                  },
                                                                  Object {
                                                                    "label": "AD",
                                                                    "value": "AD",
                                                                  },
                                                                  Object {
                                                                    "label": "AM",
                                                                    "value": "AM",
                                                                  },
                                                                  Object {
                                                                    "label": "AT",
                                                                    "value": "AT",
                                                                  },
                                                                  Object {
                                                                    "label": "AZ",
                                                                    "value": "AZ",
                                                                  },
                                                                  Object {
                                                                    "label": "BY",
                                                                    "value": "BY",
                                                                  },
                                                                  Object {
                                                                    "label": "BE",
                                                                    "value": "BE",
                                                                  },
                                                                  Object {
                                                                    "label": "BA",
                                                                    "value": "BA",
                                                                  },
                                                                  Object {
                                                                    "label": "BG",
                                                                    "value": "BG",
                                                                  },
                                                                  Object {
                                                                    "label": "ES",
                                                                    "value": "ES",
                                                                  },
                                                                  Object {
                                                                    "label": "SE",
                                                                    "value": "SE",
                                                                  },
                                                                  Object {
                                                                    "label": "CH",
                                                                    "value": "CH",
                                                                  },
                                                                  Object {
                                                                    "label": "TN",
                                                                    "value": "TN",
                                                                  },
                                                                  Object {
                                                                    "label": "TR",
                                                                    "value": "TR",
                                                                  },
                                                                  Object {
                                                                    "label": "UA",
                                                                    "value": "UA",
                                                                  },
                                                                  Object {
                                                                    "label": "GB",
                                                                    "value": "GB",
                                                                  },
                                                                  Object {
                                                                    "label": "VA",
                                                                    "value": "VA",
                                                                  },
                                                                  Object {
                                                                    "label": "99",
                                                                    "value": "99",
                                                                  },
                                                                ],
                                                                "pageSize": 5,
                                                                "placeholder": "Select...",
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {},
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "value": null,
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#DE350B",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2684FF",
                                                                  "primary25": "#DEEBFF",
                                                                  "primary50": "#B2D4FF",
                                                                  "primary75": "#4C9AFF",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IndicatorSeparator"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                                                              className=""
                                                              css={
                                                                Object {
                                                                  "alignSelf": "stretch",
                                                                  "backgroundColor": "hsl(0, 0%, 80%)",
                                                                  "boxSizing": "border-box",
                                                                  "label": "indicatorSeparator",
                                                                  "marginBottom": 8,
                                                                  "marginTop": 8,
                                                                  "width": 1,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className=" css-1okebmr-indicatorSeparator"
                                                              />
                                                            </EmotionCssPropInternal>
                                                          </IndicatorSeparator>
                                                          <DropdownIndicator
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={false}
                                                            innerProps={
                                                              Object {
                                                                "aria-hidden": "true",
                                                                "onMouseDown": [Function],
                                                                "onTouchEnd": [Function],
                                                              }
                                                            }
                                                            isDisabled={false}
                                                            isFocused={false}
                                                            isMulti={false}
                                                            isRtl={false}
                                                            options={
                                                              Array [
                                                                Object {
                                                                  "label": "AL",
                                                                  "value": "AL",
                                                                },
                                                                Object {
                                                                  "label": "AD",
                                                                  "value": "AD",
                                                                },
                                                                Object {
                                                                  "label": "AM",
                                                                  "value": "AM",
                                                                },
                                                                Object {
                                                                  "label": "AT",
                                                                  "value": "AT",
                                                                },
                                                                Object {
                                                                  "label": "AZ",
                                                                  "value": "AZ",
                                                                },
                                                                Object {
                                                                  "label": "BY",
                                                                  "value": "BY",
                                                                },
                                                                Object {
                                                                  "label": "BE",
                                                                  "value": "BE",
                                                                },
                                                                Object {
                                                                  "label": "BA",
                                                                  "value": "BA",
                                                                },
                                                                Object {
                                                                  "label": "BG",
                                                                  "value": "BG",
                                                                },
                                                                Object {
                                                                  "label": "ES",
                                                                  "value": "ES",
                                                                },
                                                                Object {
                                                                  "label": "SE",
                                                                  "value": "SE",
                                                                },
                                                                Object {
                                                                  "label": "CH",
                                                                  "value": "CH",
                                                                },
                                                                Object {
                                                                  "label": "TN",
                                                                  "value": "TN",
                                                                },
                                                                Object {
                                                                  "label": "TR",
                                                                  "value": "TR",
                                                                },
                                                                Object {
                                                                  "label": "UA",
                                                                  "value": "UA",
                                                                },
                                                                Object {
                                                                  "label": "GB",
                                                                  "value": "GB",
                                                                },
                                                                Object {
                                                                  "label": "VA",
                                                                  "value": "VA",
                                                                },
                                                                Object {
                                                                  "label": "99",
                                                                  "value": "99",
                                                                },
                                                              ]
                                                            }
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": true,
                                                                "captureMenuScroll": false,
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {},
                                                                "controlShouldRenderValue": true,
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "inputValue": "",
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": false,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "multi": false,
                                                                "name": "return_from",
                                                                "noOptionsMessage": [Function],
                                                                "onChange": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [
                                                                  Object {
                                                                    "label": "AL",
                                                                    "value": "AL",
                                                                  },
                                                                  Object {
                                                                    "label": "AD",
                                                                    "value": "AD",
                                                                  },
                                                                  Object {
                                                                    "label": "AM",
                                                                    "value": "AM",
                                                                  },
                                                                  Object {
                                                                    "label": "AT",
                                                                    "value": "AT",
                                                                  },
                                                                  Object {
                                                                    "label": "AZ",
                                                                    "value": "AZ",
                                                                  },
                                                                  Object {
                                                                    "label": "BY",
                                                                    "value": "BY",
                                                                  },
                                                                  Object {
                                                                    "label": "BE",
                                                                    "value": "BE",
                                                                  },
                                                                  Object {
                                                                    "label": "BA",
                                                                    "value": "BA",
                                                                  },
                                                                  Object {
                                                                    "label": "BG",
                                                                    "value": "BG",
                                                                  },
                                                                  Object {
                                                                    "label": "ES",
                                                                    "value": "ES",
                                                                  },
                                                                  Object {
                                                                    "label": "SE",
                                                                    "value": "SE",
                                                                  },
                                                                  Object {
                                                                    "label": "CH",
                                                                    "value": "CH",
                                                                  },
                                                                  Object {
                                                                    "label": "TN",
                                                                    "value": "TN",
                                                                  },
                                                                  Object {
                                                                    "label": "TR",
                                                                    "value": "TR",
                                                                  },
                                                                  Object {
                                                                    "label": "UA",
                                                                    "value": "UA",
                                                                  },
                                                                  Object {
                                                                    "label": "GB",
                                                                    "value": "GB",
                                                                  },
                                                                  Object {
                                                                    "label": "VA",
                                                                    "value": "VA",
                                                                  },
                                                                  Object {
                                                                    "label": "99",
                                                                    "value": "99",
                                                                  },
                                                                ],
                                                                "pageSize": 5,
                                                                "placeholder": "Select...",
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {},
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "value": null,
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#DE350B",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2684FF",
                                                                  "primary25": "#DEEBFF",
                                                                  "primary50": "#B2D4FF",
                                                                  "primary75": "#4C9AFF",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="DropdownIndicator"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                              aria-hidden="true"
                                                              className=""
                                                              css={
                                                                Object {
                                                                  ":hover": Object {
                                                                    "color": "hsl(0, 0%, 60%)",
                                                                  },
                                                                  "boxSizing": "border-box",
                                                                  "color": "hsl(0, 0%, 80%)",
                                                                  "display": "flex",
                                                                  "label": "indicatorContainer",
                                                                  "padding": 8,
                                                                  "transition": "color 150ms",
                                                                }
                                                              }
                                                              onMouseDown={[Function]}
                                                              onTouchEnd={[Function]}
                                                            >
                                                              <div
                                                                aria-hidden="true"
                                                                className=" css-tlfecz-indicatorContainer"
                                                                onMouseDown={[Function]}
                                                                onTouchEnd={[Function]}
                                                              >
                                                                <DownChevron>
                                                                  <Svg
                                                                    size={20}
                                                                  >
                                                                    <EmotionCssPropInternal
                                                                      __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Svg"
                                                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="svg"
                                                                      aria-hidden="true"
                                                                      css={
                                                                        Object {
                                                                          "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                                                                          "name": "19bqh2r",
                                                                          "styles": "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;",
                                                                        }
                                                                      }
                                                                      focusable="false"
                                                                      height={20}
                                                                      viewBox="0 0 20 20"
                                                                      width={20}
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className="css-6q0nyr-Svg"
                                                                        focusable="false"
                                                                        height={20}
                                                                        viewBox="0 0 20 20"
                                                                        width={20}
                                                                      >
                                                                        <path
                                                                          d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                                                        />
                                                                      </svg>
                                                                    </EmotionCssPropInternal>
                                                                  </Svg>
                                                                </DownChevron>
                                                              </div>
                                                            </EmotionCssPropInternal>
                                                          </DropdownIndicator>
                                                        </div>
                                                      </EmotionCssPropInternal>
                                                    </IndicatorsContainer>
                                                  </div>
                                                </EmotionCssPropInternal>
                                              </Control>
                                              <input
                                                name="return_from"
                                                type="hidden"
                                                value=""
                                              />
                                            </div>
                                          </EmotionCssPropInternal>
                                        </SelectContainer>
                                      </Select>
                                    </StateManager>
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        This field is required
                                      </label>
                                    </Label>
                                  </div>
                                </FormGroup>
                              </SelectOneDropDown>
                            </Connect(SelectOneDropDown)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with minimal appearance, 4 text choices",
                              "label": "Spinner widget",
                              "name": "spinner_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_one type with minimal appearance, 4 text choices",
                                "label": "Spinner widget",
                                "name": "spinner_widget",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_one type with minimal appearance, 4 text choices",
                                  "label": "Spinner widget",
                                  "name": "spinner_widget",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_one type with minimal appearance, 4 text choices",
                                    "label": "Spinner widget",
                                    "name": "spinner_widget",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Spinner widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="spinner_widget-0"
                                        name="spinner_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="spinner_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="spinner_widget-1"
                                        name="spinner_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="spinner_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="spinner_widget-2"
                                        name="spinner_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="spinner_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="spinner_widget-3"
                                        name="spinner_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="spinner_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with quick appearance, 4 text choices",
                              "label": "Select one autoadvance widget",
                              "name": "select_one_autoadvance_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_one type with quick appearance, 4 text choices",
                                "label": "Select one autoadvance widget",
                                "name": "select_one_autoadvance_widget",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_one type with quick appearance, 4 text choices",
                                  "label": "Select one autoadvance widget",
                                  "name": "select_one_autoadvance_widget",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_one type with quick appearance, 4 text choices",
                                    "label": "Select one autoadvance widget",
                                    "name": "select_one_autoadvance_widget",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Select one autoadvance widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="select_one_autoadvance_widget-0"
                                        name="select_one_autoadvance_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_autoadvance_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="select_one_autoadvance_widget-1"
                                        name="select_one_autoadvance_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_autoadvance_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="select_one_autoadvance_widget-2"
                                        name="select_one_autoadvance_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_autoadvance_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="select_one_autoadvance_widget-3"
                                        name="select_one_autoadvance_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_autoadvance_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with search appearance, 4 text choices",
                              "label": "Select one search widget",
                              "name": "select_one_search_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_one type with search appearance, 4 text choices",
                                "label": "Select one search widget",
                                "name": "select_one_search_widget",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_one type with search appearance, 4 text choices",
                                  "label": "Select one search widget",
                                  "name": "select_one_search_widget",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_one type with search appearance, 4 text choices",
                                    "label": "Select one search widget",
                                    "name": "select_one_search_widget",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Select one search widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="select_one_search_widget-0"
                                        name="select_one_search_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_search_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="select_one_search_widget-1"
                                        name="select_one_search_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_search_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="select_one_search_widget-2"
                                        name="select_one_search_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_search_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="select_one_search_widget-3"
                                        name="select_one_search_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_search_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with autocomplete appearance, 4 text choices",
                              "label": "Select one search widget",
                              "name": "select_one_autocomplete_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_one type with autocomplete appearance, 4 text choices",
                                "label": "Select one search widget",
                                "name": "select_one_autocomplete_widget",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_one type with autocomplete appearance, 4 text choices",
                                  "label": "Select one search widget",
                                  "name": "select_one_autocomplete_widget",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_one type with autocomplete appearance, 4 text choices",
                                    "label": "Select one search widget",
                                    "name": "select_one_autocomplete_widget",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Select one search widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="select_one_autocomplete_widget-0"
                                        name="select_one_autocomplete_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_autocomplete_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="select_one_autocomplete_widget-1"
                                        name="select_one_autocomplete_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_autocomplete_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="select_one_autocomplete_widget-2"
                                        name="select_one_autocomplete_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_autocomplete_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="select_one_autocomplete_widget-3"
                                        name="select_one_autocomplete_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_autocomplete_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="5"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with no appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                              "label": "Grid select one widget",
                              "name": "grid_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "media": Object {
                                      "image": "a.jpg",
                                    },
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "media": Object {
                                      "image": "b.jpg",
                                    },
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "media": Object {
                                      "image": "c.jpg",
                                    },
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "media": Object {
                                      "image": "d.jpg",
                                    },
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_one type with no appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                "label": "Grid select one widget",
                                "name": "grid_widget",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "media": Object {
                                        "image": "a.jpg",
                                      },
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "media": Object {
                                        "image": "b.jpg",
                                      },
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "media": Object {
                                        "image": "c.jpg",
                                      },
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "media": Object {
                                        "image": "d.jpg",
                                      },
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_one type with no appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                  "label": "Grid select one widget",
                                  "name": "grid_widget",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "media": Object {
                                          "image": "a.jpg",
                                        },
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "media": Object {
                                          "image": "b.jpg",
                                        },
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "media": Object {
                                          "image": "c.jpg",
                                        },
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "media": Object {
                                          "image": "d.jpg",
                                        },
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_one type with no appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                    "label": "Grid select one widget",
                                    "name": "grid_widget",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Grid select one widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="grid_widget-0"
                                        name="grid_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="grid_widget-1"
                                        name="grid_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="grid_widget-2"
                                        name="grid_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="grid_widget-3"
                                        name="grid_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="6"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with compact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                              "label": "Grid select one widget",
                              "name": "grid_widget_compact",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "media": Object {
                                      "image": "a.jpg",
                                    },
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "media": Object {
                                      "image": "b.jpg",
                                    },
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "media": Object {
                                      "image": "c.jpg",
                                    },
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "media": Object {
                                      "image": "d.jpg",
                                    },
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_one type with compact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                "label": "Grid select one widget",
                                "name": "grid_widget_compact",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "media": Object {
                                        "image": "a.jpg",
                                      },
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "media": Object {
                                        "image": "b.jpg",
                                      },
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "media": Object {
                                        "image": "c.jpg",
                                      },
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "media": Object {
                                        "image": "d.jpg",
                                      },
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_one type with compact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                  "label": "Grid select one widget",
                                  "name": "grid_widget_compact",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "media": Object {
                                          "image": "a.jpg",
                                        },
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "media": Object {
                                          "image": "b.jpg",
                                        },
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "media": Object {
                                          "image": "c.jpg",
                                        },
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "media": Object {
                                          "image": "d.jpg",
                                        },
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_one type with compact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                    "label": "Grid select one widget",
                                    "name": "grid_widget_compact",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Grid select one widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="grid_widget_compact-0"
                                        name="grid_widget_compact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_compact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="grid_widget_compact-1"
                                        name="grid_widget_compact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_compact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="grid_widget_compact-2"
                                        name="grid_widget_compact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_compact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="grid_widget_compact-3"
                                        name="grid_widget_compact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_compact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="7"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with compact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                              "label": "Grid select one widget",
                              "name": "grid_widget_compact2",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "media": Object {
                                      "image": "a.jpg",
                                    },
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "media": Object {
                                      "image": "b.jpg",
                                    },
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "media": Object {
                                      "image": "c.jpg",
                                    },
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "media": Object {
                                      "image": "d.jpg",
                                    },
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_one type with compact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                "label": "Grid select one widget",
                                "name": "grid_widget_compact2",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "media": Object {
                                        "image": "a.jpg",
                                      },
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "media": Object {
                                        "image": "b.jpg",
                                      },
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "media": Object {
                                        "image": "c.jpg",
                                      },
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "media": Object {
                                        "image": "d.jpg",
                                      },
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_one type with compact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                  "label": "Grid select one widget",
                                  "name": "grid_widget_compact2",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "media": Object {
                                          "image": "a.jpg",
                                        },
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "media": Object {
                                          "image": "b.jpg",
                                        },
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "media": Object {
                                          "image": "c.jpg",
                                        },
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "media": Object {
                                          "image": "d.jpg",
                                        },
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_one type with compact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                    "label": "Grid select one widget",
                                    "name": "grid_widget_compact2",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Grid select one widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="grid_widget_compact2-0"
                                        name="grid_widget_compact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_compact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="grid_widget_compact2-1"
                                        name="grid_widget_compact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_compact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="grid_widget_compact2-2"
                                        name="grid_widget_compact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_compact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="grid_widget_compact2-3"
                                        name="grid_widget_compact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_compact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="8"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with quickcompact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                              "label": "Grid select one widget",
                              "name": "grid_widget_quickcompact",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "media": Object {
                                      "image": "a.jpg",
                                    },
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "media": Object {
                                      "image": "b.jpg",
                                    },
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "media": Object {
                                      "image": "c.jpg",
                                    },
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "media": Object {
                                      "image": "d.jpg",
                                    },
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_one type with quickcompact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                "label": "Grid select one widget",
                                "name": "grid_widget_quickcompact",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "media": Object {
                                        "image": "a.jpg",
                                      },
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "media": Object {
                                        "image": "b.jpg",
                                      },
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "media": Object {
                                        "image": "c.jpg",
                                      },
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "media": Object {
                                        "image": "d.jpg",
                                      },
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_one type with quickcompact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                  "label": "Grid select one widget",
                                  "name": "grid_widget_quickcompact",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "media": Object {
                                          "image": "a.jpg",
                                        },
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "media": Object {
                                          "image": "b.jpg",
                                        },
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "media": Object {
                                          "image": "c.jpg",
                                        },
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "media": Object {
                                          "image": "d.jpg",
                                        },
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_one type with quickcompact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                    "label": "Grid select one widget",
                                    "name": "grid_widget_quickcompact",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Grid select one widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="grid_widget_quickcompact-0"
                                        name="grid_widget_quickcompact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_quickcompact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="grid_widget_quickcompact-1"
                                        name="grid_widget_quickcompact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_quickcompact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="grid_widget_quickcompact-2"
                                        name="grid_widget_quickcompact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_quickcompact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="grid_widget_quickcompact-3"
                                        name="grid_widget_quickcompact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_quickcompact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="9"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with quickcompact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                              "label": "Grid select one widget",
                              "name": "grid_widget_quickcompact2",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "media": Object {
                                      "image": "a.jpg",
                                    },
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "media": Object {
                                      "image": "b.jpg",
                                    },
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "media": Object {
                                      "image": "c.jpg",
                                    },
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "media": Object {
                                      "image": "d.jpg",
                                    },
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_one type with quickcompact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                "label": "Grid select one widget",
                                "name": "grid_widget_quickcompact2",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "media": Object {
                                        "image": "a.jpg",
                                      },
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "media": Object {
                                        "image": "b.jpg",
                                      },
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "media": Object {
                                        "image": "c.jpg",
                                      },
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "media": Object {
                                        "image": "d.jpg",
                                      },
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_one type with quickcompact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                  "label": "Grid select one widget",
                                  "name": "grid_widget_quickcompact2",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "media": Object {
                                          "image": "a.jpg",
                                        },
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "media": Object {
                                          "image": "b.jpg",
                                        },
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "media": Object {
                                          "image": "c.jpg",
                                        },
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "media": Object {
                                          "image": "d.jpg",
                                        },
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_one type with quickcompact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                                    "label": "Grid select one widget",
                                    "name": "grid_widget_quickcompact2",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Grid select one widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="grid_widget_quickcompact2-0"
                                        name="grid_widget_quickcompact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_quickcompact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="grid_widget_quickcompact2-1"
                                        name="grid_widget_quickcompact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_quickcompact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="grid_widget_quickcompact2-2"
                                        name="grid_widget_quickcompact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_quickcompact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="grid_widget_quickcompact2-3"
                                        name="grid_widget_quickcompact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_widget_quickcompact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="10"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Head",
                                  "name": "head",
                                },
                                Object {
                                  "label": "Neck",
                                  "name": "neck",
                                },
                                Object {
                                  "label": "Lungs",
                                  "name": "lungs",
                                },
                                Object {
                                  "label": "Left proximal arm",
                                  "name": "left_proximal_arm",
                                },
                                Object {
                                  "label": "Left distal arm",
                                  "name": "left_distal_arm",
                                },
                                Object {
                                  "label": "Right proximal arm",
                                  "name": "right_proximal_arm",
                                },
                                Object {
                                  "label": "Right distal arm",
                                  "name": "right_distal_arm",
                                },
                                Object {
                                  "label": "Left proximal leg",
                                  "name": "left_proximal_leg",
                                },
                                Object {
                                  "label": "Left distal leg",
                                  "name": "left_distal_leg",
                                },
                                Object {
                                  "label": "Right proximal leg",
                                  "name": "right_proximal_leg",
                                },
                                Object {
                                  "label": "Right distal leg",
                                  "name": "right_distal_leg",
                                },
                              ],
                              "hint": "select_one with type image-map appearance and image body.svg",
                              "label": "Image select one widget",
                              "name": "select_one_image_map",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "Head",
                                    "name": "head",
                                  },
                                  Object {
                                    "label": "Neck",
                                    "name": "neck",
                                  },
                                  Object {
                                    "label": "Lungs",
                                    "name": "lungs",
                                  },
                                  Object {
                                    "label": "Left proximal arm",
                                    "name": "left_proximal_arm",
                                  },
                                  Object {
                                    "label": "Left distal arm",
                                    "name": "left_distal_arm",
                                  },
                                  Object {
                                    "label": "Right proximal arm",
                                    "name": "right_proximal_arm",
                                  },
                                  Object {
                                    "label": "Right distal arm",
                                    "name": "right_distal_arm",
                                  },
                                  Object {
                                    "label": "Left proximal leg",
                                    "name": "left_proximal_leg",
                                  },
                                  Object {
                                    "label": "Left distal leg",
                                    "name": "left_distal_leg",
                                  },
                                  Object {
                                    "label": "Right proximal leg",
                                    "name": "right_proximal_leg",
                                  },
                                  Object {
                                    "label": "Right distal leg",
                                    "name": "right_distal_leg",
                                  },
                                ],
                                "hint": "select_one with type image-map appearance and image body.svg",
                                "label": "Image select one widget",
                                "name": "select_one_image_map",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "Head",
                                      "name": "head",
                                    },
                                    Object {
                                      "label": "Neck",
                                      "name": "neck",
                                    },
                                    Object {
                                      "label": "Lungs",
                                      "name": "lungs",
                                    },
                                    Object {
                                      "label": "Left proximal arm",
                                      "name": "left_proximal_arm",
                                    },
                                    Object {
                                      "label": "Left distal arm",
                                      "name": "left_distal_arm",
                                    },
                                    Object {
                                      "label": "Right proximal arm",
                                      "name": "right_proximal_arm",
                                    },
                                    Object {
                                      "label": "Right distal arm",
                                      "name": "right_distal_arm",
                                    },
                                    Object {
                                      "label": "Left proximal leg",
                                      "name": "left_proximal_leg",
                                    },
                                    Object {
                                      "label": "Left distal leg",
                                      "name": "left_distal_leg",
                                    },
                                    Object {
                                      "label": "Right proximal leg",
                                      "name": "right_proximal_leg",
                                    },
                                    Object {
                                      "label": "Right distal leg",
                                      "name": "right_distal_leg",
                                    },
                                  ],
                                  "hint": "select_one with type image-map appearance and image body.svg",
                                  "label": "Image select one widget",
                                  "name": "select_one_image_map",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "Head",
                                        "name": "head",
                                      },
                                      Object {
                                        "label": "Neck",
                                        "name": "neck",
                                      },
                                      Object {
                                        "label": "Lungs",
                                        "name": "lungs",
                                      },
                                      Object {
                                        "label": "Left proximal arm",
                                        "name": "left_proximal_arm",
                                      },
                                      Object {
                                        "label": "Left distal arm",
                                        "name": "left_distal_arm",
                                      },
                                      Object {
                                        "label": "Right proximal arm",
                                        "name": "right_proximal_arm",
                                      },
                                      Object {
                                        "label": "Right distal arm",
                                        "name": "right_distal_arm",
                                      },
                                      Object {
                                        "label": "Left proximal leg",
                                        "name": "left_proximal_leg",
                                      },
                                      Object {
                                        "label": "Left distal leg",
                                        "name": "left_distal_leg",
                                      },
                                      Object {
                                        "label": "Right proximal leg",
                                        "name": "right_proximal_leg",
                                      },
                                      Object {
                                        "label": "Right distal leg",
                                        "name": "right_distal_leg",
                                      },
                                    ],
                                    "hint": "select_one with type image-map appearance and image body.svg",
                                    "label": "Image select one widget",
                                    "name": "select_one_image_map",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Image select one widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="select_one_image_map-0"
                                        name="select_one_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="head"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="head"
                                        />
                                      </Input>
                                       
                                      head
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="select_one_image_map-1"
                                        name="select_one_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="neck"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="neck"
                                        />
                                      </Input>
                                       
                                      neck
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="select_one_image_map-2"
                                        name="select_one_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="lungs"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="lungs"
                                        />
                                      </Input>
                                       
                                      lungs
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="select_one_image_map-3"
                                        name="select_one_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="left_proximal_arm"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="left_proximal_arm"
                                        />
                                      </Input>
                                       
                                      left_proximal_arm
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="4"
                                    >
                                      <Input
                                        key="select_one_image_map-4"
                                        name="select_one_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="left_distal_arm"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="left_distal_arm"
                                        />
                                      </Input>
                                       
                                      left_distal_arm
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="5"
                                    >
                                      <Input
                                        key="select_one_image_map-5"
                                        name="select_one_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="right_proximal_arm"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="right_proximal_arm"
                                        />
                                      </Input>
                                       
                                      right_proximal_arm
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="6"
                                    >
                                      <Input
                                        key="select_one_image_map-6"
                                        name="select_one_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="right_distal_arm"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="right_distal_arm"
                                        />
                                      </Input>
                                       
                                      right_distal_arm
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="7"
                                    >
                                      <Input
                                        key="select_one_image_map-7"
                                        name="select_one_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="left_proximal_leg"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="left_proximal_leg"
                                        />
                                      </Input>
                                       
                                      left_proximal_leg
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="8"
                                    >
                                      <Input
                                        key="select_one_image_map-8"
                                        name="select_one_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="left_distal_leg"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="left_distal_leg"
                                        />
                                      </Input>
                                       
                                      left_distal_leg
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="9"
                                    >
                                      <Input
                                        key="select_one_image_map-9"
                                        name="select_one_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="right_proximal_leg"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="right_proximal_leg"
                                        />
                                      </Input>
                                       
                                      right_proximal_leg
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="10"
                                    >
                                      <Input
                                        key="select_one_image_map-10"
                                        name="select_one_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="right_distal_leg"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_one_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="right_distal_leg"
                                        />
                                      </Input>
                                       
                                      right_distal_leg
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_select_multi_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_multiple type with no appearance, 4 text choices",
                          "label": "Multi select widget",
                          "name": "select_multi_widget",
                          "type": "select all that apply",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_multiple type with compact appearance, 4 image choices",
                          "label": "Grid select multiple widget",
                          "name": "grid_multi_widget_compact",
                          "type": "select all that apply",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_multiple type with compact-2 appearance, 4 image choices",
                          "label": "Grid select multiple widget",
                          "name": "grid_multi_widget_compact2",
                          "type": "select all that apply",
                        },
                        Object {
                          "bind": Object {
                            "required": "Yes",
                          },
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "control": Object {
                            "appearance": "minimal",
                          },
                          "hint": "select_multiple type with minimal appearance, 4 image choices",
                          "label": "Spinner widget: select multiple",
                          "name": "spinner_multi_widget",
                          "type": "select all that apply",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Head",
                              "name": "head",
                            },
                            Object {
                              "label": "Neck",
                              "name": "neck",
                            },
                            Object {
                              "label": "Lungs",
                              "name": "lungs",
                            },
                            Object {
                              "label": "Left proximal arm",
                              "name": "left_proximal_arm",
                            },
                            Object {
                              "label": "Left distal arm",
                              "name": "left_distal_arm",
                            },
                            Object {
                              "label": "Right proximal arm",
                              "name": "right_proximal_arm",
                            },
                            Object {
                              "label": "Right distal arm",
                              "name": "right_distal_arm",
                            },
                            Object {
                              "label": "Left proximal leg",
                              "name": "left_proximal_leg",
                            },
                            Object {
                              "label": "Left distal leg",
                              "name": "left_distal_leg",
                            },
                            Object {
                              "label": "Right proximal leg",
                              "name": "right_proximal_leg",
                            },
                            Object {
                              "label": "Right distal leg",
                              "name": "right_distal_leg",
                            },
                          ],
                          "hint": "select_multiple type with image-map appearance and image body.svg",
                          "label": "Image select multiple widget",
                          "name": "select_multi_image_map",
                          "type": "select all that apply",
                        },
                      ],
                      "label": "This section contains \\"Select Multi Widgets\\"",
                      "name": "select_multi_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          This section contains "Select Multi Widgets"
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_multiple type with no appearance, 4 text choices",
                              "label": "Multi select widget",
                              "name": "select_multi_widget",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectAll
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_multiple type with no appearance, 4 text choices",
                                "label": "Multi select widget",
                                "name": "select_multi_widget",
                                "type": "select all that apply",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectAllRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_multiple type with no appearance, 4 text choices",
                                  "label": "Multi select widget",
                                  "name": "select_multi_widget",
                                  "type": "select all that apply",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectAllRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_multiple type with no appearance, 4 text choices",
                                    "label": "Multi select widget",
                                    "name": "select_multi_widget",
                                    "type": "select all that apply",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Multi select widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="select_multi_widget-0"
                                        name="select_multi_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="select_multi_widget-1"
                                        name="select_multi_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="select_multi_widget-2"
                                        name="select_multi_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="select_multi_widget-3"
                                        name="select_multi_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectAllRadio>
                            </Connect(SelectAllRadio)>
                          </SelectAll>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_multiple type with compact appearance, 4 image choices",
                              "label": "Grid select multiple widget",
                              "name": "grid_multi_widget_compact",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectAll
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "media": Object {
                                      "image": "a.jpg",
                                    },
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "media": Object {
                                      "image": "b.jpg",
                                    },
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "media": Object {
                                      "image": "c.jpg",
                                    },
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "media": Object {
                                      "image": "d.jpg",
                                    },
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_multiple type with compact appearance, 4 image choices",
                                "label": "Grid select multiple widget",
                                "name": "grid_multi_widget_compact",
                                "type": "select all that apply",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectAllRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "media": Object {
                                        "image": "a.jpg",
                                      },
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "media": Object {
                                        "image": "b.jpg",
                                      },
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "media": Object {
                                        "image": "c.jpg",
                                      },
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "media": Object {
                                        "image": "d.jpg",
                                      },
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_multiple type with compact appearance, 4 image choices",
                                  "label": "Grid select multiple widget",
                                  "name": "grid_multi_widget_compact",
                                  "type": "select all that apply",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectAllRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "media": Object {
                                          "image": "a.jpg",
                                        },
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "media": Object {
                                          "image": "b.jpg",
                                        },
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "media": Object {
                                          "image": "c.jpg",
                                        },
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "media": Object {
                                          "image": "d.jpg",
                                        },
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_multiple type with compact appearance, 4 image choices",
                                    "label": "Grid select multiple widget",
                                    "name": "grid_multi_widget_compact",
                                    "type": "select all that apply",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Grid select multiple widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="grid_multi_widget_compact-0"
                                        name="grid_multi_widget_compact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_multi_widget_compact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="grid_multi_widget_compact-1"
                                        name="grid_multi_widget_compact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_multi_widget_compact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="grid_multi_widget_compact-2"
                                        name="grid_multi_widget_compact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_multi_widget_compact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="grid_multi_widget_compact-3"
                                        name="grid_multi_widget_compact"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_multi_widget_compact"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectAllRadio>
                            </Connect(SelectAllRadio)>
                          </SelectAll>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_multiple type with compact-2 appearance, 4 image choices",
                              "label": "Grid select multiple widget",
                              "name": "grid_multi_widget_compact2",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectAll
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "media": Object {
                                      "image": "a.jpg",
                                    },
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "media": Object {
                                      "image": "b.jpg",
                                    },
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "media": Object {
                                      "image": "c.jpg",
                                    },
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "media": Object {
                                      "image": "d.jpg",
                                    },
                                    "name": "d",
                                  },
                                ],
                                "hint": "select_multiple type with compact-2 appearance, 4 image choices",
                                "label": "Grid select multiple widget",
                                "name": "grid_multi_widget_compact2",
                                "type": "select all that apply",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectAllRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "media": Object {
                                        "image": "a.jpg",
                                      },
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "media": Object {
                                        "image": "b.jpg",
                                      },
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "media": Object {
                                        "image": "c.jpg",
                                      },
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "media": Object {
                                        "image": "d.jpg",
                                      },
                                      "name": "d",
                                    },
                                  ],
                                  "hint": "select_multiple type with compact-2 appearance, 4 image choices",
                                  "label": "Grid select multiple widget",
                                  "name": "grid_multi_widget_compact2",
                                  "type": "select all that apply",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectAllRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "media": Object {
                                          "image": "a.jpg",
                                        },
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "media": Object {
                                          "image": "b.jpg",
                                        },
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "media": Object {
                                          "image": "c.jpg",
                                        },
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "media": Object {
                                          "image": "d.jpg",
                                        },
                                        "name": "d",
                                      },
                                    ],
                                    "hint": "select_multiple type with compact-2 appearance, 4 image choices",
                                    "label": "Grid select multiple widget",
                                    "name": "grid_multi_widget_compact2",
                                    "type": "select all that apply",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Grid select multiple widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="grid_multi_widget_compact2-0"
                                        name="grid_multi_widget_compact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="a"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_multi_widget_compact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="a"
                                        />
                                      </Input>
                                       
                                      a
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="grid_multi_widget_compact2-1"
                                        name="grid_multi_widget_compact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="b"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_multi_widget_compact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="b"
                                        />
                                      </Input>
                                       
                                      b
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="grid_multi_widget_compact2-2"
                                        name="grid_multi_widget_compact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="c"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_multi_widget_compact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="c"
                                        />
                                      </Input>
                                       
                                      c
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="grid_multi_widget_compact2-3"
                                        name="grid_multi_widget_compact2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="d"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="grid_multi_widget_compact2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="d"
                                        />
                                      </Input>
                                       
                                      d
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectAllRadio>
                            </Connect(SelectAllRadio)>
                          </SelectAll>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "required": "Yes",
                              },
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "control": Object {
                                "appearance": "minimal",
                              },
                              "hint": "select_multiple type with minimal appearance, 4 image choices",
                              "label": "Spinner widget: select multiple",
                              "name": "spinner_multi_widget",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectAll
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "required": "Yes",
                                },
                                "children": Array [
                                  Object {
                                    "label": "A",
                                    "name": "a",
                                  },
                                  Object {
                                    "label": "B",
                                    "name": "b",
                                  },
                                  Object {
                                    "label": "C",
                                    "name": "c",
                                  },
                                  Object {
                                    "label": "D",
                                    "name": "d",
                                  },
                                ],
                                "control": Object {
                                  "appearance": "minimal",
                                },
                                "hint": "select_multiple type with minimal appearance, 4 image choices",
                                "label": "Spinner widget: select multiple",
                                "name": "spinner_multi_widget",
                                "type": "select all that apply",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectAllDropDown)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "required": "Yes",
                                  },
                                  "children": Array [
                                    Object {
                                      "label": "A",
                                      "name": "a",
                                    },
                                    Object {
                                      "label": "B",
                                      "name": "b",
                                    },
                                    Object {
                                      "label": "C",
                                      "name": "c",
                                    },
                                    Object {
                                      "label": "D",
                                      "name": "d",
                                    },
                                  ],
                                  "control": Object {
                                    "appearance": "minimal",
                                  },
                                  "hint": "select_multiple type with minimal appearance, 4 image choices",
                                  "label": "Spinner widget: select multiple",
                                  "name": "spinner_multi_widget",
                                  "type": "select all that apply",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectAllDropDown
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "bind": Object {
                                      "required": "Yes",
                                    },
                                    "children": Array [
                                      Object {
                                        "label": "A",
                                        "name": "a",
                                      },
                                      Object {
                                        "label": "B",
                                        "name": "b",
                                      },
                                      Object {
                                        "label": "C",
                                        "name": "c",
                                      },
                                      Object {
                                        "label": "D",
                                        "name": "d",
                                      },
                                    ],
                                    "control": Object {
                                      "appearance": "minimal",
                                    },
                                    "hint": "select_multiple type with minimal appearance, 4 image choices",
                                    "label": "Spinner widget: select multiple",
                                    "name": "spinner_multi_widget",
                                    "type": "select all that apply",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Spinner widget: select multiple
                                      </label>
                                    </Label>
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        *
                                      </label>
                                    </Label>
                                    <StateManager
                                      defaultInputValue=""
                                      defaultMenuIsOpen={false}
                                      defaultValue={null}
                                      isMulti={true}
                                      name="spinner_multi_widget"
                                      onChange={[Function]}
                                      options={
                                        Array [
                                          Object {
                                            "label": "a",
                                            "value": "a",
                                          },
                                          Object {
                                            "label": "b",
                                            "value": "b",
                                          },
                                          Object {
                                            "label": "c",
                                            "value": "c",
                                          },
                                          Object {
                                            "label": "d",
                                            "value": "d",
                                          },
                                        ]
                                      }
                                    >
                                      <Select
                                        backspaceRemovesValue={true}
                                        blurInputOnSelect={true}
                                        captureMenuScroll={false}
                                        closeMenuOnScroll={false}
                                        closeMenuOnSelect={true}
                                        components={Object {}}
                                        controlShouldRenderValue={true}
                                        escapeClearsValue={false}
                                        filterOption={[Function]}
                                        formatGroupLabel={[Function]}
                                        getOptionLabel={[Function]}
                                        getOptionValue={[Function]}
                                        inputValue=""
                                        isDisabled={false}
                                        isLoading={false}
                                        isMulti={true}
                                        isOptionDisabled={[Function]}
                                        isRtl={false}
                                        isSearchable={true}
                                        loadingMessage={[Function]}
                                        maxMenuHeight={300}
                                        menuIsOpen={false}
                                        menuPlacement="bottom"
                                        menuPosition="absolute"
                                        menuShouldBlockScroll={false}
                                        menuShouldScrollIntoView={true}
                                        minMenuHeight={140}
                                        name="spinner_multi_widget"
                                        noOptionsMessage={[Function]}
                                        onChange={[Function]}
                                        onInputChange={[Function]}
                                        onMenuClose={[Function]}
                                        onMenuOpen={[Function]}
                                        openMenuOnClick={true}
                                        openMenuOnFocus={false}
                                        options={
                                          Array [
                                            Object {
                                              "label": "a",
                                              "value": "a",
                                            },
                                            Object {
                                              "label": "b",
                                              "value": "b",
                                            },
                                            Object {
                                              "label": "c",
                                              "value": "c",
                                            },
                                            Object {
                                              "label": "d",
                                              "value": "d",
                                            },
                                          ]
                                        }
                                        pageSize={5}
                                        placeholder="Select..."
                                        screenReaderStatus={[Function]}
                                        styles={Object {}}
                                        tabIndex="0"
                                        tabSelectsValue={true}
                                        value={null}
                                      >
                                        <SelectContainer
                                          clearValue={[Function]}
                                          cx={[Function]}
                                          getStyles={[Function]}
                                          getValue={[Function]}
                                          hasValue={false}
                                          innerProps={
                                            Object {
                                              "id": undefined,
                                              "onKeyDown": [Function],
                                            }
                                          }
                                          isDisabled={false}
                                          isFocused={false}
                                          isMulti={true}
                                          isRtl={false}
                                          options={
                                            Array [
                                              Object {
                                                "label": "a",
                                                "value": "a",
                                              },
                                              Object {
                                                "label": "b",
                                                "value": "b",
                                              },
                                              Object {
                                                "label": "c",
                                                "value": "c",
                                              },
                                              Object {
                                                "label": "d",
                                                "value": "d",
                                              },
                                            ]
                                          }
                                          selectOption={[Function]}
                                          selectProps={
                                            Object {
                                              "backspaceRemovesValue": true,
                                              "blurInputOnSelect": true,
                                              "captureMenuScroll": false,
                                              "closeMenuOnScroll": false,
                                              "closeMenuOnSelect": true,
                                              "components": Object {},
                                              "controlShouldRenderValue": true,
                                              "escapeClearsValue": false,
                                              "filterOption": [Function],
                                              "formatGroupLabel": [Function],
                                              "getOptionLabel": [Function],
                                              "getOptionValue": [Function],
                                              "inputValue": "",
                                              "isDisabled": false,
                                              "isLoading": false,
                                              "isMulti": true,
                                              "isOptionDisabled": [Function],
                                              "isRtl": false,
                                              "isSearchable": true,
                                              "loadingMessage": [Function],
                                              "maxMenuHeight": 300,
                                              "menuIsOpen": false,
                                              "menuPlacement": "bottom",
                                              "menuPosition": "absolute",
                                              "menuShouldBlockScroll": false,
                                              "menuShouldScrollIntoView": true,
                                              "minMenuHeight": 140,
                                              "name": "spinner_multi_widget",
                                              "noOptionsMessage": [Function],
                                              "onChange": [Function],
                                              "onInputChange": [Function],
                                              "onMenuClose": [Function],
                                              "onMenuOpen": [Function],
                                              "openMenuOnClick": true,
                                              "openMenuOnFocus": false,
                                              "options": Array [
                                                Object {
                                                  "label": "a",
                                                  "value": "a",
                                                },
                                                Object {
                                                  "label": "b",
                                                  "value": "b",
                                                },
                                                Object {
                                                  "label": "c",
                                                  "value": "c",
                                                },
                                                Object {
                                                  "label": "d",
                                                  "value": "d",
                                                },
                                              ],
                                              "pageSize": 5,
                                              "placeholder": "Select...",
                                              "screenReaderStatus": [Function],
                                              "styles": Object {},
                                              "tabIndex": "0",
                                              "tabSelectsValue": true,
                                              "value": null,
                                            }
                                          }
                                          setValue={[Function]}
                                          theme={
                                            Object {
                                              "borderRadius": 4,
                                              "colors": Object {
                                                "danger": "#DE350B",
                                                "dangerLight": "#FFBDAD",
                                                "neutral0": "hsl(0, 0%, 100%)",
                                                "neutral10": "hsl(0, 0%, 90%)",
                                                "neutral20": "hsl(0, 0%, 80%)",
                                                "neutral30": "hsl(0, 0%, 70%)",
                                                "neutral40": "hsl(0, 0%, 60%)",
                                                "neutral5": "hsl(0, 0%, 95%)",
                                                "neutral50": "hsl(0, 0%, 50%)",
                                                "neutral60": "hsl(0, 0%, 40%)",
                                                "neutral70": "hsl(0, 0%, 30%)",
                                                "neutral80": "hsl(0, 0%, 20%)",
                                                "neutral90": "hsl(0, 0%, 10%)",
                                                "primary": "#2684FF",
                                                "primary25": "#DEEBFF",
                                                "primary50": "#B2D4FF",
                                                "primary75": "#4C9AFF",
                                              },
                                              "spacing": Object {
                                                "baseUnit": 4,
                                                "controlHeight": 38,
                                                "menuGutter": 8,
                                              },
                                            }
                                          }
                                        >
                                          <EmotionCssPropInternal
                                            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="SelectContainer"
                                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                            className=""
                                            css={
                                              Object {
                                                "boxSizing": "border-box",
                                                "direction": null,
                                                "label": "container",
                                                "pointerEvents": null,
                                                "position": "relative",
                                              }
                                            }
                                            onKeyDown={[Function]}
                                          >
                                            <div
                                              className=" css-2b097c-container"
                                              onKeyDown={[Function]}
                                            >
                                              <Control
                                                clearValue={[Function]}
                                                cx={[Function]}
                                                getStyles={[Function]}
                                                getValue={[Function]}
                                                hasValue={false}
                                                innerProps={
                                                  Object {
                                                    "onMouseDown": [Function],
                                                    "onTouchEnd": [Function],
                                                  }
                                                }
                                                innerRef={[Function]}
                                                isDisabled={false}
                                                isFocused={false}
                                                isMulti={true}
                                                isRtl={false}
                                                menuIsOpen={false}
                                                options={
                                                  Array [
                                                    Object {
                                                      "label": "a",
                                                      "value": "a",
                                                    },
                                                    Object {
                                                      "label": "b",
                                                      "value": "b",
                                                    },
                                                    Object {
                                                      "label": "c",
                                                      "value": "c",
                                                    },
                                                    Object {
                                                      "label": "d",
                                                      "value": "d",
                                                    },
                                                  ]
                                                }
                                                selectOption={[Function]}
                                                selectProps={
                                                  Object {
                                                    "backspaceRemovesValue": true,
                                                    "blurInputOnSelect": true,
                                                    "captureMenuScroll": false,
                                                    "closeMenuOnScroll": false,
                                                    "closeMenuOnSelect": true,
                                                    "components": Object {},
                                                    "controlShouldRenderValue": true,
                                                    "escapeClearsValue": false,
                                                    "filterOption": [Function],
                                                    "formatGroupLabel": [Function],
                                                    "getOptionLabel": [Function],
                                                    "getOptionValue": [Function],
                                                    "inputValue": "",
                                                    "isDisabled": false,
                                                    "isLoading": false,
                                                    "isMulti": true,
                                                    "isOptionDisabled": [Function],
                                                    "isRtl": false,
                                                    "isSearchable": true,
                                                    "loadingMessage": [Function],
                                                    "maxMenuHeight": 300,
                                                    "menuIsOpen": false,
                                                    "menuPlacement": "bottom",
                                                    "menuPosition": "absolute",
                                                    "menuShouldBlockScroll": false,
                                                    "menuShouldScrollIntoView": true,
                                                    "minMenuHeight": 140,
                                                    "name": "spinner_multi_widget",
                                                    "noOptionsMessage": [Function],
                                                    "onChange": [Function],
                                                    "onInputChange": [Function],
                                                    "onMenuClose": [Function],
                                                    "onMenuOpen": [Function],
                                                    "openMenuOnClick": true,
                                                    "openMenuOnFocus": false,
                                                    "options": Array [
                                                      Object {
                                                        "label": "a",
                                                        "value": "a",
                                                      },
                                                      Object {
                                                        "label": "b",
                                                        "value": "b",
                                                      },
                                                      Object {
                                                        "label": "c",
                                                        "value": "c",
                                                      },
                                                      Object {
                                                        "label": "d",
                                                        "value": "d",
                                                      },
                                                    ],
                                                    "pageSize": 5,
                                                    "placeholder": "Select...",
                                                    "screenReaderStatus": [Function],
                                                    "styles": Object {},
                                                    "tabIndex": "0",
                                                    "tabSelectsValue": true,
                                                    "value": null,
                                                  }
                                                }
                                                setValue={[Function]}
                                                theme={
                                                  Object {
                                                    "borderRadius": 4,
                                                    "colors": Object {
                                                      "danger": "#DE350B",
                                                      "dangerLight": "#FFBDAD",
                                                      "neutral0": "hsl(0, 0%, 100%)",
                                                      "neutral10": "hsl(0, 0%, 90%)",
                                                      "neutral20": "hsl(0, 0%, 80%)",
                                                      "neutral30": "hsl(0, 0%, 70%)",
                                                      "neutral40": "hsl(0, 0%, 60%)",
                                                      "neutral5": "hsl(0, 0%, 95%)",
                                                      "neutral50": "hsl(0, 0%, 50%)",
                                                      "neutral60": "hsl(0, 0%, 40%)",
                                                      "neutral70": "hsl(0, 0%, 30%)",
                                                      "neutral80": "hsl(0, 0%, 20%)",
                                                      "neutral90": "hsl(0, 0%, 10%)",
                                                      "primary": "#2684FF",
                                                      "primary25": "#DEEBFF",
                                                      "primary50": "#B2D4FF",
                                                      "primary75": "#4C9AFF",
                                                    },
                                                    "spacing": Object {
                                                      "baseUnit": 4,
                                                      "controlHeight": 38,
                                                      "menuGutter": 8,
                                                    },
                                                  }
                                                }
                                              >
                                                <EmotionCssPropInternal
                                                  __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Control"
                                                  __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                  className=""
                                                  css={
                                                    Object {
                                                      "&:hover": Object {
                                                        "borderColor": "hsl(0, 0%, 70%)",
                                                      },
                                                      "alignItems": "center",
                                                      "backgroundColor": "hsl(0, 0%, 100%)",
                                                      "borderColor": "hsl(0, 0%, 80%)",
                                                      "borderRadius": 4,
                                                      "borderStyle": "solid",
                                                      "borderWidth": 1,
                                                      "boxShadow": null,
                                                      "boxSizing": "border-box",
                                                      "cursor": "default",
                                                      "display": "flex",
                                                      "flexWrap": "wrap",
                                                      "justifyContent": "space-between",
                                                      "label": "control",
                                                      "minHeight": 38,
                                                      "outline": "0 !important",
                                                      "position": "relative",
                                                      "transition": "all 100ms",
                                                    }
                                                  }
                                                  onMouseDown={[Function]}
                                                  onTouchEnd={[Function]}
                                                >
                                                  <div
                                                    className=" css-yk16xz-control"
                                                    onMouseDown={[Function]}
                                                    onTouchEnd={[Function]}
                                                  >
                                                    <ValueContainer
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={false}
                                                      isDisabled={false}
                                                      isMulti={true}
                                                      isRtl={false}
                                                      options={
                                                        Array [
                                                          Object {
                                                            "label": "a",
                                                            "value": "a",
                                                          },
                                                          Object {
                                                            "label": "b",
                                                            "value": "b",
                                                          },
                                                          Object {
                                                            "label": "c",
                                                            "value": "c",
                                                          },
                                                          Object {
                                                            "label": "d",
                                                            "value": "d",
                                                          },
                                                        ]
                                                      }
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": true,
                                                          "captureMenuScroll": false,
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {},
                                                          "controlShouldRenderValue": true,
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "inputValue": "",
                                                          "isDisabled": false,
                                                          "isLoading": false,
                                                          "isMulti": true,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": true,
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 300,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "name": "spinner_multi_widget",
                                                          "noOptionsMessage": [Function],
                                                          "onChange": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [
                                                            Object {
                                                              "label": "a",
                                                              "value": "a",
                                                            },
                                                            Object {
                                                              "label": "b",
                                                              "value": "b",
                                                            },
                                                            Object {
                                                              "label": "c",
                                                              "value": "c",
                                                            },
                                                            Object {
                                                              "label": "d",
                                                              "value": "d",
                                                            },
                                                          ],
                                                          "pageSize": 5,
                                                          "placeholder": "Select...",
                                                          "screenReaderStatus": [Function],
                                                          "styles": Object {},
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "value": null,
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#DE350B",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2684FF",
                                                            "primary25": "#DEEBFF",
                                                            "primary50": "#B2D4FF",
                                                            "primary75": "#4C9AFF",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    >
                                                      <EmotionCssPropInternal
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        className=""
                                                        css={
                                                          Object {
                                                            "WebkitOverflowScrolling": "touch",
                                                            "alignItems": "center",
                                                            "boxSizing": "border-box",
                                                            "display": "flex",
                                                            "flex": 1,
                                                            "flexWrap": "wrap",
                                                            "overflow": "hidden",
                                                            "padding": "2px 8px",
                                                            "position": "relative",
                                                          }
                                                        }
                                                      >
                                                        <div
                                                          className=" css-1hwfws3"
                                                        >
                                                          <Placeholder
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={false}
                                                            isDisabled={false}
                                                            isFocused={false}
                                                            isMulti={true}
                                                            isRtl={false}
                                                            key="placeholder"
                                                            options={
                                                              Array [
                                                                Object {
                                                                  "label": "a",
                                                                  "value": "a",
                                                                },
                                                                Object {
                                                                  "label": "b",
                                                                  "value": "b",
                                                                },
                                                                Object {
                                                                  "label": "c",
                                                                  "value": "c",
                                                                },
                                                                Object {
                                                                  "label": "d",
                                                                  "value": "d",
                                                                },
                                                              ]
                                                            }
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": true,
                                                                "captureMenuScroll": false,
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {},
                                                                "controlShouldRenderValue": true,
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "inputValue": "",
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": true,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "name": "spinner_multi_widget",
                                                                "noOptionsMessage": [Function],
                                                                "onChange": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [
                                                                  Object {
                                                                    "label": "a",
                                                                    "value": "a",
                                                                  },
                                                                  Object {
                                                                    "label": "b",
                                                                    "value": "b",
                                                                  },
                                                                  Object {
                                                                    "label": "c",
                                                                    "value": "c",
                                                                  },
                                                                  Object {
                                                                    "label": "d",
                                                                    "value": "d",
                                                                  },
                                                                ],
                                                                "pageSize": 5,
                                                                "placeholder": "Select...",
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {},
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "value": null,
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#DE350B",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2684FF",
                                                                  "primary25": "#DEEBFF",
                                                                  "primary50": "#B2D4FF",
                                                                  "primary75": "#4C9AFF",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Placeholder"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                              className=""
                                                              css={
                                                                Object {
                                                                  "boxSizing": "border-box",
                                                                  "color": "hsl(0, 0%, 50%)",
                                                                  "label": "placeholder",
                                                                  "marginLeft": 2,
                                                                  "marginRight": 2,
                                                                  "position": "absolute",
                                                                  "top": "50%",
                                                                  "transform": "translateY(-50%)",
                                                                }
                                                              }
                                                            >
                                                              <div
                                                                className=" css-1wa3eu0-placeholder"
                                                              >
                                                                Select...
                                                              </div>
                                                            </EmotionCssPropInternal>
                                                          </Placeholder>
                                                          <Input
                                                            aria-autocomplete="list"
                                                            autoCapitalize="none"
                                                            autoComplete="off"
                                                            autoCorrect="off"
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            id="react-select-5-input"
                                                            innerRef={[Function]}
                                                            isDisabled={false}
                                                            isHidden={false}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": true,
                                                                "captureMenuScroll": false,
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {},
                                                                "controlShouldRenderValue": true,
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "inputValue": "",
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": true,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "name": "spinner_multi_widget",
                                                                "noOptionsMessage": [Function],
                                                                "onChange": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [
                                                                  Object {
                                                                    "label": "a",
                                                                    "value": "a",
                                                                  },
                                                                  Object {
                                                                    "label": "b",
                                                                    "value": "b",
                                                                  },
                                                                  Object {
                                                                    "label": "c",
                                                                    "value": "c",
                                                                  },
                                                                  Object {
                                                                    "label": "d",
                                                                    "value": "d",
                                                                  },
                                                                ],
                                                                "pageSize": 5,
                                                                "placeholder": "Select...",
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {},
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "value": null,
                                                              }
                                                            }
                                                            spellCheck="false"
                                                            tabIndex="0"
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#DE350B",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2684FF",
                                                                  "primary25": "#DEEBFF",
                                                                  "primary50": "#B2D4FF",
                                                                  "primary75": "#4C9AFF",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                            type="text"
                                                            value=""
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Input"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                              css={
                                                                Object {
                                                                  "boxSizing": "border-box",
                                                                  "color": "hsl(0, 0%, 20%)",
                                                                  "margin": 2,
                                                                  "paddingBottom": 2,
                                                                  "paddingTop": 2,
                                                                  "visibility": "visible",
                                                                }
                                                              }
                                                            >
                                                              <div
                                                                className="css-b8ldur-Input"
                                                              >
                                                                <AutosizeInput
                                                                  aria-autocomplete="list"
                                                                  autoCapitalize="none"
                                                                  autoComplete="off"
                                                                  autoCorrect="off"
                                                                  className=""
                                                                  disabled={false}
                                                                  id="react-select-5-input"
                                                                  injectStyles={true}
                                                                  inputRef={[Function]}
                                                                  inputStyle={
                                                                    Object {
                                                                      "background": 0,
                                                                      "border": 0,
                                                                      "color": "inherit",
                                                                      "fontSize": "inherit",
                                                                      "label": "input",
                                                                      "opacity": 1,
                                                                      "outline": 0,
                                                                      "padding": 0,
                                                                    }
                                                                  }
                                                                  minWidth={1}
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  spellCheck="false"
                                                                  tabIndex="0"
                                                                  type="text"
                                                                  value=""
                                                                >
                                                                  <div
                                                                    className=""
                                                                    style={
                                                                      Object {
                                                                        "display": "inline-block",
                                                                      }
                                                                    }
                                                                  >
                                                                    <input
                                                                      aria-autocomplete="list"
                                                                      autoCapitalize="none"
                                                                      autoComplete="off"
                                                                      autoCorrect="off"
                                                                      disabled={false}
                                                                      id="react-select-5-input"
                                                                      onBlur={[Function]}
                                                                      onChange={[Function]}
                                                                      onFocus={[Function]}
                                                                      spellCheck="false"
                                                                      style={
                                                                        Object {
                                                                          "background": 0,
                                                                          "border": 0,
                                                                          "boxSizing": "content-box",
                                                                          "color": "inherit",
                                                                          "fontSize": "inherit",
                                                                          "label": "input",
                                                                          "opacity": 1,
                                                                          "outline": 0,
                                                                          "padding": 0,
                                                                          "width": "2px",
                                                                        }
                                                                      }
                                                                      tabIndex="0"
                                                                      type="text"
                                                                      value=""
                                                                    />
                                                                    <div
                                                                      style={
                                                                        Object {
                                                                          "height": 0,
                                                                          "left": 0,
                                                                          "overflow": "scroll",
                                                                          "position": "absolute",
                                                                          "top": 0,
                                                                          "visibility": "hidden",
                                                                          "whiteSpace": "pre",
                                                                        }
                                                                      }
                                                                    />
                                                                  </div>
                                                                </AutosizeInput>
                                                              </div>
                                                            </EmotionCssPropInternal>
                                                          </Input>
                                                        </div>
                                                      </EmotionCssPropInternal>
                                                    </ValueContainer>
                                                    <IndicatorsContainer
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={false}
                                                      isDisabled={false}
                                                      isMulti={true}
                                                      isRtl={false}
                                                      options={
                                                        Array [
                                                          Object {
                                                            "label": "a",
                                                            "value": "a",
                                                          },
                                                          Object {
                                                            "label": "b",
                                                            "value": "b",
                                                          },
                                                          Object {
                                                            "label": "c",
                                                            "value": "c",
                                                          },
                                                          Object {
                                                            "label": "d",
                                                            "value": "d",
                                                          },
                                                        ]
                                                      }
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": true,
                                                          "captureMenuScroll": false,
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {},
                                                          "controlShouldRenderValue": true,
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "inputValue": "",
                                                          "isDisabled": false,
                                                          "isLoading": false,
                                                          "isMulti": true,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": true,
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 300,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "name": "spinner_multi_widget",
                                                          "noOptionsMessage": [Function],
                                                          "onChange": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [
                                                            Object {
                                                              "label": "a",
                                                              "value": "a",
                                                            },
                                                            Object {
                                                              "label": "b",
                                                              "value": "b",
                                                            },
                                                            Object {
                                                              "label": "c",
                                                              "value": "c",
                                                            },
                                                            Object {
                                                              "label": "d",
                                                              "value": "d",
                                                            },
                                                          ],
                                                          "pageSize": 5,
                                                          "placeholder": "Select...",
                                                          "screenReaderStatus": [Function],
                                                          "styles": Object {},
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "value": null,
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#DE350B",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2684FF",
                                                            "primary25": "#DEEBFF",
                                                            "primary50": "#B2D4FF",
                                                            "primary75": "#4C9AFF",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    >
                                                      <EmotionCssPropInternal
                                                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IndicatorsContainer"
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        className=""
                                                        css={
                                                          Object {
                                                            "alignItems": "center",
                                                            "alignSelf": "stretch",
                                                            "boxSizing": "border-box",
                                                            "display": "flex",
                                                            "flexShrink": 0,
                                                          }
                                                        }
                                                      >
                                                        <div
                                                          className=" css-1hb7zxy-IndicatorsContainer"
                                                        >
                                                          <IndicatorSeparator
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={false}
                                                            isDisabled={false}
                                                            isFocused={false}
                                                            isMulti={true}
                                                            isRtl={false}
                                                            options={
                                                              Array [
                                                                Object {
                                                                  "label": "a",
                                                                  "value": "a",
                                                                },
                                                                Object {
                                                                  "label": "b",
                                                                  "value": "b",
                                                                },
                                                                Object {
                                                                  "label": "c",
                                                                  "value": "c",
                                                                },
                                                                Object {
                                                                  "label": "d",
                                                                  "value": "d",
                                                                },
                                                              ]
                                                            }
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": true,
                                                                "captureMenuScroll": false,
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {},
                                                                "controlShouldRenderValue": true,
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "inputValue": "",
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": true,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "name": "spinner_multi_widget",
                                                                "noOptionsMessage": [Function],
                                                                "onChange": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [
                                                                  Object {
                                                                    "label": "a",
                                                                    "value": "a",
                                                                  },
                                                                  Object {
                                                                    "label": "b",
                                                                    "value": "b",
                                                                  },
                                                                  Object {
                                                                    "label": "c",
                                                                    "value": "c",
                                                                  },
                                                                  Object {
                                                                    "label": "d",
                                                                    "value": "d",
                                                                  },
                                                                ],
                                                                "pageSize": 5,
                                                                "placeholder": "Select...",
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {},
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "value": null,
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#DE350B",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2684FF",
                                                                  "primary25": "#DEEBFF",
                                                                  "primary50": "#B2D4FF",
                                                                  "primary75": "#4C9AFF",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IndicatorSeparator"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                                                              className=""
                                                              css={
                                                                Object {
                                                                  "alignSelf": "stretch",
                                                                  "backgroundColor": "hsl(0, 0%, 80%)",
                                                                  "boxSizing": "border-box",
                                                                  "label": "indicatorSeparator",
                                                                  "marginBottom": 8,
                                                                  "marginTop": 8,
                                                                  "width": 1,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className=" css-1okebmr-indicatorSeparator"
                                                              />
                                                            </EmotionCssPropInternal>
                                                          </IndicatorSeparator>
                                                          <DropdownIndicator
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={false}
                                                            innerProps={
                                                              Object {
                                                                "aria-hidden": "true",
                                                                "onMouseDown": [Function],
                                                                "onTouchEnd": [Function],
                                                              }
                                                            }
                                                            isDisabled={false}
                                                            isFocused={false}
                                                            isMulti={true}
                                                            isRtl={false}
                                                            options={
                                                              Array [
                                                                Object {
                                                                  "label": "a",
                                                                  "value": "a",
                                                                },
                                                                Object {
                                                                  "label": "b",
                                                                  "value": "b",
                                                                },
                                                                Object {
                                                                  "label": "c",
                                                                  "value": "c",
                                                                },
                                                                Object {
                                                                  "label": "d",
                                                                  "value": "d",
                                                                },
                                                              ]
                                                            }
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": true,
                                                                "captureMenuScroll": false,
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {},
                                                                "controlShouldRenderValue": true,
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "inputValue": "",
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": true,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "name": "spinner_multi_widget",
                                                                "noOptionsMessage": [Function],
                                                                "onChange": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [
                                                                  Object {
                                                                    "label": "a",
                                                                    "value": "a",
                                                                  },
                                                                  Object {
                                                                    "label": "b",
                                                                    "value": "b",
                                                                  },
                                                                  Object {
                                                                    "label": "c",
                                                                    "value": "c",
                                                                  },
                                                                  Object {
                                                                    "label": "d",
                                                                    "value": "d",
                                                                  },
                                                                ],
                                                                "pageSize": 5,
                                                                "placeholder": "Select...",
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {},
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "value": null,
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#DE350B",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2684FF",
                                                                  "primary25": "#DEEBFF",
                                                                  "primary50": "#B2D4FF",
                                                                  "primary75": "#4C9AFF",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="DropdownIndicator"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                              aria-hidden="true"
                                                              className=""
                                                              css={
                                                                Object {
                                                                  ":hover": Object {
                                                                    "color": "hsl(0, 0%, 60%)",
                                                                  },
                                                                  "boxSizing": "border-box",
                                                                  "color": "hsl(0, 0%, 80%)",
                                                                  "display": "flex",
                                                                  "label": "indicatorContainer",
                                                                  "padding": 8,
                                                                  "transition": "color 150ms",
                                                                }
                                                              }
                                                              onMouseDown={[Function]}
                                                              onTouchEnd={[Function]}
                                                            >
                                                              <div
                                                                aria-hidden="true"
                                                                className=" css-tlfecz-indicatorContainer"
                                                                onMouseDown={[Function]}
                                                                onTouchEnd={[Function]}
                                                              >
                                                                <DownChevron>
                                                                  <Svg
                                                                    size={20}
                                                                  >
                                                                    <EmotionCssPropInternal
                                                                      __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Svg"
                                                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="svg"
                                                                      aria-hidden="true"
                                                                      css={
                                                                        Object {
                                                                          "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                                                                          "name": "19bqh2r",
                                                                          "styles": "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;",
                                                                        }
                                                                      }
                                                                      focusable="false"
                                                                      height={20}
                                                                      viewBox="0 0 20 20"
                                                                      width={20}
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className="css-6q0nyr-Svg"
                                                                        focusable="false"
                                                                        height={20}
                                                                        viewBox="0 0 20 20"
                                                                        width={20}
                                                                      >
                                                                        <path
                                                                          d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                                                        />
                                                                      </svg>
                                                                    </EmotionCssPropInternal>
                                                                  </Svg>
                                                                </DownChevron>
                                                              </div>
                                                            </EmotionCssPropInternal>
                                                          </DropdownIndicator>
                                                        </div>
                                                      </EmotionCssPropInternal>
                                                    </IndicatorsContainer>
                                                  </div>
                                                </EmotionCssPropInternal>
                                              </Control>
                                              <div>
                                                <input
                                                  name="spinner_multi_widget"
                                                  type="hidden"
                                                />
                                              </div>
                                            </div>
                                          </EmotionCssPropInternal>
                                        </SelectContainer>
                                      </Select>
                                    </StateManager>
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        This field is required
                                      </label>
                                    </Label>
                                  </div>
                                </FormGroup>
                              </SelectAllDropDown>
                            </Connect(SelectAllDropDown)>
                          </SelectAll>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Head",
                                  "name": "head",
                                },
                                Object {
                                  "label": "Neck",
                                  "name": "neck",
                                },
                                Object {
                                  "label": "Lungs",
                                  "name": "lungs",
                                },
                                Object {
                                  "label": "Left proximal arm",
                                  "name": "left_proximal_arm",
                                },
                                Object {
                                  "label": "Left distal arm",
                                  "name": "left_distal_arm",
                                },
                                Object {
                                  "label": "Right proximal arm",
                                  "name": "right_proximal_arm",
                                },
                                Object {
                                  "label": "Right distal arm",
                                  "name": "right_distal_arm",
                                },
                                Object {
                                  "label": "Left proximal leg",
                                  "name": "left_proximal_leg",
                                },
                                Object {
                                  "label": "Left distal leg",
                                  "name": "left_distal_leg",
                                },
                                Object {
                                  "label": "Right proximal leg",
                                  "name": "right_proximal_leg",
                                },
                                Object {
                                  "label": "Right distal leg",
                                  "name": "right_distal_leg",
                                },
                              ],
                              "hint": "select_multiple type with image-map appearance and image body.svg",
                              "label": "Image select multiple widget",
                              "name": "select_multi_image_map",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectAll
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "Head",
                                    "name": "head",
                                  },
                                  Object {
                                    "label": "Neck",
                                    "name": "neck",
                                  },
                                  Object {
                                    "label": "Lungs",
                                    "name": "lungs",
                                  },
                                  Object {
                                    "label": "Left proximal arm",
                                    "name": "left_proximal_arm",
                                  },
                                  Object {
                                    "label": "Left distal arm",
                                    "name": "left_distal_arm",
                                  },
                                  Object {
                                    "label": "Right proximal arm",
                                    "name": "right_proximal_arm",
                                  },
                                  Object {
                                    "label": "Right distal arm",
                                    "name": "right_distal_arm",
                                  },
                                  Object {
                                    "label": "Left proximal leg",
                                    "name": "left_proximal_leg",
                                  },
                                  Object {
                                    "label": "Left distal leg",
                                    "name": "left_distal_leg",
                                  },
                                  Object {
                                    "label": "Right proximal leg",
                                    "name": "right_proximal_leg",
                                  },
                                  Object {
                                    "label": "Right distal leg",
                                    "name": "right_distal_leg",
                                  },
                                ],
                                "hint": "select_multiple type with image-map appearance and image body.svg",
                                "label": "Image select multiple widget",
                                "name": "select_multi_image_map",
                                "type": "select all that apply",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectAllRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "Head",
                                      "name": "head",
                                    },
                                    Object {
                                      "label": "Neck",
                                      "name": "neck",
                                    },
                                    Object {
                                      "label": "Lungs",
                                      "name": "lungs",
                                    },
                                    Object {
                                      "label": "Left proximal arm",
                                      "name": "left_proximal_arm",
                                    },
                                    Object {
                                      "label": "Left distal arm",
                                      "name": "left_distal_arm",
                                    },
                                    Object {
                                      "label": "Right proximal arm",
                                      "name": "right_proximal_arm",
                                    },
                                    Object {
                                      "label": "Right distal arm",
                                      "name": "right_distal_arm",
                                    },
                                    Object {
                                      "label": "Left proximal leg",
                                      "name": "left_proximal_leg",
                                    },
                                    Object {
                                      "label": "Left distal leg",
                                      "name": "left_distal_leg",
                                    },
                                    Object {
                                      "label": "Right proximal leg",
                                      "name": "right_proximal_leg",
                                    },
                                    Object {
                                      "label": "Right distal leg",
                                      "name": "right_distal_leg",
                                    },
                                  ],
                                  "hint": "select_multiple type with image-map appearance and image body.svg",
                                  "label": "Image select multiple widget",
                                  "name": "select_multi_image_map",
                                  "type": "select all that apply",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectAllRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "Head",
                                        "name": "head",
                                      },
                                      Object {
                                        "label": "Neck",
                                        "name": "neck",
                                      },
                                      Object {
                                        "label": "Lungs",
                                        "name": "lungs",
                                      },
                                      Object {
                                        "label": "Left proximal arm",
                                        "name": "left_proximal_arm",
                                      },
                                      Object {
                                        "label": "Left distal arm",
                                        "name": "left_distal_arm",
                                      },
                                      Object {
                                        "label": "Right proximal arm",
                                        "name": "right_proximal_arm",
                                      },
                                      Object {
                                        "label": "Right distal arm",
                                        "name": "right_distal_arm",
                                      },
                                      Object {
                                        "label": "Left proximal leg",
                                        "name": "left_proximal_leg",
                                      },
                                      Object {
                                        "label": "Left distal leg",
                                        "name": "left_distal_leg",
                                      },
                                      Object {
                                        "label": "Right proximal leg",
                                        "name": "right_proximal_leg",
                                      },
                                      Object {
                                        "label": "Right distal leg",
                                        "name": "right_distal_leg",
                                      },
                                    ],
                                    "hint": "select_multiple type with image-map appearance and image body.svg",
                                    "label": "Image select multiple widget",
                                    "name": "select_multi_image_map",
                                    "type": "select all that apply",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Image select multiple widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="select_multi_image_map-0"
                                        name="select_multi_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="head"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="head"
                                        />
                                      </Input>
                                       
                                      head
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="select_multi_image_map-1"
                                        name="select_multi_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="neck"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="neck"
                                        />
                                      </Input>
                                       
                                      neck
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="select_multi_image_map-2"
                                        name="select_multi_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="lungs"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="lungs"
                                        />
                                      </Input>
                                       
                                      lungs
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="select_multi_image_map-3"
                                        name="select_multi_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="left_proximal_arm"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="left_proximal_arm"
                                        />
                                      </Input>
                                       
                                      left_proximal_arm
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="4"
                                    >
                                      <Input
                                        key="select_multi_image_map-4"
                                        name="select_multi_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="left_distal_arm"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="left_distal_arm"
                                        />
                                      </Input>
                                       
                                      left_distal_arm
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="5"
                                    >
                                      <Input
                                        key="select_multi_image_map-5"
                                        name="select_multi_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="right_proximal_arm"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="right_proximal_arm"
                                        />
                                      </Input>
                                       
                                      right_proximal_arm
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="6"
                                    >
                                      <Input
                                        key="select_multi_image_map-6"
                                        name="select_multi_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="right_distal_arm"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="right_distal_arm"
                                        />
                                      </Input>
                                       
                                      right_distal_arm
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="7"
                                    >
                                      <Input
                                        key="select_multi_image_map-7"
                                        name="select_multi_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="left_proximal_leg"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="left_proximal_leg"
                                        />
                                      </Input>
                                       
                                      left_proximal_leg
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="8"
                                    >
                                      <Input
                                        key="select_multi_image_map-8"
                                        name="select_multi_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="left_distal_leg"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="left_distal_leg"
                                        />
                                      </Input>
                                       
                                      left_distal_leg
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="9"
                                    >
                                      <Input
                                        key="select_multi_image_map-9"
                                        name="select_multi_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="right_proximal_leg"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="right_proximal_leg"
                                        />
                                      </Input>
                                       
                                      right_proximal_leg
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="10"
                                    >
                                      <Input
                                        key="select_multi_image_map-10"
                                        name="select_multi_image_map"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="right_distal_leg"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="select_multi_image_map"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="right_distal_leg"
                                        />
                                      </Input>
                                       
                                      right_distal_leg
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectAllRadio>
                            </Connect(SelectAllRadio)>
                          </SelectAll>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_table_list_test"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "Show only the labels of these options and not the inputs (type=select_one yes_no, appearance=label)",
                          "label": "Label widget",
                          "name": "table_list_test_label",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "Show only the labels of these options and not the inputs (type=select_multiple yes_no, appearance=label)",
                          "label": "Label multi widget",
                          "name": "table_list_test_label_2",
                          "type": "select all that apply",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "Show only the inputs of these options and not the labels (type=select_one yes_no, appearance=list-nolabel)",
                          "label": "List widget",
                          "name": "table_list_1",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "Show only the inputs of these options and not the labels (type=select_multiple yes_no, appearance=list-nolabel)",
                          "label": "List multi widget",
                          "name": "table_list_2",
                          "type": "select all that apply",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "This is a normal list widget with (type = select_one, appearance = list)",
                          "label": "List widget",
                          "name": "list_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "This is a normal list widget with (type = select_multiple, appearance = list)",
                          "label": "List multi widget",
                          "name": "list_multi_widget",
                          "type": "select all that apply",
                        },
                      ],
                      "hint": "Shows all questions on one page in ODK Collect (appearance=field-list)",
                      "label": "List group",
                      "name": "table_list_test",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          List group
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "Show only the labels of these options and not the inputs (type=select_one yes_no, appearance=label)",
                              "label": "Label widget",
                              "name": "table_list_test_label",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "Yes",
                                    "name": "yes",
                                  },
                                  Object {
                                    "label": "No",
                                    "name": "no",
                                  },
                                  Object {
                                    "label": "Don't Know",
                                    "name": "dk",
                                  },
                                  Object {
                                    "label": "Not Applicable",
                                    "name": "na",
                                  },
                                ],
                                "hint": "Show only the labels of these options and not the inputs (type=select_one yes_no, appearance=label)",
                                "label": "Label widget",
                                "name": "table_list_test_label",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "Yes",
                                      "name": "yes",
                                    },
                                    Object {
                                      "label": "No",
                                      "name": "no",
                                    },
                                    Object {
                                      "label": "Don't Know",
                                      "name": "dk",
                                    },
                                    Object {
                                      "label": "Not Applicable",
                                      "name": "na",
                                    },
                                  ],
                                  "hint": "Show only the labels of these options and not the inputs (type=select_one yes_no, appearance=label)",
                                  "label": "Label widget",
                                  "name": "table_list_test_label",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "Yes",
                                        "name": "yes",
                                      },
                                      Object {
                                        "label": "No",
                                        "name": "no",
                                      },
                                      Object {
                                        "label": "Don't Know",
                                        "name": "dk",
                                      },
                                      Object {
                                        "label": "Not Applicable",
                                        "name": "na",
                                      },
                                    ],
                                    "hint": "Show only the labels of these options and not the inputs (type=select_one yes_no, appearance=label)",
                                    "label": "Label widget",
                                    "name": "table_list_test_label",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Label widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="table_list_test_label-0"
                                        name="table_list_test_label"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="yes"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_test_label"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="yes"
                                        />
                                      </Input>
                                       
                                      yes
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="table_list_test_label-1"
                                        name="table_list_test_label"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="no"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_test_label"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="no"
                                        />
                                      </Input>
                                       
                                      no
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="table_list_test_label-2"
                                        name="table_list_test_label"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="dk"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_test_label"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="dk"
                                        />
                                      </Input>
                                       
                                      dk
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="table_list_test_label-3"
                                        name="table_list_test_label"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="na"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_test_label"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="na"
                                        />
                                      </Input>
                                       
                                      na
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "Show only the labels of these options and not the inputs (type=select_multiple yes_no, appearance=label)",
                              "label": "Label multi widget",
                              "name": "table_list_test_label_2",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectAll
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "Yes",
                                    "name": "yes",
                                  },
                                  Object {
                                    "label": "No",
                                    "name": "no",
                                  },
                                  Object {
                                    "label": "Don't Know",
                                    "name": "dk",
                                  },
                                  Object {
                                    "label": "Not Applicable",
                                    "name": "na",
                                  },
                                ],
                                "hint": "Show only the labels of these options and not the inputs (type=select_multiple yes_no, appearance=label)",
                                "label": "Label multi widget",
                                "name": "table_list_test_label_2",
                                "type": "select all that apply",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectAllRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "Yes",
                                      "name": "yes",
                                    },
                                    Object {
                                      "label": "No",
                                      "name": "no",
                                    },
                                    Object {
                                      "label": "Don't Know",
                                      "name": "dk",
                                    },
                                    Object {
                                      "label": "Not Applicable",
                                      "name": "na",
                                    },
                                  ],
                                  "hint": "Show only the labels of these options and not the inputs (type=select_multiple yes_no, appearance=label)",
                                  "label": "Label multi widget",
                                  "name": "table_list_test_label_2",
                                  "type": "select all that apply",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectAllRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "Yes",
                                        "name": "yes",
                                      },
                                      Object {
                                        "label": "No",
                                        "name": "no",
                                      },
                                      Object {
                                        "label": "Don't Know",
                                        "name": "dk",
                                      },
                                      Object {
                                        "label": "Not Applicable",
                                        "name": "na",
                                      },
                                    ],
                                    "hint": "Show only the labels of these options and not the inputs (type=select_multiple yes_no, appearance=label)",
                                    "label": "Label multi widget",
                                    "name": "table_list_test_label_2",
                                    "type": "select all that apply",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        Label multi widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="table_list_test_label_2-0"
                                        name="table_list_test_label_2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="yes"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_test_label_2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="yes"
                                        />
                                      </Input>
                                       
                                      yes
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="table_list_test_label_2-1"
                                        name="table_list_test_label_2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="no"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_test_label_2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="no"
                                        />
                                      </Input>
                                       
                                      no
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="table_list_test_label_2-2"
                                        name="table_list_test_label_2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="dk"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_test_label_2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="dk"
                                        />
                                      </Input>
                                       
                                      dk
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="table_list_test_label_2-3"
                                        name="table_list_test_label_2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="na"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_test_label_2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="na"
                                        />
                                      </Input>
                                       
                                      na
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectAllRadio>
                            </Connect(SelectAllRadio)>
                          </SelectAll>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "Show only the inputs of these options and not the labels (type=select_one yes_no, appearance=list-nolabel)",
                              "label": "List widget",
                              "name": "table_list_1",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "Yes",
                                    "name": "yes",
                                  },
                                  Object {
                                    "label": "No",
                                    "name": "no",
                                  },
                                  Object {
                                    "label": "Don't Know",
                                    "name": "dk",
                                  },
                                  Object {
                                    "label": "Not Applicable",
                                    "name": "na",
                                  },
                                ],
                                "hint": "Show only the inputs of these options and not the labels (type=select_one yes_no, appearance=list-nolabel)",
                                "label": "List widget",
                                "name": "table_list_1",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "Yes",
                                      "name": "yes",
                                    },
                                    Object {
                                      "label": "No",
                                      "name": "no",
                                    },
                                    Object {
                                      "label": "Don't Know",
                                      "name": "dk",
                                    },
                                    Object {
                                      "label": "Not Applicable",
                                      "name": "na",
                                    },
                                  ],
                                  "hint": "Show only the inputs of these options and not the labels (type=select_one yes_no, appearance=list-nolabel)",
                                  "label": "List widget",
                                  "name": "table_list_1",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "Yes",
                                        "name": "yes",
                                      },
                                      Object {
                                        "label": "No",
                                        "name": "no",
                                      },
                                      Object {
                                        "label": "Don't Know",
                                        "name": "dk",
                                      },
                                      Object {
                                        "label": "Not Applicable",
                                        "name": "na",
                                      },
                                    ],
                                    "hint": "Show only the inputs of these options and not the labels (type=select_one yes_no, appearance=list-nolabel)",
                                    "label": "List widget",
                                    "name": "table_list_1",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        List widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="table_list_1-0"
                                        name="table_list_1"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="yes"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_1"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="yes"
                                        />
                                      </Input>
                                       
                                      yes
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="table_list_1-1"
                                        name="table_list_1"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="no"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_1"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="no"
                                        />
                                      </Input>
                                       
                                      no
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="table_list_1-2"
                                        name="table_list_1"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="dk"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_1"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="dk"
                                        />
                                      </Input>
                                       
                                      dk
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="table_list_1-3"
                                        name="table_list_1"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="na"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_1"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="na"
                                        />
                                      </Input>
                                       
                                      na
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "Show only the inputs of these options and not the labels (type=select_multiple yes_no, appearance=list-nolabel)",
                              "label": "List multi widget",
                              "name": "table_list_2",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectAll
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "Yes",
                                    "name": "yes",
                                  },
                                  Object {
                                    "label": "No",
                                    "name": "no",
                                  },
                                  Object {
                                    "label": "Don't Know",
                                    "name": "dk",
                                  },
                                  Object {
                                    "label": "Not Applicable",
                                    "name": "na",
                                  },
                                ],
                                "hint": "Show only the inputs of these options and not the labels (type=select_multiple yes_no, appearance=list-nolabel)",
                                "label": "List multi widget",
                                "name": "table_list_2",
                                "type": "select all that apply",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectAllRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "Yes",
                                      "name": "yes",
                                    },
                                    Object {
                                      "label": "No",
                                      "name": "no",
                                    },
                                    Object {
                                      "label": "Don't Know",
                                      "name": "dk",
                                    },
                                    Object {
                                      "label": "Not Applicable",
                                      "name": "na",
                                    },
                                  ],
                                  "hint": "Show only the inputs of these options and not the labels (type=select_multiple yes_no, appearance=list-nolabel)",
                                  "label": "List multi widget",
                                  "name": "table_list_2",
                                  "type": "select all that apply",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectAllRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "Yes",
                                        "name": "yes",
                                      },
                                      Object {
                                        "label": "No",
                                        "name": "no",
                                      },
                                      Object {
                                        "label": "Don't Know",
                                        "name": "dk",
                                      },
                                      Object {
                                        "label": "Not Applicable",
                                        "name": "na",
                                      },
                                    ],
                                    "hint": "Show only the inputs of these options and not the labels (type=select_multiple yes_no, appearance=list-nolabel)",
                                    "label": "List multi widget",
                                    "name": "table_list_2",
                                    "type": "select all that apply",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        List multi widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="table_list_2-0"
                                        name="table_list_2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="yes"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="yes"
                                        />
                                      </Input>
                                       
                                      yes
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="table_list_2-1"
                                        name="table_list_2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="no"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="no"
                                        />
                                      </Input>
                                       
                                      no
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="table_list_2-2"
                                        name="table_list_2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="dk"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="dk"
                                        />
                                      </Input>
                                       
                                      dk
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="table_list_2-3"
                                        name="table_list_2"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="na"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="table_list_2"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="na"
                                        />
                                      </Input>
                                       
                                      na
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectAllRadio>
                            </Connect(SelectAllRadio)>
                          </SelectAll>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "This is a normal list widget with (type = select_one, appearance = list)",
                              "label": "List widget",
                              "name": "list_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectOne
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "Yes",
                                    "name": "yes",
                                  },
                                  Object {
                                    "label": "No",
                                    "name": "no",
                                  },
                                  Object {
                                    "label": "Don't Know",
                                    "name": "dk",
                                  },
                                  Object {
                                    "label": "Not Applicable",
                                    "name": "na",
                                  },
                                ],
                                "hint": "This is a normal list widget with (type = select_one, appearance = list)",
                                "label": "List widget",
                                "name": "list_widget",
                                "type": "select one",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectOneRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "Yes",
                                      "name": "yes",
                                    },
                                    Object {
                                      "label": "No",
                                      "name": "no",
                                    },
                                    Object {
                                      "label": "Don't Know",
                                      "name": "dk",
                                    },
                                    Object {
                                      "label": "Not Applicable",
                                      "name": "na",
                                    },
                                  ],
                                  "hint": "This is a normal list widget with (type = select_one, appearance = list)",
                                  "label": "List widget",
                                  "name": "list_widget",
                                  "type": "select one",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectOneRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "Yes",
                                        "name": "yes",
                                      },
                                      Object {
                                        "label": "No",
                                        "name": "no",
                                      },
                                      Object {
                                        "label": "Don't Know",
                                        "name": "dk",
                                      },
                                      Object {
                                        "label": "Not Applicable",
                                        "name": "na",
                                      },
                                    ],
                                    "hint": "This is a normal list widget with (type = select_one, appearance = list)",
                                    "label": "List widget",
                                    "name": "list_widget",
                                    "type": "select one",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        List widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="list_widget-0"
                                        name="list_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="yes"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="list_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="yes"
                                        />
                                      </Input>
                                       
                                      yes
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="list_widget-1"
                                        name="list_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="no"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="list_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="no"
                                        />
                                      </Input>
                                       
                                      no
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="list_widget-2"
                                        name="list_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="dk"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="list_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="dk"
                                        />
                                      </Input>
                                       
                                      dk
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="list_widget-3"
                                        name="list_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="radio"
                                        value="na"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="list_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="radio"
                                          value="na"
                                        />
                                      </Input>
                                       
                                      na
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectOneRadio>
                            </Connect(SelectOneRadio)>
                          </SelectOne>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="5"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "This is a normal list widget with (type = select_multiple, appearance = list)",
                              "label": "List multi widget",
                              "name": "list_multi_widget",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <SelectAll
                            defaultLanguage="English"
                            fieldElement={
                              Object {
                                "children": Array [
                                  Object {
                                    "label": "Yes",
                                    "name": "yes",
                                  },
                                  Object {
                                    "label": "No",
                                    "name": "no",
                                  },
                                  Object {
                                    "label": "Don't Know",
                                    "name": "dk",
                                  },
                                  Object {
                                    "label": "Not Applicable",
                                    "name": "na",
                                  },
                                ],
                                "hint": "This is a normal list widget with (type = select_multiple, appearance = list)",
                                "label": "List multi widget",
                                "name": "list_multi_widget",
                                "type": "select all that apply",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Connect(SelectAllRadio)
                              defaultLanguage="English"
                              fieldElement={
                                Object {
                                  "children": Array [
                                    Object {
                                      "label": "Yes",
                                      "name": "yes",
                                    },
                                    Object {
                                      "label": "No",
                                      "name": "no",
                                    },
                                    Object {
                                      "label": "Don't Know",
                                      "name": "dk",
                                    },
                                    Object {
                                      "label": "Not Applicable",
                                      "name": "na",
                                    },
                                  ],
                                  "hint": "This is a normal list widget with (type = select_multiple, appearance = list)",
                                  "label": "List multi widget",
                                  "name": "list_multi_widget",
                                  "type": "select all that apply",
                                }
                              }
                              fieldParentTreeName=""
                            >
                              <SelectAllRadio
                                addErrorInputIdActionCreator={[Function]}
                                assignFieldValueActionCreator={[Function]}
                                defaultLanguage="English"
                                fieldElement={
                                  Object {
                                    "children": Array [
                                      Object {
                                        "label": "Yes",
                                        "name": "yes",
                                      },
                                      Object {
                                        "label": "No",
                                        "name": "no",
                                      },
                                      Object {
                                        "label": "Don't Know",
                                        "name": "dk",
                                      },
                                      Object {
                                        "label": "Not Applicable",
                                        "name": "na",
                                      },
                                    ],
                                    "hint": "This is a normal list widget with (type = select_multiple, appearance = list)",
                                    "label": "List multi widget",
                                    "name": "list_multi_widget",
                                    "type": "select all that apply",
                                  }
                                }
                                fieldParentTreeName=""
                                fieldValue=""
                                getEvaluatedExpressionSelector={[Function]}
                                isComponentRender={true}
                                isPresentInErrorSelector={[Function]}
                                removeErrorInputIdActionCreator={[Function]}
                              >
                                <FormGroup
                                  tag="div"
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <Label
                                      tag="label"
                                      widths={
                                        Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ]
                                      }
                                    >
                                      <label
                                        className=""
                                      >
                                        List multi widget
                                      </label>
                                    </Label>
                                    <div
                                      className="col-md-12"
                                      key="0"
                                    >
                                      <Input
                                        key="list_multi_widget-0"
                                        name="list_multi_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="yes"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="list_multi_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="yes"
                                        />
                                      </Input>
                                       
                                      yes
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="1"
                                    >
                                      <Input
                                        key="list_multi_widget-1"
                                        name="list_multi_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="no"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="list_multi_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="no"
                                        />
                                      </Input>
                                       
                                      no
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="2"
                                    >
                                      <Input
                                        key="list_multi_widget-2"
                                        name="list_multi_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="dk"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="list_multi_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="dk"
                                        />
                                      </Input>
                                       
                                      dk
                                    </div>
                                    <div
                                      className="col-md-12"
                                      key="3"
                                    >
                                      <Input
                                        key="list_multi_widget-3"
                                        name="list_multi_widget"
                                        onChange={[Function]}
                                        readOnly={false}
                                        type="checkbox"
                                        value="na"
                                      >
                                        <input
                                          className="form-check-input"
                                          name="list_multi_widget"
                                          onChange={[Function]}
                                          readOnly={false}
                                          type="checkbox"
                                          value="na"
                                        />
                                      </Input>
                                       
                                      na
                                    </div>
                                  </div>
                                </FormGroup>
                              </SelectAllRadio>
                            </Connect(SelectAllRadio)>
                          </SelectAll>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_repeat_1"
            >
              <BaseTypeEvaluator
                fieldElement={
                  Object {
                    "children": Array [
                      Object {
                        "label": "Name",
                        "name": "repeat_q",
                        "type": "text",
                      },
                    ],
                    "name": "repeat_1",
                    "type": "repeat",
                  }
                }
                fieldParentTreeName=""
              >
                <div>
                  Other 
                  repeat
                   
                  repeat_1
                </div>
              </BaseTypeEvaluator>
            </div>
            <div
              key="group_meta"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "bind": Object {
                            "calculate": "concat('uuid:', uuid())",
                            "readonly": "true()",
                          },
                          "name": "instanceID",
                          "type": "calculate",
                        },
                      ],
                      "control": Object {
                        "bodyless": true,
                      },
                      "name": "meta",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        />
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "calculate": "concat('uuid:', uuid())",
                                "readonly": "true()",
                              },
                              "name": "instanceID",
                              "type": "calculate",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            calculate
                             
                            instanceID
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
          </div>
        </GroupTypeEvaluator>
      </div>
    </Container>
  </App>
</Provider>
`;
