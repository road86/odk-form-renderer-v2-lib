// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App renders App correctly 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <App>
    <Container
      className="form-container"
      tag="div"
    >
      <div
        className="form-container container"
      >
        <Row
          className="welcome-box"
          tag="div"
        >
          <div
            className="welcome-box row"
          >
            <Col
              tag="div"
              widths={
                Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ]
              }
            >
              <div
                className="col"
              >
                <h3>
                  Welcome to Odk Form Renderer
                </h3>
              </div>
            </Col>
          </div>
        </Row>
        <GroupTypeEvaluator
          fieldElements={
            Array [
              Object {
                "hint": "\\"This is a sample for introductory and debugging purposes. It is updated periodically so check \\"\\"Get Blank Form\\"\\" to get the latest! 

Version 2018032801 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new-front (selfie) for video type

Version 2018022001 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance image-map for select_one and select_multiple types
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new for image, audio, video types

Version 2017121301 added:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance thousands-sep for numeric types
&nbsp;&nbsp;&nbsp;&nbsp;- Range questions
&nbsp;&nbsp;&nbsp;&nbsp;- Ethiopian, coptic and islamic calendars\\"",
                "label": "Welcome to ODK Collect! This form showcases the different available question types (_widgets_).",
                "name": "intro",
                "type": "note",
              },
              Object {
                "children": Array [
                  Object {
                    "bind": Object {
                      "constraint": ".=\\"hello\\"",
                      "jr:constraintMsg": "Violated",
                      "readonly": "true",
                      "required": "true",
                    },
                    "label": "String widget",
                    "name": "string_widget",
                    "type": "text",
                  },
                  Object {
                    "bind": Object {
                      "constraint": ".=\\"hello\\"",
                      "jr:constraintMsg": "Violated",
                      "required": "true",
                    },
                    "default": "this is test",
                    "hint": "text type with numbers appearance",
                    "label": "String number widget",
                    "name": "string_number_widget",
                    "type": "text",
                  },
                  Object {
                    "hint": "text type with url appearance and default value of http://opendatakit.org/",
                    "label": "URL widget",
                    "name": "url_widget",
                    "type": "text",
                  },
                  Object {
                    "hint": "text type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                    "label": "Ex string widget",
                    "name": "ex_string_widget",
                    "type": "text",
                  },
                  Object {
                    "hint": "text type with printer:org.opendatakit.sensors.ZebraPrinter",
                    "label": "Ex printer widget",
                    "name": "ex_printer_widget",
                    "type": "text",
                  },
                ],
                "label": "Text widgets",
                "name": "text_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "bind": Object {
                      "constraint": ".>=0",
                      "jr:constraintMsg": Object {
                        "English": "Negative value not allowed",
                      },
                      "readonly": "true",
                      "required": "Yes",
                    },
                    "hint": "integer type with no appearance",
                    "label": "Integer widget",
                    "name": "integer_widget",
                    "type": "integer",
                  },
                  Object {
                    "bind": Object {
                      "constraint": ".>=0",
                      "jr:constraintMsg": Object {
                        "English": "Negative value not allowed",
                      },
                      "required": "Yes",
                    },
                    "hint": "integer type with thousands-sep appearance. This appearance can also be applied to decimal and string numbers widgets",
                    "label": "Integer widget with thousands separators",
                    "name": "integer_thousands_sep_widget",
                    "type": "integer",
                  },
                  Object {
                    "bind": Object {
                      "constraint": ".>=0",
                      "jr:constraintMsg": Object {
                        "English": "Negative value not allowed",
                      },
                      "required": "Yes",
                    },
                    "hint": "integer type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                    "label": "Ex integer widget",
                    "name": "ex_integer_widget",
                    "type": "integer",
                  },
                  Object {
                    "bind": Object {
                      "constraint": ".>=0",
                      "jr:constraintMsg": Object {
                        "English": "Negative value not allowed",
                      },
                      "required": "Yes",
                    },
                    "hint": "decimal type with no appearance",
                    "label": "Decimal widget",
                    "name": "decimal_widget",
                    "type": "decimal",
                  },
                  Object {
                    "hint": "decimal type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                    "label": "Ex decimal widget",
                    "name": "ex_decimal_widget",
                    "type": "decimal",
                  },
                  Object {
                    "hint": "decimal type with bearing appearance",
                    "label": "Bearing widget",
                    "name": "bearing_widget",
                    "type": "decimal",
                  },
                ],
                "label": "Numerical widgets",
                "name": "number_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "hint": "image type with no appearance",
                    "label": "Image widget",
                    "name": "image_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with new appearance (can also be added with annotate appearance and on audio and video types)",
                    "label": "Image widget without Choose button",
                    "name": "image_widget_no_choose",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with selfie appearance",
                    "label": "Selfie widget",
                    "name": "selfie_image_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with draw appearance",
                    "label": "Draw widget",
                    "name": "draw_image_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with annotate appearance",
                    "label": "Annotate widget",
                    "name": "annotate_image_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with signature appearance",
                    "label": "Signature widget",
                    "name": "signature_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with web appearance",
                    "label": "Web view image widget",
                    "name": "webview_image_widget",
                    "type": "photo",
                  },
                  Object {
                    "hint": "image type with align:1 1 1 appearance, requires external aligned image app",
                    "label": "Align image widget",
                    "name": "aligned_image_widget",
                    "type": "photo",
                  },
                ],
                "label": "Image widgets",
                "name": "image_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "hint": "barcode type with no appearance",
                    "label": "Barcode widget",
                    "name": "barcode_widget",
                    "type": "barcode",
                  },
                  Object {
                    "hint": "audio type with no appearance",
                    "label": "Audio widget",
                    "name": "audio_widget",
                    "type": "audio",
                  },
                  Object {
                    "hint": "video type with no appearance",
                    "label": "Video widget",
                    "name": "video_widget",
                    "type": "video",
                  },
                  Object {
                    "hint": "video type with new-front appearance",
                    "label": "Selfie video widget",
                    "name": "selfie_video_widget",
                    "type": "video",
                  },
                ],
                "label": "Media widgets",
                "name": "media_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "hint": "date type with no appearance",
                    "label": "Date widget",
                    "name": "date_widget",
                    "type": "date",
                  },
                  Object {
                    "hint": "date type with no-calendar appearance",
                    "label": "Date Widget",
                    "name": "date_widget_nocalendar",
                    "type": "date",
                  },
                  Object {
                    "hint": "date type with month-year appearance",
                    "label": "Date widget",
                    "name": "date_widget_month_year",
                    "type": "date",
                  },
                  Object {
                    "hint": "date type with year appearance",
                    "label": "Date widget",
                    "name": "date_widget_year",
                    "type": "date",
                  },
                  Object {
                    "hint": "time type with no appearance",
                    "label": "Time widget",
                    "name": "time_widget",
                    "type": "time",
                  },
                  Object {
                    "hint": "dateTime type with no appearance",
                    "label": "Date time widget",
                    "name": "date_time_widget",
                    "type": "dateTime",
                  },
                  Object {
                    "hint": "dateTime type with no-calendar appearance",
                    "label": "Date time widget",
                    "name": "date_time_widget_nocalendar",
                    "type": "dateTime",
                  },
                  Object {
                    "hint": "date type ethiopian appearance",
                    "label": "Ethiopian date widget",
                    "name": "ethiopian_date_widget",
                    "type": "date",
                  },
                  Object {
                    "hint": "date type coptic appearance",
                    "label": "Coptic date widget",
                    "name": "coptic_date_widget",
                    "type": "date",
                  },
                  Object {
                    "hint": "date type islamic appearance",
                    "label": "Islamic date widget",
                    "name": "islamic_date_widget",
                    "type": "date",
                  },
                ],
                "label": "Date and time widgets",
                "name": "date_time_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with no appearance, 4 text choices",
                    "label": "Select one widget",
                    "name": "select_one_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with minimal appearance, 4 text choices",
                    "label": "Spinner widget",
                    "name": "spinner_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with quick appearance, 4 text choices",
                    "label": "Select one autoadvance widget",
                    "name": "select_one_autoadvance_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with search appearance, 4 text choices",
                    "label": "Select one search widget",
                    "name": "select_one_search_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with autocomplete appearance, 4 text choices",
                    "label": "Select one search widget",
                    "name": "select_one_autocomplete_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with no appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                    "label": "Grid select one widget",
                    "name": "grid_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with compact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                    "label": "Grid select one widget",
                    "name": "grid_widget_compact",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with compact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                    "label": "Grid select one widget",
                    "name": "grid_widget_compact2",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with quickcompact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                    "label": "Grid select one widget",
                    "name": "grid_widget_quickcompact",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_one type with quickcompact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                    "label": "Grid select one widget",
                    "name": "grid_widget_quickcompact2",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Head",
                        "name": "head",
                      },
                      Object {
                        "label": "Neck",
                        "name": "neck",
                      },
                      Object {
                        "label": "Lungs",
                        "name": "lungs",
                      },
                      Object {
                        "label": "Left proximal arm",
                        "name": "left_proximal_arm",
                      },
                      Object {
                        "label": "Left distal arm",
                        "name": "left_distal_arm",
                      },
                      Object {
                        "label": "Right proximal arm",
                        "name": "right_proximal_arm",
                      },
                      Object {
                        "label": "Right distal arm",
                        "name": "right_distal_arm",
                      },
                      Object {
                        "label": "Left proximal leg",
                        "name": "left_proximal_leg",
                      },
                      Object {
                        "label": "Left distal leg",
                        "name": "left_distal_leg",
                      },
                      Object {
                        "label": "Right proximal leg",
                        "name": "right_proximal_leg",
                      },
                      Object {
                        "label": "Right distal leg",
                        "name": "right_distal_leg",
                      },
                    ],
                    "hint": "select_one with type image-map appearance and image body.svg",
                    "label": "Image select one widget",
                    "name": "select_one_image_map",
                    "type": "select one",
                  },
                ],
                "label": "Select one widgets",
                "name": "select_one_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_multiple type with no appearance, 4 text choices",
                    "label": "Multi select widget",
                    "name": "select_multi_widget",
                    "type": "select all that apply",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_multiple type with compact appearance, 4 image choices",
                    "label": "Grid select multiple widget",
                    "name": "grid_multi_widget_compact",
                    "type": "select all that apply",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "media": Object {
                          "image": "a.jpg",
                        },
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "media": Object {
                          "image": "b.jpg",
                        },
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "media": Object {
                          "image": "c.jpg",
                        },
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "media": Object {
                          "image": "d.jpg",
                        },
                        "name": "d",
                      },
                    ],
                    "hint": "select_multiple type with compact-2 appearance, 4 image choices",
                    "label": "Grid select multiple widget",
                    "name": "grid_multi_widget_compact2",
                    "type": "select all that apply",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "A",
                        "name": "a",
                      },
                      Object {
                        "label": "B",
                        "name": "b",
                      },
                      Object {
                        "label": "C",
                        "name": "c",
                      },
                      Object {
                        "label": "D",
                        "name": "d",
                      },
                    ],
                    "hint": "select_multiple type with minimal appearance, 4 image choices",
                    "label": "Spinner widget: select multiple",
                    "name": "spinner_multi_widget",
                    "type": "select all that apply",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Head",
                        "name": "head",
                      },
                      Object {
                        "label": "Neck",
                        "name": "neck",
                      },
                      Object {
                        "label": "Lungs",
                        "name": "lungs",
                      },
                      Object {
                        "label": "Left proximal arm",
                        "name": "left_proximal_arm",
                      },
                      Object {
                        "label": "Left distal arm",
                        "name": "left_distal_arm",
                      },
                      Object {
                        "label": "Right proximal arm",
                        "name": "right_proximal_arm",
                      },
                      Object {
                        "label": "Right distal arm",
                        "name": "right_distal_arm",
                      },
                      Object {
                        "label": "Left proximal leg",
                        "name": "left_proximal_leg",
                      },
                      Object {
                        "label": "Left distal leg",
                        "name": "left_distal_leg",
                      },
                      Object {
                        "label": "Right proximal leg",
                        "name": "right_proximal_leg",
                      },
                      Object {
                        "label": "Right distal leg",
                        "name": "right_distal_leg",
                      },
                    ],
                    "hint": "select_multiple type with image-map appearance and image body.svg",
                    "label": "Image select multiple widget",
                    "name": "select_multi_image_map",
                    "type": "select all that apply",
                  },
                ],
                "label": "This section contains \\"Select Multi Widgets\\"",
                "name": "select_multi_widgets",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "Show only the labels of these options and not the inputs (type=select_one yes_no, appearance=label)",
                    "label": "Label widget",
                    "name": "table_list_test_label",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "Show only the labels of these options and not the inputs (type=select_multiple yes_no, appearance=label)",
                    "label": "Label multi widget",
                    "name": "table_list_test_label_2",
                    "type": "select all that apply",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "Show only the inputs of these options and not the labels (type=select_one yes_no, appearance=list-nolabel)",
                    "label": "List widget",
                    "name": "table_list_1",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "Show only the inputs of these options and not the labels (type=select_multiple yes_no, appearance=list-nolabel)",
                    "label": "List multi widget",
                    "name": "table_list_2",
                    "type": "select all that apply",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "This is a normal list widget with (type = select_one, appearance = list)",
                    "label": "List widget",
                    "name": "list_widget",
                    "type": "select one",
                  },
                  Object {
                    "children": Array [
                      Object {
                        "label": "Yes",
                        "name": "yes",
                      },
                      Object {
                        "label": "No",
                        "name": "no",
                      },
                      Object {
                        "label": "Don't Know",
                        "name": "dk",
                      },
                      Object {
                        "label": "Not Applicable",
                        "name": "na",
                      },
                    ],
                    "hint": "This is a normal list widget with (type = select_multiple, appearance = list)",
                    "label": "List multi widget",
                    "name": "list_multi_widget",
                    "type": "select all that apply",
                  },
                ],
                "hint": "Shows all questions on one page in ODK Collect (appearance=field-list)",
                "label": "List group",
                "name": "table_list_test",
                "type": "group",
              },
              Object {
                "children": Array [
                  Object {
                    "label": "Name",
                    "name": "repeat_q",
                    "type": "text",
                  },
                ],
                "name": "repeat_1",
                "type": "repeat",
              },
              Object {
                "children": Array [
                  Object {
                    "bind": Object {
                      "calculate": "concat('uuid:', uuid())",
                      "readonly": "true()",
                    },
                    "name": "instanceID",
                    "type": "calculate",
                  },
                ],
                "control": Object {
                  "bodyless": true,
                },
                "name": "meta",
                "type": "group",
              },
            ]
          }
          fieldParentTreeName=""
        >
          <div>
            <div
              key="group_intro"
            >
              <BaseTypeEvaluator
                fieldElement={
                  Object {
                    "hint": "\\"This is a sample for introductory and debugging purposes. It is updated periodically so check \\"\\"Get Blank Form\\"\\" to get the latest! 

Version 2018032801 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new-front (selfie) for video type

Version 2018022001 adds:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance image-map for select_one and select_multiple types
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance new for image, audio, video types

Version 2017121301 added:
&nbsp;&nbsp;&nbsp;&nbsp;- Appearance thousands-sep for numeric types
&nbsp;&nbsp;&nbsp;&nbsp;- Range questions
&nbsp;&nbsp;&nbsp;&nbsp;- Ethiopian, coptic and islamic calendars\\"",
                    "label": "Welcome to ODK Collect! This form showcases the different available question types (_widgets_).",
                    "name": "intro",
                    "type": "note",
                  }
                }
                fieldParentTreeName=""
              >
                <div>
                  Other 
                  note
                   
                  intro
                </div>
              </BaseTypeEvaluator>
            </div>
            <div
              key="group_text_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "bind": Object {
                            "constraint": ".=\\"hello\\"",
                            "jr:constraintMsg": "Violated",
                            "readonly": "true",
                            "required": "true",
                          },
                          "label": "String widget",
                          "name": "string_widget",
                          "type": "text",
                        },
                        Object {
                          "bind": Object {
                            "constraint": ".=\\"hello\\"",
                            "jr:constraintMsg": "Violated",
                            "required": "true",
                          },
                          "default": "this is test",
                          "hint": "text type with numbers appearance",
                          "label": "String number widget",
                          "name": "string_number_widget",
                          "type": "text",
                        },
                        Object {
                          "hint": "text type with url appearance and default value of http://opendatakit.org/",
                          "label": "URL widget",
                          "name": "url_widget",
                          "type": "text",
                        },
                        Object {
                          "hint": "text type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                          "label": "Ex string widget",
                          "name": "ex_string_widget",
                          "type": "text",
                        },
                        Object {
                          "hint": "text type with printer:org.opendatakit.sensors.ZebraPrinter",
                          "label": "Ex printer widget",
                          "name": "ex_printer_widget",
                          "type": "text",
                        },
                      ],
                      "label": "Text widgets",
                      "name": "text_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Text widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".=\\"hello\\"",
                                "jr:constraintMsg": "Violated",
                                "readonly": "true",
                                "required": "true",
                              },
                              "label": "String widget",
                              "name": "string_widget",
                              "type": "text",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Text)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".=\\"hello\\"",
                                  "jr:constraintMsg": "Violated",
                                  "readonly": "true",
                                  "required": "true",
                                },
                                "label": "String widget",
                                "name": "string_widget",
                                "type": "text",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Text
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".=\\"hello\\"",
                                    "jr:constraintMsg": "Violated",
                                    "readonly": "true",
                                    "required": "true",
                                  },
                                  "label": "String widget",
                                  "name": "string_widget",
                                  "type": "text",
                                }
                              }
                              fieldParentTreeName=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      String widget
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="string_widget"
                                    onChange={[Function]}
                                    readOnly={true}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="string_widget"
                                      onChange={[Function]}
                                      readOnly={true}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      This field is required
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Text>
                          </Connect(Text)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".=\\"hello\\"",
                                "jr:constraintMsg": "Violated",
                                "required": "true",
                              },
                              "default": "this is test",
                              "hint": "text type with numbers appearance",
                              "label": "String number widget",
                              "name": "string_number_widget",
                              "type": "text",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Text)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".=\\"hello\\"",
                                  "jr:constraintMsg": "Violated",
                                  "required": "true",
                                },
                                "default": "this is test",
                                "hint": "text type with numbers appearance",
                                "label": "String number widget",
                                "name": "string_number_widget",
                                "type": "text",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Text
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".=\\"hello\\"",
                                    "jr:constraintMsg": "Violated",
                                    "required": "true",
                                  },
                                  "default": "this is test",
                                  "hint": "text type with numbers appearance",
                                  "label": "String number widget",
                                  "name": "string_number_widget",
                                  "type": "text",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue="this is test"
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      String number widget
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="string_number_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="text"
                                    value="this is test"
                                  >
                                    <input
                                      className="form-control"
                                      name="string_number_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value="this is test"
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Violated
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Text>
                          </Connect(Text)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "text type with url appearance and default value of http://opendatakit.org/",
                              "label": "URL widget",
                              "name": "url_widget",
                              "type": "text",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Text)
                            fieldElement={
                              Object {
                                "hint": "text type with url appearance and default value of http://opendatakit.org/",
                                "label": "URL widget",
                                "name": "url_widget",
                                "type": "text",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Text
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "text type with url appearance and default value of http://opendatakit.org/",
                                  "label": "URL widget",
                                  "name": "url_widget",
                                  "type": "text",
                                }
                              }
                              fieldParentTreeName=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      URL widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="url_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="url_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Text>
                          </Connect(Text)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "text type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                              "label": "Ex string widget",
                              "name": "ex_string_widget",
                              "type": "text",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Text)
                            fieldElement={
                              Object {
                                "hint": "text type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                "label": "Ex string widget",
                                "name": "ex_string_widget",
                                "type": "text",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Text
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "text type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                  "label": "Ex string widget",
                                  "name": "ex_string_widget",
                                  "type": "text",
                                }
                              }
                              fieldParentTreeName=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Ex string widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="ex_string_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="ex_string_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Text>
                          </Connect(Text)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "text type with printer:org.opendatakit.sensors.ZebraPrinter",
                              "label": "Ex printer widget",
                              "name": "ex_printer_widget",
                              "type": "text",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Text)
                            fieldElement={
                              Object {
                                "hint": "text type with printer:org.opendatakit.sensors.ZebraPrinter",
                                "label": "Ex printer widget",
                                "name": "ex_printer_widget",
                                "type": "text",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Text
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "text type with printer:org.opendatakit.sensors.ZebraPrinter",
                                  "label": "Ex printer widget",
                                  "name": "ex_printer_widget",
                                  "type": "text",
                                }
                              }
                              fieldParentTreeName=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Ex printer widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="ex_printer_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="text"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="ex_printer_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="text"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Text>
                          </Connect(Text)>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_number_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "bind": Object {
                            "constraint": ".>=0",
                            "jr:constraintMsg": Object {
                              "English": "Negative value not allowed",
                            },
                            "readonly": "true",
                            "required": "Yes",
                          },
                          "hint": "integer type with no appearance",
                          "label": "Integer widget",
                          "name": "integer_widget",
                          "type": "integer",
                        },
                        Object {
                          "bind": Object {
                            "constraint": ".>=0",
                            "jr:constraintMsg": Object {
                              "English": "Negative value not allowed",
                            },
                            "required": "Yes",
                          },
                          "hint": "integer type with thousands-sep appearance. This appearance can also be applied to decimal and string numbers widgets",
                          "label": "Integer widget with thousands separators",
                          "name": "integer_thousands_sep_widget",
                          "type": "integer",
                        },
                        Object {
                          "bind": Object {
                            "constraint": ".>=0",
                            "jr:constraintMsg": Object {
                              "English": "Negative value not allowed",
                            },
                            "required": "Yes",
                          },
                          "hint": "integer type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                          "label": "Ex integer widget",
                          "name": "ex_integer_widget",
                          "type": "integer",
                        },
                        Object {
                          "bind": Object {
                            "constraint": ".>=0",
                            "jr:constraintMsg": Object {
                              "English": "Negative value not allowed",
                            },
                            "required": "Yes",
                          },
                          "hint": "decimal type with no appearance",
                          "label": "Decimal widget",
                          "name": "decimal_widget",
                          "type": "decimal",
                        },
                        Object {
                          "hint": "decimal type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                          "label": "Ex decimal widget",
                          "name": "ex_decimal_widget",
                          "type": "decimal",
                        },
                        Object {
                          "hint": "decimal type with bearing appearance",
                          "label": "Bearing widget",
                          "name": "bearing_widget",
                          "type": "decimal",
                        },
                      ],
                      "label": "Numerical widgets",
                      "name": "number_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Numerical widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".>=0",
                                "jr:constraintMsg": Object {
                                  "English": "Negative value not allowed",
                                },
                                "readonly": "true",
                                "required": "Yes",
                              },
                              "hint": "integer type with no appearance",
                              "label": "Integer widget",
                              "name": "integer_widget",
                              "type": "integer",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Integer)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".>=0",
                                  "jr:constraintMsg": Object {
                                    "English": "Negative value not allowed",
                                  },
                                  "readonly": "true",
                                  "required": "Yes",
                                },
                                "hint": "integer type with no appearance",
                                "label": "Integer widget",
                                "name": "integer_widget",
                                "type": "integer",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Integer
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".>=0",
                                    "jr:constraintMsg": Object {
                                      "English": "Negative value not allowed",
                                    },
                                    "readonly": "true",
                                    "required": "Yes",
                                  },
                                  "hint": "integer type with no appearance",
                                  "label": "Integer widget",
                                  "name": "integer_widget",
                                  "type": "integer",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Integer widget
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="integer_widget"
                                    onChange={[Function]}
                                    readOnly={true}
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="integer_widget"
                                      onChange={[Function]}
                                      readOnly={true}
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      This field is required
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Integer>
                          </Connect(Integer)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".>=0",
                                "jr:constraintMsg": Object {
                                  "English": "Negative value not allowed",
                                },
                                "required": "Yes",
                              },
                              "hint": "integer type with thousands-sep appearance. This appearance can also be applied to decimal and string numbers widgets",
                              "label": "Integer widget with thousands separators",
                              "name": "integer_thousands_sep_widget",
                              "type": "integer",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Integer)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".>=0",
                                  "jr:constraintMsg": Object {
                                    "English": "Negative value not allowed",
                                  },
                                  "required": "Yes",
                                },
                                "hint": "integer type with thousands-sep appearance. This appearance can also be applied to decimal and string numbers widgets",
                                "label": "Integer widget with thousands separators",
                                "name": "integer_thousands_sep_widget",
                                "type": "integer",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Integer
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".>=0",
                                    "jr:constraintMsg": Object {
                                      "English": "Negative value not allowed",
                                    },
                                    "required": "Yes",
                                  },
                                  "hint": "integer type with thousands-sep appearance. This appearance can also be applied to decimal and string numbers widgets",
                                  "label": "Integer widget with thousands separators",
                                  "name": "integer_thousands_sep_widget",
                                  "type": "integer",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Integer widget with thousands separators
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="integer_thousands_sep_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="integer_thousands_sep_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      This field is required
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Integer>
                          </Connect(Integer)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".>=0",
                                "jr:constraintMsg": Object {
                                  "English": "Negative value not allowed",
                                },
                                "required": "Yes",
                              },
                              "hint": "integer type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                              "label": "Ex integer widget",
                              "name": "ex_integer_widget",
                              "type": "integer",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Integer)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".>=0",
                                  "jr:constraintMsg": Object {
                                    "English": "Negative value not allowed",
                                  },
                                  "required": "Yes",
                                },
                                "hint": "integer type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                "label": "Ex integer widget",
                                "name": "ex_integer_widget",
                                "type": "integer",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Integer
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".>=0",
                                    "jr:constraintMsg": Object {
                                      "English": "Negative value not allowed",
                                    },
                                    "required": "Yes",
                                  },
                                  "hint": "integer type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                  "label": "Ex integer widget",
                                  "name": "ex_integer_widget",
                                  "type": "integer",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Ex integer widget
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="ex_integer_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="ex_integer_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      This field is required
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Integer>
                          </Connect(Integer)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "constraint": ".>=0",
                                "jr:constraintMsg": Object {
                                  "English": "Negative value not allowed",
                                },
                                "required": "Yes",
                              },
                              "hint": "decimal type with no appearance",
                              "label": "Decimal widget",
                              "name": "decimal_widget",
                              "type": "decimal",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Decimal)
                            fieldElement={
                              Object {
                                "bind": Object {
                                  "constraint": ".>=0",
                                  "jr:constraintMsg": Object {
                                    "English": "Negative value not allowed",
                                  },
                                  "required": "Yes",
                                },
                                "hint": "decimal type with no appearance",
                                "label": "Decimal widget",
                                "name": "decimal_widget",
                                "type": "decimal",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Decimal
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "bind": Object {
                                    "constraint": ".>=0",
                                    "jr:constraintMsg": Object {
                                      "English": "Negative value not allowed",
                                    },
                                    "required": "Yes",
                                  },
                                  "hint": "decimal type with no appearance",
                                  "label": "Decimal widget",
                                  "name": "decimal_widget",
                                  "type": "decimal",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Decimal widget
                                    </label>
                                  </Label>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      *
                                    </label>
                                  </Label>
                                  <Input
                                    name="decimal_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="decimal_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      This field is required
                                    </label>
                                  </Label>
                                </div>
                              </FormGroup>
                            </Decimal>
                          </Connect(Decimal)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "decimal type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                              "label": "Ex decimal widget",
                              "name": "ex_decimal_widget",
                              "type": "decimal",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Decimal)
                            fieldElement={
                              Object {
                                "hint": "decimal type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                "label": "Ex decimal widget",
                                "name": "ex_decimal_widget",
                                "type": "decimal",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Decimal
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "decimal type with ex:change.uw.android.BREATHCOUNT appearance (can use other external apps)",
                                  "label": "Ex decimal widget",
                                  "name": "ex_decimal_widget",
                                  "type": "decimal",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Ex decimal widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="ex_decimal_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="ex_decimal_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Decimal>
                          </Connect(Decimal)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="5"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "decimal type with bearing appearance",
                              "label": "Bearing widget",
                              "name": "bearing_widget",
                              "type": "decimal",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Decimal)
                            fieldElement={
                              Object {
                                "hint": "decimal type with bearing appearance",
                                "label": "Bearing widget",
                                "name": "bearing_widget",
                                "type": "decimal",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Decimal
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "decimal type with bearing appearance",
                                  "label": "Bearing widget",
                                  "name": "bearing_widget",
                                  "type": "decimal",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Bearing widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="bearing_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="bearing_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Decimal>
                          </Connect(Decimal)>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_image_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "hint": "image type with no appearance",
                          "label": "Image widget",
                          "name": "image_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with new appearance (can also be added with annotate appearance and on audio and video types)",
                          "label": "Image widget without Choose button",
                          "name": "image_widget_no_choose",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with selfie appearance",
                          "label": "Selfie widget",
                          "name": "selfie_image_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with draw appearance",
                          "label": "Draw widget",
                          "name": "draw_image_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with annotate appearance",
                          "label": "Annotate widget",
                          "name": "annotate_image_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with signature appearance",
                          "label": "Signature widget",
                          "name": "signature_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with web appearance",
                          "label": "Web view image widget",
                          "name": "webview_image_widget",
                          "type": "photo",
                        },
                        Object {
                          "hint": "image type with align:1 1 1 appearance, requires external aligned image app",
                          "label": "Align image widget",
                          "name": "aligned_image_widget",
                          "type": "photo",
                        },
                      ],
                      "label": "Image widgets",
                      "name": "image_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Image widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with no appearance",
                              "label": "Image widget",
                              "name": "image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with no appearance",
                                "label": "Image widget",
                                "name": "image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with no appearance",
                                  "label": "Image widget",
                                  "name": "image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Image widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with new appearance (can also be added with annotate appearance and on audio and video types)",
                              "label": "Image widget without Choose button",
                              "name": "image_widget_no_choose",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with new appearance (can also be added with annotate appearance and on audio and video types)",
                                "label": "Image widget without Choose button",
                                "name": "image_widget_no_choose",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with new appearance (can also be added with annotate appearance and on audio and video types)",
                                  "label": "Image widget without Choose button",
                                  "name": "image_widget_no_choose",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Image widget without Choose button
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="image_widget_no_choose"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="image_widget_no_choose"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with selfie appearance",
                              "label": "Selfie widget",
                              "name": "selfie_image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with selfie appearance",
                                "label": "Selfie widget",
                                "name": "selfie_image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with selfie appearance",
                                  "label": "Selfie widget",
                                  "name": "selfie_image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Selfie widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="selfie_image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="selfie_image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with draw appearance",
                              "label": "Draw widget",
                              "name": "draw_image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with draw appearance",
                                "label": "Draw widget",
                                "name": "draw_image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with draw appearance",
                                  "label": "Draw widget",
                                  "name": "draw_image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Draw widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="draw_image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="draw_image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with annotate appearance",
                              "label": "Annotate widget",
                              "name": "annotate_image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with annotate appearance",
                                "label": "Annotate widget",
                                "name": "annotate_image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with annotate appearance",
                                  "label": "Annotate widget",
                                  "name": "annotate_image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Annotate widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="annotate_image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="annotate_image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="5"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with signature appearance",
                              "label": "Signature widget",
                              "name": "signature_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with signature appearance",
                                "label": "Signature widget",
                                "name": "signature_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with signature appearance",
                                  "label": "Signature widget",
                                  "name": "signature_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Signature widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="signature_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="signature_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="6"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with web appearance",
                              "label": "Web view image widget",
                              "name": "webview_image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with web appearance",
                                "label": "Web view image widget",
                                "name": "webview_image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with web appearance",
                                  "label": "Web view image widget",
                                  "name": "webview_image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Web view image widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="webview_image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="webview_image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="7"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "image type with align:1 1 1 appearance, requires external aligned image app",
                              "label": "Align image widget",
                              "name": "aligned_image_widget",
                              "type": "photo",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Photo)
                            fieldElement={
                              Object {
                                "hint": "image type with align:1 1 1 appearance, requires external aligned image app",
                                "label": "Align image widget",
                                "name": "aligned_image_widget",
                                "type": "photo",
                              }
                            }
                          >
                            <Photo
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "image type with align:1 1 1 appearance, requires external aligned image app",
                                  "label": "Align image widget",
                                  "name": "aligned_image_widget",
                                  "type": "photo",
                                }
                              }
                              fieldValue=""
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Align image widget
                                    </label>
                                  </Label>
                                  <Input
                                    accept="image/*"
                                    name="aligned_image_widget"
                                    onChange={[Function]}
                                    type="file"
                                    value=""
                                  >
                                    <input
                                      accept="image/*"
                                      className="form-control-file"
                                      name="aligned_image_widget"
                                      onChange={[Function]}
                                      type="file"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Photo>
                          </Connect(Photo)>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_media_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "hint": "barcode type with no appearance",
                          "label": "Barcode widget",
                          "name": "barcode_widget",
                          "type": "barcode",
                        },
                        Object {
                          "hint": "audio type with no appearance",
                          "label": "Audio widget",
                          "name": "audio_widget",
                          "type": "audio",
                        },
                        Object {
                          "hint": "video type with no appearance",
                          "label": "Video widget",
                          "name": "video_widget",
                          "type": "video",
                        },
                        Object {
                          "hint": "video type with new-front appearance",
                          "label": "Selfie video widget",
                          "name": "selfie_video_widget",
                          "type": "video",
                        },
                      ],
                      "label": "Media widgets",
                      "name": "media_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Media widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "barcode type with no appearance",
                              "label": "Barcode widget",
                              "name": "barcode_widget",
                              "type": "barcode",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            barcode
                             
                            barcode_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "audio type with no appearance",
                              "label": "Audio widget",
                              "name": "audio_widget",
                              "type": "audio",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            audio
                             
                            audio_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "video type with no appearance",
                              "label": "Video widget",
                              "name": "video_widget",
                              "type": "video",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            video
                             
                            video_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "video type with new-front appearance",
                              "label": "Selfie video widget",
                              "name": "selfie_video_widget",
                              "type": "video",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            video
                             
                            selfie_video_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_date_time_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "hint": "date type with no appearance",
                          "label": "Date widget",
                          "name": "date_widget",
                          "type": "date",
                        },
                        Object {
                          "hint": "date type with no-calendar appearance",
                          "label": "Date Widget",
                          "name": "date_widget_nocalendar",
                          "type": "date",
                        },
                        Object {
                          "hint": "date type with month-year appearance",
                          "label": "Date widget",
                          "name": "date_widget_month_year",
                          "type": "date",
                        },
                        Object {
                          "hint": "date type with year appearance",
                          "label": "Date widget",
                          "name": "date_widget_year",
                          "type": "date",
                        },
                        Object {
                          "hint": "time type with no appearance",
                          "label": "Time widget",
                          "name": "time_widget",
                          "type": "time",
                        },
                        Object {
                          "hint": "dateTime type with no appearance",
                          "label": "Date time widget",
                          "name": "date_time_widget",
                          "type": "dateTime",
                        },
                        Object {
                          "hint": "dateTime type with no-calendar appearance",
                          "label": "Date time widget",
                          "name": "date_time_widget_nocalendar",
                          "type": "dateTime",
                        },
                        Object {
                          "hint": "date type ethiopian appearance",
                          "label": "Ethiopian date widget",
                          "name": "ethiopian_date_widget",
                          "type": "date",
                        },
                        Object {
                          "hint": "date type coptic appearance",
                          "label": "Coptic date widget",
                          "name": "coptic_date_widget",
                          "type": "date",
                        },
                        Object {
                          "hint": "date type islamic appearance",
                          "label": "Islamic date widget",
                          "name": "islamic_date_widget",
                          "type": "date",
                        },
                      ],
                      "label": "Date and time widgets",
                      "name": "date_time_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Date and time widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type with no appearance",
                              "label": "Date widget",
                              "name": "date_widget",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type with no appearance",
                                "label": "Date widget",
                                "name": "date_widget",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type with no appearance",
                                  "label": "Date widget",
                                  "name": "date_widget",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="date_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="date_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type with no-calendar appearance",
                              "label": "Date Widget",
                              "name": "date_widget_nocalendar",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type with no-calendar appearance",
                                "label": "Date Widget",
                                "name": "date_widget_nocalendar",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type with no-calendar appearance",
                                  "label": "Date Widget",
                                  "name": "date_widget_nocalendar",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Date Widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="date_widget_nocalendar"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="date_widget_nocalendar"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type with month-year appearance",
                              "label": "Date widget",
                              "name": "date_widget_month_year",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type with month-year appearance",
                                "label": "Date widget",
                                "name": "date_widget_month_year",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type with month-year appearance",
                                  "label": "Date widget",
                                  "name": "date_widget_month_year",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="date_widget_month_year"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="date_widget_month_year"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type with year appearance",
                              "label": "Date widget",
                              "name": "date_widget_year",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type with year appearance",
                                "label": "Date widget",
                                "name": "date_widget_year",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type with year appearance",
                                  "label": "Date widget",
                                  "name": "date_widget_year",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="date_widget_year"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="date_widget_year"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "time type with no appearance",
                              "label": "Time widget",
                              "name": "time_widget",
                              "type": "time",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            time
                             
                            time_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="5"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "dateTime type with no appearance",
                              "label": "Date time widget",
                              "name": "date_time_widget",
                              "type": "dateTime",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            dateTime
                             
                            date_time_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="6"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "dateTime type with no-calendar appearance",
                              "label": "Date time widget",
                              "name": "date_time_widget_nocalendar",
                              "type": "dateTime",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            dateTime
                             
                            date_time_widget_nocalendar
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="7"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type ethiopian appearance",
                              "label": "Ethiopian date widget",
                              "name": "ethiopian_date_widget",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type ethiopian appearance",
                                "label": "Ethiopian date widget",
                                "name": "ethiopian_date_widget",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type ethiopian appearance",
                                  "label": "Ethiopian date widget",
                                  "name": "ethiopian_date_widget",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Ethiopian date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="ethiopian_date_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="ethiopian_date_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="8"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type coptic appearance",
                              "label": "Coptic date widget",
                              "name": "coptic_date_widget",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type coptic appearance",
                                "label": "Coptic date widget",
                                "name": "coptic_date_widget",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type coptic appearance",
                                  "label": "Coptic date widget",
                                  "name": "coptic_date_widget",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Coptic date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="coptic_date_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="coptic_date_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="9"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "hint": "date type islamic appearance",
                              "label": "Islamic date widget",
                              "name": "islamic_date_widget",
                              "type": "date",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <Connect(Date)
                            fieldElement={
                              Object {
                                "hint": "date type islamic appearance",
                                "label": "Islamic date widget",
                                "name": "islamic_date_widget",
                                "type": "date",
                              }
                            }
                            fieldParentTreeName=""
                          >
                            <Date
                              addErrorInputIdActionCreator={[Function]}
                              assignFieldValueActionCreator={[Function]}
                              fieldElement={
                                Object {
                                  "hint": "date type islamic appearance",
                                  "label": "Islamic date widget",
                                  "name": "islamic_date_widget",
                                  "type": "date",
                                }
                              }
                              fieldParentTreeName=""
                              fieldValue=""
                              getEvaluatedExpressionSelector={[Function]}
                              isComponentRender={true}
                              isPresentInErrorSelector={[Function]}
                              removeErrorInputIdActionCreator={[Function]}
                            >
                              <FormGroup
                                tag="div"
                              >
                                <div
                                  className="form-group"
                                >
                                  <Label
                                    tag="label"
                                    widths={
                                      Array [
                                        "xs",
                                        "sm",
                                        "md",
                                        "lg",
                                        "xl",
                                      ]
                                    }
                                  >
                                    <label
                                      className=""
                                    >
                                      Islamic date widget
                                    </label>
                                  </Label>
                                  <Input
                                    name="islamic_date_widget"
                                    onChange={[Function]}
                                    readOnly={false}
                                    step="any"
                                    type="number"
                                    value=""
                                  >
                                    <input
                                      className="form-control"
                                      name="islamic_date_widget"
                                      onChange={[Function]}
                                      readOnly={false}
                                      step="any"
                                      type="number"
                                      value=""
                                    />
                                  </Input>
                                </div>
                              </FormGroup>
                            </Date>
                          </Connect(Date)>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_select_one_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with no appearance, 4 text choices",
                          "label": "Select one widget",
                          "name": "select_one_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with minimal appearance, 4 text choices",
                          "label": "Spinner widget",
                          "name": "spinner_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with quick appearance, 4 text choices",
                          "label": "Select one autoadvance widget",
                          "name": "select_one_autoadvance_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with search appearance, 4 text choices",
                          "label": "Select one search widget",
                          "name": "select_one_search_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with autocomplete appearance, 4 text choices",
                          "label": "Select one search widget",
                          "name": "select_one_autocomplete_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with no appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                          "label": "Grid select one widget",
                          "name": "grid_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with compact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                          "label": "Grid select one widget",
                          "name": "grid_widget_compact",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with compact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                          "label": "Grid select one widget",
                          "name": "grid_widget_compact2",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with quickcompact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                          "label": "Grid select one widget",
                          "name": "grid_widget_quickcompact",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_one type with quickcompact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                          "label": "Grid select one widget",
                          "name": "grid_widget_quickcompact2",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Head",
                              "name": "head",
                            },
                            Object {
                              "label": "Neck",
                              "name": "neck",
                            },
                            Object {
                              "label": "Lungs",
                              "name": "lungs",
                            },
                            Object {
                              "label": "Left proximal arm",
                              "name": "left_proximal_arm",
                            },
                            Object {
                              "label": "Left distal arm",
                              "name": "left_distal_arm",
                            },
                            Object {
                              "label": "Right proximal arm",
                              "name": "right_proximal_arm",
                            },
                            Object {
                              "label": "Right distal arm",
                              "name": "right_distal_arm",
                            },
                            Object {
                              "label": "Left proximal leg",
                              "name": "left_proximal_leg",
                            },
                            Object {
                              "label": "Left distal leg",
                              "name": "left_distal_leg",
                            },
                            Object {
                              "label": "Right proximal leg",
                              "name": "right_proximal_leg",
                            },
                            Object {
                              "label": "Right distal leg",
                              "name": "right_distal_leg",
                            },
                          ],
                          "hint": "select_one with type image-map appearance and image body.svg",
                          "label": "Image select one widget",
                          "name": "select_one_image_map",
                          "type": "select one",
                        },
                      ],
                      "label": "Select one widgets",
                      "name": "select_one_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          Select one widgets
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with no appearance, 4 text choices",
                              "label": "Select one widget",
                              "name": "select_one_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            select_one_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with minimal appearance, 4 text choices",
                              "label": "Spinner widget",
                              "name": "spinner_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            spinner_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with quick appearance, 4 text choices",
                              "label": "Select one autoadvance widget",
                              "name": "select_one_autoadvance_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            select_one_autoadvance_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with search appearance, 4 text choices",
                              "label": "Select one search widget",
                              "name": "select_one_search_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            select_one_search_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with autocomplete appearance, 4 text choices",
                              "label": "Select one search widget",
                              "name": "select_one_autocomplete_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            select_one_autocomplete_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="5"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with no appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                              "label": "Grid select one widget",
                              "name": "grid_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            grid_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="6"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with compact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                              "label": "Grid select one widget",
                              "name": "grid_widget_compact",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            grid_widget_compact
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="7"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with compact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                              "label": "Grid select one widget",
                              "name": "grid_widget_compact2",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            grid_widget_compact2
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="8"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with quickcompact appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                              "label": "Grid select one widget",
                              "name": "grid_widget_quickcompact",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            grid_widget_quickcompact
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="9"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_one type with quickcompact-2 appearance, 4 image choices (a.jpg, b.jpg, c.jpg, d.jpg)",
                              "label": "Grid select one widget",
                              "name": "grid_widget_quickcompact2",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            grid_widget_quickcompact2
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="10"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Head",
                                  "name": "head",
                                },
                                Object {
                                  "label": "Neck",
                                  "name": "neck",
                                },
                                Object {
                                  "label": "Lungs",
                                  "name": "lungs",
                                },
                                Object {
                                  "label": "Left proximal arm",
                                  "name": "left_proximal_arm",
                                },
                                Object {
                                  "label": "Left distal arm",
                                  "name": "left_distal_arm",
                                },
                                Object {
                                  "label": "Right proximal arm",
                                  "name": "right_proximal_arm",
                                },
                                Object {
                                  "label": "Right distal arm",
                                  "name": "right_distal_arm",
                                },
                                Object {
                                  "label": "Left proximal leg",
                                  "name": "left_proximal_leg",
                                },
                                Object {
                                  "label": "Left distal leg",
                                  "name": "left_distal_leg",
                                },
                                Object {
                                  "label": "Right proximal leg",
                                  "name": "right_proximal_leg",
                                },
                                Object {
                                  "label": "Right distal leg",
                                  "name": "right_distal_leg",
                                },
                              ],
                              "hint": "select_one with type image-map appearance and image body.svg",
                              "label": "Image select one widget",
                              "name": "select_one_image_map",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            select_one_image_map
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_select_multi_widgets"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_multiple type with no appearance, 4 text choices",
                          "label": "Multi select widget",
                          "name": "select_multi_widget",
                          "type": "select all that apply",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_multiple type with compact appearance, 4 image choices",
                          "label": "Grid select multiple widget",
                          "name": "grid_multi_widget_compact",
                          "type": "select all that apply",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "media": Object {
                                "image": "a.jpg",
                              },
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "media": Object {
                                "image": "b.jpg",
                              },
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "media": Object {
                                "image": "c.jpg",
                              },
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "media": Object {
                                "image": "d.jpg",
                              },
                              "name": "d",
                            },
                          ],
                          "hint": "select_multiple type with compact-2 appearance, 4 image choices",
                          "label": "Grid select multiple widget",
                          "name": "grid_multi_widget_compact2",
                          "type": "select all that apply",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "A",
                              "name": "a",
                            },
                            Object {
                              "label": "B",
                              "name": "b",
                            },
                            Object {
                              "label": "C",
                              "name": "c",
                            },
                            Object {
                              "label": "D",
                              "name": "d",
                            },
                          ],
                          "hint": "select_multiple type with minimal appearance, 4 image choices",
                          "label": "Spinner widget: select multiple",
                          "name": "spinner_multi_widget",
                          "type": "select all that apply",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Head",
                              "name": "head",
                            },
                            Object {
                              "label": "Neck",
                              "name": "neck",
                            },
                            Object {
                              "label": "Lungs",
                              "name": "lungs",
                            },
                            Object {
                              "label": "Left proximal arm",
                              "name": "left_proximal_arm",
                            },
                            Object {
                              "label": "Left distal arm",
                              "name": "left_distal_arm",
                            },
                            Object {
                              "label": "Right proximal arm",
                              "name": "right_proximal_arm",
                            },
                            Object {
                              "label": "Right distal arm",
                              "name": "right_distal_arm",
                            },
                            Object {
                              "label": "Left proximal leg",
                              "name": "left_proximal_leg",
                            },
                            Object {
                              "label": "Left distal leg",
                              "name": "left_distal_leg",
                            },
                            Object {
                              "label": "Right proximal leg",
                              "name": "right_proximal_leg",
                            },
                            Object {
                              "label": "Right distal leg",
                              "name": "right_distal_leg",
                            },
                          ],
                          "hint": "select_multiple type with image-map appearance and image body.svg",
                          "label": "Image select multiple widget",
                          "name": "select_multi_image_map",
                          "type": "select all that apply",
                        },
                      ],
                      "label": "This section contains \\"Select Multi Widgets\\"",
                      "name": "select_multi_widgets",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          This section contains "Select Multi Widgets"
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_multiple type with no appearance, 4 text choices",
                              "label": "Multi select widget",
                              "name": "select_multi_widget",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select all that apply
                             
                            select_multi_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_multiple type with compact appearance, 4 image choices",
                              "label": "Grid select multiple widget",
                              "name": "grid_multi_widget_compact",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select all that apply
                             
                            grid_multi_widget_compact
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "media": Object {
                                    "image": "a.jpg",
                                  },
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "media": Object {
                                    "image": "b.jpg",
                                  },
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "media": Object {
                                    "image": "c.jpg",
                                  },
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "media": Object {
                                    "image": "d.jpg",
                                  },
                                  "name": "d",
                                },
                              ],
                              "hint": "select_multiple type with compact-2 appearance, 4 image choices",
                              "label": "Grid select multiple widget",
                              "name": "grid_multi_widget_compact2",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select all that apply
                             
                            grid_multi_widget_compact2
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "A",
                                  "name": "a",
                                },
                                Object {
                                  "label": "B",
                                  "name": "b",
                                },
                                Object {
                                  "label": "C",
                                  "name": "c",
                                },
                                Object {
                                  "label": "D",
                                  "name": "d",
                                },
                              ],
                              "hint": "select_multiple type with minimal appearance, 4 image choices",
                              "label": "Spinner widget: select multiple",
                              "name": "spinner_multi_widget",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select all that apply
                             
                            spinner_multi_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Head",
                                  "name": "head",
                                },
                                Object {
                                  "label": "Neck",
                                  "name": "neck",
                                },
                                Object {
                                  "label": "Lungs",
                                  "name": "lungs",
                                },
                                Object {
                                  "label": "Left proximal arm",
                                  "name": "left_proximal_arm",
                                },
                                Object {
                                  "label": "Left distal arm",
                                  "name": "left_distal_arm",
                                },
                                Object {
                                  "label": "Right proximal arm",
                                  "name": "right_proximal_arm",
                                },
                                Object {
                                  "label": "Right distal arm",
                                  "name": "right_distal_arm",
                                },
                                Object {
                                  "label": "Left proximal leg",
                                  "name": "left_proximal_leg",
                                },
                                Object {
                                  "label": "Left distal leg",
                                  "name": "left_distal_leg",
                                },
                                Object {
                                  "label": "Right proximal leg",
                                  "name": "right_proximal_leg",
                                },
                                Object {
                                  "label": "Right distal leg",
                                  "name": "right_distal_leg",
                                },
                              ],
                              "hint": "select_multiple type with image-map appearance and image body.svg",
                              "label": "Image select multiple widget",
                              "name": "select_multi_image_map",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select all that apply
                             
                            select_multi_image_map
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_table_list_test"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "Show only the labels of these options and not the inputs (type=select_one yes_no, appearance=label)",
                          "label": "Label widget",
                          "name": "table_list_test_label",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "Show only the labels of these options and not the inputs (type=select_multiple yes_no, appearance=label)",
                          "label": "Label multi widget",
                          "name": "table_list_test_label_2",
                          "type": "select all that apply",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "Show only the inputs of these options and not the labels (type=select_one yes_no, appearance=list-nolabel)",
                          "label": "List widget",
                          "name": "table_list_1",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "Show only the inputs of these options and not the labels (type=select_multiple yes_no, appearance=list-nolabel)",
                          "label": "List multi widget",
                          "name": "table_list_2",
                          "type": "select all that apply",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "This is a normal list widget with (type = select_one, appearance = list)",
                          "label": "List widget",
                          "name": "list_widget",
                          "type": "select one",
                        },
                        Object {
                          "children": Array [
                            Object {
                              "label": "Yes",
                              "name": "yes",
                            },
                            Object {
                              "label": "No",
                              "name": "no",
                            },
                            Object {
                              "label": "Don't Know",
                              "name": "dk",
                            },
                            Object {
                              "label": "Not Applicable",
                              "name": "na",
                            },
                          ],
                          "hint": "This is a normal list widget with (type = select_multiple, appearance = list)",
                          "label": "List multi widget",
                          "name": "list_multi_widget",
                          "type": "select all that apply",
                        },
                      ],
                      "hint": "Shows all questions on one page in ODK Collect (appearance=field-list)",
                      "label": "List group",
                      "name": "table_list_test",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        >
                          List group
                        </label>
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "Show only the labels of these options and not the inputs (type=select_one yes_no, appearance=label)",
                              "label": "Label widget",
                              "name": "table_list_test_label",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            table_list_test_label
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="1"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "Show only the labels of these options and not the inputs (type=select_multiple yes_no, appearance=label)",
                              "label": "Label multi widget",
                              "name": "table_list_test_label_2",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select all that apply
                             
                            table_list_test_label_2
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="2"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "Show only the inputs of these options and not the labels (type=select_one yes_no, appearance=list-nolabel)",
                              "label": "List widget",
                              "name": "table_list_1",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            table_list_1
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="3"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "Show only the inputs of these options and not the labels (type=select_multiple yes_no, appearance=list-nolabel)",
                              "label": "List multi widget",
                              "name": "table_list_2",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select all that apply
                             
                            table_list_2
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="4"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "This is a normal list widget with (type = select_one, appearance = list)",
                              "label": "List widget",
                              "name": "list_widget",
                              "type": "select one",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select one
                             
                            list_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                      <div
                        key="5"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "children": Array [
                                Object {
                                  "label": "Yes",
                                  "name": "yes",
                                },
                                Object {
                                  "label": "No",
                                  "name": "no",
                                },
                                Object {
                                  "label": "Don't Know",
                                  "name": "dk",
                                },
                                Object {
                                  "label": "Not Applicable",
                                  "name": "na",
                                },
                              ],
                              "hint": "This is a normal list widget with (type = select_multiple, appearance = list)",
                              "label": "List multi widget",
                              "name": "list_multi_widget",
                              "type": "select all that apply",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            select all that apply
                             
                            list_multi_widget
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
            <div
              key="group_repeat_1"
            >
              <BaseTypeEvaluator
                fieldElement={
                  Object {
                    "children": Array [
                      Object {
                        "label": "Name",
                        "name": "repeat_q",
                        "type": "text",
                      },
                    ],
                    "name": "repeat_1",
                    "type": "repeat",
                  }
                }
                fieldParentTreeName=""
              >
                <div>
                  Other 
                  repeat
                   
                  repeat_1
                </div>
              </BaseTypeEvaluator>
            </div>
            <div
              key="group_meta"
            >
              <div>
                <Group
                  fieldElement={
                    Object {
                      "children": Array [
                        Object {
                          "bind": Object {
                            "calculate": "concat('uuid:', uuid())",
                            "readonly": "true()",
                          },
                          "name": "instanceID",
                          "type": "calculate",
                        },
                      ],
                      "control": Object {
                        "bodyless": true,
                      },
                      "name": "meta",
                      "type": "group",
                    }
                  }
                  fieldParentTreeName=""
                >
                  <FormGroup
                    tag="div"
                  >
                    <div
                      className="form-group"
                    >
                      <Label
                        tag="label"
                        widths={
                          Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ]
                        }
                      >
                        <label
                          className=""
                        />
                      </Label>
                      <div
                        key="0"
                      >
                        <BaseTypeEvaluator
                          fieldElement={
                            Object {
                              "bind": Object {
                                "calculate": "concat('uuid:', uuid())",
                                "readonly": "true()",
                              },
                              "name": "instanceID",
                              "type": "calculate",
                            }
                          }
                          fieldParentTreeName=""
                        >
                          <div>
                            Other 
                            calculate
                             
                            instanceID
                          </div>
                        </BaseTypeEvaluator>
                      </div>
                    </div>
                  </FormGroup>
                </Group>
              </div>
            </div>
          </div>
        </GroupTypeEvaluator>
      </div>
    </Container>
  </App>
</Provider>
`;
