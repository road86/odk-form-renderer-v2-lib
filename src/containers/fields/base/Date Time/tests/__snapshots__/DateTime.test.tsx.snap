// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers/fields/base/Date Time renders correctly 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Connect(DateTime)
    assignFieldValueActionCreator={[MockFunction]}
    defaultLanguage="English"
    fieldElement={
      Object {
        "bind": Object {
          "required": "Yes",
        },
        "label": Object {
          "English": "End Date Time",
        },
        "name": "event_end_date_time",
        "type": "dateTime",
      }
    }
    fieldParentTreeName=""
    fieldValue="2019-11-12T07:02:00.000Z"
  >
    <DateTime
      addErrorInputIdActionCreator={[Function]}
      assignFieldValueActionCreator={[Function]}
      defaultLanguage="English"
      fieldElement={
        Object {
          "bind": Object {
            "required": "Yes",
          },
          "label": Object {
            "English": "End Date Time",
          },
          "name": "event_end_date_time",
          "type": "dateTime",
        }
      }
      fieldParentTreeName=""
      fieldValue="2019-11-12T07:02:00.000Z"
      getEvaluatedExpressionSelector={[Function]}
      isComponentRender={true}
      isPresentInErrorSelector={[Function]}
      removeErrorInputIdActionCreator={[Function]}
    >
      <FormGroup
        tag="div"
      >
        <div
          className="form-group"
        >
          <Label
            tag="label"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <label
              className=""
            >
              End Date Time
            </label>
          </Label>
          <Label
            tag="label"
            widths={
              Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ]
            }
          >
            <label
              className=""
            >
              *
            </label>
          </Label>
          <br />
          <t
            allowSameDay={false}
            className="form-control"
            dateFormat="MM/dd/yyyy h:mm aa"
            dateFormatCalendar="LLLL yyyy"
            disabled={false}
            disabledKeyboardNavigation={false}
            dropdownMode="scroll"
            inlineFocusSelectedMonth={false}
            monthsShown={1}
            name="event_end_date_time"
            nextMonthButtonLabel="Next Month"
            nextYearButtonLabel="Next Year"
            onBlur={[Function]}
            onCalendarClose={[Function]}
            onCalendarOpen={[Function]}
            onChange={[Function]}
            onClickOutside={[Function]}
            onFocus={[Function]}
            onInputClick={[Function]}
            onInputError={[Function]}
            onKeyDown={[Function]}
            onMonthChange={[Function]}
            onSelect={[Function]}
            onYearChange={[Function]}
            placeholderText="mm/dd/yyyy h:m aa"
            preventOpenOnFocus={false}
            previousMonthButtonLabel="Previous Month"
            previousYearButtonLabel="Previous Year"
            readOnly={false}
            renderDayContents={[Function]}
            selected={2019-11-12T07:02:00.000Z}
            shouldCloseOnSelect={true}
            showMonthYearPicker={false}
            showPopperArrow={true}
            showPreviousMonths={false}
            showQuarterYearPicker={false}
            showTimeInput={false}
            showTimeSelect={true}
            strictParsing={false}
            timeCaption="time"
            timeFormat="h:m aa"
            timeInputLabel="Time"
            timeIntervals={15}
            withPortal={false}
          >
            <t
              hidePopper={true}
              popperComponent={null}
              popperModifiers={
                Object {
                  "preventOverflow": Object {
                    "boundariesElement": "viewport",
                    "enabled": true,
                    "escapeWithReference": true,
                  },
                }
              }
              popperPlacement="bottom-start"
              popperProps={Object {}}
              targetComponent={
                <div
                  className="react-datepicker__input-container"
                >
                  <input
                    className="form-control"
                    disabled={false}
                    name="event_end_date_time"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    placeholder="mm/dd/yyyy h:m aa"
                    readOnly={false}
                    type="text"
                    value="11/12/2019 1:02 PM"
                  />
                </div>
              }
            >
              <Manager
                className="react-datepicker-manager"
              >
                <Reference>
                  <InnerReference
                    setReferenceNode={[Function]}
                  >
                    <div
                      className="react-datepicker-wrapper"
                    >
                      <div
                        className="react-datepicker__input-container"
                      >
                        <input
                          className="form-control"
                          disabled={false}
                          name="event_end_date_time"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          placeholder="mm/dd/yyyy h:m aa"
                          readOnly={false}
                          type="text"
                          value="11/12/2019 1:02 PM"
                        />
                      </div>
                    </div>
                  </InnerReference>
                </Reference>
              </Manager>
            </t>
          </t>
          <br />
        </div>
      </FormGroup>
    </DateTime>
  </Connect(DateTime)>
</Provider>
`;
